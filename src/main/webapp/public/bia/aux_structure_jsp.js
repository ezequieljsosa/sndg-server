function map_alignment(query_aln, subject_aln) {
	pos_map = {}
	i = 0
	query_gaps = 0
	$.each(query_aln, function(j, x) {
		if (query_aln[j] == "-") {
			query_gaps = query_gaps + 1
		}
		query_pos = j - query_gaps
		if (subject_aln[j] == "-") {
			pos_map[query_pos] = None
		} else {
			pos_map[query_pos] = i
			i = i + 1
		}
	});
	return pos_map
}
function load_structure_tables(structure, stemplate) {

	if ((structure.templates != null) && (structure.templates.length > 0)) {
		$("#cristal_row").remove();
	} else {
		$(".model_row").remove();
		if (structure.resolution != null) {
			$("#pdb_resolution").html(structure.resolution);
		}
		if (structure.quaternary != null) {
			$("#pdb_quaternary").html(structure.quaternary.trim());
		}
	}

	if (structure.qualities != null) {
		var txt = $.map(
				structure.qualities,
				function(quality, i) {
					return "<b>" + quality.name.capitalize() + "</b>: "
							+ quality.value;
				}).join(" <br /> ");
		$("#pdb_assesments").html(txt);
	}

	if (typeof (structure.templates) == 'undefined'
			|| structure.templates == null || structure.templates.length == 0) {
		// It is a cristalized structure
		code = structure.name;
		ontology = "pdb_org";

		var button_html = '<a onclick="window.location=\''
				+ hrefOntologyLink(ontology, code)
				+ '\'" class="ext" title="Go to PDB">PDB: ' + code + '</a>';

		$('#pdb_code').append(button_html);

	} else {
		var code = structure.templates[0].aln_hit.name.split("_")[0]
		var button_html = $('<a/>', {
			id : "models_button",
			href : $.api.url_structure(code)
		}).html(structure.templates[0].aln_hit.name.toUpperCase());
		button_html.addClass("btn").addClass("btn-info");

		$('#templateDiv').append(button_html).button();

		if (stemplate.clusters != null && stemplate.clusters.length > 0
				&& stemplate.clusters[0].parts.length > 1) {
			$.each(stemplate.clusters[0].parts, function(i, part) {
				var button_html = $('<a/>', {
					id : "models_button",
					href : $.api.url_structure(part.pdb)
				}).html(
						[ part.pdb.toUpperCase(), part.chain, part.start,
								part.end ].join("_"));
				button_html.addClass("btn").addClass("btn-success")

				$('#templatesDiv').append(button_html).button();

			});
		} else {

		}
		if (stemplate.quaternary && stemplate.quaternary.isEmpty()) {
			$("#quaternaryTempleteDiv").remove()
		} else {
			$("#quaternaryTempleteDiv").html( "<b>" + stemplate.quaternary + "</b> - The modeled structure is a monomer, there are no protein complexes modelled in this server.");
		}

		var add_struct_data = function() {
			if ($("#header_title_desc").length) {
				window.clearInterval(intervalVariable);
				$("#header_title_desc").html(
						$("#header_title_desc").html()
								+ " --> Generated by Modeller");
			}
			;
		};
		add_struct_data()

	}

	if (structure.pockets == null || structure.pockets.length == 0) {
		$('#pockets_button').remove();
		$('#pocket-section').remove();
		$('#pockets_section').remove();

	} else {
		$("#pockets_button").text(
				$("#pockets_button").text().replace("?",
						structure.pockets.length));
		var pockets = [];
		var i = 0;
		$.each(structure.pockets, function(i, pocket) {
			pockets.push(pocket);
			pockets[i]["Index"] = i;
			i++;
		});

		$("#pockets_button").button().on(
				"click",
				function(evt) {
					open_dialog("Pockets", [
							[ "Index", "Index" ],
							[ "Drug Score", "druggability_score" ],
							[ "Hydrophobicity Score", "hydrophobicity_score" ],
							[ "Mean alpha-sphere SA",
									"mean_alpha_sphere_radius" ] ], pockets,
							false);
				});
	}

	if (structure.ligands == null || structure.ligands.length == 0) {
		$('#ligands_button').remove();
	} else {
		$("#ligands_button").text(
				$("#ligands_button").text().replace("?",
						structure.ligands.length));
		$("#ligands_button").button().on(
				"click",
				function(evt) {
					function create_pdb_link(code) {
						return '<a href="'
								+ hrefOntologyLink("pdb_ligand", code) + '">'
								+ code + '</a>';
					}

					open_dialog("Ligands", [ [ "Compound", "compound" ],
							[ "Chain", "chain" ], [ "Residue", "resid" ],
							[ "Type", "compound_type" ] ], structure.ligands, [
							create_pdb_link, null, null, null ], true);
				});
	}

	if (typeof (structure.metals) == 'undefined'
			|| structure.metals.length == 0) {
		$('#metals_button').remove();
	} else {
		$("#metals_button").button().on(
				"click",
				function(evt) {
					open_dialog("Metals", [ [ "Element Name", "Element Name" ],
							[ "Pos", "Pos" ], [ "Free Bonds", "Free Bonds" ] ],
							structure.metals, false);
				});
	}
	if (typeof (structure.pka) == 'undefined' || structure.pka == null
			|| structure.pka.length == 0) {
		$('#pka_button').remove();
	} else {
		$("#pka_button").text(
				$("#pka_button").text().replace("?", structure.pka.length));
		$("#pka_button").button().on(
				"click",
				function(evt) {
					open_dialog("pKa", [ [ "Chain", "chain" ],
							[ "Pos", "num" ], [ "Model PKa", "model_pka" ],
							[ "PKa", "pka" ], [ "Residue", "res" ] ],
							structure.pka, false);
				});
	}

	if (typeof (structure.bindingdb) == 'undefined'
			|| structure.bindingdb == null || structure.bindingdb.length == 0) {
		$("#bindingdb_button").remove();
	} else {
		$("#bindingdb_button").text(
				$("#bindingdb_button").text().replace("?",
						structure.bindingdb.length));
		$("#bindingdb_button").button().on(
				"click",
				function(evt) {
					open_dialog("Critalized Structures", [
							[ "Monomer", "monomer" ], [ "Smiles", "smiles" ] ],
							structure.bindingdb, false);
				});
	}

	var listCSA = $.grep(structure.residueSets, function(x) {
		return x.name == "csa"
	});
	if (listCSA == null || listCSA.length == 0) {
		$("#csa_button").remove();
	} else {
		listCSA = listCSA[0]
		$("#csa_button").text(
				$("#csa_button").text().replace("?", listCSA.residues.length));
		$("#csa_button").button().on("click", function(evt) {

			open_residues_dialog("Catalitic Sites", listCSA, structure.chains);
		});
	}

}

function open_residues_dialog(title, residue_set, chains) {

	$('#box-table-title').html(title);
	$('#table-box').css("display", "block");
	table_columns = [];

	$('#dialog-table').remove();
	$('#div-table').remove();
	$('#table-box-body')
			.append(
					'<div id="div-table"><table id="dialog-table" class="table table-striped"><thead><tr></tr></thead><tbody></tbody></table></div>');

	var dataSet = $.map(residue_set.residues, function(x) {
		return {
			chain : x.split("_")[0],
			pos : x.split("_")[1]
		}
	});
	$('#dialog-table').dataTable({
		"data" : dataSet,
		"columns" : [ {
			title : "Chain",
			data : "chain"
		}, {
			title : "Pos",
			data : "pos"
		}, {
			title : "AA",
			render : function(data, algo, row) {
				var chain = $.grep(chains, function(c) {
					return c.name == row.chain
				})[0]
				var res = $.grep(chain.residues, function(r) {
					return r.resid == row.pos
				})[0]
				if (res != undefined) {
					return res.compound;
				} else {
					return "No data"

				}

			}
		}

		],
		"paging" : false,
		"ordering" : true,
		"info" : false,
		"searching" : false
	});

}



function load_msa_feature(structure, protein,feature,selected){
    const aln = feature.aln;
    const query_name = aln["aln_query"]["name"] + "_"
        + feature.location.start.toString() + ":"
        + feature.location.end.toString();
    const hit_name = aln["aln_hit"]["name"];

    const pre_seq =  protein.sequence.substring(0,feature.location.start - 1)
    const post_seq = protein.sequence.substring(feature.location.end )
    const preStart = pre_seq.length;
    const pre_fill = new Array(pre_seq.length + 1).join( "-" );
    const post_fill = new Array(post_seq.length + 1).join( "-" );


    const aln_msa = [ {
        "seq" : pre_seq + aln["aln_query"]["seq"] + post_seq,
        "name" : query_name,
        "id" : query_name
    }, {
        "seq" : pre_fill + aln["aln_hit"]["seq"] + post_fill,
        "name" : hit_name,
        "id" : aln["aln_hit"]["name"]
    } ];



    const aln_stemplate_start = aln.aln_hit.start ;
    let msa = null;
    if(selected){
        msa = new $.MSA_UI("msa-box-body", aln_msa);


        msa.init()
    }


    var features = {
        config : {
            type : "gff"
        },
        seqs : {}
    }
    features.seqs[query_name] = [];
    features.seqs[hit_name] = [];

    var aln_chain = hit_name.split("_")[1];
    var aln_start = parseInt(hit_name.split("_")[2]);
    var aln_end = parseInt(hit_name.split("_")[3]);

    var dn_hit_start = 0;
    if(aln.aln_hit.name.indexOf("_PF") !== -1 ){
        dn_hit_start = parseInt(aln.aln_hit.name.split("_")[aln.aln_hit.name.split("_").length -2]);
        aln_start = structure.chains.filter(x => x.name === aln_chain)[0].residues[dn_hit_start].resid;
        dn_hit_end = parseInt(aln.aln_hit.name.split("_")[aln.aln_hit.name.split("_").length -1]);
        aln_end = structure.chains.filter(x => x.name === aln_chain)[0].residues[dn_hit_end].resid;
    }



    var usedPockets = [];
    $.each(structure.pockets, function(i, p) {

        var pocket_num = p.name.split("_")[1];
        $.each($.unique(p.residues), function(i, r) {
            if (p.druggability_score > 0.2) {

                var res_num = parseInt(r.split("_")[1]);
                var chain = r.split("_")[0];
                if ((chain === aln_chain) && (res_num >= aln_start) && (res_num <= aln_end)) {


                    var seq_num = res_num - aln_start - aln_stemplate_start + pre_seq.length
                    ;

                    var res_num = parseInt(r.split("_")[1]);

                    features.seqs[hit_name].push({
                        attributes : {
                            Color : "red",
                            Name : pocket_num
                        },
                        end : seq_num,
                        feature : "pocket",
                        frame : undefined,
                        score : undefined,
                        source : undefined,
                        start : seq_num,
                        strand : undefined
                    });
                    if (usedPockets.indexOf(pocket_num) === -1) {
                        usedPockets.push(pocket_num)
                    }
                }
            }

        });
    });

    var usedImportant = [];

    var rs = $.grep(structure.residueSets, function(rs) {
        return rs.name === "important_pfam";
    });
    if (rs.length > 0) {
        rs = rs[0]
        $.each($.unique(rs.residues), function(i, r) {
            var res_num = parseInt(r.split("_")[1]);
            var chain = r.split("_")[0];
            if ((chain == aln_chain) && (res_num >= aln_start)) {

                var seq_num = res_num - aln_start - aln_stemplate_start;

                features.seqs[hit_name].push({
                    attributes : {
                        Color : "grey",
                        Name : "I"
                    },
                    end : seq_num,
                    feature : "important_pfam",
                    frame : undefined,
                    score : undefined,
                    source : undefined,
                    start : seq_num,
                    strand : undefined,
                    res_id : res_num
                });

                usedImportant.push(res_num);

            }
        });
    }

    var usedCSA = [];

    if (structure.residueSets != undefined) {
        var rs = $.grep(structure.residueSets, function(rs) {
            return rs.name === "csa"
        });
        if (rs.length > 0) {
            var arr_hit = hit_name.split("_");
            var pdb = arr_hit[0];
            var chain = arr_hit[1];
            var start = parseInt(arr_hit[2]);
            var end = parseInt(arr_hit[3]);
            var map_aln_pdb = {}
            var idx = 0;

            $.each(aln["aln_hit"]["seq"].split(""), function(i, aa) {
                if (aa !== "-") {
                    map_aln_pdb[idx +  dn_hit_start  ] = i + pre_seq.length  ;
                    idx++
                }
            });

            rs = rs[0]
            $.each($.unique(rs.residues), function(i, r) {
                var res_num = parseInt(r.split("_")[1]);
                if ((r.split("_")[0] == chain) && (res_num >= aln_start)
                    && (res_num <= aln_end)) {
                    var seq_num = res_num - start - aln_stemplate_start;
                    var data = {
                        attributes : {
                            Color : "Green",
                            Name : "A"
                        },
                        end : map_aln_pdb[seq_num],
                        feature : "csa",
                        frame : undefined,
                        score : undefined,
                        source : undefined,
                        start : map_aln_pdb[seq_num],
                        strand : undefined,
                        res_id : seq_num - 1
                    };
                    features.seqs[hit_name].push(data);

                    usedCSA.push(res_num)

                }
            });
        }
    }

    var usedDBinding = [];


    if (structure.residueSets != undefined) {
        var rs = $.grep(structure.residueSets, function(rs) {
            return rs.name == "drug_binding"
        });
        if (rs.length > 0) {
            var arr_hit = hit_name.split("_");
            var pdb = arr_hit[0];
            var chain = arr_hit[1];
            var start = parseInt(arr_hit[2]);
            var end = parseInt(arr_hit[3]);
            var map_aln_pdb = {};
            var idx = 0;
            $.each( (pre_seq.length + aln["aln_hit"]["seq"]).split(""), function(i, aa) {
                if (aa !== "-") {
                    map_aln_pdb[idx +  dn_hit_start  ] = i + pre_seq.length  ;
                    idx++
                }
            });

            rs = rs[0]
            $.each($.unique(rs.residues), function(i, r) {
                var res_num = parseInt(r.split("_")[1]);
                if ((r.split("_")[0] == chain) && (res_num >= aln_start)
                    && (res_num <= aln_end)) {
                    var seq_num = res_num - start - aln_stemplate_start ;
                    var data = {
                        attributes : {
                            Color : "Yellow",
                            Name : "D"
                        },
                        end : map_aln_pdb[seq_num],
                        feature : "drug_binding",
                        frame : undefined,
                        score : undefined,
                        source : undefined,
                        start : map_aln_pdb[seq_num],
                        strand : undefined,
                        res_id : seq_num - 1
                    };
                    features.seqs[hit_name].push(data);

                    usedDBinding.push(res_num)

                }
            });
        }

    }
    if (features.seqs[hit_name].length == 0) {
        delete features.seqs[hit_name];
    }
    if (features.seqs[query_name].length == 0) {
        delete features.seqs[query_name];
    }
    if ((!$.isEmptyObject(features.seqs)) & (msa !== null)) {
        msa.msa.seqs.addFeatures(features);
    }

    return {chain:aln_chain,start:aln_start,end:aln_end,pockets:usedPockets,important:usedImportant,csa:usedCSA,drugBinding:usedDBinding}
}

function load_msa_cristal(structure, protein,selected_chain) {

	const features = $.grep(protein.features, function(x) {
		return x.identifier.indexOf(structure.name) !== -1
	});
	const used = {};
	features.forEach(feature => {
        const aln_chain =  feature.aln["aln_hit"]["name"].split("_")[1];
        used[aln_chain] = load_msa_feature(structure, protein,feature,selected_chain == aln_chain)
	} );

	return used
}

function load_msa_model(structure, stemplate,protein) {

	//var aln_stemplate_start = structure.templates[0].aln_hit.start;

	var templates = [];
	$.each(structure.templates, function(i, x) {
		templates.push(x.aln_hit.name.split("_"))
	});
	var aln = structure.templates[0];
	var query_name = aln["aln_query"]["name"];
	var hit_name = aln["aln_hit"]["name"]
	
	var pre_seq =  protein.sequence.substring(0,aln["aln_query"]["start"] - 1)
	var post_seq = protein.sequence.substring(aln["aln_query"]["end"] )
	var preStart = pre_seq.length;
	var pre_fill = new Array(pre_seq.length + 1).join( "-" );
	var post_fill = new Array(post_seq.length + 1).join( "-" );
	
	
	
	// + "_" + aln.aln_query.start + "_" + aln.aln_query.end
	var aln_msa = [ {
		"seq" : pre_seq + aln["aln_query"]["seq"] + post_seq,
		"name" : query_name,
		"id" : query_name
	}, {
		"seq" : pre_fill + aln["aln_hit"]["seq"] + post_fill,
		"name" : hit_name,
		"id" : aln["aln_hit"]["name"]
	} ]

	var msa = new $.MSA_UI("msa-box-body", aln_msa);
	msa.init()

	var map_aln_q = {}
	var idx = 0;
	$.each(aln["aln_query"]["seq"].split(""), function(i, aa) {
		if (aa != "-") {
			map_aln_q[idx] = i;
			idx++
		}
	});

	var features = {
		config : {
			type : "gff"
		},
		seqs : {}
	}
	features.seqs[query_name] = [];
	features.seqs[hit_name] = [];

	$.each(structure.pockets, function(i, p) {

		var pocket_num = p.name.split("_")[1];
		$.each($.unique(p.residues), function(i, r) {
			if (p.druggability_score > 0.2) {
				var res_num = parseInt(r.split("_")[1]);

				features.seqs[query_name].push({
					attributes : {
						Color : "red",
						Name : pocket_num
					},
					end : preStart + map_aln_q[res_num],
					feature : "pocket",
					frame : undefined,
					score : undefined,
					source : undefined,
					start : preStart + map_aln_q[res_num],
					strand : undefined
				});
			}

		});
	});

	/*
	 * var rs = $.grep(structure.residueSets,function(rs){return
	 * rs.name.startsWith("csa_")}); if(rs.length > 0){ rs = rs[0]
	 * $.each($.unique( rs.residues),function(i,r){ var res_num =
	 * parseInt(r.split("_")[1]);
	 * 
	 * features.seqs[query_name].push({ attributes: {Color:"Yellow",Name: "C" },
	 * end: map_aln_q[res_num], feature: "catalitic_projected", frame:
	 * undefined, score: undefined, source: undefined, start:
	 * map_aln_q[res_num], strand: undefined }); }); }
	 */

	var rs = $.grep(structure.residueSets, function(rs) {
		return rs.name == "important_pfam"
	});
	if (rs.length > 0) {
		rs = rs[0]
		$.each($.unique(rs.residues), function(i, r) {
			var res_num = parseInt(r.split("_")[1]);

			features.seqs[query_name].push({
				attributes : {
					Color : "grey",
					Name : "I"
				},
				end : preStart + res_num,
				feature : "important_pfam",
				frame : undefined,
				score : undefined,
				source : undefined,
				start : preStart + res_num,
				strand : undefined,
				res_id : res_num
			});
		});
	}
	if (stemplate.residueSets != undefined) {
		var rs = $.grep(stemplate.residueSets, function(rs) {
			return rs.name == "csa"
		});
		if (rs.length > 0) {
			var arr_hit = hit_name.split("_");
			var pdb = arr_hit[0];
			var chain = arr_hit[1];
			var start =  aln.hit_res_start //parseInt(arr_hit[2]) //-;
			var end = parseInt(arr_hit[3]);
			var map_aln_pdb = {}
			var idx = 0;

			$.each(aln["aln_hit"]["seq"].split(""), function(i, aa) {
				if (aa != "-") {
					map_aln_pdb[idx] = i;
					idx++
				}
			});

			rs = rs[0]
			$.each($.unique(rs.residues), function(i, r) {
				var res_num = parseInt(r.split("_")[1]);
				if ((r.split("_")[0] == chain) && (res_num >= start)
						&& (res_num <= end)) {
					var seq_num = res_num - start ;
					var data = {
						attributes : {
							Color : "Green",
							Name : "A"
						},
						end : preStart + map_aln_pdb[seq_num],
						feature : "csa",
						frame : undefined,
						score : undefined,
						source : undefined,
						start : preStart + map_aln_pdb[seq_num],
						strand : undefined,
						res_id : seq_num - 1
					}
					features.seqs[hit_name].push(data);
				}
			});
		}
	}

	if (stemplate.residueSets != undefined) {
		var rs = $.grep(stemplate.residueSets, function(rs) {
			return rs.name == "drug_binding"
		});
		if (rs.length > 0) {
			var arr_hit = hit_name.split("_");
			var pdb = arr_hit[0];
			var chain = arr_hit[1];
			var start = parseInt(arr_hit[2]);
			var end = parseInt(arr_hit[3]);
			var map_aln_pdb = {}
			var idx = 0;
			$.each(aln["aln_hit"]["seq"].split(""), function(i, aa) {
				if (aa != "-") {
					map_aln_pdb[idx] = i;
					idx++
				}
			});

			rs = rs[0]
			$.each($.unique(rs.residues), function(i, r) {
				var res_num = parseInt(r.split("_")[1]);
				if ((r.split("_")[0] == chain) && (res_num >= start)
						&& (res_num <= end)) {
					var seq_num = res_num - start;
					var data = {
						attributes : {
							Color : "Yellow",
							Name : "D"
						},
						end : preStart + map_aln_pdb[seq_num],
						feature : "drug_binding",
						frame : undefined,
						score : undefined,
						source : undefined,
						start : preStart + map_aln_pdb[seq_num],
						strand : undefined,
						res_id : seq_num - 1
					}
					features.seqs[hit_name].push(data);
				}
			});
		}
	}

	if (features.seqs[hit_name].length == 0) {
		delete features.seqs[hit_name];
	}
	if (features.seqs[query_name].length == 0) {
		delete features.seqs[query_name];
	}
	if (!$.isEmptyObject(features.seqs)) {
		msa.msa.seqs.addFeatures(features);
	}

	return msa

}

function open_dialog(title, columns, dataSet, column_renders, paging) {

	column_renders = column_renders || [];
	/* "columns": [ { "title": "Engine" },... ] */
	$('#box-table-title').html(title);
	$('#table-box').css("display", "block");
	table_columns = [];
	$.each(columns, function(index, col) {
		var column = {
			"title" : col
		};
		if ($.isArray(col)) {
			column = {
				"title" : col[0],
				"data" : col[1]
			};
		}
		if (column_renders.length >= index) {
			if (column_renders[index]) {
				column["render"] = column_renders[index];
			}
		}
		table_columns.push(column);
	});
	$('#dialog-table').remove();
	$('#div-table').remove();
	$('#table-box-body')
			.append(
					'<div id="div-table"><table id="dialog-table" class="table table-striped"><thead><tr></tr></thead><tbody></tbody></table></div>');

	$('#dialog-table').dataTable({
		"data" : dataSet,
		"columns" : table_columns,
		"paging" : paging,
		"ordering" : true,
		"info" : false,
		"searching" : false
	});

}

function init_buttons(structure_name) {
	var buttons = '<div id="struct_toolbox" class="pull-right box-tools">'

			+ '&#160;<button class="btn btn-info" id="pockets_button" title="Shows a table of all pockets statistics such as druggability, solvent accessible surface area, hydrophobicity score, etc.">Pockets:?</button>'
			+ ' <button class="btn btn-info" id="ligands_button"	title="Shows all ligands cristalized with the protein">Ligands:?</button> '
			+ ' <button class="btn btn-info" id="metals_button"	title="Shows all crystallized metals sites detected">Metals:?</button> '
			+ ' <button class="btn btn-info" id="pka_button"	title="Shows a list of propKa. PropKa is a heuristic pKa calculation.">propKa:?</button>'
			+ ' <button id="csa_button" class="btn btn-info"	title="Shows a list of all residues that are in CSA, their function and the evidence to support its activity.">CSA:?</button>'
			+ ' <button id="bindingdb_button" class="btn btn-info"	title="Shows a list of all ligands present in the crystal and a link to its description in RCSB PDB database.">Ligands:?</button>'
			+ '</div>';

	$("#header_title").html(structure_name + buttons);

}

$.fn.SequenceRender = function(sequence_id) {

	this.class = 'SequenceRender';
	this.sequence_id = sequence_id;
	this.render_seq = function(proteins) {

		$.each(proteins, function(index, protein) {
			var div_id = 'feature_viewer_' + protein.id;
			$("#YourOwnDivId").append('<div id="' + div_id + '"></div>');
			var track_features = []
			if (typeof protein.features != "undefined"
					&& protein.features != null) {

				$.each(protein.features, function(i, feature) {
					track_features.push(bpfeature2trackfeature(feature,
							protein.features));
				});
			}
			var ftr = new $.FeatureTrackRenderer(div_id, protein.name,
					track_features, protein.sequence.length);
			ftr.id_map[sequence_id] = function(identifier) {
				return "Modeled sequence:" + identifier;
			}

			ftr.init();

			/*
			 * if (protein.id != this.sequence_id ) { var struct_feature = null;
			 * $.each(protein.features, function(i, feature) { if (feature.id ==
			 * this.sequence_id ) { struct_feature = feature; } }); description =
			 * struct_feature.strLocus + " " + struct_feature.identifier + "| " +
			 * description; name = protein.name + "| " + name; }
			 */
		});

	};
};
