require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var css = "/* BASIC */\n\n.biojs_msa_stage {\n    cursor: default;\n    line-height: normal; \n}\n\n.biojs_msa_seqblock {\n    cursor: move;\n}\n\n.biojs_msa_layer{\n    display: block;\n    white-space: nowrap;\n}\n\n.biojs_msa_labels {\n    color:black;\n    display: inline-block;\n    white-space: nowrap;\n    cursor: pointer;\n    vertical-align:middle;\n    overflow: hidden;\n    text-overflow: clip;\n    /*margin:auto; */\n    text-align: left;\n}\n\n.biojs_msa_header {\n    white-space: nowrap;\n    text-align: left;\n}\n\n.biojs_msa_labelrow:before {\n    content: '';\n    display: inline-block;\n    width: 0;\n    height: 100%;\n    vertical-align: middle;\n}\n\n.biojs_msa_labelrow{\n    height: 100%;\n}\n\n.biojs_msa_labelblock::-webkit-scrollbar, .biojs_msa_rheader::-webkit-scrollbar{\n    // FIX scrollbars on Mac\n    -webkit-appearance: none;\n    width: 7px;\n    height: 7px;\n}\n.biojs_msa_labelblock::-webkit-scrollbar-thumb, .biojs_msa_rheader::-webkit-scrollbar-thumb{\n    border-radius: 4px;\n    background-color: rgba(0,0,0,.5);\n    box-shadow: 0 0 1px rgba(255,255,255,.5);\n}\n\n/* END BASIC */\n/* Marker */\n\n.biojs_msa_marker{\n    color:grey;\n    white-space: nowrap;\n    cursor: pointer;\n}\n\n.biojs_msa_marker span{\n    text-align: center;\n}\n\n/* END Marker */\n/* Menubar */\n\n.smenubar .smenubar_alink {\n    background: #3498db;\n    background-image: -webkit-linear-gradient(top, #3498db, #2980b9);\n    background-image: -moz-linear-gradient(top, #3498db, #2980b9);\n    background-image: -ms-linear-gradient(top, #3498db, #2980b9);\n    background-image: -o-linear-gradient(top, #3498db, #2980b9);\n    background-image: linear-gradient(to bottom, #3498db, #2980b9);\n    -webkit-border-radius: 28;\n    -moz-border-radius: 28;\n    border-radius: 28px;\n    font-family: Arial;\n    color: #ffffff;\n    padding: 3px 10px 3px 10px;\n    margin-left: 10px;\n    text-decoration: none;\n}\n.smenubar {\n    display: inline-block;\n}\n\n.smenubar .smenubar_alink:hover {\n    cursor: pointer;\n}\n\n\n/* jquery dropdown CSS */\n\n.smenu-dropdown {\n    position: absolute;\n    z-index: 9999999;\n    display: none;\n}\n\n.smenu-dropdown .smenu-dropdown-menu,\n.smenu-dropdown .smenu-dropdown-panel {\n    min-width: 160px;\n    max-width: 360px;\n    list-style: none;\n    background: #FFF;\n    border: solid 1px #DDD;\n    border: solid 1px rgba(0, 0, 0, .2);\n    border-radius: 6px;\n    box-shadow: 0 5px 10px rgba(0, 0, 0, .2);\n    overflow: visible;\n    padding: 4px 0;\n    margin: 0;\n}\n\n.smenu-dropdown .smenu-dropdown-panel {\n    padding: 10px;\n}\n\n\n.smenu-dropdown.smenu-dropdown-scroll .smenu-dropdown-menu,\n.smenu-dropdown.smenu-dropdown-scroll .smenu-dropdown-panel {\n    max-height: 358px;\n    overflow: auto;\n}\n\n.smenu-dropdown .smenu-dropdown-menu LI {\n    list-style: none;\n    padding: 0 0;\n    margin: 0;\n    line-height: 18px;\n}\n\n.smenu-dropdown .smenu-dropdown-menu LI,\n.smenu-dropdown .smenu-dropdown-menu LABEL {\n    display: block;\n    color: #555;\n    text-decoration: none;\n    line-height: 18px;\n    padding: 3px 15px;\n    white-space: nowrap;\n}\n\n.smenu-dropdown .smenu-dropdown-menu LI:hover,\n.smenu-dropdown .smenu-dropdown-menu LABEL:hover {\n    background-color: #08C;\n    color: #FFF;\n    cursor: pointer;\n}\n\n.smenu-dropdown .smenu-dropdown-menu .smenu-dropdown-divider {\n    font-size: 1px;\n    border-top: solid 1px #E5E5E5;\n    padding: 0;\n    margin: 5px 0;\n}\n\n/* END Menubar */\n"; (require("/home/travis/build/greenify/msa/node_modules/cssify"))(css); module.exports = css;
},{"/home/travis/build/greenify/msa/node_modules/cssify":40}],2:[function(require,module,exports){
var _ = require('underscore');
var viewType = require("backbone-viewj");
var pluginator;

/**
 * Remove an element and provide a function that inserts it into its original position
 * @param element {Element} The element to be temporarily removed
 * @return {Function} A function that inserts the element into its original position
 **/
function removeToInsertLater(element) {
  var parentNode = element.parentNode;
  var nextSibling = element.nextSibling;
  parentNode.removeChild(element);
  return function() {
    if (nextSibling) {
      parentNode.insertBefore(element, nextSibling);
    } else {
      parentNode.appendChild(element);
    }
  };
}

var removeChilds = function (node) {
    var last;
    while (last = node.lastChild) node.removeChild(last);
};

module.exports = pluginator = viewType.extend({
  renderSubviews: function() {
    // it is faster to remove the entire element and replace it
    // -> however this will lead to lost id,class and style props
    var oldEl = this.el;

    // it might be that the element is not on the DOM yet
    var elOnDom = oldEl.parentNode != undefined;
    if(elOnDom){
      var insert = removeToInsertLater(oldEl)
    }
    removeChilds(oldEl);

    var frag = document.createDocumentFragment();
    var views = this._views();
    var viewsSorted = _.sortBy(views, function(el) {
      return el.ordering;
    });
    var view, node;
    for (var i = 0; i <  viewsSorted.length; i++) {
      view = viewsSorted[i];
      view.render();
      node = view.el;
      if (node != null) {
        frag.appendChild(node);
      }
    }

    oldEl.appendChild(frag);
    if(elOnDom){
      insert();
    }
    return oldEl;
  },
  addView: function(key, view) {
    var views = this._views();
    if (view == null) {
      throw "Invalid plugin. ";
    }
    if (view.ordering == null) {
      view.ordering = key;
    }
    return views[key] = view;
  },
  removeViews: function() {
    var el, key;
    var views = this._views();
    for (key in views) {
      el = views[key];
      el.undelegateEvents();
      el.unbind();
      if (el.removeViews != null) {
        el.removeViews();
      }
      el.remove();
    }
    return this.views = {};
  },
  removeView: function(key) {
    var views = this._views();
    views[key].remove();
    return delete views[key];
  },
  getView: function(key) {
    var views = this._views();
    return views[key];
  },
  remove: function() {
    this.removeViews();
    return viewType.prototype.remove.apply(this);
  },
  _views: function() {
    if (this.views == null) {
      this.views = {};
    }
    return this.views;
  }
});

},{"backbone-viewj":9,"underscore":66}],3:[function(require,module,exports){
//     Backbone.js 1.1.2

//     (c) 2010-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Backbone may be freely distributed under the MIT license.
//     For all details and documentation:
//     http://backbonejs.org

var Events = require("backbone-events-standalone");
var extend = require("backbone-extend-standalone");
var _ = require("underscore");
var Model = require("./model");

// Create local references to array methods we'll want to use later.
var array = [];
var slice = array.slice;

// Backbone.Collection
// -------------------

// If models tend to represent a single row of data, a Backbone Collection is
// more analogous to a table full of data ... or a small slice or page of that
// table, or a collection of rows that belong together for a particular reason
// -- all of the messages in this particular folder, all of the documents
// belonging to this particular author, and so on. Collections maintain
// indexes of their models, both in order, and for lookup by `id`.

// Create a new **Collection**, perhaps to contain a specific type of `model`.
// If a `comparator` is specified, the Collection will maintain
// its models in sort order, as they're added and removed.
var Collection = function(models, options) {
  options || (options = {});
  if (options.model) this.model = options.model;
  if (options.comparator !== void 0) this.comparator = options.comparator;
  this._reset();
  this.initialize.apply(this, arguments);
  if (models) this.reset(models, _.extend({silent: true}, options));
};

// Default options for `Collection#set`.
var setOptions = {add: true, remove: true, merge: true};
var addOptions = {add: true, remove: false};

// Define the Collection's inheritable methods.
_.extend(Collection.prototype, Events, {

  // The default model for a collection is just a **Backbone.Model**.
  // This should be overridden in most cases.
  model: Model,

  // Initialize is an empty function by default. Override it with your own
  // initialization logic.
  initialize: function(){},

    // The JSON representation of a Collection is an array of the
    // models' attributes.
  toJSON: function(options) {
    return this.map(function(model){ return model.toJSON(options); });
  },

    // Proxy `Backbone.sync` by default.
  sync: function() {
    return Backbone.sync.apply(this, arguments);
  },

    // Add a model, or list of models to the set.
  add: function(models, options) {
    return this.set(models, _.extend({merge: false}, options, addOptions));
  },

    // Remove a model, or a list of models from the set.
  remove: function(models, options) {
    var singular = !_.isArray(models);
    models = singular ? [models] : _.clone(models);
    options || (options = {});
    for (var i = 0, length = models.length; i < length; i++) {
      var model = models[i] = this.get(models[i]);
      if (!model) continue;
      var id = this.modelId(model.attributes);
      if (id != null) delete this._byId[id];
      delete this._byId[model.cid];
      var index = this.indexOf(model);
      this.models.splice(index, 1);
      this.length--;
      if (!options.silent) {
        options.index = index;
        model.trigger('remove', model, this, options);
      }
      this._removeReference(model, options);
    }
    return singular ? models[0] : models;
  },

    // Update a collection by `set`-ing a new list of models, adding new ones,
    // removing models that are no longer present, and merging models that
    // already exist in the collection, as necessary. Similar to **Model#set**,
    // the core operation for updating the data contained by the collection.
  set: function(models, options) {
    options = _.defaults({}, options, setOptions);
    if (options.parse) models = this.parse(models, options);
    var singular = !_.isArray(models);
    models = singular ? (models ? [models] : []) : models.slice();
    var id, model, attrs, existing, sort;
    var at = options.at;
    var sortable = this.comparator && (at == null) && options.sort !== false;
    var sortAttr = _.isString(this.comparator) ? this.comparator : null;
    var toAdd = [], toRemove = [], modelMap = {};
    var add = options.add, merge = options.merge, remove = options.remove;
    var order = !sortable && add && remove ? [] : false;

    // Turn bare objects into model references, and prevent invalid models
    // from being added.
    for (var i = 0, length = models.length; i < length; i++) {
      attrs = models[i];

      // If a duplicate is found, prevent it from being added and
      // optionally merge it into the existing model.
      if (existing = this.get(attrs)) {
        if (remove) modelMap[existing.cid] = true;
        if (merge && attrs !== existing) {
          attrs = this._isModel(attrs) ? attrs.attributes : attrs;
          if (options.parse) attrs = existing.parse(attrs, options);
          existing.set(attrs, options);
          if (sortable && !sort && existing.hasChanged(sortAttr)) sort = true;
        }
        models[i] = existing;

        // If this is a new, valid model, push it to the `toAdd` list.
      } else if (add) {
        model = models[i] = this._prepareModel(attrs, options);
        if (!model) continue;
        toAdd.push(model);
        this._addReference(model, options);
      }

      // Do not add multiple models with the same `id`.
      model = existing || model;
      if (!model) continue;
      id = this.modelId(model.attributes);
      if (order && (model.isNew() || !modelMap[id])) order.push(model);
      modelMap[id] = true;
    }

    // Remove nonexistent models if appropriate.
    if (remove) {
      for (var i = 0, length = this.length; i < length; i++) {
        if (!modelMap[(model = this.models[i]).cid]) toRemove.push(model);
      }
      if (toRemove.length) this.remove(toRemove, options);
    }

    // See if sorting is needed, update `length` and splice in new models.
    if (toAdd.length || (order && order.length)) {
      if (sortable) sort = true;
      this.length += toAdd.length;
      if (at != null) {
        for (var i = 0, length = toAdd.length; i < length; i++) {
          this.models.splice(at + i, 0, toAdd[i]);
        }
      } else {
        if (order) this.models.length = 0;
        var orderedModels = order || toAdd;
        for (var i = 0, length = orderedModels.length; i < length; i++) {
          this.models.push(orderedModels[i]);
        }
      }
    }

    // Silently sort the collection if appropriate.
    if (sort) this.sort({silent: true});

    // Unless silenced, it's time to fire all appropriate add/sort events.
    if (!options.silent) {
      var addOpts = at != null ? _.clone(options) : options;
      for (var i = 0, length = toAdd.length; i < length; i++) {
        if (at != null) addOpts.index = at + i;
        (model = toAdd[i]).trigger('add', model, this, addOpts);
      }
      if (sort || (order && order.length)) this.trigger('sort', this, options);
    }

    // Return the added (or merged) model (or models).
    return singular ? models[0] : models;
  },

    // When you have more items than you want to add or remove individually,
    // you can reset the entire set with a new list of models, without firing
    // any granular `add` or `remove` events. Fires `reset` when finished.
    // Useful for bulk operations and optimizations.
  reset: function(models, options) {
    options || (options = {});
    for (var i = 0, length = this.models.length; i < length; i++) {
      this._removeReference(this.models[i], options);
    }
    options.previousModels = this.models;
    this._reset();
    models = this.add(models, _.extend({silent: true}, options));
    if (!options.silent) this.trigger('reset', this, options);
    return models;
  },

    // Add a model to the end of the collection.
  push: function(model, options) {
    return this.add(model, _.extend({at: this.length}, options));
  },

    // Remove a model from the end of the collection.
  pop: function(options) {
    var model = this.at(this.length - 1);
    this.remove(model, options);
    return model;
  },

    // Add a model to the beginning of the collection.
  unshift: function(model, options) {
    return this.add(model, _.extend({at: 0}, options));
  },

    // Remove a model from the beginning of the collection.
  shift: function(options) {
    var model = this.at(0);
    this.remove(model, options);
    return model;
  },

    // Slice out a sub-array of models from the collection.
  slice: function() {
    return slice.apply(this.models, arguments);
  },

    // Get a model from the set by id.
  get: function(obj) {
    if (obj == null) return void 0;
    var id = this.modelId(this._isModel(obj) ? obj.attributes : obj);
    return this._byId[obj] || this._byId[id] || this._byId[obj.cid];
  },

    // Get the model at the given index.
  at: function(index) {
    if (index < 0) index += this.length;
    return this.models[index];
  },

    // Return models with matching attributes. Useful for simple cases of
    // `filter`.
  where: function(attrs, first) {
    if (_.isEmpty(attrs)) return first ? void 0 : [];
    return this[first ? 'find' : 'filter'](function(model) {
      for (var key in attrs) {
        if (attrs[key] !== model.get(key)) return false;
      }
      return true;
    });
  },

    // Return the first model with matching attributes. Useful for simple cases
    // of `find`.
  findWhere: function(attrs) {
    return this.where(attrs, true);
  },

    // Force the collection to re-sort itself. You don't need to call this under
    // normal circumstances, as the set will maintain sort order as each item
    // is added.
  sort: function(options) {
    if (!this.comparator) throw new Error('Cannot sort a set without a comparator');
    options || (options = {});

    // Run sort based on type of `comparator`.
    if (_.isString(this.comparator) || this.comparator.length === 1) {
      this.models = this.sortBy(this.comparator, this);
    } else {
      this.models.sort(_.bind(this.comparator, this));
    }

    if (!options.silent) this.trigger('sort', this, options);
    return this;
  },

    // Pluck an attribute from each model in the collection.
  pluck: function(attr) {
    return _.invoke(this.models, 'get', attr);
  },

    // Fetch the default set of models for this collection, resetting the
    // collection when they arrive. If `reset: true` is passed, the response
    // data will be passed through the `reset` method instead of `set`.
  fetch: function(options) {
    options = options ? _.clone(options) : {};
    if (options.parse === void 0) options.parse = true;
    var success = options.success;
    var collection = this;
    options.success = function(resp) {
      var method = options.reset ? 'reset' : 'set';
      collection[method](resp, options);
      if (success) success(collection, resp, options);
      collection.trigger('sync', collection, resp, options);
    };
    wrapError(this, options);
    return this.sync('read', this, options);
  },

    // Create a new instance of a model in this collection. Add the model to the
    // collection immediately, unless `wait: true` is passed, in which case we
    // wait for the server to agree.
  create: function(model, options) {
    options = options ? _.clone(options) : {};
    if (!(model = this._prepareModel(model, options))) return false;
    if (!options.wait) this.add(model, options);
    var collection = this;
    var success = options.success;
    options.success = function(model, resp) {
      if (options.wait) collection.add(model, options);
      if (success) success(model, resp, options);
    };
    model.save(null, options);
    return model;
  },

    // **parse** converts a response into a list of models to be added to the
    // collection. The default implementation is just to pass it through.
  parse: function(resp, options) {
    return resp;
  },

    // Create a new collection with an identical list of models as this one.
  clone: function() {
    return new this.constructor(this.models, {
      model: this.model,
      comparator: this.comparator
    });
  },

    // Define how to uniquely identify models in the collection.
  modelId: function (attrs) {
    return attrs[this.model.prototype.idAttribute || 'id'];
  },

    // Private method to reset all internal state. Called when the collection
    // is first initialized or reset.
  _reset: function() {
    this.length = 0;
    this.models = [];
    this._byId  = {};
  },

    // Prepare a hash of attributes (or other model) to be added to this
    // collection.
  _prepareModel: function(attrs, options) {
    if (this._isModel(attrs)) {
      if (!attrs.collection) attrs.collection = this;
      return attrs;
    }
    options = options ? _.clone(options) : {};
    options.collection = this;
    var model = new this.model(attrs, options);
    if (!model.validationError) return model;
    this.trigger('invalid', this, model.validationError, options);
    return false;
  },

    // Method for checking whether an object should be considered a model for
    // the purposes of adding to the collection.
  _isModel: function (model) {
    return model instanceof Model;
  },

    // Internal method to create a model's ties to a collection.
  _addReference: function(model, options) {
    this._byId[model.cid] = model;
    var id = this.modelId(model.attributes);
    if (id != null) this._byId[id] = model;
    model.on('all', this._onModelEvent, this);
  },

    // Internal method to sever a model's ties to a collection.
  _removeReference: function(model, options) {
    if (this === model.collection) delete model.collection;
    model.off('all', this._onModelEvent, this);
  },

    // Internal method called every time a model in the set fires an event.
    // Sets need to update their indexes when models change ids. All other
    // events simply proxy through. "add" and "remove" events that originate
    // in other collections are ignored.
  _onModelEvent: function(event, model, collection, options) {
    if ((event === 'add' || event === 'remove') && collection !== this) return;
    if (event === 'destroy') this.remove(model, options);
    if (event === 'change') {
      var prevId = this.modelId(model.previousAttributes());
      var id = this.modelId(model.attributes);
      if (prevId !== id) {
        if (prevId != null) delete this._byId[prevId];
        if (id != null) this._byId[id] = model;
      }
    }
    this.trigger.apply(this, arguments);
  }

});

// Underscore methods that we want to implement on the Collection.
// 90% of the core usefulness of Backbone Collections is actually implemented
// right here:
var methods = ['forEach', 'each', 'map', 'collect', 'reduce', 'foldl',
    'inject', 'reduceRight', 'foldr', 'find', 'detect', 'filter', 'select',
    'reject', 'every', 'all', 'some', 'any', 'include', 'contains', 'invoke',
    'max', 'min', 'toArray', 'size', 'first', 'head', 'take', 'initial', 'rest',
    'tail', 'drop', 'last', 'without', 'difference', 'indexOf', 'shuffle',
    'lastIndexOf', 'isEmpty', 'chain', 'sample', 'partition'];

// Mix in each Underscore method as a proxy to `Collection#models`.
_.each(methods, function(method) {
  if (!_[method]) return;
  Collection.prototype[method] = function() {
    var args = slice.call(arguments);
    args.unshift(this.models);
    return _[method].apply(_, args);
  };
});

// Underscore methods that take a property name as an argument.
var attributeMethods = ['groupBy', 'countBy', 'sortBy', 'indexBy'];

// Use attributes instead of properties.
_.each(attributeMethods, function(method) {
  if (!_[method]) return;
  Collection.prototype[method] = function(value, context) {
    var iterator = _.isFunction(value) ? value : function(model) {
      return model.get(value);
    };
    return _[method](this.models, iterator, context);
  };
});

// setup inheritance
Collection.extend = extend;
module.exports = Collection;

},{"./model":5,"backbone-events-standalone":7,"backbone-extend-standalone":8,"underscore":66}],4:[function(require,module,exports){
module.exports.Model = require("./model");
module.exports.Collection = require("./collection");
module.exports.Events = require("backbone-events-standalone");
module.exports.extend = require("backbone-extend-standalone");

},{"./collection":3,"./model":5,"backbone-events-standalone":7,"backbone-extend-standalone":8}],5:[function(require,module,exports){
//     Backbone.js 1.1.2

//     (c) 2010-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Backbone may be freely distributed under the MIT license.
//     For all details and documentation:
//     http://backbonejs.org

var Events = require("backbone-events-standalone");
var extend = require("backbone-extend-standalone");
var _ = require("underscore");

// Backbone.Model
// --------------

// Backbone **Models** are the basic data object in the framework --
// frequently representing a row in a table in a database on your server.
// A discrete chunk of data and a bunch of useful, related methods for
// performing computations and transformations on that data.

// Create a new model with the specified attributes. A client id (`cid`)
// is automatically generated and assigned for you.
var Model = function(attributes, options) {
  var attrs = attributes || {};
  options || (options = {});
  this.cid = _.uniqueId('c');
  this.attributes = {};
  if (options.collection) this.collection = options.collection;
  if (options.parse) attrs = this.parse(attrs, options) || {};
  attrs = _.defaults({}, attrs, _.result(this, 'defaults'));
  this.set(attrs, options);
  this.changed = {};
  this.initialize.apply(this, arguments);
};

// Attach all inheritable methods to the Model prototype.
_.extend(Model.prototype, Events, {

  // A hash of attributes whose current and previous value differ.
  changed: null,

  // The value returned during the last failed validation.
  validationError: null,

    // The default name for the JSON `id` attribute is `"id"`. MongoDB and
    // CouchDB users may want to set this to `"_id"`.
  idAttribute: 'id',

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
  initialize: function(){},

    // Return a copy of the model's `attributes` object.
  toJSON: function(options) {
    return _.clone(this.attributes);
  },

    // Proxy `Backbone.sync` by default -- but override this if you need
    // custom syncing semantics for *this* particular model.
  sync: function() {
    return Backbone.sync.apply(this, arguments);
  },

    // Get the value of an attribute.
  get: function(attr) {
    return this.attributes[attr];
  },

    // Get the HTML-escaped value of an attribute.
  escape: function(attr) {
    return _.escape(this.get(attr));
  },

    // Returns `true` if the attribute contains a value that is not null
    // or undefined.
  has: function(attr) {
    return this.get(attr) != null;
  },

    // Set a hash of model attributes on the object, firing `"change"`. This is
    // the core primitive operation of a model, updating the data and notifying
    // anyone who needs to know about the change in state. The heart of the beast.
  set: function(key, val, options) {
    var attr, attrs, unset, changes, silent, changing, prev, current;
    if (key == null) return this;

    // Handle both `"key", value` and `{key: value}` -style arguments.
    if (typeof key === 'object') {
      attrs = key;
      options = val;
    } else {
      (attrs = {})[key] = val;
    }

    options || (options = {});

    // Run validation.
    if (!this._validate(attrs, options)) return false;

    // Extract attributes and options.
    unset           = options.unset;
    silent          = options.silent;
    changes         = [];
    changing        = this._changing;
    this._changing  = true;

    if (!changing) {
      this._previousAttributes = _.clone(this.attributes);
      this.changed = {};
    }
    current = this.attributes, prev = this._previousAttributes;

    // Check for changes of `id`.
    if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];

    // For each `set` attribute, update or delete the current value.
    for (attr in attrs) {
      val = attrs[attr];
      if (!_.isEqual(current[attr], val)) changes.push(attr);
      if (!_.isEqual(prev[attr], val)) {
        this.changed[attr] = val;
      } else {
        delete this.changed[attr];
      }
      unset ? delete current[attr] : current[attr] = val;
    }

    // Trigger all relevant attribute changes.
    if (!silent) {
      if (changes.length) this._pending = options;
      for (var i = 0, length = changes.length; i < length; i++) {
        this.trigger('change:' + changes[i], this, current[changes[i]], options);
      }
    }

    // You might be wondering why there's a `while` loop here. Changes can
    // be recursively nested within `"change"` events.
    if (changing) return this;
    if (!silent) {
      while (this._pending) {
        options = this._pending;
        this._pending = false;
        this.trigger('change', this, options);
      }
    }
    this._pending = false;
    this._changing = false;
    return this;
  },

    // Remove an attribute from the model, firing `"change"`. `unset` is a noop
    // if the attribute doesn't exist.
  unset: function(attr, options) {
    return this.set(attr, void 0, _.extend({}, options, {unset: true}));
  },

    // Clear all attributes on the model, firing `"change"`.
  clear: function(options) {
    var attrs = {};
    for (var key in this.attributes) attrs[key] = void 0;
    return this.set(attrs, _.extend({}, options, {unset: true}));
  },

    // Determine if the model has changed since the last `"change"` event.
    // If you specify an attribute name, determine if that attribute has changed.
  hasChanged: function(attr) {
    if (attr == null) return !_.isEmpty(this.changed);
    return _.has(this.changed, attr);
  },

    // Return an object containing all the attributes that have changed, or
    // false if there are no changed attributes. Useful for determining what
    // parts of a view need to be updated and/or what attributes need to be
    // persisted to the server. Unset attributes will be set to undefined.
    // You can also pass an attributes object to diff against the model,
    // determining if there *would be* a change.
  changedAttributes: function(diff) {
    if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;
    var val, changed = false;
    var old = this._changing ? this._previousAttributes : this.attributes;
    for (var attr in diff) {
      if (_.isEqual(old[attr], (val = diff[attr]))) continue;
      (changed || (changed = {}))[attr] = val;
    }
    return changed;
  },

    // Get the previous value of an attribute, recorded at the time the last
    // `"change"` event was fired.
  previous: function(attr) {
    if (attr == null || !this._previousAttributes) return null;
    return this._previousAttributes[attr];
  },

    // Get all of the attributes of the model at the time of the previous
    // `"change"` event.
  previousAttributes: function() {
    return _.clone(this._previousAttributes);
  },

    // Fetch the model from the server. If the server's representation of the
    // model differs from its current attributes, they will be overridden,
    // triggering a `"change"` event.
  fetch: function(options) {
    options = options ? _.clone(options) : {};
    if (options.parse === void 0) options.parse = true;
    var model = this;
    var success = options.success;
    options.success = function(resp) {
      if (!model.set(model.parse(resp, options), options)) return false;
      if (success) success(model, resp, options);
      model.trigger('sync', model, resp, options);
    };
    wrapError(this, options);
    return this.sync('read', this, options);
  },

    // Set a hash of model attributes, and sync the model to the server.
    // If the server returns an attributes hash that differs, the model's
    // state will be `set` again.
  save: function(key, val, options) {
    var attrs, method, xhr, attributes = this.attributes;

    // Handle both `"key", value` and `{key: value}` -style arguments.
    if (key == null || typeof key === 'object') {
      attrs = key;
      options = val;
    } else {
      (attrs = {})[key] = val;
    }

    options = _.extend({validate: true}, options);

    // If we're not waiting and attributes exist, save acts as
    // `set(attr).save(null, opts)` with validation. Otherwise, check if
    // the model will be valid when the attributes, if any, are set.
    if (attrs && !options.wait) {
      if (!this.set(attrs, options)) return false;
    } else {
      if (!this._validate(attrs, options)) return false;
    }

    // Set temporary attributes if `{wait: true}`.
    if (attrs && options.wait) {
      this.attributes = _.extend({}, attributes, attrs);
    }

    // After a successful server-side save, the client is (optionally)
    // updated with the server-side state.
    if (options.parse === void 0) options.parse = true;
    var model = this;
    var success = options.success;
    options.success = function(resp) {
      // Ensure attributes are restored during synchronous saves.
      model.attributes = attributes;
      var serverAttrs = model.parse(resp, options);
      if (options.wait) serverAttrs = _.extend(attrs || {}, serverAttrs);
      if (_.isObject(serverAttrs) && !model.set(serverAttrs, options)) {
        return false;
      }
      if (success) success(model, resp, options);
      model.trigger('sync', model, resp, options);
    };
    wrapError(this, options);

    method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');
    if (method === 'patch' && !options.attrs) options.attrs = attrs;
    xhr = this.sync(method, this, options);

    // Restore attributes.
    if (attrs && options.wait) this.attributes = attributes;

    return xhr;
  },

    // Destroy this model on the server if it was already persisted.
    // Optimistically removes the model from its collection, if it has one.
    // If `wait: true` is passed, waits for the server to respond before removal.
  destroy: function(options) {
    options = options ? _.clone(options) : {};
    var model = this;
    var success = options.success;

    var destroy = function() {
      model.stopListening();
      model.trigger('destroy', model, model.collection, options);
    };

    options.success = function(resp) {
      if (options.wait || model.isNew()) destroy();
      if (success) success(model, resp, options);
      if (!model.isNew()) model.trigger('sync', model, resp, options);
    };

    if (this.isNew()) {
      options.success();
      return false;
    }
    wrapError(this, options);

    var xhr = this.sync('delete', this, options);
    if (!options.wait) destroy();
    return xhr;
  },

    // Default URL for the model's representation on the server -- if you're
    // using Backbone's restful methods, override this to change the endpoint
    // that will be called.
  url: function() {
    var base =
      _.result(this, 'urlRoot') ||
      _.result(this.collection, 'url') ||
      urlError();
    if (this.isNew()) return base;
    return base.replace(/([^\/])$/, '$1/') + encodeURIComponent(this.id);
  },

    // **parse** converts a response into the hash of attributes to be `set` on
    // the model. The default implementation is just to pass the response along.
  parse: function(resp, options) {
    return resp;
  },

    // Create a new model with identical attributes to this one.
  clone: function() {
    return new this.constructor(this.attributes);
  },

    // A model is new if it has never been saved to the server, and lacks an id.
  isNew: function() {
    return !this.has(this.idAttribute);
  },

    // Check if the model is currently in a valid state.
  isValid: function(options) {
    return this._validate({}, _.extend(options || {}, { validate: true }));
  },

    // Run validation against the next complete set of model attributes,
    // returning `true` if all is well. Otherwise, fire an `"invalid"` event.
  _validate: function(attrs, options) {
    if (!options.validate || !this.validate) return true;
    attrs = _.extend({}, this.attributes, attrs);
    var error = this.validationError = this.validate(attrs, options) || null;
    if (!error) return true;
    this.trigger('invalid', this, error, _.extend(options, {validationError: error}));
    return false;
  }

});

// Underscore methods that we want to implement on the Model.
var modelMethods = ['keys', 'values', 'pairs', 'invert', 'pick', 'omit', 'chain', 'isEmpty'];

// Mix in each Underscore method as a proxy to `Model#attributes`.
_.each(modelMethods, function(method) {
  if (!_[method]) return;
  Model.prototype[method] = function() {
    var args = slice.call(arguments);
    args.unshift(this.attributes);
    return _[method].apply(_, args);
  };
});

// setup inheritance
Model.extend = extend;
module.exports = Model;

},{"backbone-events-standalone":7,"backbone-extend-standalone":8,"underscore":66}],6:[function(require,module,exports){
/**
 * Standalone extraction of Backbone.Events, no external dependency required.
 * Degrades nicely when Backone/underscore are already available in the current
 * global context.
 *
 * Note that docs suggest to use underscore's `_.extend()` method to add Events
 * support to some given object. A `mixin()` method has been added to the Events
 * prototype to avoid using underscore for that sole purpose:
 *
 *     var myEventEmitter = BackboneEvents.mixin({});
 *
 * Or for a function constructor:
 *
 *     function MyConstructor(){}
 *     MyConstructor.prototype.foo = function(){}
 *     BackboneEvents.mixin(MyConstructor.prototype);
 *
 * (c) 2009-2013 Jeremy Ashkenas, DocumentCloud Inc.
 * (c) 2013 Nicolas Perriault
 */
/* global exports:true, define, module */
(function() {
  var root = this,
      breaker = {},
      nativeForEach = Array.prototype.forEach,
      hasOwnProperty = Object.prototype.hasOwnProperty,
      slice = Array.prototype.slice,
      idCounter = 0;

  // Returns a partial implementation matching the minimal API subset required
  // by Backbone.Events
  function miniscore() {
    return {
      keys: Object.keys || function (obj) {
        if (typeof obj !== "object" && typeof obj !== "function" || obj === null) {
          throw new TypeError("keys() called on a non-object");
        }
        var key, keys = [];
        for (key in obj) {
          if (obj.hasOwnProperty(key)) {
            keys[keys.length] = key;
          }
        }
        return keys;
      },

      uniqueId: function(prefix) {
        var id = ++idCounter + '';
        return prefix ? prefix + id : id;
      },

      has: function(obj, key) {
        return hasOwnProperty.call(obj, key);
      },

      each: function(obj, iterator, context) {
        if (obj == null) return;
        if (nativeForEach && obj.forEach === nativeForEach) {
          obj.forEach(iterator, context);
        } else if (obj.length === +obj.length) {
          for (var i = 0, l = obj.length; i < l; i++) {
            if (iterator.call(context, obj[i], i, obj) === breaker) return;
          }
        } else {
          for (var key in obj) {
            if (this.has(obj, key)) {
              if (iterator.call(context, obj[key], key, obj) === breaker) return;
            }
          }
        }
      },

      once: function(func) {
        var ran = false, memo;
        return function() {
          if (ran) return memo;
          ran = true;
          memo = func.apply(this, arguments);
          func = null;
          return memo;
        };
      }
    };
  }

  var _ = miniscore(), Events;

  // Backbone.Events
  // ---------------

  // A module that can be mixed in to *any object* in order to provide it with
  // custom events. You may bind with `on` or remove with `off` callback
  // functions to an event; `trigger`-ing an event fires all callbacks in
  // succession.
  //
  //     var object = {};
  //     _.extend(object, Backbone.Events);
  //     object.on('expand', function(){ alert('expanded'); });
  //     object.trigger('expand');
  //
  Events = {

    // Bind an event to a `callback` function. Passing `"all"` will bind
    // the callback to all events fired.
    on: function(name, callback, context) {
      if (!eventsApi(this, 'on', name, [callback, context]) || !callback) return this;
      this._events || (this._events = {});
      var events = this._events[name] || (this._events[name] = []);
      events.push({callback: callback, context: context, ctx: context || this});
      return this;
    },

    // Bind an event to only be triggered a single time. After the first time
    // the callback is invoked, it will be removed.
    once: function(name, callback, context) {
      if (!eventsApi(this, 'once', name, [callback, context]) || !callback) return this;
      var self = this;
      var once = _.once(function() {
        self.off(name, once);
        callback.apply(this, arguments);
      });
      once._callback = callback;
      return this.on(name, once, context);
    },

    // Remove one or many callbacks. If `context` is null, removes all
    // callbacks with that function. If `callback` is null, removes all
    // callbacks for the event. If `name` is null, removes all bound
    // callbacks for all events.
    off: function(name, callback, context) {
      var retain, ev, events, names, i, l, j, k;
      if (!this._events || !eventsApi(this, 'off', name, [callback, context])) return this;
      if (!name && !callback && !context) {
        this._events = {};
        return this;
      }

      names = name ? [name] : _.keys(this._events);
      for (i = 0, l = names.length; i < l; i++) {
        name = names[i];
        if (events = this._events[name]) {
          this._events[name] = retain = [];
          if (callback || context) {
            for (j = 0, k = events.length; j < k; j++) {
              ev = events[j];
              if ((callback && callback !== ev.callback && callback !== ev.callback._callback) ||
                  (context && context !== ev.context)) {
                retain.push(ev);
              }
            }
          }
          if (!retain.length) delete this._events[name];
        }
      }

      return this;
    },

    // Trigger one or many events, firing all bound callbacks. Callbacks are
    // passed the same arguments as `trigger` is, apart from the event name
    // (unless you're listening on `"all"`, which will cause your callback to
    // receive the true name of the event as the first argument).
    trigger: function(name) {
      if (!this._events) return this;
      var args = slice.call(arguments, 1);
      if (!eventsApi(this, 'trigger', name, args)) return this;
      var events = this._events[name];
      var allEvents = this._events.all;
      if (events) triggerEvents(events, args);
      if (allEvents) triggerEvents(allEvents, arguments);
      return this;
    },

    // Tell this object to stop listening to either specific events ... or
    // to every object it's currently listening to.
    stopListening: function(obj, name, callback) {
      var listeners = this._listeners;
      if (!listeners) return this;
      var deleteListener = !name && !callback;
      if (typeof name === 'object') callback = this;
      if (obj) (listeners = {})[obj._listenerId] = obj;
      for (var id in listeners) {
        listeners[id].off(name, callback, this);
        if (deleteListener) delete this._listeners[id];
      }
      return this;
    }

  };

  // Regular expression used to split event strings.
  var eventSplitter = /\s+/;

  // Implement fancy features of the Events API such as multiple event
  // names `"change blur"` and jQuery-style event maps `{change: action}`
  // in terms of the existing API.
  var eventsApi = function(obj, action, name, rest) {
    if (!name) return true;

    // Handle event maps.
    if (typeof name === 'object') {
      for (var key in name) {
        obj[action].apply(obj, [key, name[key]].concat(rest));
      }
      return false;
    }

    // Handle space separated event names.
    if (eventSplitter.test(name)) {
      var names = name.split(eventSplitter);
      for (var i = 0, l = names.length; i < l; i++) {
        obj[action].apply(obj, [names[i]].concat(rest));
      }
      return false;
    }

    return true;
  };

  // A difficult-to-believe, but optimized internal dispatch function for
  // triggering events. Tries to keep the usual cases speedy (most internal
  // Backbone events have 3 arguments).
  var triggerEvents = function(events, args) {
    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];
    switch (args.length) {
      case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;
      case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;
      case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;
      case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;
      default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args);
    }
  };

  var listenMethods = {listenTo: 'on', listenToOnce: 'once'};

  // Inversion-of-control versions of `on` and `once`. Tell *this* object to
  // listen to an event in another object ... keeping track of what it's
  // listening to.
  _.each(listenMethods, function(implementation, method) {
    Events[method] = function(obj, name, callback) {
      var listeners = this._listeners || (this._listeners = {});
      var id = obj._listenerId || (obj._listenerId = _.uniqueId('l'));
      listeners[id] = obj;
      if (typeof name === 'object') callback = this;
      obj[implementation](name, callback, this);
      return this;
    };
  });

  // Aliases for backwards compatibility.
  Events.bind   = Events.on;
  Events.unbind = Events.off;

  // Mixin utility
  Events.mixin = function(proto) {
    var exports = ['on', 'once', 'off', 'trigger', 'stopListening', 'listenTo',
                   'listenToOnce', 'bind', 'unbind'];
    _.each(exports, function(name) {
      proto[name] = this[name];
    }, this);
    return proto;
  };

  // Export Events as BackboneEvents depending on current context
  if (typeof define === "function") {
    define(function() {
      return Events;
    });
  } else if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = Events;
    }
    exports.BackboneEvents = Events;
  } else {
    root.BackboneEvents = Events;
  }
})(this);

},{}],7:[function(require,module,exports){
module.exports = require('./backbone-events-standalone');

},{"./backbone-events-standalone":6}],8:[function(require,module,exports){
(function (definition) {
  if (typeof exports === "object") {
    module.exports = definition();
  }
  else if (typeof define === 'function' && define.amd) {
    define(definition);
  }
  else {
    window.BackboneExtend = definition();
  }
})(function () {
  "use strict";
  
  // mini-underscore
  var _ = {
    has: function (obj, key) {
      return Object.prototype.hasOwnProperty.call(obj, key);
    },
  
    extend: function(obj) {
      for (var i=1; i<arguments.length; ++i) {
        var source = arguments[i];
        if (source) {
          for (var prop in source) {
            obj[prop] = source[prop];
          }
        }
      }
      return obj;
    }
  };

  /// Following code is pasted from Backbone.js ///

  // Helper function to correctly set up the prototype chain, for subclasses.
  // Similar to `goog.inherits`, but uses a hash of prototype properties and
  // class properties to be extended.
  var extend = function(protoProps, staticProps) {
    var parent = this;
    var child;

    // The constructor function for the new subclass is either defined by you
    // (the "constructor" property in your `extend` definition), or defaulted
    // by us to simply call the parent's constructor.
    if (protoProps && _.has(protoProps, 'constructor')) {
      child = protoProps.constructor;
    } else {
      child = function(){ return parent.apply(this, arguments); };
    }

    // Add static properties to the constructor function, if supplied.
    _.extend(child, parent, staticProps);

    // Set the prototype chain to inherit from `parent`, without calling
    // `parent`'s constructor function.
    var Surrogate = function(){ this.constructor = child; };
    Surrogate.prototype = parent.prototype;
    child.prototype = new Surrogate();

    // Add prototype properties (instance properties) to the subclass,
    // if supplied.
    if (protoProps) _.extend(child.prototype, protoProps);

    // Set a convenience property in case the parent's prototype is needed
    // later.
    child.__super__ = parent.prototype;

    return child;
  };

  // Expose the extend function
  return extend;
});

},{}],9:[function(require,module,exports){
// this is the extracted view model from backbone
// note that we inject jbone as jquery replacment
// (and underscore directly)
//
// Views are almost more convention than they are actual code.
//  MVC pattern
// Backbone.View
// -------------

var _ = require("underscore");
var Events = require("backbone-events-standalone");
var extend = require("backbone-extend-standalone");
var $ = require('jbone');

// Backbone Views are almost more convention than they are actual code. A View
// is simply a JavaScript object that represents a logical chunk of UI in the
// DOM. This might be a single item, an entire list, a sidebar or panel, or
// even the surrounding frame which wraps your whole app. Defining a chunk of
// UI as a **View** allows you to define your DOM events declaratively, without
// having to worry about render order ... and makes it easy for the view to
// react to specific changes in the state of your models.

// Creating a Backbone.View creates its initial element outside of the DOM,
// if an existing element is not provided...
var View =  function(options) {
  this.cid = _.uniqueId('view');
  options || (options = {});
  _.extend(this, _.pick(options, viewOptions));
  this._ensureElement();
  this.initialize.apply(this, arguments);
};

// Cached regex to split keys for `delegate`.
var delegateEventSplitter = /^(\S+)\s*(.*)$/;

// List of view options to be merged as properties.
var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];

// Set up all inheritable **Backbone.View** properties and methods.
_.extend(View.prototype, Events, {

  // The default `tagName` of a View's element is `"div"`.
  tagName: 'div',

  // jQuery delegate for element lookup, scoped to DOM elements within the
  // current view. This should be preferred to global lookups where possible.
  $: function(selector) {
    return this.$el.find(selector);
  },

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
  initialize: function(){},

    // **render** is the core function that your view should override, in order
    // to populate its element (`this.el`), with the appropriate HTML. The
    // convention is for **render** to always return `this`.
  render: function() {
    return this;
  },

    // Remove this view by taking the element out of the DOM, and removing any
    // applicable Backbone.Events listeners.
  remove: function() {
    this._removeElement();
    this.stopListening();
    return this;
  },

    // Remove this view's element from the document and all event listeners
    // attached to it. Exposed for subclasses using an alternative DOM
    // manipulation API.
  _removeElement: function() {
    this.$el.remove();
  },

    // Change the view's element (`this.el` property) and re-delegate the
    // view's events on the new element.
  setElement: function(element) {
    this.undelegateEvents();
    this._setElement(element);
    this.delegateEvents();
    return this;
  },

    // Creates the `this.el` and `this.$el` references for this view using the
    // given `el`. `el` can be a CSS selector or an HTML string, a jQuery
    // context or an element. Subclasses can override this to utilize an
    // alternative DOM manipulation API and are only required to set the
    // `this.el` property.
  _setElement: function(el) {
    this.$el = el instanceof $ ? el : $(el);
    this.el = this.$el[0];
  },

    // Set callbacks, where `this.events` is a hash of
    //
    // *{"event selector": "callback"}*
    //
    //     {
    //       'mousedown .title':  'edit',
    //       'click .button':     'save',
    //       'click .open':       function(e) { ... }
    //     }
    //
    // pairs. Callbacks will be bound to the view, with `this` set properly.
    // Uses event delegation for efficiency.
    // Omitting the selector binds the event to `this.el`.
  delegateEvents: function(events) {
    if (!(events || (events = _.result(this, 'events')))) return this;
    this.undelegateEvents();
    for (var key in events) {
      var method = events[key];
      if (!_.isFunction(method)) method = this[events[key]];
      if (!method) continue;
      var match = key.match(delegateEventSplitter);
      this.delegate(match[1], match[2], _.bind(method, this));
    }
    return this;
  },

    // Add a single event listener to the view's element (or a child element
    // using `selector`). This only works for delegate-able events: not `focus`,
    // `blur`, and not `change`, `submit`, and `reset` in Internet Explorer.
  delegate: function(eventName, selector, listener) {
    this.$el.on(eventName + '.delegateEvents' + this.cid, selector, listener);
  },

    // Clears all callbacks previously bound to the view by `delegateEvents`.
    // You usually don't need to use this, but may wish to if you have multiple
    // Backbone views attached to the same DOM element.
  undelegateEvents: function() {
    if (this.$el) this.$el.off('.delegateEvents' + this.cid);
    return this;
  },

    // A finer-grained `undelegateEvents` for removing a single delegated event.
    // `selector` and `listener` are both optional.
  undelegate: function(eventName, selector, listener) {
    this.$el.off(eventName + '.delegateEvents' + this.cid, selector, listener);
  },

    // Produces a DOM element to be assigned to your view. Exposed for
    // subclasses using an alternative DOM manipulation API.
  _createElement: function(tagName) {
    return document.createElement(tagName);
  },

    // Ensure that the View has a DOM element to render into.
    // If `this.el` is a string, pass it through `$()`, take the first
    // matching element, and re-assign it to `el`. Otherwise, create
    // an element from the `id`, `className` and `tagName` properties.
  _ensureElement: function() {
    if (!this.el) {
      var attrs = _.extend({}, _.result(this, 'attributes'));
      if (this.id) attrs.id = _.result(this, 'id');
      if (this.className) attrs['class'] = _.result(this, 'className');
      this.setElement(this._createElement(_.result(this, 'tagName')));
      this._setAttributes(attrs);
    } else {
      this.setElement(_.result(this, 'el'));
    }
  },

    // Set attributes from a hash on this view's element.  Exposed for
    // subclasses using an alternative DOM manipulation API.
  _setAttributes: function(attributes) {
    this.$el.attr(attributes);
  }

});

// setup inheritance
View.extend = extend;
module.exports = View;

},{"backbone-events-standalone":11,"backbone-extend-standalone":12,"jbone":42,"underscore":66}],10:[function(require,module,exports){
arguments[4][6][0].apply(exports,arguments)
},{"dup":6}],11:[function(require,module,exports){
arguments[4][7][0].apply(exports,arguments)
},{"./backbone-events-standalone":10,"dup":7}],12:[function(require,module,exports){
arguments[4][8][0].apply(exports,arguments)
},{"dup":8}],13:[function(require,module,exports){
var events = require("backbone-events-standalone");

events.onAll = function(callback,context){
  this.on("all", callback,context);
  return this;
};

// Mixin utility
events.oldMixin = events.mixin;
events.mixin = function(proto) {
  events.oldMixin(proto);
  // add custom onAll
  var exports = ['onAll'];
  for(var i=0; i < exports.length;i++){
    var name = exports[i];
    proto[name] = this[name];
  }
  return proto;
};

module.exports = events;

},{"backbone-events-standalone":15}],14:[function(require,module,exports){
arguments[4][6][0].apply(exports,arguments)
},{"dup":6}],15:[function(require,module,exports){
arguments[4][7][0].apply(exports,arguments)
},{"./backbone-events-standalone":14,"dup":7}],16:[function(require,module,exports){
// Generated by CoffeeScript 1.8.0
var GenericReader, xhr;

xhr = require('xhr');

module.exports = GenericReader = (function() {
  function GenericReader() {}

  GenericReader.read = function(url, callback) {
    var onret;
    onret = (function(_this) {
      return function(err, response, text) {
        return _this._onRetrieval(text, callback);
      };
    })(this);
    return xhr(url, onret);
  };

  GenericReader._onRetrieval = function(text, callback) {
    var rText;
    rText = this.parse(text);
    return callback(rText);
  };

  return GenericReader;

})();

},{"xhr":"xhr"}],17:[function(require,module,exports){
// Generated by CoffeeScript 1.9.0
var GenericReader, xhr;

xhr = require('xhr');

module.exports = GenericReader = (function() {
  function GenericReader() {}

  GenericReader.read = function(url, callback) {
    var onret;
    onret = (function(_this) {
      return function(err, response, text) {
        return _this._onRetrieval(text, callback);
      };
    })(this);
    return xhr(url, onret);
  };

  GenericReader._onRetrieval = function(text, callback) {
    var rText;
    rText = this.parse(text);
    return callback(rText);
  };

  return GenericReader;

})();

},{"xhr":"xhr"}],18:[function(require,module,exports){
// Generated by CoffeeScript 1.9.0
var Fasta, GenericReader, st,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

GenericReader = require("./generic_reader");

st = require("msa-seqtools");

module.exports = Fasta = (function(_super) {
  __extends(Fasta, _super);

  function Fasta() {
    return Fasta.__super__.constructor.apply(this, arguments);
  }

  Fasta.parse = function(text) {
    var currentSeq, keys, label, line, obj, seqs, _i, _len;
    seqs = [];
    if (!text || text.length === 0) {
      return [];
    }
    if (Object.prototype.toString.call(text) !== '[object Array]') {
      text = text.split("\n");
    }
    for (_i = 0, _len = text.length; _i < _len; _i++) {
      line = text[_i];
      if (line[0] === ">" || line[0] === ";") {
        label = line.slice(1);
        obj = st.getMeta(label);
        label = obj.name;
        currentSeq = new st.model("", label, seqs.length);
        currentSeq.ids = obj.ids || {};
        keys = Object.keys(currentSeq.ids);
        if (keys.length > 0) {
          currentSeq.id = currentSeq.ids[keys[0]];
        }
        currentSeq.details = obj.details || {};
        seqs.push(currentSeq);
      } else {
        currentSeq.seq += line;
      }
    }
    return seqs;
  };

  Fasta.write = function(seqs, access) {
    var seq, text, _i, _len;
    text = "";
    for (_i = 0, _len = seqs.length; _i < _len; _i++) {
      seq = seqs[_i];
      if (access != null) {
        seq = access(seq);
      }
      text += ">" + seq.name + "\n";
      text += (st.splitNChars(seq.seq, 80)).join("\n");
      text += "\n";
    }
    return text;
  };

  return Fasta;

})(GenericReader);

},{"./generic_reader":17,"msa-seqtools":64}],19:[function(require,module,exports){
var jalview = {};
module.exports = jalview;
var utils = require("./utils");

// http://www.jalview.org/help/html/features/featuresFormat.html
jalview.readHeader = function(lines) {
  var colors = {};
  var i = 0;
  var features = [];
  var currentGroup;

  for (; i < lines.length; i++) {
    var line = lines[i];
    if (line.indexOf("#") >= 0) {
      // no comments allowed -> stop
      break;
    }
    var columns = line.split(/\t/);
    var firstCell = columns[0].trim();
    if (firstCell === "GFF") {
      // this symbolizes the end 
      break;
    } else if (columns.length === 2) {
      if (firstCell === "startgroup") {
        currentGroup = columns[1].trim();
      } else if (firstCell === "endgroup") {
        currentGroup = "";
        continue;
      } else {
        // parse color
        colors[columns[0]] = jalview.parseColor(columns[1]);
      }
    } else if(columns.length >= 5){
      var arr = jalview.parseLine(columns);
      if (currentGroup) {
        arr.attributes.Parent = currentGroup;
      }
      features.push(arr);
    }
  }

  return {
    offset: i,
    colors: colors,
    features: features
  };
};

jalview.parseColor = function(cell) {
  if (cell.indexOf(",") >= 0) {
    // rgb code
    return utils.rgbToHex(cell.split(",").map(function(el) {
      return parseInt(el);
    }));
  }
  // color names with length == 6
  // 'bisque,maroon,orange,orchid,purple,salmon,sienna,tomato,violet,yellow'
  if (cell.length === 6 && parseInt(cell.charAt(0), 16) <= 16 && cell !== 'bisque') {
    // hex code
    return "#" + cell;
  }
  // color name
  return cell;
};


jalview.parseLine = function(columns) {
  var obj = {
    attributes: {}
  };
  obj.attributes.Name = columns[0].trim(); //desc
  obj.seqname = columns[1].trim(); // id
  obj.start = parseInt(columns[3]);
  obj.end = parseInt(columns[4]);
  obj.feature = columns[5].trim();
  if (obj.seqname === "ID_NOT_SPECIFIED") {
    obj.seqname = columns[2].trim(); // alternative id
  }
  return obj;
};

},{"./utils":20}],20:[function(require,module,exports){
var utils = {};
module.exports = utils;

utils.extractKeys = function extractKeys(attr) {
  // extract key-value definitions
  var attributes = {};
  var attrArr = attr.split(";");
  attrArr.forEach(function(el) {
    var keyArr, key, val;
    if (el.indexOf("=") > 0) {
      keyArr = el.split("=");
      key = keyArr[0];
      val = keyArr[1];
      attributes[key] = val;
    } else if (el.indexOf(" ") > 0) {
      keyArr = el.split(" ");
      key = keyArr[0];
      val = keyArr[1].replace(/"/g, '');
      attributes[key] = val;
    }
  });
  return attributes;
};

function componentToHex(c) {
  var hex = c.toString(16);
  return hex.length === 1 ? "0" + hex : hex;
}

utils.rgbToHex = function(r, g, b) {
  if(r.length === 3){
    return utils.rgbToHex(r[0],r[1], r[2]);
  }
  return "#" + componentToHex(r) + componentToHex(g) + componentToHex(b);
};

},{}],21:[function(require,module,exports){
module.exports.seq = require("./seq");

},{"./seq":22}],22:[function(require,module,exports){
module.exports = function(seq, name, id) {
    this.seq = seq;
    this.name = name;
    this.id = id;
    this.meta = {};
};

},{}],23:[function(require,module,exports){
// this is a light-weight build without the scrolling module
module.exports = require("./src/index.js");

},{"./src/index.js":29}],24:[function(require,module,exports){
module.exports = {
    render_x_axis_label: function () {
      var label = "Model Position";
      if (this.display_ali_map) {
        label = "Alignment Column";
      }
      this.called_on.find('.logo_xaxis').remove();
      this.called_on.prepend('<div class="logo_xaxis" class="centered" style="margin-left:40px"><p class="xaxis_text" style="width:10em;margin:1em auto">' + label + '</p></div>');

    },
    render_y_axis_label: function () {
      //attach a canvas for the y-axis
      this.dom_element.parent().before('<canvas class="logo_yaxis" height="'+this.options.height+'" width="55"></canvas>');
      var canvas = this.called_on.find('.logo_yaxis'),
      top_pix_height = 0,
      bottom_pix_height = 0,
      top_height = Math.abs(this.data.max_height),
      bottom_height = (isNaN(this.data.min_height_obs)) ? 0 : parseInt(this.data.min_height_obs, 10),
      context = null,
      axis_label = "Information Content (bits)";

      context = canvas[0].getContext('2d');
      //draw min/max tick marks
      context.beginPath();
      context.moveTo(55, 1);
      context.lineTo(40, 1);

      context.moveTo(55, this.info_content_height);
      context.lineTo(40, this.info_content_height);


      context.moveTo(55, (this.info_content_height / 2));
      context.lineTo(40, (this.info_content_height / 2));
      context.lineWidth = 1;
      context.strokeStyle = "#666666";
      context.stroke();

      //draw the label text
      context.fillStyle = "#666666";
      context.textAlign = "right";
      context.font = "bold 10px Arial";

      // draw the max label
      context.textBaseline = "top";
      context.fillText(parseFloat(this.data.max_height).toFixed(1), 38, 0);
      context.textBaseline = "middle";

      // draw the midpoint labels
      context.fillText(parseFloat(this.data.max_height / 2).toFixed(1), 38, (this.info_content_height / 2));
      // draw the min label
      context.fillText('0', 38, this.info_content_height);

      // draw the axis label
      if (this.data.height_calc === 'score') {
        axis_label = "Score (bits)";
      }

      context.save();
      context.translate(5, this.height / 2 - 20);
      context.rotate(-Math.PI / 2);
      context.textAlign = "center";
      context.font = "normal 12px Arial";
      context.fillText(axis_label, 1, 0);
      context.restore();

      // draw the insert row labels
      context.fillText('occupancy', 55, this.info_content_height + 7);
      if (this.show_inserts) {
        context.fillText('ins. prob.', 50, 280);
        context.fillText('ins. len.', 46, 296);
      }
    }
}; 

},{}],25:[function(require,module,exports){
var canv_support = null;

module.exports = function canvasSupport() {
  if (!canv_support) {
    var elem = document.createElement('canvas');
    canv_support = !!(elem.getContext && elem.getContext('2d'));
  }
  return canv_support;
}

},{}],26:[function(require,module,exports){
module.exports = {
  'A': '#FF9966',
  'C': '#009999',
  'D': '#FF0000',
  'E': '#CC0033',
  'F': '#00FF00',
  'G': '#f2f20c',
  'H': '#660033',
  'I': '#CC9933',
  'K': '#663300',
  'L': '#FF9933',
  'M': '#CC99CC',
  'N': '#336666',
  'P': '#0099FF',
  'Q': '#6666CC',
  'R': '#990000',
  'S': '#0000FF',
  'T': '#00FFFF',
  'V': '#FFCC33',
  'W': '#66CC66',
  'Y': '#006600'
};

},{}],27:[function(require,module,exports){
module.exports = {
    'A': '#cbf751',
    'C': '#5ec0cc',
    'G': '#ffdf59',
    'T': '#b51f16',
    'U': '#b51f16'
  };

},{}],28:[function(require,module,exports){
var $ = require("jbone");

module.exports = function($el,logo, logo_graphic){

  $el.find('.logo_settings_switch, .logo_settings .close').on('click', function (e) {
    e.preventDefault();
    $('.logo_settings').toggle();
  });

  $el.find('.logo_reset').on('click', function (e) {
    e.preventDefault();
    logo.changeZoom({'target': logo.default_zoom});
  });

  $el.find('.logo_change').on('click', function (e) {
    e.preventDefault();
  });

  $el.find('.logo_zoomin').on('click', function (e) {
    e.preventDefault();
    logo.changeZoom({'distance': 0.1, 'direction': '+'});
  });

  $el.find('.logo_zoomout').on('click', function (e) {
    e.preventDefault();
    logo.changeZoom({'distance': 0.1, 'direction': '-'});
  });

  $el.find('.logo_scale').on('change', function (e) {
    logo.toggleScale(this.value);
  });

  $el.find('.logo_color').on('change', function (e) {
    logo.toggleColorscheme(this.value);
  });

  $el.find('.logo_ali_map').on('change', function (e) {
    logo.toggleAliMap(this.value);
  });

  $el.find('.logo_position').on('change', function () {
    if (!this.value.match(/^\d+$/m)) {
      return;
    }
    logo.scrollToColumn(this.value, 1);
  });

  logo_graphic.on('dblclick', function (e) {
    // need to get coordinates of mouse click
    console.log("dblclick", logo);

    offset = logo.logo_graphic.offset(),
    x = parseInt((e.pageX - offset.left), 10),

    // get mouse position in the window
    window_position = e.pageX - $el.parent().offset().left,

    // get column number
    col = logo.columnFromCoordinates(x),

    console.log("col", col);

    // choose new zoom level and zoom in.
    current = logo.zoom;

    if (current < 1) {
      logo.changeZoom({'target': 1, offset: window_position, column: col});
    } else {
      logo.changeZoom({'target': 0.3, offset: window_position, column: col});
    }

    return;
  });

  $(document).on($el.attr('id') + ".scrolledTo", function (e, left, top, zoom) {
    logo.render({target: left});
  });

  $(document).on('keydown', function (e) {
    if (!e.ctrlKey) {
      if (e.which === 61 || e.which === 107) {
        zoom += 0.1;
        logo.changeZoom({'distance': 0.1, 'direction': '+'});
      }
      if (e.which === 109 || e.which === 0) {
        zoom = zoom - 0.1;
        logo.changeZoom({'distance': 0.1, 'direction': '-'});
      }
    }
  });
}

},{"jbone":42}],29:[function(require,module,exports){
_ = require("underscore");

//var ConsensusColors = require("./consensusColors.js");
var canvasSupport = require("./canvasSupport.js");
var render = require("./render/render.js");
var Letter = require("./model/letter.js");
var view = require("backbone-viewj");
var axis = require("./axis");
var eventListener = require("./eventListener.js");
var settings = require("./info/settings.js");

var jbone = require("jbone");

module.exports = view.extend({

  options: {
    xaxis: true,
    yaxis: true,
    height: 300,
    column_width: 34,
    debug: true,
    scale_height_enabled: true,
    scaled_max: true,
    zoom_buttons: true,
    colorscheme: 'default',
    data: undefined,
    start: 1,
    end: undefined,
    zoom: 0.4,
    colors: undefined,
    divider: false,
    show_probs: false,
    divider_step: 5,
    show_divider: false,
    border: false,
    settings: false,
    scroller: true,
    positionMarker: true
  },

  loadDefault: function(options){
    this.data = options.data;

    // never show the alignment coordinates by default as that would get
    // really confusing.
    this.display_ali_map = 0;

    this.alphabet = options.data.alphabet || 'dna';

    this.start = options.start;
    //this.end = options.end || this.data.heightArr.length;
    this.zoom = parseFloat(options.zoom) || 0.4;
    this.default_zoom = this.zoom;

    this.column_width = options.column_width;
    this.height = options.height;
    this.canvas_width = 5000;
    this.scale_height_enabled = options.scale_height_enabled;

    // this needs to be set to null here so that we can initialise it after
    // the render function has fired and the width determined.
    this.scrollme = null;

    this.previous_target = 0;
    // keeps track of which canvas elements have been drawn and which ones haven't.
    this.rendered = [];
    this.previous_zoom = 0;

    if(this.data.max_height == undefined){
      this.data.max_height = this.calcMaxHeight(this.data.heightArr); 
    }

    // only show insert when we actually have the data
    if(!this.data.insert_probs || !this.data.delete_probs){
      this.options.show_probs = false;
    }

    if (options.scaled_max) {
      this.data.max_height = options.data.max_height_obs || this.data.max_height || 2;
    } else {
      this.data.max_height = options.data.max_height_theory || this.data.max_height || 2;
    }

    if(options.colors){
      this.changeColors(options.colors);
    }else{
      if (this.alphabet === 'aa') {
        this.aa_colors = require("./colors/aa.js");
        this.changeColors(this.aa_colors);
      }else{
        this.dna_colors = require("./colors/dna.js");
        this.changeColors(this.dna_colors);
      }
    }
  },
  initialize: function(options) {
    if (!canvasSupport()) {
      this.el.textContent = "Your browser doesn't support canvas.";
      return;
    }
    if(options.data == undefined){
      this.el.textContent = "No data added.";
    }

    // load default settings
    _.extend(this.options,options);
    var opt = this.options;
    this.loadDefault(opt);

    if(!this.options.show_probs){
      this.info_content_height = this.height;
    }else{
      // turn off the insert rows if the hmm used the observed or weighted processing flags.
      if (this.data.processing && /^observed|weighted/.test(this.data.processing)) {
        this.show_inserts = 0;
        this.info_content_height = this.height - 14;
      } else {
        this.show_inserts = 1;
        this.info_content_height = this.height - 44;
      }
    }
    this.$el = jbone(this.el);

    this.initDivs();

    if(this.options.settings){
      var form = settings(this,opt);
      this.$el.append(form);
    }

    eventListener(this.$el,this, this.logo_graphic);
    /*
       if (opt.columnInfo) {
       var columnInfo = require("./info/column_info.js");
       columnInfo(this);
       }
       */

  },
  initDivs: function(){
    var logo_graphic = mk("div");
    logo_graphic.className = "logo_graphic";
    this.logo_graphic = jbone(logo_graphic);

    var container = mk("div");
    container.className = "logo_container";
    container.style.height = this.height;
    this.container = jbone(container);

    this.container.append(logo_graphic);

    // add some internal divs for scrolling etc.
    this.$el.append(container);

    if(this.options.divider){
      var divider = mk("div");
      divider.className = "logo_divider";
      this.$el.append(divider);
    }

    this.dom_element = jbone(logo_graphic);
    this.called_on = this.$el;

    if(this.options.xaxis){
      axis.render_x_axis_label.call(this);
    }
    if(this.options.yaxis){
      axis.render_y_axis_label.call(this);
    }else{
      this.container[0].style.marginLeft = "0px";
    }

  },

  render: function(){
    render.call(this); 
    return this;
  },

  changeColors: function(colors){
    this.colors = colors;
    var bUseColorObject = (colors != undefined && colors.type != undefined);
    if(bUseColorObject){
      this.colorscheme = "dynamic";
    }
    this.buildAlphabet();
  },

  buildAlphabet: function(){
    /*
       if (this.alphabet === 'aa') {
       var probs_arr = this.data.probs_arr;
       if (probs_arr) {
       var cc = new ConsensusColors();
       this.cmap = cc.color_map(probs_arr);
       }
       }
       */

    //build the letter canvases
    this.letters = {};
    var colors = this.colors;
    if(this.colorscheme == "dynamic"){
      var tColors = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split('');
      colors = {};
      tColors.forEach(function(e){
        colors[e] = "";
      });
    }
    for (var letter in colors) {
      if (colors.hasOwnProperty(letter)) {
        var loptions = {color: colors[letter]};
        this.letters[letter] = new Letter(letter, loptions);
      }
    }
  },

  toggleColorscheme: function (scheme) {
    // work out the current column we are on so we can return there
    var col_total = this.currentColumn();

    if (scheme) {
      if (scheme === 'default') {
        this.colorscheme = 'default';
      } else {
        this.colorscheme = 'consensus';
      }
    } else {
      if (this.colorscheme === 'default') {
        this.colorscheme = 'consensus';
      } else {
        this.colorscheme = 'default';
      }
    }

    // reset the rendered counter so that each section will re-render
    // with the new heights
    this.rendered = [];

    // re-flow and re-render the content
    this.scrollme.reflow();
    //scroll off by one to force a render of the canvas.
    this.scrollToColumn(col_total + 1);
    //scroll back to the location we started at.
    this.scrollToColumn(col_total);
  },

  toggleScale: function (scale) {
    // work out the current column we are on so we can return there
    var col_total = this.currentColumn();

    if (scale) {
      if (scale === 'obs') {
        this.data.max_height = this.data.max_height_obs;
      } else {
        this.data.max_height = this.data.max_height_theory;
      }
    } else {
      // toggle the max height
      if (this.data.max_height === this.data.max_height_obs) {
        this.data.max_height = this.data.max_height_theory;
      } else {
        this.data.max_height = this.data.max_height_obs;
      }
    }
    // reset the rendered counter so that each section will re-render
    // with the new heights
    this.rendered = [];
    //update the y-axis
    if(this.logoYAxis){
      this.logoYAxis.remove();
      //this.called_on.find('.logo_yaxis').remove();
    }
    axis.render_y_axis_label.call(this);

    // re-flow and re-render the content
    this.scrollme.reflow();
    //scroll off by one to force a render of the canvas.
    this.scrollToColumn(col_total + 1);
    //scroll back to the location we started at.
    this.scrollToColumn(col_total);
  },
  toggleAliMap: function (coords) {
    // work out the current column we are on so we can return there
    var col_total = this.currentColumn();

    if (coords) {
      if (coords === 'model') {
        this.display_ali_map = 0;
      } else {
        this.display_ali_map = 1;
      }
    } else {
      // toggle the max height
      if (this.display_ali_map === 1) {
        this.display_ali_map = 0;
      } else {
        this.display_ali_map = 1;
      }
    }
    axis.render_x_axis_label(this);

    // reset the rendered counter so that each section will re-render
    // with the new heights
    this.rendered = [];

    // re-flow and re-render the content
    this.scrollme.reflow();
    //scroll off by one to force a render of the canvas.
    this.scrollToColumn(col_total + 1);
    //scroll back to the location we started at.
    this.scrollToColumn(col_total);
  },

  currentColumn: function () {
    var before_left = this.scrollme.scroller.getValues().left,
    col_width = (this.column_width * this.zoom),
    col_count = before_left / col_width,
    half_visible_columns = (this.container.width() / col_width) / 2,
    col_total = Math.ceil(col_count + half_visible_columns);
    return col_total;
  },

  changeZoom: function (options) {
    var zoom_level = 0.3,
    expected_width = null;
    if (options.target) {
      zoom_level = options.target;
    } else if (options.distance) {
      zoom_level = (parseFloat(this.zoom) - parseFloat(options.distance)).toFixed(1);
      if (options.direction === '+') {
        zoom_level = (parseFloat(this.zoom) + parseFloat(options.distance)).toFixed(1);
      }
    }

    if (zoom_level > 1) {
      zoom_level = 1;
    } else if (zoom_level < 0.1) {
      zoom_level = 0.1;
    }

    // see if we need to zoom or not
    expected_width = (this.logo_graphic.width() * zoom_level) / this.zoom;
    if (expected_width > this.container.width()) {
      // if a center is not specified, then use the current center of the view
      if (!options.column) {
        //work out my current position
        var col_total = this.currentColumn();

        this.zoom = zoom_level;
        this.render({zoom: this.zoom});
        this.scrollme.reflow();

        //scroll to previous position
        this.scrollToColumn(col_total);
      } else { // center around the mouse click position.
        this.zoom = zoom_level;
        this.render({zoom: this.zoom});
        this.scrollme.reflow();

        var coords = this.coordinatesFromColumn(options.column);
        this.scrollme.scroller.scrollTo(coords - options.offset);
      }
    }
    return this.zoom;

  },

  columnFromCoordinates: function (x) {
    var column = Math.ceil(x / (this.column_width * this.zoom));
    return column;
  },

  coordinatesFromColumn: function (col) {
    var new_column = col - 1,
    x = (new_column  * (this.column_width * this.zoom)) + ((this.column_width * this.zoom) / 2);
    return x;
  },

  scrollToColumn: function (num, animate) {
    var half_view = (this.logo_container.width() / 2),
    new_left = this.coordinatesFromColumn(num);
    this.scrollme.scroller.scrollTo(new_left - half_view, 0, animate);
  },
  calcMaxHeight: function(columns){
    // loops over all columns and return the max height seen 
    return columns.reduce(function(m,c){
      var col = 0;
      for(var k in c){
        col += c[k];
      }
      return col > m ? col : m;
    },0);
  }


});

var mk = function(name){
  return document.createElement(name);
}

},{"./axis":24,"./canvasSupport.js":25,"./colors/aa.js":26,"./colors/dna.js":27,"./eventListener.js":28,"./info/settings.js":30,"./model/letter.js":31,"./render/render.js":35,"backbone-viewj":9,"jbone":42,"underscore":66}],30:[function(require,module,exports){
var $ = require("jbone");

module.exports = function(logo,options){
  var form = $('<form class="logo_form"><fieldset><label for="position">Column number</label>' +
               '<input type="text" name="position" class="logo_position"></input>' +
               '<button class="button logo_change">Go</button></fieldset>' +
               '</form>');

  var settings = $('<div class="logo_settings"></div>');
  settings.append('<span class="close">x</span>');



  /* we don't want to toggle if the max height_obs is greater than max theoretical
   * as letters will fall off the top.
   */
  if (logo.scale_height_enabled && (logo.data.max_height_obs < logo.data.max_height_theory)) {
    var obs_checked = '',
    theory_checked = '',
    theory_help = '',
    obs_help = '';

    if (logo.data.max_height_obs === logo.data.max_height) {
      obs_checked = 'checked';
    } else {
      theory_checked = 'checked';
    }
  }



  var scale_controls = '<fieldset><legend>Scale</legend>' +
    '<label><input type="radio" name="scale" class="logo_scale" value="obs" ' + obs_checked +
    '/>Maximum Observed ' + obs_help +
    '</label></br>' +
    '<label><input type="radio" name="scale" class="logo_scale" value="theory" ' + theory_checked +
    '/>Maximum Theoretical ' + theory_help +
    '</label>' +
    '</fieldset>';

  settings.append(scale_controls);

  if (logo.data.height_calc !== 'score' && logo.data.alphabet === 'aa' && logo.data.probs_arr) {

    var def_color = null,
    con_color = null,
    def_help = '',
    con_help = '';

    if (logo.colorscheme === 'default') {
      def_color = 'checked';
    } else {
      con_color = 'checked';
    };

    if (options.help) {
      def_help = '<a class="help" href="/help#colors_default" title="Each letter receives its own color.">' +
        '<span aria-hidden="true" data-icon="?"></span><span class="reader-text">help</span></a>';
      con_help = '<a class="help" href="/help#colors_consensus" title="Letters are colored as in Clustalx and Jalview, with colors depending on composition of the column.">' +
        '<span aria-hidden="true" data-icon="?"></span><span class="reader-text">help</span></a>';
    }

    var color_controls = '<fieldset><legend>Color Scheme</legend>' +
      '<label><input type="radio" name="color" class="logo_color" value="default" ' + def_color +
      '/>Default ' + def_help +
      '</label></br>' +
      '<label><input type="radio" name="color" class="logo_color" value="consensus" ' + con_color +
      '/>Consensus Colors ' + con_help +
      '</label>' +
      '</fieldset>';
    settings.append(color_controls);
  }


  if (logo.data.ali_map) {
    var mod_checked = null,
    ali_checked = null,
    mod_help = '',
    ali_help = '';

    if (logo.display_ali_map === 0) {
      mod_checked = 'checked';
    } else {
      ali_checked = 'checked';
    }

    if (options.help) {
      mod_help = '<a class="help" href="/help#coords_model" title="The coordinates along the top of the plot show the model position.">' +
        '<span aria-hidden="true" data-icon="?"></span><span class="reader-text">help</span></a>';
      ali_help = '<a class="help" href="/help#coords_ali" title="The coordinates along the top of the plot show the column in the alignment associated with the model">' +
        '<span aria-hidden="true" data-icon="?"></span><span class="reader-text">help</span></a>';
    }

    var ali_controls = '<fieldset><legend>Coordinates</legend>' +
      '<label><input type="radio" name="coords" class="logo_ali_map" value="model" ' + mod_checked +
      '/>Model ' + mod_help +
      '</label></br>' +
      '<label><input type="radio" name="coords" class="logo_ali_map" value="alignment" ' + ali_checked +
      '/>Alignment ' + ali_help +
      '</label>' +
      '</fieldset>';
    settings.append(ali_controls);
  }


  var controls = $('<div class="logo_controls"></div>');
  if (logo.zoom_enabled) {
    controls.append('<button class="logo_zoomout button">-</button>' +
                    '<button class="logo_zoomin button">+</button>');
  }

  if (settings.children().length > 0) {
    controls.append('<button class="logo_settings_switch button">Settings</button>');
    controls.append(settings);
  }

  form.append(controls);

  return form;
}

},{"jbone":42}],31:[function(require,module,exports){
module.exports = function Letter(letter, options) {
  options = options || {};
  this.value = letter;
  this.width = parseInt(options.width, 10) || 100;

  //W is 30% wider than the other letters, so need to make sure
  //it gets modified accordingly.
  if (this.value === 'W') {
    this.width += (this.width * 30) / 100;
  }

  this.height = parseInt(options.height, 10) || 100;

  this.color = options.color || '#000000';
  // if the height and width are changed from the default, then
  // this will also need to be changed as it cant be calculated
  // dynamically.
  this.fontSize = options.fontSize || 138;

  this.scaled = function () { };

  this.draw = function (ext_ctx, target_height, target_width, x, y, color) {
    var h_ratio = target_height / this.height,
    w_ratio = target_width / this.width,
    prev_font = ext_ctx.font;
    ext_ctx.transform(w_ratio, 0, 0, h_ratio, x, y);
    ext_ctx.fillStyle = color || this.color;
    ext_ctx.textAlign = "center";
    ext_ctx.font = "bold " + this.fontSize + "px Arial";

    ext_ctx.fillText(this.value, 0, 0);
    //restore the canvas settings
    ext_ctx.setTransform(1, 0, 0, 1, 0, 0);
    ext_ctx.fillStyle = '#000000';
    ext_ctx.font = prev_font;
  };

}

},{}],32:[function(require,module,exports){
module.exports = function draw_border(context, y, width) {
  context.beginPath();
  context.moveTo(0, y);
  context.lineTo(width, y);
  context.lineWidth = 1;
  context.strokeStyle = "#999999";
  context.stroke();
}

},{}],33:[function(require,module,exports){
module.exports = function draw_column_number(context, x, y, col_width, col_num, fontsize, right) {
  context.font = fontsize + "px Arial";
  context.textAlign = right ? "right" : "center";
  context.fillStyle = "#666666";
  context.fillText(col_num, x + (col_width / 2), y);
}

},{}],34:[function(require,module,exports){
module.exports = function draw_ticks(context, x, y, height, color) {
  color = color || '#999999';
  context.beginPath();
  context.moveTo(x, y);
  context.lineTo(x, y + height);
  context.lineWidth = 1;
  context.strokeStyle = color;
  context.stroke();
}

},{}],35:[function(require,module,exports){
var renderWithText = require("./render_with_text.js");
var renderWithRect = require("./render_with_rects.js");
var jbone = require("jbone");

// the main render function that draws the logo based on the provided options.
module.exports = function (options) {
  if (!this.data) {
    return;
  }
  options    = options || {};
  var zoom   = options.zoom || this.zoom,
  target = options.target || 1,
  scaled = options.scaled || null;
  var parent_width = this.dom_element.parent().attr('width'),
  max_canvas_width = 1,
  end = null,
  start = null,
  i = 0;

  /*
  if (target === this.previous_target) {
    return;
  }
  */

  this.previous_target = target;


  if (options.start) {
    this.start = options.start;
  }
  if (options.end) {
    this.end = options.end;
  }

  if (zoom <= 0.1) {
    zoom = 0.1;
  } else if (zoom >= 1) {
    zoom = 1;
  }

  this.zoom = zoom;

  end = this.end || this.data.heightArr.length;
  start = this.start || 1;
  end     = (end > this.data.heightArr.length) ? this.data.heightArr.length : end;
  end     = (end < start) ? start : end;

  start     = (start > end) ? end : start;
  start     = (start > 1) ? start : 1;

  this.y = this.height - 20;
  // Check to see if the logo will fit on the screen at full zoom.
  this.max_width = this.column_width * ((end - start) + 1);
  // If it fits then zoom out and disable zooming.
  if (parent_width > this.max_width) {
    zoom = 1;
    this.zoom_enabled = false;
  }
  this.zoom = zoom;

  this.zoomed_column = this.column_width * zoom;
  this.total_width = this.zoomed_column * ((end - start) + 1);

  // If zoom is not maxed and we still aren't filling the window
  // then ramp up the zoom level until it fits, then disable zooming.
  // Then we get a decent logo with out needing to zoom in or out.
  if (zoom < 1) {
    while (this.total_width < parent_width) {
      this.zoom += 0.1;
      this.zoomed_column = this.column_width * this.zoom;
      this.total_width = this.zoomed_column * ((end - start) + 1);
      this.zoom_enabled = false;
      if (zoom >= 1) {
        break;
      }
    }
  }

  if (target > this.total_width) {
    target = this.total_width;
  }
  this.dom_element.attr({'width': this.total_width + 'px'}).css({width: this.total_width + 'px'});

  this.canvas_width = this.total_width;
  var canvas_count = Math.ceil(this.total_width / this.canvas_width);
  this.columns_per_canvas = Math.ceil(this.canvas_width / this.zoomed_column);


  if (this.previous_zoom !== this.zoom) {
    this.dom_element.find('canvas').remove();
    this.previous_zoom = this.zoom;
    this.rendered = [];
  }

  this.canvases = [];
  this.contexts = [];


  for (i = 0; i < canvas_count; i++) {

    var split_start = (this.columns_per_canvas * i) + start,
    split_end   = split_start + this.columns_per_canvas - 1;
    if (split_end > end) {
      split_end = end;
    }

    var adjusted_width = ((split_end - split_start) + 1) * this.zoomed_column;

    if (adjusted_width > max_canvas_width) {
      max_canvas_width = adjusted_width;
    }

    var canv_start = max_canvas_width * i,
    canv_end = canv_start + adjusted_width;

    if (target < canv_end + (canv_end / 2) && target > canv_start - (canv_start / 2)) {
      // Check that we aren't redrawing the canvas and if not, then attach it and draw.
      //if (this.rendered[i] !== 1) {

        this.canvases[i] = attach_canvas(this.dom_element, this.height, adjusted_width, i, max_canvas_width);
        this.contexts[i] = this.canvases[i].getContext('2d');
        this.contexts[i].setTransform(1, 0, 0, 1, 0, 0);
        this.contexts[i].clearRect(0, 0, adjusted_width, this.height);
        this.contexts[i].fillStyle = "#ffffff";
        this.contexts[i].fillRect(0, 0, canv_end, this.height);


        if (this.zoomed_column > 12) {
          var fontsize = parseInt(10 * zoom, 10);
          fontsize = (fontsize > 10) ? 10 : fontsize;
          if (this.debug) {
            renderWithRect.call(this,split_start, split_end, i, 1);
          }
          renderWithText.call(this,split_start, split_end, i, fontsize);
        } else {
          renderWithRect.call(this,split_start, split_end, i);
        }
        //this.rendered[i] = 1;
      //}
    }

  }

  // check if the scroller object has been initialised and if not then do so.
  // we do this here as opposed to at object creation, because we need to
  // make sure the logo has been rendered and the width is correct, otherwise
  // we get a weird initial state where the canvas will bounce back to the
  // beginning the first time it is scrolled, because it thinks it has a
  // width of 0.
  if (!this.scrollme && this.options.scroller) {
    this.scrollme = new EasyScroller(this.dom_element[0], {
      scrollingX: 1,
      scrollingY: 0,
      eventTarget: this.called_on
    });
  }

  if (target !== 1) {
    this.scrollme.reflow();
  }
  return;
};


function attach_canvas(DOMid, height, width, id, canv_width) {
  var canvas = jbone(DOMid).find('#canv_' + id);

  if (!canvas.length) {
    jbone(DOMid).append('<canvas class="canvas_logo" id="canv_' + id + '"  height="' + height + '" width="' + width + '" style="left:' + canv_width * id + 'px"></canvas>');
    canvas = jbone(DOMid).find('#canv_' + id);
  }

  jbone(canvas).attr('width', width).attr('height', height);

  return canvas[0];
}

},{"./render_with_rects.js":36,"./render_with_text.js":37,"jbone":42}],36:[function(require,module,exports){
var draw_border = require("./draw/border.js");
var draw_ticks = require("./draw/ticks.js");
var draw_column_number = require("./draw/column_number.js");

module.exports = function (start, end, context_num, borders) {
  var x = 0,
  column_num = start,
  column_label = null,
  i = 0,
  top_height = Math.abs(this.data.max_height),
  bottom_height = Math.abs(this.data.min_height_obs),
  total_height = top_height + bottom_height,
  top_percentage    = Math.round((Math.abs(this.data.max_height) * 100) / total_height),
  //convert % to pixels
  top_pix_height = Math.round((this.info_content_height * top_percentage) / 100),
  bottom_pix_height = this.info_content_height - top_pix_height,
  mod = 10;


  for (i = start; i <= end; i++) {
    if (this.data.mmline && this.data.mmline[i - 1] === 1) {
      this.contexts[context_num].fillStyle = '#cccccc';
      this.contexts[context_num].fillRect(x, 10, this.zoomed_column, this.height - 40);
    } else {
      var column = this.data.heightArr[i - 1],
      previous_height = 0,
      previous_neg_height = top_pix_height,
      letters = column.length,
      j = 0;
      for(var j in column){
        values = [j,column[j]];
        if (values[1] > 0.01) {
          var letter_height = parseFloat(values[1]) / this.data.max_height,
          x_pos = x,
          glyph_height = (this.info_content_height - 2) * letter_height,
          y_pos = (this.info_content_height - 2) - previous_height - glyph_height,
          color = null;


          if(this.colorscheme === 'dynamic'){
            color = this.colors.getColor(values[0], {pos: i - 1} )
          }else{
            if(this.colorscheme === 'consensus') {
              color = this.cmap[i - 1][values[0]] || "#7a7a7a";
            } else {
              color = this.colors[values[0]];
            }
          }

          if (borders) {
            this.contexts[context_num].strokeStyle = color;
            this.contexts[context_num].strokeRect(x_pos, y_pos, this.zoomed_column, glyph_height);
          } else {
            this.contexts[context_num].fillStyle = color;
            this.contexts[context_num].fillRect(x_pos, y_pos, this.zoomed_column, glyph_height);
          }

          previous_height = previous_height + glyph_height;
        }
      }
    }


    if (this.zoom < 0.2) {
      mod = 20;
    } else if (this.zoom < 0.3) {
      mod = 10;
    }

    if(this.options.positionMarker){
      if (i % mod === 0) {
        // draw column dividers
        if(this.options.show_probs){
          draw_ticks(this.contexts[context_num], x + this.zoomed_column, this.height - 30, parseFloat(this.height), '#dddddd');
        }
        // draw top ticks
        draw_ticks(this.contexts[context_num], x + this.zoomed_column, 0, 5);

        // if ali_coordinates exist and toggle is set then display the
        // alignment coordinates and not the model coordinates.
        if (this.display_ali_map) {
          column_label = this.data.ali_map[i - 1];
        } else {
          column_label = column_num;
        }
        // draw column numbers
        draw_column_number(this.contexts[context_num], x - 2,  10, this.zoomed_column, column_label, 10, true);
      }

    }


    // draw insert probabilities/lengths
    if(this.options.show_probs){
      draw_small_insert(
        this.contexts[context_num],
        x,
        this.height - 42,
        this.zoomed_column,
        this.data.insert_probs[i - 1],
        this.data.insert_lengths[i - 1],
        this.data.delete_probs[i - 1],
        this.show_inserts
      );
    }

    if(this.options.show_probs){
      // draw other dividers
      if (this.show_inserts) {
        draw_border(this.contexts[context_num], this.height - 45, this.total_width);
      } else {
        draw_border(this.contexts[context_num], this.height - 15, this.total_width);
      }
    }

    if(this.options.border){
      draw_border(this.contexts[context_num], 0, this.total_width);
    }

    x += this.zoomed_column;
    column_num++;
  }

};


function draw_small_insert(context, x, y, col_width, in_odds, in_length, del_odds, show_inserts) {
  var fill = "#ffffff";
  if (show_inserts) {
    if (in_odds > 0.1) {
      fill = '#d7301f';
    } else if (in_odds > 0.05) {
      fill = '#fc8d59';
    } else if (in_odds > 0.03) {
      fill = '#fdcc8a';
    }
    context.fillStyle = fill;
    context.fillRect(x, y + 15, col_width, 10);

    fill = "#ffffff";
    // draw insert length
    if (in_length > 9) {
      fill = '#d7301f';
    } else if (in_length > 7) {
      fill = '#fc8d59';
    } else if (in_length > 4) {
      fill = '#fdcc8a';
    }
    context.fillStyle = fill;
    context.fillRect(x, y + 30, col_width, 10);
  } else {
    y  = y + 30;
  }

  fill = "#ffffff";
  // draw delete odds
  if (del_odds < 0.75) {
    fill = '#2171b5';
  } else if (del_odds < 0.85) {
    fill = '#6baed6';
  } else if (del_odds < 0.95) {
    fill = '#bdd7e7';
  }
  context.fillStyle = fill;
  context.fillRect(x, y, col_width, 10);
}



},{"./draw/border.js":32,"./draw/column_number.js":33,"./draw/ticks.js":34}],37:[function(require,module,exports){
var draw_border = require("./draw/border.js");
var draw_ticks = require("./draw/ticks.js");
var draw_column_number = require("./draw/column_number.js");

module.exports = function (start, end, context_num, fontsize) {
  var x = 0,
  column_num = start,
  column_label = null,
  i = 0,
  top_height = Math.abs(this.data.max_height),
  bottom_height = (isNaN(this.data.min_height_obs)) ? 0 : parseInt(this.data.min_height_obs, 10),
  total_height = top_height + Math.abs(bottom_height),
  top_percentage    = Math.round((Math.abs(this.data.max_height) * 100) / total_height),
  //convert % to pixels
  top_pix_height = Math.round((this.info_content_height * top_percentage) / 100),
  bottom_pix_height = this.info_content_height - top_pix_height,
  // this is used to transform the 256px high letters into the correct size
  // when displaying negative values, so that they fit above the 0 line.
  top_pix_conversion = top_pix_height / this.info_content_height,
  bottom_pix_conversion = bottom_pix_height / this.info_content_height;

  // add 3 extra columns so that numbers don't get clipped at the end of a canvas
  // that ends before a large column. DF0000830 was suffering at zoom level 0.6,
  // column 2215. This adds a little extra overhead, but is the easiest fix for now.
  if (end + 3 <= this.end) {
    end += 3;
  }

  for (i = start; i <= end; i++) {
    if (this.data.mmline && this.data.mmline[i - 1] === 1) {
      this.contexts[context_num].fillStyle = '#cccccc';
      this.contexts[context_num].fillRect(x, 10, this.zoomed_column, this.height - 40);
    } else {
      var column = this.data.heightArr[i - 1],
      col_positions = [];
      if (column) {
        var previous_height = 0,
        letters = column.length,
        previous_neg_height = top_pix_height,
        j = 0,
        color = null;

        for(var j in column){
          var letter = column[j],
          values = [j,letter];
          x_pos = x + (this.zoomed_column / 2),
          letter_height = null;

          // we don't render anything with a value between 0 and 0.01. These
          // letters would be too small to be meaningful on any scale, so we
          // just squash them out.
          if (values[1] > 0.01) {
            letter_height = parseFloat(values[1]) / this.data.max_height;
            var y_pos = (this.info_content_height - 2) - previous_height,
            glyph_height = (this.info_content_height - 2) * letter_height;

            col_positions[j] = [glyph_height, this.zoomed_column, x_pos, y_pos];
            previous_height = previous_height + glyph_height;
          }
        }

        // render the letters in reverse order so that the larger letters on the top
        // don't clobber the smaller letters below them.
        //for (j = letters; j >= 0; j--) {
        for(var j in column){
          if (col_positions[j] && this.letters[j]) {

            if(this.colorscheme === 'dynamic'){
              color = this.colors.getColor(j, {pos: i - 1} );
            }else{
              if (this.colorscheme === 'consensus') {
                color = this.cmap[i - 1][j] || "#7a7a7a";
              } else {
                color = null;
              }
            }
            this.letters[j].draw(this.contexts[context_num], col_positions[j][0], col_positions[j][1], col_positions[j][2], col_positions[j][3], color);
          }
        }
      }
    }


    // if ali_coordinates exist and toggle is set then display the
    // alignment coordinates and not the model coordinates.
    if (this.display_ali_map) {
      column_label = this.data.ali_map[i - 1];
    } else {
      column_label = column_num;
    }

    if(this.options.show_divider){
      if (this.zoom < 0.7) {
        if (i % this.options.divider_step === 0) {
          draw_column_divider(this,{
            context_num : context_num,
            x : x,
            fontsize: 10,
            column_num: column_label,
            ralign: true
          });
        }
      } else {
        draw_column_divider(this,{
          context_num : context_num,
          x : x,
          fontsize: fontsize,
          column_num: column_label
        });
      }
    }

    if(this.options.show_probs){
      draw_delete_odds(this.contexts[context_num], x, this.height, this.zoomed_column, this.data.delete_probs[i - 1], fontsize, this.show_inserts);
      //draw insert length ticks
      draw_ticks(this.contexts[context_num], x, this.height - 15, 5);
      if (this.show_inserts) {
        draw_insert_odds(this.contexts[context_num], x, this.height, this.zoomed_column, this.data.insert_probs[i - 1], fontsize);
        draw_insert_length(this.contexts[context_num], x, this.height - 5, this.zoomed_column, this.data.insert_lengths[i - 1], fontsize);

        // draw delete probability ticks
        draw_ticks(this.contexts[context_num], x, this.height - 45, 5);
        // draw insert probability ticks
        draw_ticks(this.contexts[context_num], x, this.height - 30, 5);
      }

    }

    x += this.zoomed_column;
    column_num++;
  }


  if(this.options.show_probs){
    // draw other dividers
    if (this.show_inserts) {
      draw_border(this.contexts[context_num], this.height - 30, this.total_width);
      draw_border(this.contexts[context_num], this.height - 45, this.total_width);
    }
    draw_border(this.contexts[context_num], this.height - 15, this.total_width);
  }
  if(this.options.border){
    draw_border(this.contexts[context_num], 0, this.total_width);
  }
};


function draw_delete_odds(context, x, height, col_width, text, fontsize, show_inserts) {
  var y        = height - 4,
  fill     = '#ffffff',
  textfill = '#555555';

  if (show_inserts) {
    y = height - 35;
  }

  if (text < 0.75) {
    fill     = '#2171b5';
    textfill = '#ffffff';
  } else if (text < 0.85) {
    fill = '#6baed6';
  } else if (text < 0.95) {
    fill = '#bdd7e7';
  }

  draw_rect_with_text(context, x, y, text, fontsize, col_width, fill, textfill);
}

function draw_rect_with_text(context, x, y, text, fontsize, col_width, fill, textfill) {
  context.font = fontsize + "px Arial";
  context.fillStyle = fill;
  context.fillRect(x, y - 10, col_width, 14);
  context.textAlign = "center";
  context.fillStyle = textfill;
  context.fillText(text, x + (col_width / 2), y);
}

function draw_column_divider(inst, opts) {
  var div_x = opts.ralign ? opts.x + inst.zoomed_column : opts.x,
  num_x = opts.ralign ? opts.x + 2 : opts.x;
  // draw column dividers
  draw_ticks(inst.contexts[opts.context_num], div_x, inst.height - 30, -30 - inst.height, '#dddddd');
  // draw top ticks
  draw_ticks(inst.contexts[opts.context_num], div_x, 0, 5);
  // draw column numbers
  draw_column_number(inst.contexts[opts.context_num], num_x, 10, inst.zoomed_column, opts.column_num, opts.fontsize, opts.ralign);
};



function draw_insert_odds(context, x, height, col_width, text, fontsize) {
  var y        = height - 20,
  fill     = '#ffffff',
  textfill = '#555555';

  if (text > 0.1) {
    fill     = '#d7301f';
    textfill = '#ffffff';
  } else if (text > 0.05) {
    fill = '#fc8d59';
  } else if (text > 0.03) {
    fill = '#fdcc8a';
  }

  draw_rect_with_text(context, x, y, text, fontsize, col_width, fill, textfill);

  //draw vertical line to indicate where the insert would occur
  if (text > 0.03) {
    draw_ticks(context, x + col_width, height - 30, -30 - height, fill);
  }
}
function draw_insert_length(context, x, y, col_width, text, fontsize) {
  var fill = '#ffffff',
  textfill = '#555555';

  if (text > 9) {
    fill     = '#d7301f';
    textfill = '#ffffff';
  } else if (text > 7) {
    fill = '#fc8d59';
  } else if (text > 4) {
    fill = '#fdcc8a';
  }
  draw_rect_with_text(context, x, y, text, fontsize, col_width, fill, textfill);
}

},{"./draw/border.js":32,"./draw/column_number.js":33,"./draw/ticks.js":34}],38:[function(require,module,exports){
/*
 * JavaScript Canvas to Blob 2.0.5
 * https://github.com/blueimp/JavaScript-Canvas-to-Blob
 *
 * Copyright 2012, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * http://www.opensource.org/licenses/MIT
 *
 * Based on stackoverflow user Stoive's code snippet:
 * http://stackoverflow.com/q/4998908
 */
var CanvasPrototype = window.HTMLCanvasElement &&
window.HTMLCanvasElement.prototype,
  hasBlobConstructor = window.Blob && (function () {
    try {
      return Boolean(new Blob());
    } catch (e) {
      return false;
    }
  }()),
  hasArrayBufferViewSupport = hasBlobConstructor && window.Uint8Array &&
  (function () {
    try {
      return new Blob([new Uint8Array(100)]).size === 100;
    } catch (e) {
      return false;
    }
  }()),
  BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder ||
  window.MozBlobBuilder || window.MSBlobBuilder,
  dataURLtoBlob = (hasBlobConstructor || BlobBuilder) && window.atob &&
  window.ArrayBuffer && window.Uint8Array && function (dataURI) {
    var byteString,
    arrayBuffer,
    intArray,
      i,
      mimeString,
        bb;
    if (dataURI.split(',')[0].indexOf('base64') >= 0) {
      // Convert base64 to raw binary data held in a string:
      byteString = atob(dataURI.split(',')[1]);
    } else {
      // Convert base64/URLEncoded data component to raw binary data:
      byteString = decodeURIComponent(dataURI.split(',')[1]);
    }
    // Write the bytes of the string to an ArrayBuffer:
    arrayBuffer = new ArrayBuffer(byteString.length);
    intArray = new Uint8Array(arrayBuffer);
    for (i = 0; i < byteString.length; i += 1) {
      intArray[i] = byteString.charCodeAt(i);
    }
    // Separate out the mime component:
    mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
    // Write the ArrayBuffer (or ArrayBufferView) to a blob:
    if (hasBlobConstructor) {
      return new Blob(
          [hasArrayBufferViewSupport ? intArray : arrayBuffer],
          {type: mimeString}
          );
    }
    bb = new BlobBuilder();
    bb.append(arrayBuffer);
    return bb.getBlob(mimeString);
  };
if (window.HTMLCanvasElement && !CanvasPrototype.toBlob) {
  if (CanvasPrototype.mozGetAsFile) {
    CanvasPrototype.toBlob = function (callback, type, quality) {
      if (quality && CanvasPrototype.toDataURL && dataURLtoBlob) {
        callback(dataURLtoBlob(this.toDataURL(type, quality)));
      } else {
        callback(this.mozGetAsFile('blob', type));
      }
    };
  } else if (CanvasPrototype.toDataURL && dataURLtoBlob) {
    CanvasPrototype.toBlob = function (callback, type, quality) {
      callback(dataURLtoBlob(this.toDataURL(type, quality)));
    };
  }
}

module.exports = dataURLtoBlob;

},{}],39:[function(require,module,exports){
/* FileSaver.js
 *  A saveAs() FileSaver implementation.
 *  2014-05-27
 *
 *  By Eli Grey, http://eligrey.com
 *  License: X11/MIT
 *    See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md
 */

/*global self */
/*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */

/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */

var saveAs = saveAs
  // IE 10+ (native saveAs)
  || (typeof navigator !== "undefined" &&
      navigator.msSaveOrOpenBlob && navigator.msSaveOrOpenBlob.bind(navigator))
  // Everyone else
  || (function(view) {
	"use strict";
	// IE <10 is explicitly unsupported
	if (typeof navigator !== "undefined" &&
	    /MSIE [1-9]\./.test(navigator.userAgent)) {
		return;
	}
	var
		  doc = view.document
		  // only get URL when necessary in case Blob.js hasn't overridden it yet
		, get_URL = function() {
			return view.URL || view.webkitURL || view;
		}
		, save_link = doc.createElementNS("http://www.w3.org/1999/xhtml", "a")
		, can_use_save_link = !view.externalHost && "download" in save_link
		, click = function(node) {
			var event = doc.createEvent("MouseEvents");
			event.initMouseEvent(
				"click", true, false, view, 0, 0, 0, 0, 0
				, false, false, false, false, 0, null
			);
			node.dispatchEvent(event);
		}
		, webkit_req_fs = view.webkitRequestFileSystem
		, req_fs = view.requestFileSystem || webkit_req_fs || view.mozRequestFileSystem
		, throw_outside = function(ex) {
			(view.setImmediate || view.setTimeout)(function() {
				throw ex;
			}, 0);
		}
		, force_saveable_type = "application/octet-stream"
		, fs_min_size = 0
		, deletion_queue = []
		, process_deletion_queue = function() {
			var i = deletion_queue.length;
			while (i--) {
				var file = deletion_queue[i];
				if (typeof file === "string") { // file is an object URL
					get_URL().revokeObjectURL(file);
				} else { // file is a File
					file.remove();
				}
			}
			deletion_queue.length = 0; // clear queue
		}
		, dispatch = function(filesaver, event_types, event) {
			event_types = [].concat(event_types);
			var i = event_types.length;
			while (i--) {
				var listener = filesaver["on" + event_types[i]];
				if (typeof listener === "function") {
					try {
						listener.call(filesaver, event || filesaver);
					} catch (ex) {
						throw_outside(ex);
					}
				}
			}
		}
		, FileSaver = function(blob, name) {
			// First try a.download, then web filesystem, then object URLs
			var
				  filesaver = this
				, type = blob.type
				, blob_changed = false
				, object_url
				, target_view
				, get_object_url = function() {
					var object_url = get_URL().createObjectURL(blob);
					deletion_queue.push(object_url);
					return object_url;
				}
				, dispatch_all = function() {
					dispatch(filesaver, "writestart progress write writeend".split(" "));
				}
				// on any filesys errors revert to saving with object URLs
				, fs_error = function() {
					// don't create more object URLs than needed
					if (blob_changed || !object_url) {
						object_url = get_object_url(blob);
					}
					if (target_view) {
						target_view.location.href = object_url;
					} else {
						window.open(object_url, "_blank");
					}
					filesaver.readyState = filesaver.DONE;
					dispatch_all();
				}
				, abortable = function(func) {
					return function() {
						if (filesaver.readyState !== filesaver.DONE) {
							return func.apply(this, arguments);
						}
					};
				}
				, create_if_not_found = {create: true, exclusive: false}
				, slice
			;
			filesaver.readyState = filesaver.INIT;
			if (!name) {
				name = "download";
			}
			if (can_use_save_link) {
				object_url = get_object_url(blob);
				save_link.href = object_url;
				save_link.download = name;
				click(save_link);
				filesaver.readyState = filesaver.DONE;
				dispatch_all();
				return;
			}
			// Object and web filesystem URLs have a problem saving in Google Chrome when
			// viewed in a tab, so I force save with application/octet-stream
			// http://code.google.com/p/chromium/issues/detail?id=91158
			if (view.chrome && type && type !== force_saveable_type) {
				slice = blob.slice || blob.webkitSlice;
				blob = slice.call(blob, 0, blob.size, force_saveable_type);
				blob_changed = true;
			}
			// Since I can't be sure that the guessed media type will trigger a download
			// in WebKit, I append .download to the filename.
			// https://bugs.webkit.org/show_bug.cgi?id=65440
			if (webkit_req_fs && name !== "download") {
				name += ".download";
			}
			if (type === force_saveable_type || webkit_req_fs) {
				target_view = view;
			}
			if (!req_fs) {
				fs_error();
				return;
			}
			fs_min_size += blob.size;
			req_fs(view.TEMPORARY, fs_min_size, abortable(function(fs) {
				fs.root.getDirectory("saved", create_if_not_found, abortable(function(dir) {
					var save = function() {
						dir.getFile(name, create_if_not_found, abortable(function(file) {
							file.createWriter(abortable(function(writer) {
								writer.onwriteend = function(event) {
									target_view.location.href = file.toURL();
									deletion_queue.push(file);
									filesaver.readyState = filesaver.DONE;
									dispatch(filesaver, "writeend", event);
								};
								writer.onerror = function() {
									var error = writer.error;
									if (error.code !== error.ABORT_ERR) {
										fs_error();
									}
								};
								"writestart progress write abort".split(" ").forEach(function(event) {
									writer["on" + event] = filesaver["on" + event];
								});
								writer.write(blob);
								filesaver.abort = function() {
									writer.abort();
									filesaver.readyState = filesaver.DONE;
								};
								filesaver.readyState = filesaver.WRITING;
							}), fs_error);
						}), fs_error);
					};
					dir.getFile(name, {create: false}, abortable(function(file) {
						// delete file if it already exists
						file.remove();
						save();
					}), abortable(function(ex) {
						if (ex.code === ex.NOT_FOUND_ERR) {
							save();
						} else {
							fs_error();
						}
					}));
				}), fs_error);
			}), fs_error);
		}
		, FS_proto = FileSaver.prototype
		, saveAs = function(blob, name) {
			return new FileSaver(blob, name);
		}
	;
	FS_proto.abort = function() {
		var filesaver = this;
		filesaver.readyState = filesaver.DONE;
		dispatch(filesaver, "abort");
	};
	FS_proto.readyState = FS_proto.INIT = 0;
	FS_proto.WRITING = 1;
	FS_proto.DONE = 2;

	FS_proto.error =
	FS_proto.onwritestart =
	FS_proto.onprogress =
	FS_proto.onwrite =
	FS_proto.onabort =
	FS_proto.onerror =
	FS_proto.onwriteend =
		null;

	view.addEventListener("unload", process_deletion_queue, false);
	saveAs.unload = function() {
		process_deletion_queue();
		view.removeEventListener("unload", process_deletion_queue, false);
	};
	return saveAs;
}(
	   typeof self !== "undefined" && self
	|| typeof window !== "undefined" && window
	|| this.content
));
// `self` is undefined in Firefox for Android content script context
// while `this` is nsIContentFrameMessageManager
// with an attribute `content` that corresponds to the window

amdDefine = window.define;
if( typeof amdDefine === "undefined" && (typeof window.almond !== "undefined" 
    && "define" in window.almond )){
  amdDefine = window.almond.define;
}

if (typeof module !== "undefined" && module !== null) {
  module.exports = saveAs;
} else if ((typeof amdDefine !== "undefined" && amdDefine !== null) && (amdDefine.amd != null)) {
  amdDefine("saveAs",[], function() {
    return saveAs;
  });
}

},{}],40:[function(require,module,exports){
module.exports = function (css, customDocument) {
  var doc = customDocument || document;
  if (doc.createStyleSheet) {
    var sheet = doc.createStyleSheet()
    sheet.cssText = css;
    return sheet.ownerNode;
  } else {
    var head = doc.getElementsByTagName('head')[0],
        style = doc.createElement('style');

    style.type = 'text/css';

    if (style.styleSheet) {
      style.styleSheet.cssText = css;
    } else {
      style.appendChild(doc.createTextNode(css));
    }

    head.appendChild(style);
    return style;
  }
};

module.exports.byUrl = function(url) {
  if (document.createStyleSheet) {
    return document.createStyleSheet(url).ownerNode;
  } else {
    var head = document.getElementsByTagName('head')[0],
        link = document.createElement('link');

    link.rel = 'stylesheet';
    link.href = url;

    head.appendChild(link);
    return link;
  }
};

},{}],41:[function(require,module,exports){
var Utils = {};


/*
Remove an element and provide a function that inserts it into its original position
https://developers.google.com/speed/articles/javascript-dom
@param element {Element} The element to be temporarily removed
@return {Function} A function that inserts the element into its original position
 */

Utils.removeToInsertLater = function(element) {
  var nextSibling, parentNode;
  parentNode = element.parentNode;
  nextSibling = element.nextSibling;
  parentNode.removeChild(element);
  return function() {
    if (nextSibling) {
      parentNode.insertBefore(element, nextSibling);
    } else {
      parentNode.appendChild(element);
    }
  };
};


/*
fastest possible way to destroy all sub nodes (aka childs)
http://jsperf.com/innerhtml-vs-removechild/15
@param element {Element} The element for which all childs should be removed
 */

Utils.removeAllChilds = function(element) {
  var count;
  count = 0;
  while (element.firstChild) {
    count++;
    element.removeChild(element.firstChild);
  }
};

module.exports = Utils;

},{}],42:[function(require,module,exports){
/*!
 * jBone v1.0.22 - 2015-02-12 - Library for DOM manipulation
 *
 * https://github.com/kupriyanenko/jbone
 *
 * Copyright 2015 Alexey Kupriyanenko
 * Released under the MIT license.
 */

(function (win) {

var
// cache previous versions
_$ = win.$,
_jBone = win.jBone,

// Quick match a standalone tag
rquickSingleTag = /^<(\w+)\s*\/?>$/,

// A simple way to check for HTML strings
// Prioritize #id over <tag> to avoid XSS via location.hash
rquickExpr = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,

// Alias for function
slice = [].slice,
splice = [].splice,
keys = Object.keys,

// Alias for global variables
doc = document,

isString = function(el) {
    return typeof el === "string";
},
isObject = function(el) {
    return el instanceof Object;
},
isFunction = function(el) {
    return ({}).toString.call(el) === "[object Function]";
},
isArray = function(el) {
    return Array.isArray(el);
},
jBone = function(element, data) {
    return new fn.init(element, data);
},
fn;

// set previous values and return the instance upon calling the no-conflict mode
jBone.noConflict = function() {
    win.$ = _$;
    win.jBone = _jBone;

    return jBone;
};

fn = jBone.fn = jBone.prototype = {
    init: function(element, data) {
        var elements, tag, wraper, fragment;

        if (!element) {
            return this;
        }
        if (isString(element)) {
            // Create single DOM element
            if (tag = rquickSingleTag.exec(element)) {
                this[0] = doc.createElement(tag[1]);
                this.length = 1;

                if (isObject(data)) {
                    this.attr(data);
                }

                return this;
            }
            // Create DOM collection
            if ((tag = rquickExpr.exec(element)) && tag[1]) {
                fragment = doc.createDocumentFragment();
                wraper = doc.createElement("div");
                wraper.innerHTML = element;
                while (wraper.lastChild) {
                    fragment.appendChild(wraper.firstChild);
                }
                elements = slice.call(fragment.childNodes);

                return jBone.merge(this, elements);
            }
            // Find DOM elements with querySelectorAll
            if (jBone.isElement(data)) {
                return jBone(data).find(element);
            }

            try {
                elements = doc.querySelectorAll(element);

                return jBone.merge(this, elements);
            } catch (e) {
                return this;
            }
        }
        // Wrap DOMElement
        if (element.nodeType) {
            this[0] = element;
            this.length = 1;

            return this;
        }
        // Run function
        if (isFunction(element)) {
            return element();
        }
        // Return jBone element as is
        if (element instanceof jBone) {
            return element;
        }

        // Return element wrapped by jBone
        return jBone.makeArray(element, this);
    },

    pop: [].pop,
    push: [].push,
    reverse: [].reverse,
    shift: [].shift,
    sort: [].sort,
    splice: [].splice,
    slice: [].slice,
    indexOf: [].indexOf,
    forEach: [].forEach,
    unshift: [].unshift,
    concat: [].concat,
    join: [].join,
    every: [].every,
    some: [].some,
    filter: [].filter,
    map: [].map,
    reduce: [].reduce,
    reduceRight: [].reduceRight,
    length: 0
};

fn.constructor = jBone;

fn.init.prototype = fn;

jBone.setId = function(el) {
    var jid = el.jid;

    if (el === win) {
        jid = "window";
    } else if (el.jid === undefined) {
        el.jid = jid = ++jBone._cache.jid;
    }

    if (!jBone._cache.events[jid]) {
        jBone._cache.events[jid] = {};
    }
};

jBone.getData = function(el) {
    el = el instanceof jBone ? el[0] : el;

    var jid = el === win ? "window" : el.jid;

    return {
        jid: jid,
        events: jBone._cache.events[jid]
    };
};

jBone.isElement = function(el) {
    return el && el instanceof jBone || el instanceof HTMLElement || isString(el);
};

jBone._cache = {
    events: {},
    jid: 0
};

function isArraylike(obj) {
    var length = obj.length,
        type = typeof obj;

    if (isFunction(type) || obj === win) {
        return false;
    }

    if (obj.nodeType === 1 && length) {
        return true;
    }

    return isArray(type) || length === 0 ||
        typeof length === "number" && length > 0 && (length - 1) in obj;
}

jBone.merge = function(first, second) {
    var l = second.length,
        i = first.length,
        j = 0;

    while (j < l) {
        first[i++] = second[j++];
    }

    first.length = i;

    return first;
};

jBone.contains = function(container, contained) {
    var result;

    container.reverse().some(function(el) {
        if (el.contains(contained)) {
            return result = el;
        }
    });

    return result;
};

jBone.extend = function(target) {
    var tg;

    splice.call(arguments, 1).forEach(function(source) {
        tg = target; //caching target for perf improvement

        if (source) {
            for (var prop in source) {
                tg[prop] = source[prop];
            }
        }
    });

    return target;
};

jBone.makeArray = function(arr, results) {
    var ret = results || [];

    if (arr !== null) {
        if (isArraylike(arr)) {
            jBone.merge(ret, isString(arr) ? [arr] : arr);
        } else {
            ret.push(arr);
        }
    }

    return ret;
};

jBone.unique = function(array) {
    if (array == null) {
        return [];
    }

    var result = [];

    for (var i = 0, length = array.length; i < length; i++) {
        var value = array[i];
        if (result.indexOf(value) < 0) {
            result.push(value);
        }
    }
    return result;
};

function BoneEvent(e, data) {
    var key, setter;

    this.originalEvent = e;

    setter = function(key, e) {
        if (key === "preventDefault") {
            this[key] = function() {
                this.defaultPrevented = true;
                return e[key]();
            };
        } else if (isFunction(e[key])) {
            this[key] = function() {
                return e[key]();
            };
        } else {
            this[key] = e[key];
        }
    };

    for (key in e) {
        if (e[key] || typeof e[key] === "function") {
            setter.call(this, key, e);
        }
    }

    jBone.extend(this, data);
}

jBone.Event = function(event, data) {
    var namespace, eventType;

    if (event.type && !data) {
        data = event;
        event = event.type;
    }

    namespace = event.split(".").splice(1).join(".");
    eventType = event.split(".")[0];

    event = doc.createEvent("Event");
    event.initEvent(eventType, true, true);

    return jBone.extend(event, {
        namespace: namespace,
        isDefaultPrevented: function() {
            return event.defaultPrevented;
        }
    }, data);
};

fn.on = function(event) {
    var args = arguments,
        length = this.length,
        i = 0,
        callback = slice.call(args, -1)[0],
        target, data, namespace, fn, events, eventType, expectedTarget, addListener;

    // .on('click', '.selector', function() {})
    if (args.length === 3 && isString(args[1])) {
        target = args[1];
    }
    // .on('click', { key: value }, function() {})
    else if (args.length === 3 && isObject(args[1])) {
        data = args[1];
    }
    // .on('click', '.selector', { key: value }, function() {})
    else if (args.length === 4) {
        target = args[1];
        data = args[2];
    }

    addListener = function(el) {
        jBone.setId(el);
        events = jBone.getData(el).events;
        event.split(" ").forEach(function(event) {
            var eventOptions = {};

            if (data) {
                eventOptions.data = data;
            }

            eventType = event.split(".")[0];
            namespace = event.split(".").splice(1).join(".");
            events[eventType] = events[eventType] || [];

            fn = function(e) {
                if (e.namespace && e.namespace !== namespace) {
                    return;
                }

                expectedTarget = null;

                if (!target) {
                    callback.call(el, new BoneEvent(e, eventOptions));
                } else if (~jBone(el).find(target).indexOf(e.target) || (expectedTarget = jBone.contains(jBone(el).find(target), e.target))) {
                    expectedTarget = expectedTarget || e.target;
                    eventOptions.currentTarget = expectedTarget;

                    callback.call(expectedTarget, new BoneEvent(e, eventOptions));
                }
            };

            events[eventType].push({
                namespace: namespace,
                fn: fn,
                originfn: callback
            });

            el.addEventListener && el.addEventListener(eventType, fn, false);
        });
    };

    for (; i < length; i++) {
        addListener(this[i]);
    }

    return this;
};

fn.one = function(event) {
    var args = arguments,
        i = 0,
        length = this.length,
        oneArgs = slice.call(args, 1, args.length - 1),
        callback = slice.call(args, -1)[0],
        addListener;

    addListener = function(el) {
        var $el =  jBone(el);

        event.split(" ").forEach(function(event) {
            var fn = function(e) {
                $el.off(event, fn);
                callback.call(el, e);
            };

            $el.on.apply($el, [event].concat(oneArgs, fn));
        });
    };

    for (; i < length; i++) {
        addListener(this[i]);
    }

    return this;
};

fn.trigger = function(event) {
    var events = [],
        i = 0,
        length = this.length,
        dispatchEvents;

    if (!event) {
        return this;
    }

    if (isString(event)) {
        events = event.split(" ").map(function(event) {
            return jBone.Event(event);
        });
    } else {
        event = event instanceof Event ? event : jBone.Event(event);
        events = [event];
    }

    dispatchEvents = function(el) {
        events.forEach(function(event) {
            if (!event.type) {
                return;
            }

            el.dispatchEvent && el.dispatchEvent(event);
        });
    };

    for (; i < length; i++) {
        dispatchEvents(this[i]);
    }

    return this;
};

fn.off = function(event, fn) {
    var i = 0,
        length = this.length,
        removeListener = function(events, eventType, index, el, e) {
            var callback;

            // get callback
            if ((fn && e.originfn === fn) || !fn) {
                callback = e.fn;
            }

            if (events[eventType][index].fn === callback) {
                el.removeEventListener(eventType, callback);

                // remove handler from cache
                jBone._cache.events[jBone.getData(el).jid][eventType].splice(index, 1);
            }
        },
        events, namespace, removeListeners, eventType;

    removeListeners = function(el) {
        var l, eventsByType, e;

        events = jBone.getData(el).events;

        if (!events) {
            return;
        }

        // remove all events
        if (!event && events) {
            return keys(events).forEach(function(eventType) {
                eventsByType = events[eventType];
                l = eventsByType.length;

                while(l--) {
                    removeListener(events, eventType, l, el, eventsByType[l]);
                }
            });
        }

        event.split(" ").forEach(function(event) {
            eventType = event.split(".")[0];
            namespace = event.split(".").splice(1).join(".");

            // remove named events
            if (events[eventType]) {
                eventsByType = events[eventType];
                l = eventsByType.length;

                while(l--) {
                    e = eventsByType[l];
                    if (!namespace || (namespace && e.namespace === namespace)) {
                        removeListener(events, eventType, l, el, e);
                    }
                }
            }
            // remove all namespaced events
            else if (namespace) {
                keys(events).forEach(function(eventType) {
                    eventsByType = events[eventType];
                    l = eventsByType.length;

                    while(l--) {
                        e = eventsByType[l];
                        if (e.namespace.split(".")[0] === namespace.split(".")[0]) {
                            removeListener(events, eventType, l, el, e);
                        }
                    }
                });
            }
        });
    };

    for (; i < length; i++) {
        removeListeners(this[i]);
    }

    return this;
};

fn.find = function(selector) {
    var results = [],
        i = 0,
        length = this.length,
        finder = function(el) {
            if (isFunction(el.querySelectorAll)) {
                [].forEach.call(el.querySelectorAll(selector), function(found) {
                    results.push(found);
                });
            }
        };

    for (; i < length; i++) {
        finder(this[i]);
    }

    return jBone(results);
};

fn.get = function(index) {
    return index != null ?

        // Return just the one element from the set
        (index < 0 ? this[index + this.length] : this[index]) :

        // Return all the elements in a clean array
        slice.call(this);
};

fn.eq = function(index) {
    return jBone(this[index]);
};

fn.parent = function() {
    var results = [],
        parent,
        i = 0,
        length = this.length;

    for (; i < length; i++) {
        if (!~results.indexOf(parent = this[i].parentElement) && parent) {
            results.push(parent);
        }
    }

    return jBone(results);
};

fn.toArray = function() {
    return slice.call(this);
};

fn.is = function() {
    var args = arguments;

    return this.some(function(el) {
        return el.tagName.toLowerCase() === args[0];
    });
};

fn.has = function() {
    var args = arguments;

    return this.some(function(el) {
        return el.querySelectorAll(args[0]).length;
    });
};

fn.add = function(selector, context) {
    return jBone.unique(
        jBone.merge(this.get(), jBone(selector, context))
    );
};

fn.attr = function(key, value) {
    var args = arguments,
        i = 0,
        length = this.length,
        setter;

    if (isString(key) && args.length === 1) {
        return this[0] && this[0].getAttribute(key);
    }

    if (args.length === 2) {
        setter = function(el) {
            el.setAttribute(key, value);
        };
    } else if (isObject(key)) {
        setter = function(el) {
            keys(key).forEach(function(name) {
                el.setAttribute(name, key[name]);
            });
        };
    }

    for (; i < length; i++) {
        setter(this[i]);
    }

    return this;
};

fn.removeAttr = function(key) {
    var i = 0,
        length = this.length;

    for (; i < length; i++) {
        this[i].removeAttribute(key);
    }

    return this;
};

fn.val = function(value) {
    var i = 0,
        length = this.length;

    if (arguments.length === 0) {
        return this[0] && this[0].value;
    }

    for (; i < length; i++) {
        this[i].value = value;
    }

    return this;
};

fn.css = function(key, value) {
    var args = arguments,
        i = 0,
        length = this.length,
        setter;

    // Get attribute
    if (isString(key) && args.length === 1) {
        return this[0] && win.getComputedStyle(this[0])[key];
    }

    // Set attributes
    if (args.length === 2) {
        setter = function(el) {
            el.style[key] = value;
        };
    } else if (isObject(key)) {
        setter = function(el) {
            keys(key).forEach(function(name) {
                el.style[name] = key[name];
            });
        };
    }

    for (; i < length; i++) {
        setter(this[i]);
    }

    return this;
};

fn.data = function(key, value) {
    var args = arguments, data = {},
        i = 0,
        length = this.length,
        setter,
        setValue = function(el, key, value) {
            if (isObject(value)) {
                el.jdata = el.jdata || {};
                el.jdata[key] = value;
            } else {
                el.dataset[key] = value;
            }
        },
        getValue = function(value) {
            if (value === "true") {
                return true;
            } else if (value === "false") {
                return false;
            } else {
                return value;
            }
        };

    // Get all data
    if (args.length === 0) {
        this[0].jdata && (data = this[0].jdata);

        keys(this[0].dataset).forEach(function(key) {
            data[key] = getValue(this[0].dataset[key]);
        }, this);

        return data;
    }
    // Get data by name
    if (args.length === 1 && isString(key)) {
        return this[0] && getValue(this[0].dataset[key] || this[0].jdata && this[0].jdata[key]);
    }

    // Set data
    if (args.length === 1 && isObject(key)) {
        setter = function(el) {
            keys(key).forEach(function(name) {
                setValue(el, name, key[name]);
            });
        };
    } else if (args.length === 2) {
        setter = function(el) {
            setValue(el, key, value);
        };
    }

    for (; i < length; i++) {
        setter(this[i]);
    }

    return this;
};

fn.removeData = function(key) {
    var i = 0,
        length = this.length,
        jdata, dataset;

    for (; i < length; i++) {
        jdata = this[i].jdata;
        dataset = this[i].dataset;

        if (key) {
            jdata && jdata[key] && delete jdata[key];
            delete dataset[key];
        } else {
            for (key in jdata) {
                delete jdata[key];
            }

            for (key in dataset) {
                delete dataset[key];
            }
        }
    }

    return this;
};

fn.html = function(value) {
    var args = arguments,
        el;

    // add HTML into elements
    if (args.length === 1 && value !== undefined) {
        return this.empty().append(value);
    }
    // get HTML from element
    else if (args.length === 0 && (el = this[0])) {
        return el.innerHTML;
    }

    return this;
};

fn.append = function(appended) {
    var i = 0,
        length = this.length,
        setter;

    // create jBone object and then append
    if (isString(appended) && rquickExpr.exec(appended)) {
        appended = jBone(appended);
    }
    // create text node for inserting
    else if (!isObject(appended)) {
        appended = document.createTextNode(appended);
    }

    appended = appended instanceof jBone ? appended : jBone(appended);

    setter = function(el, i) {
        appended.forEach(function(node) {
            if (i) {
                el.appendChild(node.cloneNode(true));
            } else {
                el.appendChild(node);
            }
        });
    };

    for (; i < length; i++) {
        setter(this[i], i);
    }

    return this;
};

fn.appendTo = function(to) {
    jBone(to).append(this);

    return this;
};

fn.empty = function() {
    var i = 0,
        length = this.length,
        el;

    for (; i < length; i++) {
        el = this[i];

        while (el.lastChild) {
            el.removeChild(el.lastChild);
        }
    }

    return this;
};

fn.remove = function() {
    var i = 0,
        length = this.length,
        el;

    // remove all listners
    this.off();

    for (; i < length; i++) {
        el = this[i];

        // remove data and nodes
        delete el.jdata;
        el.parentNode && el.parentNode.removeChild(el);
    }

    return this;
};

if (typeof module === "object" && module && typeof module.exports === "object") {
    // Expose jBone as module.exports in loaders that implement the Node
    // module pattern (including browserify). Do not create the global, since
    // the user will be storing it themselves locally, and globals are frowned
    // upon in the Node module world.
    module.exports = jBone;
}
// Register as a AMD module
else if (typeof define === "function" && define.amd) {
    define(function() {
        return jBone;
    });

    win.jBone = win.$ = jBone;
} else if (typeof win === "object" && typeof win.document === "object") {
    win.jBone = win.$ = jBone;
}

}(window));

},{}],43:[function(require,module,exports){
var koalajs = {};

// pass an alternative default value
koalajs.d = koalajs.defaultValue = function defaultValue(obj, defValue) {
  if (obj === undefined) {
    if (typeof obj === "function") {
      return defValue();
    }
    return defValue;
  }
  return obj;
};

// alias for getElementById
koalajs.id = function mk(el) {
  return document.getElementById(el);
};

// alias for createElement
koalajs.mk = function mk(el) {
  return document.createElement(el);
};

if (module !== undefined && module.exports !== undefined) {
  module.exports = koalajs;
}

},{}],44:[function(require,module,exports){
module.exports = require("./lib/menubuilder");

},{"./lib/menubuilder":45}],45:[function(require,module,exports){
var MenuBuilder, jbone, view;

jbone = require("jbone");
view = require("backbone-viewj");

module.exports = MenuBuilder = view.extend({
  initialize: function(opts) {
    this._nodes = [];
    this.name = opts.name || "";
    this.el.className += "smenubar";
  },
  render: function() {

    // remove all childs
    var fc = this.el.firstChild;
    while (fc) {
      this.el.removeChild(fc);
      fc = this.el.firstChild;
    }

    // replace child
    this.el.appendChild(this.buildDOM());
  },
  setName: function(name) {
    this.name = name;
  },
  addNode: function(label, callback, opts) {
    var style;
    if (opts != null) {
      style = opts.style;
    }
    if (this._nodes == null) {
      this._nodes = [];
    }
    this._nodes.push({
      label: label,
      callback: callback,
      style: style
    });
  },

  getNode: function(label) {
    var rNode = undefined;
    this._nodes.forEach(function(el) {
      if (el.label === label) {
        rNode = el;
      }
    });
    return rNode;
  },

  modifyNode: function(label, callback, opts) {
    var node = this.getNode(label);
    node.callback = callback || node.callback;
    opts = opts || {};
    node.style = opts.style || node.style;
  },

  renameNode: function(label, newLabel) {
    var node = this.getNode(label);
    node.label = newLabel || node.label;
  },

  removeNode: function(label) {
    var node = this.getNode(label);
    this._nodes.splice(this._nodes.indexOf(node), 1);
  },

  removeAllNodes: function() {
    this._nodes = [];
  },

  buildDOM: function() {
    var span = document.createElement("span");
    span.appendChild(this._buildM({
      nodes: this._nodes,
      name: this.name
    }));
    return span;
  },
  _buildM: function(data) {
    var displayedButton, frag, key, li, node, style, _ref;
    var nodes = data.nodes;
    var name = data.name;
    var menu = document.createElement("div");
    menu.className = "smenu-dropdown smenu-dropdown-tip";
    menu.style.display = "none";

    var menuUl = document.createElement("ul");
    menuUl.className = "smenu-dropdown-menu";

    // currently we support one-level
    for (var i = 0, _len = nodes.length; i < _len; i++) {
      node = nodes[i];
      li = document.createElement("li");
      li.textContent = node.label;
      _ref = node.style;
      for (key in _ref) {
        style = _ref[key];
        li.style[key] = style;
      }
      li.addEventListener("click", node.callback);
      this.trigger("new:node", li);
      menuUl.appendChild(li);
    }
    this.trigger("new:menu", menuUl);
    menu.appendChild(menuUl);

    displayedButton = document.createElement("a");
    displayedButton.textContent = name;
    displayedButton.className = "smenubar_alink";
    this.trigger("new:button", displayedButton);

    // HACK to be able to hide the submenu
    // listens globally for click events
    jbone(displayedButton).on("click", (function(_this) {
      return function(e) {
        _this._showMenu(e, menu, displayedButton);
        return window.setTimeout(function() {
          return jbone(document.body).one("click", function(e) {
            return menu.style.display = "none";
          });
        }, 5);
      };
    })(this));

    frag = document.createDocumentFragment();
    frag.appendChild(menu);
    frag.appendChild(displayedButton);
    return frag;
  },

  // internal method to display the lower menu on a click
  _showMenu: function(e, menu, target) {
    var rect;
    menu.style.display = "block";
    menu.style.position = "absolute";
    rect = target.getBoundingClientRect();
    menu.style.left = rect.left + "px";
    menu.style.top = (rect.top + target.offsetHeight) + "px";
  }
});

},{"backbone-viewj":9,"jbone":42}],46:[function(require,module,exports){
var Mouse;

module.exports = Mouse = {
  rel: function(e) {
    var mouseX, mouseY, rect, target;
    mouseX = e.offsetX;
    mouseY = e.offsetY;
    if (mouseX == undefined) {
      rect = target.getBoundingClientRect();
      target = e.target || e.srcElement;
      if (mouseX == undefined) {
        mouseX = e.clientX - rect.left;
        mouseY = e.clientY - rect.top;
      }
      if (mouseX == undefined) {
        mouseX = e.pageX - target.offsetLeft;
        mouseY = e.pageY - target.offsetTop;
      }
      if (mouseX == undefined) {
        console.log(e, "no mouse event defined. your browser sucks");
        return;
      }
    }
    return [mouseX, mouseY];
  },
  abs: function(e) {
    var mouseX, mouseY;
    mouseX = e.pageX;
    mouseY = e.pageY;
    if (mouseX == undefined) {
      mouseX = e.layerX;
      mouseY = e.layerY;
    }
    if (mouseX == undefined) {
      mouseX = e.clientX;
      mouseY = e.clientY;
    }
    if (mouseX == undefined) {
      mouseX = e.x;
      mouseY = e.y;
    }
    return [mouseX, mouseY];
  },
  wheelDelta: function(e) {
    var delta;
    delta = [e.deltaX, e.deltaY];
    if (delta[0] == undefined) {
      // in case there is a more detailed scroll sensor - use it
      if (e.mozMovementX) {
        delta = [0, e.mozMovementX];
      }
    }
    // safety first
    if (isNaN(delta[0])) {
      delta[0] = 0;
    }
    if (isNaN(delta[1])) {
      delta[1] = 0;
    }
    return delta;
  }
};

},{}],47:[function(require,module,exports){
module.exports = {
  A: "#00a35c",
  R: "#00fc03",
  N: "#00eb14",
  D: "#00eb14",
  C: "#0000ff",
  Q: "#00f10e",
  E: "#00f10e",
  G: "#009d62",
  H: "#00d52a",
  I: "#0054ab",
  L: "#007b84",
  K: "#00ff00",
  M: "#009768",
  F: "#008778",
  P: "#00e01f",
  S: "#00d52a",
  T: "#00db24",
  W: "#00a857",
  Y: "#00e619",
  V: "#005fa0",
  B: "#00eb14",
  X: "#00b649",
  Z: "#00f10e"
};

},{}],48:[function(require,module,exports){
module.exports = {
  A: "#BBBBBB",
  B: "grey",
  C: "yellow",
  D: "red",
  E: "red",
  F: "magenta",
  G: "brown",
  H: "#00FFFF",
  I: "#BBBBBB",
  J: "#fff",
  K: "#00FFFF",
  L: "#BBBBBB",
  M: "#BBBBBB",
  N: "green",
  O: "#fff",
  P: "brown",
  Q: "green",
  R: "#00FFFF",
  S: "green",
  T: "green",
  U: "#fff",
  V: "#BBBBBB",
  W: "magenta",
  X: "grey",
  Y: "magenta",
  Z: "grey",
  Gap: "grey"
};

},{}],49:[function(require,module,exports){
module.exports = {
  A: "orange",
  B: "#fff",
  C: "green",
  D: "red",
  E: "red",
  F: "blue",
  G: "orange",
  H: "red",
  I: "green",
  J: "#fff",
  K: "red",
  L: "green",
  M: "green",
  N: "#fff",
  O: "#fff",
  P: "orange",
  Q: "#fff",
  R: "red",
  S: "orange",
  T: "orange",
  U: "#fff",
  V: "green",
  W: "blue",
  X: "#fff",
  Y: "blue",
  Z: "#fff",
  Gap: "#fff"
};

},{}],50:[function(require,module,exports){
module.exports = {
  A: "#80a0f0",
  R: "#f01505",
  N: "#00ff00",
  D: "#c048c0",
  C: "#f08080",
  Q: "#00ff00",
  E: "#c048c0",
  G: "#f09048",
  H: "#15a4a4",
  I: "#80a0f0",
  L: "#80a0f0",
  K: "#f01505",
  M: "#80a0f0",
  F: "#80a0f0",
  P: "#ffff00",
  S: "#00ff00",
  T: "#00ff00",
  W: "#80a0f0",
  Y: "#15a4a4",
  V: "#80a0f0",
  B: "#fff",
  X: "#fff",
  Z: "#fff"
};

},{}],51:[function(require,module,exports){
module.exports = {
  A: "#e718e7",
  R: "#6f906f",
  N: "#1be41b",
  D: "#778877",
  C: "#23dc23",
  Q: "#926d92",
  E: "#ff00ff",
  G: "#00ff00",
  H: "#758a75",
  I: "#8a758a",
  L: "#ae51ae",
  K: "#a05fa0",
  M: "#ef10ef",
  F: "#986798",
  P: "#00ff00",
  S: "#36c936",
  T: "#47b847",
  W: "#8a758a",
  Y: "#21de21",
  V: "#857a85",
  B: "#49b649",
  X: "#758a75",
  Z: "#c936c9"
};

},{}],52:[function(require,module,exports){
module.exports = {
  A: "#ad0052",
  B: "#0c00f3",
  C: "#c2003d",
  D: "#0c00f3",
  E: "#0c00f3",
  F: "#cb0034",
  G: "#6a0095",
  H: "#1500ea",
  I: "#ff0000",
  J: "#fff",
  K: "#0000ff",
  L: "#ea0015",
  M: "#b0004f",
  N: "#0c00f3",
  O: "#fff",
  P: "#4600b9",
  Q: "#0c00f3",
  R: "#0000ff",
  S: "#5e00a1",
  T: "#61009e",
  U: "#fff",
  V: "#f60009",
  W: "#5b00a4",
  X: "#680097",
  Y: "#4f00b0",
  Z: "#0c00f3"
};

},{}],53:[function(require,module,exports){
var schemes = require("./schemeclass");
var StaticSchemeClass = schemes.stat;
var DynSchemeClass = schemes.dyn;

var Buried = require("./buried");
var Cinema = require("./cinema");
var Clustal = require("./clustal");
var Clustal2 = require("./clustal2");
var Helix = require("./helix");
var Hydro = require("./hydrophobicity");
var Lesk = require("./lesk");
var Mae = require("./mae");
var Nucleotide = require("./nucleotide");
var Purine = require("./purine");
var Strand = require("./strand");
var Taylor = require("./taylor");
var Turn = require("./turn");
var Zappo = require("./zappo");

var staticSchemes = {
  buried: Buried,
  buried_index: Buried,
  cinema: Cinema,
  clustal2: Clustal2,
  clustal: Clustal,
  helix: Helix,
  helix_propensity: Helix,
  hydro: Hydro,
  lesk: Lesk,
  mae: Mae,
  nucleotide: Nucleotide,
  purine: Purine,
  purine_pyrimidine: Purine,
  strand: Strand,
  strand_propensity: Strand,
  taylor: Taylor,
  turn: Turn,
  turn_propensity: Turn,
  zappo: Zappo
};

var pid = require("./pid_colors.js");

var dynSchemes = {
  pid: pid
};

module.exports = Colors = function(opt){
  this.maps = clone(staticSchemes);  
  this.dyn = clone(dynSchemes);
  this.opt = opt;
}
Colors.getScheme = function(scheme){
  return staticSchemes[scheme];
}
Colors.prototype.getScheme = function(scheme) {
  var color = this.maps[scheme];
  if (color === undefined) {
    color = {};
    if(this.dyn[scheme] != undefined){
      return new DynSchemeClass(this.dyn[scheme],this.opt);
    }
  }
  return new StaticSchemeClass(color);
};

Colors.prototype.addStaticScheme = function(name,scheme) {
  this.maps[name] = scheme;
}

Colors.prototype.addDynScheme = function(name,scheme) {
  this.dyn[name] = scheme;
}

// small helper to clone an object
function clone(obj) {
  if (null == obj || "object" != typeof obj) return obj;
  var copy = obj.constructor();
  for (var attr in obj) {
    if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];
  }
  return copy;
}

},{"./buried":47,"./cinema":48,"./clustal":49,"./clustal2":50,"./helix":51,"./hydrophobicity":52,"./lesk":54,"./mae":55,"./nucleotide":56,"./pid_colors.js":57,"./purine":58,"./schemeclass":59,"./strand":60,"./taylor":61,"./turn":62,"./zappo":63}],54:[function(require,module,exports){
module.exports = {
  A: " orange",
  B: " #fff",
  C: " green",
  D: " red",
  E: " red",
  F: " green",
  G: " orange",
  H: " magenta",
  I: " green",
  J: " #fff",
  K: " red",
  L: " green",
  M: " green",
  N: " magenta",
  O: " #fff",
  P: " green",
  Q: " magenta",
  R: " red",
  S: " orange",
  T: " orange",
  U: " #fff",
  V: " green",
  W: " green",
  X: " #fff",
  Y: " green",
  Z: " #fff",
  Gap: " #fff"
};

},{}],55:[function(require,module,exports){
module.exports = {
  A: " #77dd88",
  B: " #fff",
  C: " #99ee66",
  D: " #55bb33",
  E: " #55bb33",
  F: " #9999ff",
  G: " #77dd88",
  H: " #5555ff",
  I: " #66bbff",
  J: " #fff",
  K: " #ffcc77",
  L: " #66bbff",
  M: " #66bbff",
  N: " #55bb33",
  O: " #fff",
  P: " #eeaaaa",
  Q: " #55bb33",
  R: " #ffcc77",
  S: " #ff4455",
  T: " #ff4455",
  U: " #fff",
  V: " #66bbff",
  W: " #9999ff",
  X: " #fff",
  Y: " #9999ff",
  Z: " #fff",
  Gap: " #fff"
};

},{}],56:[function(require,module,exports){
module.exports = {
  A: " #64F73F",
  C: " #FFB340",
  G: " #EB413C",
  T: " #3C88EE",
  U: " #3C88EE"
};

},{}],57:[function(require,module,exports){
var pid;
module.exports = pid = {};

// calculating the conservation is expensive 
// we only want to do it once
pid.init = function(){
  this.cons = this.opt.conservation();
}

pid.run = function(letter,opts){
  var cons = this.cons[opts.pos];
  if(cons > 0.8){
    return "#6464ff";
  }else if(cons > 0.6){
    return "#9da5ff";
  }else if(cons > 0.4){
    return "#cccccc";
  }else{
    return "#ffffff";
  }
}

},{}],58:[function(require,module,exports){
module.exports = {
  A: " #FF83FA",
  C: " #40E0D0",
  G: " #FF83FA",
  R: " #FF83FA",
  T: " #40E0D0",
  U: " #40E0D0",
  Y: " #40E0D0"
};

},{}],59:[function(require,module,exports){
var StaticSchemeClass = function(map){
  this.defaultColor = "#ffffff";
  this.type = "static";
  this.map = map;
  this.getColor = function(letter){
    if(this.map[letter] !== undefined){
      return this.map[letter]; 
    }else{
      return this.defaultColor;
    }
  };
};

var DynSchemeClass = function(fun,opt){
  this.type = "dyn";
  this.opt = opt;
  // init
  if(fun.init !== undefined){
    fun.init.call(this);
    this.getColor = fun.run;
    this.reset = fun.init;
  }else{
    this.getColor = fun;
  }
};
module.exports.stat = StaticSchemeClass;
module.exports.dyn = DynSchemeClass;

},{}],60:[function(require,module,exports){
module.exports = {
  A: "#5858a7",
  R: "#6b6b94",
  N: "#64649b",
  D: "#2121de",
  C: "#9d9d62",
  Q: "#8c8c73",
  E: "#0000ff",
  G: "#4949b6",
  H: "#60609f",
  I: "#ecec13",
  L: "#b2b24d",
  K: "#4747b8",
  M: "#82827d",
  F: "#c2c23d",
  P: "#2323dc",
  S: "#4949b6",
  T: "#9d9d62",
  W: "#c0c03f",
  Y: "#d3d32c",
  V: "#ffff00",
  B: "#4343bc",
  X: "#797986",
  Z: "#4747b8"
};

},{}],61:[function(require,module,exports){
module.exports = {
  A: "#ccff00",
  R: "#0000ff",
  N: "#cc00ff",
  D: "#ff0000",
  C: "#ffff00",
  Q: "#ff00cc",
  E: "#ff0066",
  G: "#ff9900",
  H: "#0066ff",
  I: "#66ff00",
  L: "#33ff00",
  K: "#6600ff",
  M: "#00ff00",
  F: "#00ff66",
  P: "#ffcc00",
  S: "#ff3300",
  T: "#ff6600",
  W: "#00ccff",
  Y: "#00ffcc",
  V: "#99ff00",
  B: "#fff",
  X: "#fff",
  Z: "#fff"
};

},{}],62:[function(require,module,exports){
module.exports = {
  A: "#2cd3d3",
  R: "#708f8f",
  N: "#ff0000",
  D: "#e81717",
  C: "#a85757",
  Q: "#3fc0c0",
  E: "#778888",
  G: "#ff0000",
  H: "#708f8f",
  I: "#00ffff",
  L: "#1ce3e3",
  K: "#7e8181",
  M: "#1ee1e1",
  F: "#1ee1e1",
  P: "#f60909",
  S: "#e11e1e",
  T: "#738c8c",
  W: "#738c8c",
  Y: "#9d6262",
  V: "#07f8f8",
  B: "#f30c0c",
  X: "#7c8383",
  Z: "#5ba4a4"
};

},{}],63:[function(require,module,exports){
module.exports = {
  A: "#ffafaf",
  R: "#6464ff",
  N: "#00ff00",
  D: "#ff0000",
  C: "#ffff00",
  Q: "#00ff00",
  E: "#ff0000",
  G: "#ff00ff",
  H: "#6464ff",
  I: "#ffafaf",
  L: "#ffafaf",
  K: "#6464ff",
  M: "#ffafaf",
  F: "#ffc800",
  P: "#ff00ff",
  S: "#00ff00",
  T: "#00ff00",
  W: "#ffc800",
  Y: "#ffc800",
  V: "#ffafaf",
  B: "#fff",
  X: "#fff",
  Z: "#fff"
};

},{}],64:[function(require,module,exports){
/*
 * msa-seqtools
 * https://github.com/greenify/msa-seqtools
 *
 * Copyright (c) 2014 greenify
 * Licensed under the MIT license.
 */

var st = {};
module.exports = st;

// extract IDs and push them to the meta dict
st.getMeta = function(label) {
  if (st.contains(label, "|")) {
    var identifiers = label.split("|");
    var k = 0;
    var database, databaseID;
    var meta = {};
    while (k < identifiers.length - 1) {
      database = identifiers[k];
      databaseID = identifiers[k + 1];
      meta[database] = databaseID;
      k += 2;
    }
    // assume the last entry is the label
    var name = identifiers[identifiers.length - 1];
    // check whether there is a uniprot id
    if (name.indexOf("=") >= 0 && name.indexOf("OS") >= 0) {
      var ds = {};
      var details = name.split(" ");
      ds.en = details[0];
      details = details.splice(1);
      var nameLength = findSepInArr(details, "=");
      var detailsTmp = details.splice(nameLength - 1);
      name = details.join(" ");
      details = detailsTmp;
      k = 0;
      var block = [];
      details.forEach(function(item) {
        block.push(item);
        if (item.indexOf("=") >= 0) {
          strToDict(block.join(" "), "=", ds);
          block = [];
        }
      });
      return {
        name: name,
        ids: meta,
        details: ds
      };
    }
    return {
      name: name,
      ids: meta
    };
  }
  return {
    name: label
  };
};

var findSepInArr = function(arr, sep) {
  for (var i = 0; i < arr.lenght; i++) {
    if (arr[i].indexOf(i)) {
      return i;
    }
  }
  return arr.length - 1;
};

var strToDict = function(str, sep, toJoin) {
  toJoin = toJoin || {};
  var entries = str.split(sep);
  toJoin[entries[0].toLowerCase()] = entries[1];
  return toJoin;
};

var identDB = {
  "sp": {
    link: "http://www.uniprot.org/%s",
    name: "Uniprot"
  },
  "tr": {
    link: "http://www.uniprot.org/%s",
    name: "Trembl"
  },
  "gb": {
    link: "http://www.ncbi.nlm.nih.gov/nuccore/%s",
    name: "Genbank"
  },
  "pdb": {
    link: "http://www.rcsb.org/pdb/explore/explore.do?structureId=%s",
    name: "PDB"
  }
};

st.buildLinks = function(meta) {
  var links = {};
  meta = meta || {};
  Object.keys(meta).forEach(function(id) {
    if (id in identDB) {
      var entry = identDB[id];
      var link = entry.link.replace("%s", meta[id]);
      links[entry.name] = link;
    }
  });
  return links;
};


// search for a text
st.contains = function(text, search) {
  return ''.indexOf.call(text, search, 0) !== -1;
};

// split after e.g. 80 chars
st.splitNChars = function(txt, num) {
  var i, _ref;
  num = num || 80;
  var result = [];
  for (i = 0, _ref = txt.length - 1; i <= _ref; i += num) {
    result.push(txt.substr(i, num));
  }
  return result;
};

st.model = function Seq(seq, name, id) {
  this.seq = seq;
  this.name = name;
  this.id = id;
  this.ids = {};
};

},{}],65:[function(require,module,exports){
var _ = require("underscore");

var stat = function(seqs) {
  // if someone forgets new
  if (this.constructor !== stat) {
    return new stat(seqs);
  }
  if (seqs === undefined || typeof seqs === "string") {
    throw new TypeError("you need to give the seq stat an array");
  }
  //if(seqs.length == 0){
  //throw new TypeError("you need to give the seq stat a real array");
  //}
  this.resetSeqs(seqs);
  this.alphabetSize = 4;
  this._useBackground = false;
  this.ignoredChars = ["-", "*"];
};

stat.prototype.addSeq = function addSeq(seq) {
  this.seqs.push(seq);
  this._reset();
};

stat.prototype.removeSeq = function addSeq(seq) {
  // check for int or string
  if (typeof seq === 'number') {
    this.seqs.splice(seq, 1);
  } else {
    // identify matches (we could have multiple)
    _.each(this.seqs, function(s, i) {
      if (seq === s) {
        this.seqs.splice(i, 1);
      }
    }.bind(this));
  }
  this._reset();
};

stat.prototype.addSeqs = function addSeqs(seqs) {
  seqs.forEach(function(seq) {
    this.addSeq(seq);
  }.bind(this));
};

stat.prototype.resetSeqs = function reset(seqs) {
  this.seqs = [];

  // support sequence models
  if (!(seqs instanceof Array)){
    this.mseqs = seqs;
    var mSeqsPluck = function() {
      var seqArr = this.mseqs.pluck("seq");
      this.resetSeqs(seqArr);
    };
    seqs.on("add change reset ", mSeqsPluck, this);
    mSeqsPluck.call(this);
  } else {
    this.addSeqs(seqs);
    this._reset();
    this.trigger("reset");
  }
};

var calcValues = ["consensus", "frequency", "maxLength", "ic", "gaps"];

stat.prototype._reset = function _reset() {
  for (var i = 0; i < calcValues.length; i++) {
    this["_" + calcValues[i]] = undefined;
  }
  this._identity = undefined;
  this._background = undefined;
};

// -----------------------------------------------------------------------------
// BEGIN: setter/getter
// -----------------------------------------------------------------------------

stat.prototype.setBackground = function setBackground(b) {
  this._useBackground = b;
  this._reset();
};

stat.prototype.useBackground = function useBackground() {
  this.setBackground(true);
};

stat.prototype.setDNA = function setNucleotide() {
  this.alphabetSize = 4;
};

stat.prototype.setProtein = function setDNA() {
  this.alphabetSize = 20;
};

// -----------------------------------------------------------------------------
// BEGIN: auto wrappers
// -----------------------------------------------------------------------------

// neat auto-wrappers
calcValues.forEach(function(key) {
  stat.prototype[key] = function() {
    if (this["_" + key] === undefined) {
      this[key + "Calc"]();
    }
    return this["_" + key];
  };
});

stat.prototype.identity = function identitiy(seq) {
  // do not cache if its called with a special compare seq
  var ident;
  if (this._identity === undefined || seq) {
    ident = this.identityCalc(seq);
    this._identity = undefined;
  }
  return this._identity || ident;
};

// set your own background with obj.bg
stat.prototype.background = function background() {
  if (this.bg !== undefined) {
    return this.bg;
  }
  if (this._background === undefined) {
    this.backgroundCalc();
  }
  return this._background;
};


// -----------------------------------------------------------------------------
// BEGIN: calc tools
// -----------------------------------------------------------------------------

// calculates the relative frequency of a base at a given position
// this is needed e.g. for the entropy calculation
// seqs: array of sequences (strings)
// opts:
//    all: boolean (use to show the frequencies for all letters [including the ignored ones]
//    (default false)
// @returns array of all positions with a dictionary of all bases with their relative frequency
stat.prototype.frequencyCalc = function frequencyCalc(opts) {
  var occs, totalPerPos;
  occs = new Array(this.maxLength());
  totalPerPos = new Array(this.seqs.length);
  var ignoredChars = this.ignoredChars;
  if(opts !== undefined && opts.all){
    ignoredChars = []; 
  }

  // count the occurrences of the chars at a position
  _.each(this.seqs, function(el) {
    _.each(el, function(c, pos) {
      if (ignoredChars.indexOf(c) >= 0) return;
      if (occs[pos] === undefined) {
        occs[pos] = {};
      }
      if (occs[pos][c] === undefined) {
        occs[pos][c] = 0;
      }
      occs[pos][c] ++;
      if (totalPerPos[pos] === undefined) {
        totalPerPos[pos] = 0;
      }
      totalPerPos[pos] ++;
    });
  });

  // normalize to 1
  _.each(occs, function(el, pos) {
    return _.each(el, function(val, c) {
      return (occs[pos][c] = val / totalPerPos[pos]);
    });
  });
  this._frequency = occs;
  return occs;
};

// seqs: array of sequences (strings)
stat.prototype.backgroundCalc = function backgroundCalc() {
  var occ = {};
  var total = 0;

  // count the occurences of the chars of a position
  _.each(this.seqs, function(el) {
    _.each(el, function(c) {
      if (occ[c] === undefined) {
        occ[c] = 0;
      }
      occ[c] ++;
      return total++;
    });
  });

  // normalize to 1
  occ = _.mapValues(occ, function(val) {
    return val / total;
  });
  this._background = occ;
  return occ;
};


// information content after Shannon
// * gaps are excluded
stat.prototype.icCalc = function icCalc() {
  var f = this.frequency();
  if (this._useBackground) {
    var b = this.background();
  }
  var ignoredChars = this.ignoredChars;
  var useBackground = this._useBackground;
  var ic = _.map(f, function(el) {
    return _.reduce(el, function(memo, val, c) {
      if (ignoredChars.indexOf(c) >= 0) return memo;
      if (useBackground) {
        val = val / b[c];
      }
      return memo - val * (Math.log(val) / Math.log(2));
    }, 0);
  });
  this._ic = ic;
  return ic;
};

// sequence conservation after Schneider and Stephens (1990)
// @cite Schneider, T.D. and Stephens, R.M. 1990. Sequence logos: A new way to
// display consensus sequences. Nucleic Acids Res. 18: 6097–6100.
stat.prototype.conservation = function conservation(alphabetSize) {
  var ic = this.ic();
  alphabetSize = alphabetSize || this.alphabetSize;
  var icMax = Math.log(alphabetSize) / Math.log(2);
  var conserv = _.map(ic, function(el) {
    return icMax - el;
  });
  return conserv;
};

// sequence conservation after Schneider and Stephens (1990)
// conservation for each amino acid
// * gaps are excluded
stat.prototype.conservResidue = function conservation(input) {
  var alphabetSize = input ? input.alphabetSize : undefined;
  var ic;
  var ignoredChars = this.ignoredChars;
  if (input !== undefined && input.scaled) {
    ic = this.scale(this.conservation(alphabetSize));
  } else {
    ic = this.conservation(alphabetSize);
  }
  var f = this.frequency();
  var keys;
  var conserv = _.map(f, function(el, i) {
    keys = _.reject(_.keys(el), function(c) {
      return ignoredChars.indexOf(c) >= 0;
    });
    var obj = {};
    _.each(keys, function(key) {
      obj[key] = el[key] * ic[i];
    });
    return obj;
  });
  return conserv;
};

// type 2 sequence logo method
// scales relative to background
stat.prototype.conservResidue2 = function conservation(alphabetSize) {
  var f = this.frequency();
  var ic = this.conservation(alphabetSize);
  var b = this.background();
  var conserv = _.map(f, function(el, i) {
    return _.map(el, function(val) {
      var sum = _.reduce(f[i], function(memo, e) {
        return memo + e / b[i];
      }, 0);
      return ((val / b[i]) / sum) * ic[i];
    }, 0);
  });
  return conserv;
};

// scale information content or conservation to 1
stat.prototype.scale = function conservation(ic, alphabetSize) {
  alphabetSize = alphabetSize || this.alphabetSize;
  var icMax = Math.log(alphabetSize) / Math.log(2);
  var conserv = _.map(ic, function(el) {
    return el / icMax;
  });
  return conserv;
};

stat.prototype.maxLengthCalc = function() {
  this._maxLength = _.max(this.seqs, function(seq) {
    return seq.length;
  }).length;
};

// seqs: array of sequences (strings)
// @returns consenus sequence
stat.prototype.consensusCalc = function consensusCal() {
  var occs = new Array(this.maxLength());

  // count the occurrences of the chars of a position
  _.each(this.seqs, function(el) {
    _.each(el, function(c, pos) {
      if (occs[pos] === undefined) {
        occs[pos] = {};
      }
      if (occs[pos][c] === undefined) {
        occs[pos][c] = 0;
      }
      occs[pos][c] ++;
    });
  });

  // now pick the char with most occurrences
  this._consensus = _.reduce(occs, function(memo, occ) {
    var keys;
    keys = _.keys(occ);
    return memo += _.max(keys, function(key) {
      return occ[key];
    });
  }, "");

  return this._consensus;
};

// seqs: array of sequences (strings)
// consensus: calculated consensus seq
// calculates for each sequence
// * matches with the consensus seq
// * identity = matchedChars / totalChars (excluding gaps)
// @returns: array of length of the seqs with the identity to the consensus (double)
stat.prototype.identityCalc = function identitiyCalc(compareSeq) {
  var consensus = compareSeq || this.consensus();
  this._identity = this.seqs.map(function(seq) {
    var matches = 0;
    var total = 0;
    for (var i = 0; i < seq.length; i++) {
      if (seq[i] !== "-" && consensus[i] !== "-") {
        total++;
        if (seq[i] === consensus[i]) {
          matches++;
        }
      }
    }
    return matches / total;
  });
  return this._identity;
};

// percentage of gaps per column
stat.prototype.gapsCalc = function gapsCount() {
  var occs = new Array(this.maxLength());
  // count the occurrences of the chars of a position
  _.each(this.seqs, function(el) {
    _.each(el, function(c, pos) {
      if (occs[pos] === undefined) {
        occs[pos] = {
          g: 0,
          t: 0
        };
      }
      c = c === "-" ? "g" : "t";
      occs[pos][c] ++;
    });
  });

  // now pick the char with most occurrences
  this._gaps = _.map(occs, function(el) {
    return el.g / (el.g + el.t);
  });
  return this._gaps;
};

_.mixin({
  mapValues: function(obj, f_val) {
    return _.object(_.keys(obj), _.map(obj, f_val));
  }
});

require("biojs-events").mixin(stat.prototype);

module.exports = stat;

},{"biojs-events":13,"underscore":66}],66:[function(require,module,exports){
//     Underscore.js 1.8.1
//     http://underscorejs.org
//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind,
    nativeCreate       = Object.create;

  // Naked function reference for surrogate-prototype-swapping.
  var Ctor = function(){};

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.8.1';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var optimizeCb = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      case 2: return function(value, other) {
        return func.call(context, value, other);
      };
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  // A mostly-internal function to generate callbacks that can be applied
  // to each element in a collection, returning the desired result — either
  // identity, an arbitrary callback, a property matcher, or a property accessor.
  var cb = function(value, context, argCount) {
    if (value == null) return _.identity;
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    if (_.isObject(value)) return _.matcher(value);
    return _.property(value);
  };
  _.iteratee = function(value, context) {
    return cb(value, context, Infinity);
  };

  // An internal function for creating assigner functions.
  var createAssigner = function(keysFunc, undefinedOnly) {
    return function(obj) {
      var length = arguments.length;
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  };

  // An internal function for creating a new object that inherits from another.
  var baseCreate = function(prototype) {
    if (!_.isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  };

  // Helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object
  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  var isArrayLike = function(collection) {
    var length = collection && collection.length;
    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Create a reducing function iterating left or right.
  function createReduce(dir) {
    // Optimized iterator function as using arguments.length
    // in the main function will deoptimize the, see #1991.
    function iterator(obj, iteratee, memo, keys, index, length) {
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = keys ? keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    }

    return function(obj, iteratee, memo, context) {
      iteratee = optimizeCb(iteratee, context, 4);
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      // Determine the initial value if none is provided.
      if (arguments.length < 3) {
        memo = obj[keys ? keys[index] : index];
        index += dir;
      }
      return iterator(obj, iteratee, memo, keys, index, length);
    };
  }

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = createReduce(-1);

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var key;
    if (isArrayLike(obj)) {
      key = _.findIndex(obj, predicate, context);
    } else {
      key = _.findKey(obj, predicate, context);
    }
    if (key !== void 0 && key !== -1) return obj[key];
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(cb(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given value (using `===`).
  // Aliased as `includes` and `include`.
  _.contains = _.includes = _.include = function(obj, target) {
    if (!isArrayLike(obj)) obj = _.values(obj);
    return _.indexOf(obj, target) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      var func = isFunc ? method : value[method];
      return func == null ? func : func.apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matcher(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matcher(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection, using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function(obj) {
    var set = isArrayLike(obj) ? obj : _.values(obj);
    var length = set.length;
    var shuffled = Array(length);
    for (var index = 0, rand; index < length; index++) {
      rand = _.random(0, index);
      if (rand !== index) shuffled[index] = shuffled[rand];
      shuffled[rand] = set[index];
    }
    return shuffled;
  };

  // Sample **n** random values from a collection.
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iteratee(value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, iteratee, context) {
      var result = {};
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key]++; else result[key] = 1;
  });

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (isArrayLike(obj)) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var pass = [], fail = [];
    _.each(obj, function(value, key, obj) {
      (predicate(value, key, obj) ? pass : fail).push(value);
    });
    return [pass, fail];
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[0];
    return _.initial(array, array.length - n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[array.length - 1];
    return _.rest(array, Math.max(0, array.length - n));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, startIndex) {
    var output = [], idx = 0;
    for (var i = startIndex || 0, length = input && input.length; i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
        //flatten current level of array or arguments object
        if (!shallow) value = flatten(value, shallow, strict);
        var j = 0, len = value.length;
        output.length += len;
        while (j < len) {
          output[idx++] = value[j++];
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (array == null) return [];
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = array.length; i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!_.contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!_.contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(flatten(arguments, true, true));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    if (array == null) return [];
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = array.length; i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      for (var j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = flatten(arguments, true, true, 1);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    return _.unzip(arguments);
  };

  // Complement of _.zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices
  _.unzip = function(array) {
    var length = array && _.max(array, 'length').length || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = _.pluck(array, index);
    }
    return result;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    var result = {};
    for (var i = 0, length = list && list.length; i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = function(array, item, isSorted) {
    var i = 0, length = array && array.length;
    if (typeof isSorted == 'number') {
      i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;
    } else if (isSorted && length) {
      i = _.sortedIndex(array, item);
      return array[i] === item ? i : -1;
    }
    if (item !== item) {
      return _.findIndex(slice.call(array, i), _.isNaN);
    }
    for (; i < length; i++) if (array[i] === item) return i;
    return -1;
  };

  _.lastIndexOf = function(array, item, from) {
    var idx = array ? array.length : 0;
    if (typeof from == 'number') {
      idx = from < 0 ? idx + from + 1 : Math.min(idx, from + 1);
    }
    if (item !== item) {
      return _.findLastIndex(slice.call(array, 0, idx), _.isNaN);
    }
    while (--idx >= 0) if (array[idx] === item) return idx;
    return -1;
  };

  // Generator function to create the findIndex and findLastIndex functions
  function createIndexFinder(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = array != null && array.length;
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  }

  // Returns the first index on an array-like that passes a predicate test
  _.findIndex = createIndexFinder(1);

  _.findLastIndex = createIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = array.length;
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (arguments.length <= 1) {
      stop = start || 0;
      start = 0;
    }
    step = step || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Determines whether to execute a function as a constructor
  // or a normal function with the provided arguments
  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (_.isObject(result)) return result;
    return self;
  };

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    var args = slice.call(arguments, 2);
    var bound = function() {
      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
    };
    return bound;
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder, allowing any combination of arguments to be pre-filled.
  _.partial = function(func) {
    var boundArgs = slice.call(arguments, 1);
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  };

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = function(obj) {
    var i, length = arguments.length, key;
    if (length <= 1) throw new Error('bindAll must be passed function names');
    for (i = 1; i < length; i++) {
      key = arguments[i];
      obj[key] = _.bind(obj[key], obj);
    }
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){
      return func.apply(null, args);
    }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = _.partial(_.delay, _, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    if (!options) options = {};
    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };
    return function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;

    var later = function() {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    };

    return function() {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) timeout = setTimeout(later, wait);
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed on and after the Nth call.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed up to (but not including) the Nth call.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  // Object Functions
  // ----------------

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    return keys;
  };

  // Retrieve all the property names of an object.
  _.allKeys = function(obj) {
    if (!_.isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Returns the results of applying the iteratee to each element of the object
  // In contrast to _.map it returns an object
  _.mapObject = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys =  _.keys(obj),
          length = keys.length,
          results = {},
          currentKey;
      for (var index = 0; index < length; index++) {
        currentKey = keys[index];
        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
      }
      return results;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = createAssigner(_.allKeys);

  // Assigns a given object with all the own properties in the passed-in object(s)
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  _.extendOwn = createAssigner(_.keys);

  // Returns the first key on an object that passes a predicate test
  _.findKey = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = _.keys(obj), key;
    for (var i = 0, length = keys.length; i < length; i++) {
      key = keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(obj, iteratee, context) {
    var result = {}, key;
    if (obj == null) return result;
    if (_.isFunction(iteratee)) {
      iteratee = optimizeCb(iteratee, context);
      var keys = _.allKeys(obj);
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        var value = obj[key];
        if (iteratee(value, key, obj)) result[key] = value;
      }
    } else {
      var keys = flatten(arguments, false, false, 1);
      obj = new Object(obj);
      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];
        if (key in obj) result[key] = obj[key];
      }
    }
    return result;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj, iteratee, context) {
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
    } else {
      var keys = _.map(flatten(arguments, false, false, 1), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  };

  // Fill in a given object with default properties.
  _.defaults = createAssigner(_.allKeys, true);

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Returns whether an object has a given set of `key:value` pairs.
  _.isMatch = function(object, attrs) {
    var keys = _.keys(attrs), length = keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  };


  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
    }

    var areArrays = className === '[object Array]';
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                               _.isFunction(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    
    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      length = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (_.keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = keys[length];
        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
    return _.keys(obj).length === 0;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return _.has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
  // IE 11 (#1621), and in Safari 8 (#1929).
  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj !== +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return obj != null && hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  // Predicate-generating functions. Often useful outside of Underscore.
  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  _.property = function(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  };

  // Generates a function for a given object that returns a given property.
  _.propertyOf = function(obj) {
    return obj == null ? function(){} : function(key) {
      return obj[key];
    };
  };

  // Returns a predicate for checking whether an object has a given set of 
  // `key:value` pairs.
  _.matcher = _.matches = function(attrs) {
    attrs = _.extendOwn({}, attrs);
    return function(obj) {
      return _.isMatch(obj, attrs);
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

   // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property, fallback) {
    var value = object == null ? void 0 : object[property];
    if (value === void 0) {
      value = fallback;
    }
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escaper, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offest.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    try {
      var render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(instance, obj) {
    return instance._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result(this, func.apply(_, args));
      };
    });
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return result(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxy for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;
  
  _.prototype.toString = function() {
    return '' + this._wrapped;
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define === 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}.call(this));

},{}],67:[function(require,module,exports){
(function (global){
if (typeof window !== "undefined") {
    module.exports = window;
} else if (typeof global !== "undefined") {
    module.exports = global;
} else if (typeof self !== "undefined"){
    module.exports = self;
} else {
    module.exports = {};
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],68:[function(require,module,exports){
module.exports = once

once.proto = once(function () {
  Object.defineProperty(Function.prototype, 'once', {
    value: function () {
      return once(this)
    },
    configurable: true
  })
})

function once (fn) {
  var called = false
  return function () {
    if (called) return
    called = true
    return fn.apply(this, arguments)
  }
}

},{}],69:[function(require,module,exports){
var isFunction = require('is-function')

module.exports = forEach

var toString = Object.prototype.toString
var hasOwnProperty = Object.prototype.hasOwnProperty

function forEach(list, iterator, context) {
    if (!isFunction(iterator)) {
        throw new TypeError('iterator must be a function')
    }

    if (arguments.length < 3) {
        context = this
    }
    
    if (toString.call(list) === '[object Array]')
        forEachArray(list, iterator, context)
    else if (typeof list === 'string')
        forEachString(list, iterator, context)
    else
        forEachObject(list, iterator, context)
}

function forEachArray(array, iterator, context) {
    for (var i = 0, len = array.length; i < len; i++) {
        if (hasOwnProperty.call(array, i)) {
            iterator.call(context, array[i], i, array)
        }
    }
}

function forEachString(string, iterator, context) {
    for (var i = 0, len = string.length; i < len; i++) {
        // no such thing as a sparse string.
        iterator.call(context, string.charAt(i), i, string)
    }
}

function forEachObject(object, iterator, context) {
    for (var k in object) {
        if (hasOwnProperty.call(object, k)) {
            iterator.call(context, object[k], k, object)
        }
    }
}

},{"is-function":70}],70:[function(require,module,exports){
module.exports = isFunction

var toString = Object.prototype.toString

function isFunction (fn) {
  var string = toString.call(fn)
  return string === '[object Function]' ||
    (typeof fn === 'function' && string !== '[object RegExp]') ||
    (typeof window !== 'undefined' &&
     // IE8 and below
     (fn === window.setTimeout ||
      fn === window.alert ||
      fn === window.confirm ||
      fn === window.prompt))
};

},{}],71:[function(require,module,exports){

exports = module.exports = trim;

function trim(str){
  return str.replace(/^\s*|\s*$/g, '');
}

exports.left = function(str){
  return str.replace(/^\s*/, '');
};

exports.right = function(str){
  return str.replace(/\s*$/, '');
};

},{}],72:[function(require,module,exports){
var trim = require('trim')
  , forEach = require('for-each')
  , isArray = function(arg) {
      return Object.prototype.toString.call(arg) === '[object Array]';
    }

module.exports = function (headers) {
  if (!headers)
    return {}

  var result = {}

  forEach(
      trim(headers).split('\n')
    , function (row) {
        var index = row.indexOf(':')
          , key = trim(row.slice(0, index)).toLowerCase()
          , value = trim(row.slice(index + 1))

        if (typeof(result[key]) === 'undefined') {
          result[key] = value
        } else if (isArray(result[key])) {
          result[key].push(value)
        } else {
          result[key] = [ result[key], value ]
        }
      }
  )

  return result
}
},{"for-each":69,"trim":71}],73:[function(require,module,exports){
var Colors, Colorscheme, Model;

Colors = require("msa-colorschemes");

Model = require("backbone-thin").Model;

module.exports = Colorscheme = Model.extend({
  defaults: {
    scheme: "taylor",
    colorBackground: true,
    showLowerCase: true,
    opacity: 0.6
  },
  initialize: function(data, seqs, stat) {
    this.colors = new Colors({
      seqs: seqs,
      conservation: function() {
        return stat.scale(stat.conservation());
      }
    });
    return stat.on("reset", function() {
      if (this.getSelectedScheme().type === "dyn") {
        return this.getSelectedScheme().reset();
      }
    }, this);
  },
  addStaticScheme: function(name, dict) {
    return this.colors.addStaticScheme(name, dict);
  },
  addDynScheme: function(name, fun) {
    return this.colors.addDynScheme(name, fun);
  },
  getScheme: function(name) {
    return this.colors.getScheme(name);
  },
  getSelectedScheme: function() {
    return this.colors.getScheme(this.get("scheme"));
  }
});



},{"backbone-thin":4,"msa-colorschemes":53}],74:[function(require,module,exports){
var Columns, Model, _;

Model = require("backbone-thin").Model;

_ = require("underscore");

module.exports = Columns = Model.extend({
  initialize: function(o, stat) {
    if (this.get("hidden") == null) {
      this.set("hidden", []);
    }
    return this.stats = stat;
  },
  calcHiddenColumns: function(n) {
    var hidden, i, j, len, newX;
    hidden = this.get("hidden");
    newX = n;
    for (j = 0, len = hidden.length; j < len; j++) {
      i = hidden[j];
      if (i <= newX) {
        newX++;
      }
    }
    return newX - n;
  }
});



},{"backbone-thin":4,"underscore":66}],75:[function(require,module,exports){
var Config, Model;

Model = require("backbone-thin").Model;

module.exports = Config = Model.extend({
  defaults: {
    registerMouseHover: false,
    registerMouseClicks: true,
    importProxy: "https://cors-anywhere.herokuapp.com/",
    eventBus: true,
    alphabetSize: 20,
    dropImport: false,
    debug: false,
    hasRef: false
  }
});



},{"backbone-thin":4}],76:[function(require,module,exports){
var Loader, Model, Package;

Loader = require("../utils/loader");

Model = require("backbone-thin").Model;

module.exports = Package = Model.extend({
  initialize: function(g) {
    return this.g = g;
  },
  development: {
    "msa-tnt": "/node_modules/msa-tnt/build/bundle.js",
    "biojs-io-newick": "/node_modules/biojs-io-newick/build/biojs-io-newick.min.js"
  },
  loadPackage: function(pkg, cb) {
    var p;
    try {
      p = require(pkg);
      return cb(p);
    } catch (_error) {
      return Loader.loadScript(this._pkgURL(pkg), cb);
    }
  },
  loadPackages: function(pkgs, cb) {
    var cbs;
    cbs = Loader.joinCb(function() {
      return cb();
    }, pkgs.length);
    return pkgs.forEach((function(_this) {
      return function(pkg) {
        return _this.loadPackage(pkg, cbs);
      };
    })(this));
  },
  _pkgURL: function(pkg) {
    var url;
    if (this.g.config.get("debug")) {
      url = this.development[pkg];
    } else {
      url = "http://wzrd.in/bundle/" + pkg + "@latest";
    }
    return url;
  }
});



},{"../utils/loader":107,"backbone-thin":4}],77:[function(require,module,exports){
var ColumnSelection, Model, PosSelection, RowSelection, Selection, _;

_ = require("underscore");

Model = require("backbone-thin").Model;

Selection = Model.extend({
  defaults: {
    type: "super"
  }
});

RowSelection = Selection.extend({
  defaults: _.extend({}, Selection.prototype.defaults, {
    type: "row",
    seqId: ""
  }),
  inRow: function(seqId) {
    return seqId === this.get("seqId");
  },
  inColumn: function(rowPos) {
    return true;
  },
  getLength: function() {
    return 1;
  }
});

ColumnSelection = Selection.extend({
  defaults: _.extend({}, Selection.prototype.defaults, {
    type: "column",
    xStart: -1,
    xEnd: -1
  }),
  inRow: function() {
    return true;
  },
  inColumn: function(rowPos) {
    return xStart <= rowPos && rowPos <= xEnd;
  },
  getLength: function() {
    return xEnd - xStart;
  }
});

PosSelection = RowSelection.extend(_.extend({}, _.pick(ColumnSelection, "inColumn"), _.pick(ColumnSelection, "getLength"), {
  defaults: _.extend({}, ColumnSelection.prototype.defaults, RowSelection.prototype.defaults, {
    type: "pos"
  })
}));

module.exports.sel = Selection;

module.exports.possel = PosSelection;

module.exports.rowsel = RowSelection;

module.exports.columnsel = ColumnSelection;



},{"backbone-thin":4,"underscore":66}],78:[function(require,module,exports){
var Collection, SelectionManager, _, sel;

sel = require("./Selection");

_ = require("underscore");

Collection = require("backbone-thin").Collection;

module.exports = SelectionManager = Collection.extend({
  model: sel.sel,
  initialize: function(data, opts) {
    if (opts != null) {
      this.g = opts.g;
      this.listenTo(this.g, "residue:click", function(e) {
        return this._handleE(e.evt, new sel.possel({
          xStart: e.rowPos,
          xEnd: e.rowPos,
          seqId: e.seqId
        }));
      });
      this.listenTo(this.g, "row:click", function(e) {
        return this._handleE(e.evt, new sel.rowsel({
          seqId: e.seqId
        }));
      });
      return this.listenTo(this.g, "column:click", function(e) {
        return this._handleE(e.evt, new sel.columnsel({
          xStart: e.rowPos,
          xEnd: e.rowPos + e.stepSize - 1
        }));
      });
    }
  },
  getSelForRow: function(seqId) {
    return this.filter(function(el) {
      return el.inRow(seqId);
    });
  },
  getSelForColumns: function(rowPos) {
    return this.filter(function(el) {
      return el.inColumn(rowPos);
    });
  },
  addJSON: function(model) {
    return this.add(this._fromJSON(model));
  },
  _fromJSON: function(model) {
    switch (model.type) {
      case "column":
        return new sel.columnsel(model);
      case "row":
        return new sel.rowsel(model);
      case "pos":
        return new sel.possel(model);
    }
  },
  resetJSON: function(arr) {
    arr = _.map(arr, this._fromJSON);
    return this.reset(arr);
  },
  getBlocksForRow: function(seqId, maxLen) {
    var blocks, i, j, k, len, ref, ref1, results, results1, seli, selis;
    selis = this.filter(function(el) {
      return el.inRow(seqId);
    });
    blocks = [];
    for (i = 0, len = selis.length; i < len; i++) {
      seli = selis[i];
      if (seli.attributes.type === "row") {
        blocks = (function() {
          results = [];
          for (var j = 0; 0 <= maxLen ? j <= maxLen : j >= maxLen; 0 <= maxLen ? j++ : j--){ results.push(j); }
          return results;
        }).apply(this);
        break;
      } else {
        blocks = blocks.concat((function() {
          results1 = [];
          for (var k = ref = seli.attributes.xStart, ref1 = seli.attributes.xEnd; ref <= ref1 ? k <= ref1 : k >= ref1; ref <= ref1 ? k++ : k--){ results1.push(k); }
          return results1;
        }).apply(this));
      }
    }
    return blocks;
  },
  getAllColumnBlocks: function(conf) {
    var blocks, filtered, i, j, len, maxLen, ref, ref1, results, seli, withPos;
    maxLen = conf.maxLen;
    withPos = conf.withPos;
    blocks = [];
    if (conf.withPos) {
      filtered = this.filter(function(el) {
        return el.get('xStart') != null;
      });
    } else {
      filtered = this.filter(function(el) {
        return el.get('type') === "column";
      });
    }
    for (i = 0, len = filtered.length; i < len; i++) {
      seli = filtered[i];
      blocks = blocks.concat((function() {
        results = [];
        for (var j = ref = seli.attributes.xStart, ref1 = seli.attributes.xEnd; ref <= ref1 ? j <= ref1 : j >= ref1; ref <= ref1 ? j++ : j--){ results.push(j); }
        return results;
      }).apply(this));
    }
    blocks = _.uniq(blocks);
    return blocks;
  },
  invertRow: function(rows) {
    var el, i, inverted, len, s, selRows;
    selRows = this.where({
      type: "row"
    });
    selRows = _.map(selRows, function(el) {
      return el.attributes.seqId;
    });
    inverted = _.filter(rows, function(el) {
      if (selRows.indexOf(el) >= 0) {
        return false;
      }
      return true;
    });
    s = [];
    for (i = 0, len = inverted.length; i < len; i++) {
      el = inverted[i];
      s.push(new sel.rowsel({
        seqId: el
      }));
    }
    return this.reset(s);
  },
  invertCol: function(columns) {
    var el, i, inverted, len, s, selColumns, xEnd, xStart;
    selColumns = this.where({
      type: "column"
    });
    selColumns = _.reduce(selColumns, function(memo, el) {
      var i, ref, ref1, results;
      return memo.concat((function() {
        results = [];
        for (var i = ref = el.attributes.xStart, ref1 = el.attributes.xEnd; ref <= ref1 ? i <= ref1 : i >= ref1; ref <= ref1 ? i++ : i--){ results.push(i); }
        return results;
      }).apply(this));
    }, []);
    inverted = _.filter(columns, function(el) {
      if (selColumns.indexOf(el) >= 0) {
        return false;
      }
      return true;
    });
    if (inverted.length === 0) {
      return;
    }
    s = [];
    xStart = xEnd = inverted[0];
    for (i = 0, len = inverted.length; i < len; i++) {
      el = inverted[i];
      if (xEnd + 1 === el) {
        xEnd = el;
      } else {
        s.push(new sel.columnsel({
          xStart: xStart,
          xEnd: xEnd
        }));
        xStart = xEnd = el;
      }
    }
    if (xStart !== xEnd) {
      s.push(new sel.columnsel({
        xStart: xStart,
        xEnd: inverted[inverted.length - 1]
      }));
    }
    return this.reset(s);
  },
  _handleE: function(e, selection) {
    if (e.ctrlKey || e.metaKey) {
      return this.add(selection);
    } else {
      return this.reset([selection]);
    }
  },
  _reduceColumns: function() {
    return this.each(function(el, index, arr) {
      var cols, i, j, left, lefts, len, len1, right, rights, xEnd, xStart;
      cols = _.filter(arr, function(el) {
        return el.get('type') === 'column';
      });
      xStart = el.get('xStart');
      xEnd = el.get('xEnd');
      lefts = _.filter(cols, function(el) {
        return el.get('xEnd') === (xStart - 1);
      });
      for (i = 0, len = lefts.length; i < len; i++) {
        left = lefts[i];
        left.set('xEnd', xStart);
      }
      rights = _.filter(cols, function(el) {
        return el.get('xStart') === (xEnd + 1);
      });
      for (j = 0, len1 = rights.length; j < len1; j++) {
        right = rights[j];
        right.set('xStart', xEnd);
      }
      if (lefts.length > 0 || rights.length > 0) {
        console.log("removed el");
        return el.collection.remove(el);
      }
    });
  }
});



},{"./Selection":77,"backbone-thin":4,"underscore":66}],79:[function(require,module,exports){
var Config, Model;

Model = require("backbone-thin").Model;

module.exports = Config = Model.extend({
  defaults: {
    searchText: ""
  }
});



},{"backbone-thin":4}],80:[function(require,module,exports){
var Model, Visibility;

Model = require("backbone-thin").Model;

module.exports = Visibility = Model.extend({
  defaults: {
    searchBox: -10,
    overviewBox: 30,
    headerBox: -1,
    alignmentBody: 0
  }
});



},{"backbone-thin":4}],81:[function(require,module,exports){
var Model, Visibility;

Model = require("backbone-thin").Model;

module.exports = Visibility = Model.extend({
  defaults: {
    sequences: true,
    markers: true,
    metacell: false,
    conserv: false,
    overviewbox: false,
    seqlogo: false,
    gapHeader: false,
    leftHeader: true,
    labels: true,
    labelName: true,
    labelId: true,
    labelPartition: false,
    labelCheckbox: false,
    metaGaps: true,
    metaIdentity: true,
    metaLinks: true
  },
  constructor: function(attributes, options) {
    this.calcDefaults(options.model);
    return Model.apply(this, arguments);
  },
  initialize: function() {
    this.listenTo(this, "change:metaLinks change:metaIdentity change:metaGaps", function() {
      return this.trigger("change:metacell");
    }, this);
    this.listenTo(this, "change:labelName change:labelId change:labelPartition change:labelCheckbox", function() {
      return this.trigger("change:labels");
    }, this);
    return this.listenTo(this, "change:markers change:conserv change:seqlogo change:gapHeader", function() {
      return this.trigger("change:header");
    }, this);
  },
  calcDefaults: function(seqs) {
    var ids, seq;
    console.log(seqs);
    if (seqs.length > 0) {
      seq = seqs.at(0);
      ids = seq.get("ids");
      if (ids !== void 0 && Object.keys(ids).length === 0) {
        return this.defaults.metaLinks = false;
      }
    }
  }
});



},{"backbone-thin":4}],82:[function(require,module,exports){
var Model, Zoomer;

Model = require("backbone-thin").Model;

module.exports = Zoomer = Model.extend({
  constructor: function(attributes, options) {
    this.calcDefaults(options.model);
    Model.apply(this, arguments);
    this.g = options.g;
    this.listenTo(this, "change:labelIdLength change:labelNameLength change:labelPartLength change:labelCheckLength", function() {
      return this.trigger("change:labelWidth", this.getLabelWidth());
    }, this);
    this.listenTo(this, "change:metaLinksWidth change:metaIdentWidth change:metaGapWidth", function() {
      return this.trigger("change:metaWidth", this.getMetaWidth());
    }, this);
    return this;
  },
  defaults: {
    alignmentWidth: "auto",
    alignmentHeight: 225,
    columnWidth: 15,
    rowHeight: 15,
    autoResize: true,
    textVisible: true,
    labelIdLength: 30,
    labelNameLength: 100,
    labelPartLength: 15,
    labelCheckLength: 15,
    labelFontsize: 13,
    labelLineHeight: "13px",
    markerFontsize: "10px",
    stepSize: 1,
    markerStepSize: 2,
    markerHeight: 20,
    residueFont: "13",
    canvasEventScale: 1,
    boxRectHeight: 2,
    boxRectWidth: 2,
    overviewboxPaddingTop: 10,
    menuFontsize: "14px",
    menuItemFontsize: "14px",
    menuItemLineHeight: "14px",
    menuMarginLeft: "3px",
    menuPadding: "3px 4px 3px 4px",
    metaGapWidth: 35,
    metaIdentWidth: 40,
    metaLinksWidth: 25,
    _alignmentScrollLeft: 0,
    _alignmentScrollTop: 0
  },
  calcDefaults: function(model) {
    var maxLen;
    maxLen = model.getMaxLength();
    if (maxLen < 200 && model.length < 30) {
      return this.defaults.boxRectWidth = this.defaults.boxRectHeight = 5;
    }
  },
  getAlignmentWidth: function(n) {
    if (this.get("autoResize") && n !== void 0) {
      return this.get("columnWidth") * n;
    }
    if (this.get("alignmentWidth") === void 0 || this.get("alignmentWidth") === "auto" || this.get("alignmentWidth") === 0) {
      return this._adjustWidth();
    } else {
      return this.get("alignmentWidth");
    }
  },
  setLeftOffset: function(n) {
    var val;
    val = n;
    val = Math.max(0, val);
    val -= this.g.columns.calcHiddenColumns(val);
    return this.set("_alignmentScrollLeft", val * this.get('columnWidth'));
  },
  setTopOffset: function(n) {
    var height, i, j, ref, seq, val;
    val = Math.max(0, n - 1);
    height = 0;
    for (i = j = 0, ref = val; j <= ref; i = j += 1) {
      seq = this.model.at(i);
      height += seq.attributes.height || 1;
    }
    return this.set("_alignmentScrollTop", height * this.get("rowHeight"));
  },
  getLeftBlockWidth: function() {
    var paddingLeft;
    paddingLeft = 0;
    if (this.g.vis.get("labels")) {
      paddingLeft += this.getLabelWidth();
    }
    if (this.g.vis.get("metacell")) {
      paddingLeft += this.getMetaWidth();
    }
    return paddingLeft;
  },
  getMetaWidth: function() {
    var val;
    val = 0;
    if (this.g.vis.get("metaGaps")) {
      val += this.get("metaGapWidth");
    }
    if (this.g.vis.get("metaIdentity")) {
      val += this.get("metaIdentWidth");
    }
    if (this.g.vis.get("metaLinks")) {
      val += this.get("metaLinksWidth");
    }
    return val;
  },
  getLabelWidth: function() {
    var val;
    val = 0;
    if (this.g.vis.get("labelName")) {
      val += this.get("labelNameLength");
    }
    if (this.g.vis.get("labelId")) {
      val += this.get("labelIdLength");
    }
    if (this.g.vis.get("labelPartition")) {
      val += this.get("labelPartLength");
    }
    if (this.g.vis.get("labelCheckbox")) {
      val += this.get("labelCheckLength");
    }
    return val;
  },
  _adjustWidth: function() {
    var calcWidth, maxWidth, parentWidth, val;
    if (!(this.el !== void 0 && this.model !== void 0)) {
      return;
    }
    if ((this.el.parentNode != null) && this.el.parentNode.offsetWidth !== 0) {
      parentWidth = this.el.parentNode.offsetWidth;
    } else {
      parentWidth = document.body.clientWidth - 35;
    }
    maxWidth = parentWidth - this.getLeftBlockWidth();
    calcWidth = this.getAlignmentWidth(this.model.getMaxLength() - this.g.columns.get('hidden').length);
    val = Math.min(maxWidth, calcWidth);
    val = Math.floor(val / this.get("columnWidth")) * this.get("columnWidth");
    return this.attributes.alignmentWidth = val;
  },
  autoResize: function() {
    if (this.get("autoResize")) {
      return this._adjustWidth(this.el, this.model);
    }
  },
  autoHeight: function(max) {
    var val;
    val = this.getMaxAlignmentHeight();
    if (max !== void 0 && max > 0) {
      val = Math.min(val, max);
    }
    return this.set("alignmentHeight", val);
  },
  setEl: function(el, model) {
    this.el = el;
    return this.model = model;
  },
  _checkScrolling: function(scrollObj, opts) {
    var xScroll, yScroll;
    xScroll = scrollObj[0];
    yScroll = scrollObj[1];
    this.set("_alignmentScrollLeft", xScroll, opts);
    return this.set("_alignmentScrollTop", yScroll, opts);
  },
  getMaxAlignmentHeight: function() {
    var height;
    height = 0;
    this.model.each(function(seq) {
      return height += seq.attributes.height || 1;
    });
    return height * this.get("rowHeight");
  },
  getMaxAlignmentWidth: function() {
    return this.model.getMaxLength() * this.get("columnWidth");
  }
});



},{"backbone-thin":4}],83:[function(require,module,exports){
var MSA;

MSA = require("./msa");

module.exports = function() {
  var msa;
  msa = function(args) {
    return MSA.apply(this, args);
  };
  msa.prototype = MSA.prototype;
  return new msa(arguments);
};

module.exports.msa = MSA;

module.exports.model = require("./model");

module.exports.menu = require("./menu");

module.exports.utils = require("./utils");

module.exports.selection = require("./g/selection/Selection");

module.exports.selcol = require("./g/selection/SelectionCol");

module.exports.view = require("backbone-viewj");

module.exports.boneView = require("backbone-childs");

module.exports._ = require('underscore');

module.exports.$ = require('jbone');

module.exports.io = {};

module.exports.io.xhr = require('xhr');

module.exports.io.fasta = require('biojs-io-fasta');

module.exports.io.clustal = require('biojs-io-clustal');

module.exports.io.gff = require('biojs-io-gff');

module.exports.version = "0.2.0";



},{"./g/selection/Selection":77,"./g/selection/SelectionCol":78,"./menu":85,"./model":101,"./msa":102,"./utils":106,"backbone-childs":2,"backbone-viewj":9,"biojs-io-clustal":"biojs-io-clustal","biojs-io-fasta":"biojs-io-fasta","biojs-io-gff":"biojs-io-gff","jbone":42,"underscore":66,"xhr":"xhr"}],84:[function(require,module,exports){
var ColorMenu, DebugMenu, ExportMenu, ExtraMenu, FilterMenu, HelpMenu, ImportMenu, MenuView, OrderingMenu, SelectionMenu, VisMenu, boneView;

boneView = require("backbone-childs");

ImportMenu = require("./views/ImportMenu");

FilterMenu = require("./views/FilterMenu");

SelectionMenu = require("./views/SelectionMenu");

VisMenu = require("./views/VisMenu");

ColorMenu = require("./views/ColorMenu");

OrderingMenu = require("./views/OrderingMenu");

ExtraMenu = require("./views/ExtraMenu");

ExportMenu = require("./views/ExportMenu");

HelpMenu = require("./views/HelpMenu");

DebugMenu = require("./views/DebugMenu");

module.exports = MenuView = boneView.extend({
  initialize: function(data) {
    this.msa = data.msa;
    this.addView("10_import", new ImportMenu({
      model: this.msa.seqs,
      g: this.msa.g,
      msa: this.msa
    }));
    this.addView("20_filter", new FilterMenu({
      model: this.msa.seqs,
      g: this.msa.g
    }));
    this.addView("30_selection", new SelectionMenu({
      model: this.msa.seqs,
      g: this.msa.g
    }));
    this.addView("40_vis", new VisMenu({
      model: this.msa.seqs,
      g: this.msa.g
    }));
    this.addView("50_color", new ColorMenu({
      model: this.msa.seqs,
      g: this.msa.g
    }));
    this.addView("60_ordering", new OrderingMenu({
      model: this.msa.seqs,
      g: this.msa.g
    }));
    this.addView("70_extra", new ExtraMenu({
      model: this.msa.seqs,
      g: this.msa.g,
      msa: this.msa
    }));
    this.addView("80_export", new ExportMenu({
      model: this.msa.seqs,
      g: this.msa.g,
      msa: this.msa
    }));
    this.addView("90_help", new HelpMenu({
      g: this.msa.g
    }));
    if (this.msa.g.config.get("debug")) {
      return this.addView("95_debug", new DebugMenu({
        g: this.msa.g
      }));
    }
  },
  render: function() {
    this.renderSubviews();
    this.el.setAttribute("class", "smenubar");
    return this.el.appendChild(document.createElement("p"));
  }
});



},{"./views/ColorMenu":87,"./views/DebugMenu":88,"./views/ExportMenu":89,"./views/ExtraMenu":90,"./views/FilterMenu":91,"./views/HelpMenu":92,"./views/ImportMenu":93,"./views/OrderingMenu":94,"./views/SelectionMenu":95,"./views/VisMenu":96,"backbone-childs":2}],85:[function(require,module,exports){
module.exports.defaultmenu = require("./defaultmenu");

module.exports.menubuilder = require("./menubuilder");



},{"./defaultmenu":84,"./menubuilder":86}],86:[function(require,module,exports){
var MenuBuilder, builder;

builder = require("menu-builder");

module.exports = MenuBuilder = builder.extend({
  buildDOM: function() {
    this.on("new:node", this.buildNode);
    this.on("new:button", this.buildButton);
    this.on("new:menu", this.buildMenu);
    return builder.prototype.buildDOM.call(this);
  },
  buildNode: function(li) {
    if (this.g != null) {
      return li.style.lineHeight = this.g.zoomer.get("menuItemLineHeight");
    }
  },
  buildButton: function(btn) {
    if (this.g != null) {
      btn.style.fontSize = this.g.zoomer.get("menuFontsize");
      btn.style.marginLeft = this.g.zoomer.get("menuMarginLeft");
      return btn.style.padding = this.g.zoomer.get("menuPadding");
    }
  },
  buildMenu: function(menu) {
    if (this.g != null) {
      return menu.style.fontSize = this.g.zoomer.get("menuItemFontsize");
    }
  }
});



},{"menu-builder":44}],87:[function(require,module,exports){
var ColorMenu, MenuBuilder, _, dom;

MenuBuilder = require("../menubuilder");

_ = require("underscore");

dom = require("dom-helper");

module.exports = ColorMenu = MenuBuilder.extend({
  initialize: function(data) {
    this.g = data.g;
    this.el.style.display = "inline-block";
    return this.listenTo(this.g.colorscheme, "change", function() {
      return this.render();
    });
  },
  render: function() {
    var colorschemes, j, len, menuColor, scheme, text;
    menuColor = this.setName("Color scheme");
    this.removeAllNodes();
    colorschemes = this.getColorschemes();
    for (j = 0, len = colorschemes.length; j < len; j++) {
      scheme = colorschemes[j];
      this.addScheme(menuColor, scheme);
    }
    text = "Background";
    if (this.g.colorscheme.get("colorBackground")) {
      text = "Hide " + text;
    } else {
      text = "Show " + text;
    }
    this.addNode(text, (function(_this) {
      return function() {
        return _this.g.colorscheme.set("colorBackground", !_this.g.colorscheme.get("colorBackground"));
      };
    })(this));
    this.grey(menuColor);
    dom.removeAllChilds(this.el);
    this.el.appendChild(this.buildDOM());
    return this;
  },
  addScheme: function(menuColor, scheme) {
    var current, style;
    style = {};
    current = this.g.colorscheme.get("scheme");
    if (current === scheme.id) {
      style.backgroundColor = "#77ED80";
    }
    return this.addNode(scheme.name, (function(_this) {
      return function() {
        return _this.g.colorscheme.set("scheme", scheme.id);
      };
    })(this), {
      style: style
    });
  },
  getColorschemes: function() {
    var schemes;
    schemes = [];
    schemes.push({
      name: "Zappo",
      id: "zappo"
    });
    schemes.push({
      name: "Taylor",
      id: "taylor"
    });
    schemes.push({
      name: "Hydrophobicity",
      id: "hydro"
    });
    schemes.push({
      name: "Lesk",
      id: "lesk"
    });
    schemes.push({
      name: "Cinema",
      id: "cinema"
    });
    schemes.push({
      name: "MAE",
      id: "mae"
    });
    schemes.push({
      name: "Clustal",
      id: "clustal"
    });
    schemes.push({
      name: "Clustal2",
      id: "clustal2"
    });
    schemes.push({
      name: "Turn",
      id: "turn"
    });
    schemes.push({
      name: "Strand",
      id: "strand"
    });
    schemes.push({
      name: "Buried",
      id: "buried"
    });
    schemes.push({
      name: "Helix",
      id: "helix"
    });
    schemes.push({
      name: "Nucleotide",
      id: "nucleotide"
    });
    schemes.push({
      name: "Purine",
      id: "purine"
    });
    schemes.push({
      name: "PID",
      id: "pid"
    });
    schemes.push({
      name: "No color",
      id: "foo"
    });
    return schemes;
  },
  grey: function(menuColor) {
    this.addNode("Shade", (function(_this) {
      return function() {
        _this.g.colorscheme.set("showLowerCase", false);
        return _this.model.each(function(seq) {
          var grey, residues;
          residues = seq.get("seq");
          grey = [];
          _.each(residues, function(el, index) {
            if (el === el.toLowerCase()) {
              return grey.push(index);
            }
          });
          return seq.set("grey", grey);
        });
      };
    })(this));
    this.addNode("Shade by threshold", (function(_this) {
      return function() {
        var conserv, grey, i, j, maxLen, ref, threshold;
        threshold = prompt("Enter threshold (in percent)", 20);
        threshold = threshold / 100;
        maxLen = _this.model.getMaxLength();
        conserv = _this.g.stats.scale(_this.g.stats.conservation());
        grey = [];
        for (i = j = 0, ref = maxLen - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
          if (conserv[i] < threshold) {
            grey.push(i);
          }
        }
        return _this.model.each(function(seq) {
          return seq.set("grey", grey);
        });
      };
    })(this));
    this.addNode("Shade selection", (function(_this) {
      return function() {
        var maxLen;
        maxLen = _this.model.getMaxLength();
        return _this.model.each(function(seq) {
          var blocks;
          blocks = _this.g.selcol.getBlocksForRow(seq.get("id"), maxLen);
          return seq.set("grey", blocks);
        });
      };
    })(this));
    return this.addNode("Reset shade", (function(_this) {
      return function() {
        _this.g.colorscheme.set("showLowerCase", true);
        return _this.model.each(function(seq) {
          return seq.set("grey", []);
        });
      };
    })(this));
  }
});



},{"../menubuilder":86,"dom-helper":41,"underscore":66}],88:[function(require,module,exports){
var DebugMenu, MenuBuilder;

MenuBuilder = require("../menubuilder");

module.exports = DebugMenu = MenuBuilder.extend({
  initialize: function(data) {
    this.g = data.g;
    return this.el.style.display = "inline-block";
  },
  render: function() {
    this.setName("Debug");
    this.addNode("Get the code", (function(_this) {
      return function() {
        return window.open("https://github.com/greenify/msa");
      };
    })(this));
    this.addNode("Toggle mouseover events", (function(_this) {
      return function() {
        _this.g.config.set("registerMouseHover", !_this.g.config.get("registerMouseHover"));
        return _this.g.onAll(function() {
          return console.log(arguments);
        });
      };
    })(this));
    this.el.appendChild(this.buildDOM());
    return this;
  }
});



},{"../menubuilder":86}],89:[function(require,module,exports){
var ExportMenu, Exporter, FastaExporter, MenuBuilder, _;

MenuBuilder = require("../menubuilder");

FastaExporter = require("biojs-io-fasta").writer;

_ = require("underscore");

Exporter = require("../../utils/export");

module.exports = ExportMenu = MenuBuilder.extend({
  initialize: function(data) {
    this.g = data.g;
    this.msa = data.msa;
    return this.el.style.display = "inline-block";
  },
  render: function() {
    this.setName("Export");
    this.addNode("View in Jalview", (function(_this) {
      return function() {
        var url;
        url = _this.g.config.get('url');
        if (url == null) {
          return alert("Sequence weren't imported via an URL");
        } else {
          if (url.indexOf("localhost" || url === "dragimport")) {
            return Exporter.publishWeb(_this.msa, function(link) {
              return Exporter.openInJalview(link, _this.g.colorscheme.get("scheme"));
            });
          } else {
            return Exporter.openInJalview(url, _this.g.colorscheme.get("scheme"));
          }
        }
      };
    })(this));
    this.addNode("Publish to the web", (function(_this) {
      return function() {
        return Exporter.publishWeb(_this.msa, function(link) {
          return window.open(link, '_blank');
        });
      };
    })(this));
    this.addNode("Share link", (function(_this) {
      return function() {
        return Exporter.shareLink(_this.msa, function(link) {
          return window.open(link, '_blank');
        });
      };
    })(this));
    this.addNode("Export sequences", (function(_this) {
      return function() {
        return Exporter.saveAsFile(_this.msa, "all.fasta");
      };
    })(this));
    this.addNode("Export selection", (function(_this) {
      return function() {
        return Exporter.saveSelection(_this.msa, "selection.fasta");
      };
    })(this));
    this.addNode("Export features", (function(_this) {
      return function() {
        return Exporter.saveAnnots(_this.msa, "features.gff3");
      };
    })(this));
    this.addNode("Export image", (function(_this) {
      return function() {
        return Exporter.saveAsImg(_this.msa, "biojs-msa.png");
      };
    })(this));
    this.el.appendChild(this.buildDOM());
    return this;
  }
});



},{"../../utils/export":104,"../menubuilder":86,"biojs-io-fasta":"biojs-io-fasta","underscore":66}],90:[function(require,module,exports){
var ExtraMenu, Loader, MenuBuilder, Seq, xhr;

MenuBuilder = require("../menubuilder");

Seq = require("../../model/Sequence");

Loader = require("../../utils/loader");

xhr = require("xhr");

module.exports = ExtraMenu = MenuBuilder.extend({
  initialize: function(data) {
    this.g = data.g;
    this.el.style.display = "inline-block";
    return this.msa = data.msa;
  },
  render: function() {
    var msa, stats;
    this.setName("Extras");
    stats = this.g.stats;
    msa = this.msa;
    this.addNode("Add consensus seq", (function(_this) {
      return function() {
        var con, seq;
        con = stats.consensus();
        seq = new Seq({
          seq: con,
          id: "0c",
          name: "consenus"
        });
        _this.model.add(seq);
        _this.model.setRef(seq);
        _this.model.comparator = function(seq) {
          return !seq.get("ref");
        };
        return _this.model.sort();
      };
    })(this));
    this.addNode("Calc Tree", function() {
      var cbs, newickStr, nwkData;
      newickStr = "";
      cbs = Loader.joinCb(function() {
        return msa.u.tree.showTree(nwkData);
      }, 2, this);
      msa.u.tree.loadTree(cbs);
      nwkData = {
        name: "root",
        children: [
          {
            name: "c1",
            branch_length: 4,
            children: msa.seqs.filter(function(f, i) {
              return i % 2 === 0;
            })
          }, {
            name: "c2",
            children: msa.seqs.filter(function(f, i) {
              return i % 2 === 1;
            }),
            branch_length: 4
          }
        ]
      };
      msa.seqs.each(function(s) {
        return s.set("branch_length", 2);
      });
      return cbs();
    });
    this.addNode("Increase font size", (function(_this) {
      return function() {
        var columnWidth, nColumnWidth, nFontSize;
        columnWidth = _this.g.zoomer.get("columnWidth");
        nColumnWidth = columnWidth + 5;
        _this.g.zoomer.set("columnWidth", nColumnWidth);
        _this.g.zoomer.set("rowHeight", nColumnWidth);
        nFontSize = nColumnWidth * 0.7;
        _this.g.zoomer.set("residueFont", nFontSize);
        return _this.g.zoomer.set("labelFontSize", nFontSize);
      };
    })(this));
    this.addNode("Decrease font size", (function(_this) {
      return function() {
        var columnWidth, nColumnWidth, nFontSize;
        columnWidth = _this.g.zoomer.get("columnWidth");
        nColumnWidth = columnWidth - 2;
        _this.g.zoomer.set("columnWidth", nColumnWidth);
        _this.g.zoomer.set("rowHeight", nColumnWidth);
        nFontSize = nColumnWidth * 0.6;
        _this.g.zoomer.set("residueFont", nFontSize);
        _this.g.zoomer.set("labelFontSize", nFontSize);
        if (_this.g.zoomer.get("columnWidth") < 8) {
          return _this.g.zoomer.set("textVisible", false);
        }
      };
    })(this));
    this.addNode("Minimized width", (function(_this) {
      return function() {
        return _this.g.zoomer.set("alignmentWidth", 600);
      };
    })(this));
    this.addNode("Minimized height", (function(_this) {
      return function() {
        return _this.g.zoomer.set("alignmentHeight", 120);
      };
    })(this));
    this.addNode("Jump to a column", (function(_this) {
      return function() {
        var offset;
        offset = prompt("Column", "20");
        if (offset < 0 || offset > _this.model.getMaxLength() || isNaN(offset)) {
          alert("invalid column");
          return;
        }
        return _this.g.zoomer.setLeftOffset(offset);
      };
    })(this));
    this.el.appendChild(this.buildDOM());
    return this;
  }
});



},{"../../model/Sequence":100,"../../utils/loader":107,"../menubuilder":86,"xhr":"xhr"}],91:[function(require,module,exports){
var FilterMenu, MenuBuilder, _;

MenuBuilder = require("../menubuilder");

_ = require("underscore");

module.exports = FilterMenu = MenuBuilder.extend({
  initialize: function(data) {
    this.g = data.g;
    return this.el.style.display = "inline-block";
  },
  render: function() {
    this.setName("Filter");
    this.addNode("Hide columns by threshold", (function(_this) {
      return function(e) {
        var conserv, hidden, i, j, maxLen, ref, threshold;
        threshold = prompt("Enter threshold (in percent)", 20);
        threshold = threshold / 100;
        maxLen = _this.model.getMaxLength();
        hidden = [];
        conserv = _this.g.stats.scale(_this.g.stats.conservation());
        for (i = j = 0, ref = maxLen - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
          if (conserv[i] < threshold) {
            hidden.push(i);
          }
        }
        return _this.g.columns.set("hidden", hidden);
      };
    })(this));
    this.addNode("Hide columns by selection", (function(_this) {
      return function() {
        var hidden, hiddenOld;
        hiddenOld = _this.g.columns.get("hidden");
        hidden = hiddenOld.concat(_this.g.selcol.getAllColumnBlocks({
          maxLen: _this.model.getMaxLength(),
          withPos: true
        }));
        _this.g.selcol.reset([]);
        return _this.g.columns.set("hidden", hidden);
      };
    })(this));
    this.addNode("Hide columns by gaps", (function(_this) {
      return function() {
        var gapContent, gaps, hidden, i, j, maxLen, ref, threshold, total;
        threshold = prompt("Enter threshold (in percent)", 20);
        threshold = threshold / 100;
        maxLen = _this.model.getMaxLength();
        hidden = [];
        for (i = j = 0, ref = maxLen - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
          gaps = 0;
          total = 0;
          _this.model.each(function(el) {
            if (el.get('seq')[i] === "-") {
              gaps++;
            }
            return total++;
          });
          gapContent = gaps / total;
          if (gapContent > threshold) {
            hidden.push(i);
          }
        }
        return _this.g.columns.set("hidden", hidden);
      };
    })(this));
    this.addNode("Hide seqs by identity", (function(_this) {
      return function() {
        var threshold;
        threshold = prompt("Enter threshold (in percent)", 20);
        threshold = threshold / 100;
        return _this.model.each(function(el) {
          if (el.get('identity') < threshold) {
            return el.set('hidden', true);
          }
        });
      };
    })(this));
    this.addNode("Hide seqs by selection", (function(_this) {
      return function() {
        var hidden, ids;
        hidden = _this.g.selcol.where({
          type: "row"
        });
        ids = _.map(hidden, function(el) {
          return el.get('seqId');
        });
        _this.g.selcol.reset([]);
        return _this.model.each(function(el) {
          if (ids.indexOf(el.get('id')) >= 0) {
            return el.set('hidden', true);
          }
        });
      };
    })(this));
    this.addNode("Hide seqs by gaps", (function(_this) {
      return function() {
        var threshold;
        threshold = prompt("Enter threshold (in percent)", 40);
        return _this.model.each(function(el, i) {
          var gaps, seq;
          seq = el.get('seq');
          gaps = _.reduce(seq, (function(memo, c) {
            if (c === '-') {
              memo++;
            }
            return memo;
          }), 0);
          if (gaps > threshold) {
            return el.set('hidden', true);
          }
        });
      };
    })(this));
    this.addNode("Reset", (function(_this) {
      return function() {
        _this.g.columns.set("hidden", []);
        return _this.model.each(function(el) {
          if (el.get('hidden')) {
            return el.set('hidden', false);
          }
        });
      };
    })(this));
    this.el.appendChild(this.buildDOM());
    return this;
  }
});



},{"../menubuilder":86,"underscore":66}],92:[function(require,module,exports){
var HelpMenu, MenuBuilder;

MenuBuilder = require("../menubuilder");

module.exports = HelpMenu = MenuBuilder.extend({
  initialize: function(data) {
    return this.g = data.g;
  },
  render: function() {
    this.setName("Help");
    this.addNode("About the project", (function(_this) {
      return function() {
        return window.open("https://github.com/greenify/msa");
      };
    })(this));
    this.addNode("Report issues", (function(_this) {
      return function() {
        return window.open("https://github.com/greenify/msa/issues");
      };
    })(this));
    this.addNode("User manual", (function(_this) {
      return function() {
        return window.open("https://github.com/greenify/msa/wiki");
      };
    })(this));
    this.el.style.display = "inline-block";
    this.el.appendChild(this.buildDOM());
    return this;
  }
});



},{"../menubuilder":86}],93:[function(require,module,exports){
var ImportMenu, MenuBuilder, k;

MenuBuilder = require("../menubuilder");

k = require("koala-js");

module.exports = ImportMenu = MenuBuilder.extend({
  initialize: function(data) {
    this.g = data.g;
    this.el.style.display = "inline-block";
    return this.msa = data.msa;
  },
  render: function() {
    var msa, uploader;
    msa = this.msa;
    uploader = k.mk("input");
    uploader.type = "file";
    uploader.style.display = "none";
    uploader.multiple = true;
    uploader.addEventListener("change", function() {
      var files;
      files = uploader.files || [];
      return msa.u.file.importFiles(files);
    });
    this.el.appendChild(uploader);
    this.setName("Import");
    this.addNode("URL", (function(_this) {
      return function(e) {
        var url;
        url = prompt("URL", "http://rostlab.org/~goldberg/clustalw2-I20140818-215249-0556-53699878-pg.clustalw");
        return _this.msa.u.file.importURL(url, function() {});
      };
    })(this));
    this.addNode("From file", (function(_this) {
      return function() {
        return uploader.click();
      };
    })(this));
    this.addNode("Drag & Drop", (function(_this) {
      return function() {
        return alert("Yep. Just drag & drop your file");
      };
    })(this));
    this.el.appendChild(this.buildDOM());
    return this;
  }
});



},{"../menubuilder":86,"koala-js":43}],94:[function(require,module,exports){
var MenuBuilder, OrderingMenu, _, dom;

MenuBuilder = require("../menubuilder");

dom = require("dom-helper");

_ = require('underscore');

module.exports = OrderingMenu = MenuBuilder.extend({
  initialize: function(data) {
    this.g = data.g;
    this.order = "ID";
    return this.el.style.display = "inline-block";
  },
  setOrder: function(order) {
    this.order = order;
    return this.render();
  },
  render: function() {
    var comps, el, i, len, m;
    this.setName("Ordering");
    this.removeAllNodes();
    comps = this.getComparators();
    for (i = 0, len = comps.length; i < len; i++) {
      m = comps[i];
      this._addNode(m);
    }
    el = this.buildDOM();
    dom.removeAllChilds(this.el);
    this.el.appendChild(el);
    return this;
  },
  _addNode: function(m) {
    var style, text;
    text = m.text;
    style = {};
    if (text === this.order) {
      style.backgroundColor = "#77ED80";
    }
    return this.addNode(text, (function(_this) {
      return function() {
        if (m.precode != null) {
          m.precode();
        }
        _this.model.comparator = m.comparator;
        _this.model.sort();
        return _this.setOrder(m.text);
      };
    })(this), {
      style: style
    });
  },
  getComparators: function() {
    var models, setIdent;
    models = [];
    models.push({
      text: "ID",
      comparator: "id"
    });
    models.push({
      text: "ID Desc",
      comparator: function(a, b) {
        return -("" + a.get("id")).localeCompare("" + b.get("id"), [], {
          numeric: true
        });
      }
    });
    models.push({
      text: "Label",
      comparator: "name"
    });
    models.push({
      text: "Label Desc",
      comparator: function(a, b) {
        return -a.get("name").localeCompare(b.get("name"));
      }
    });
    models.push({
      text: "Seq",
      comparator: "seq"
    });
    models.push({
      text: "Seq Desc",
      comparator: function(a, b) {
        return -a.get("seq").localeCompare(b.get("seq"));
      }
    });
    setIdent = (function(_this) {
      return function() {
        return _this.ident = _this.g.stats.identity();
      };
    })(this);
    models.push({
      text: "Identity",
      comparator: (function(_this) {
        return function(a, b) {
          var val;
          val = _this.ident[a.id] - _this.ident[b.id];
          if (val > 0) {
            return 1;
          }
          if (val < 0) {
            return -1;
          }
          return 0;
        };
      })(this),
      precode: setIdent
    });
    models.push({
      text: "Identity Desc",
      comparator: (function(_this) {
        return function(a, b) {
          var val;
          val = _this.ident[a.id] - _this.ident[b.id];
          if (val > 0) {
            return -1;
          }
          if (val < 0) {
            return 1;
          }
          return 0;
        };
      })(this),
      precode: setIdent
    });
    models.push({
      text: "Reference",
      comparator: function(seq) {
        return !seq.get("ref");
      }
    });
    models.push({
      text: "Partition codes",
      comparator: "partition",
      precode: (function(_this) {
        return function() {
          _this.g.vis.set('labelPartition', true);
          return _this.model.each(function(el) {
            return el.set('partition', _.random(1, 3));
          });
        };
      })(this)
    });
    return models;
  }
});



},{"../menubuilder":86,"dom-helper":41,"underscore":66}],95:[function(require,module,exports){
var MenuBuilder, SelectionMenu;

MenuBuilder = require("../menubuilder");

module.exports = SelectionMenu = MenuBuilder.extend({
  initialize: function(data) {
    this.g = data.g;
    return this.el.style.display = "inline-block";
  },
  render: function() {
    this.setName("Selection");
    this.addNode("Find Motif (supports RegEx)", (function(_this) {
      return function() {
        var search;
        search = prompt("your search", "D");
        return _this.g.user.set("searchText", search);
      };
    })(this));
    this.addNode("Invert columns", (function(_this) {
      return function() {
        var i, ref, results;
        return _this.g.selcol.invertCol((function() {
          results = [];
          for (var i = 0, ref = _this.model.getMaxLength(); 0 <= ref ? i <= ref : i >= ref; 0 <= ref ? i++ : i--){ results.push(i); }
          return results;
        }).apply(this));
      };
    })(this));
    this.addNode("Invert rows", (function(_this) {
      return function() {
        return _this.g.selcol.invertRow(_this.model.pluck("id"));
      };
    })(this));
    this.addNode("Reset", (function(_this) {
      return function() {
        return _this.g.selcol.reset();
      };
    })(this));
    this.el.appendChild(this.buildDOM());
    return this;
  }
});



},{"../menubuilder":86}],96:[function(require,module,exports){
var MenuBuilder, VisMenu, dom;

MenuBuilder = require("../menubuilder");

dom = require("dom-helper");

module.exports = VisMenu = MenuBuilder.extend({
  initialize: function(data) {
    this.g = data.g;
    this.el.style.display = "inline-block";
    return this.listenTo(this.g.vis, "change", this.render);
  },
  render: function() {
    var i, len, visEl, visElements;
    this.removeAllNodes();
    this.setName("Vis.elements");
    visElements = this.getVisElements();
    for (i = 0, len = visElements.length; i < len; i++) {
      visEl = visElements[i];
      this._addVisEl(visEl);
    }
    this.addNode("Reset", (function(_this) {
      return function() {
        _this.g.vis.set("labels", true);
        _this.g.vis.set("sequences", true);
        _this.g.vis.set("metacell", true);
        _this.g.vis.set("conserv", true);
        _this.g.vis.set("labelId", true);
        _this.g.vis.set("labelName", true);
        _this.g.vis.set("labelCheckbox", false);
        _this.g.vis.set("seqlogo", false);
        _this.g.vis.set("gapHeader", false);
        _this.g.vis.set("leftHeader", true);
        _this.g.vis.set("metaGaps", true);
        _this.g.vis.set("metaIdentity", true);
        return _this.g.vis.set("metaLinks", true);
      };
    })(this));
    dom.removeAllChilds(this.el);
    this.el.appendChild(this.buildDOM());
    return this;
  },
  _addVisEl: function(visEl) {
    var pre, style;
    style = {};
    if (this.g.vis.get(visEl.id)) {
      pre = "Hide ";
      style.color = "red";
    } else {
      pre = "Show ";
      style.color = "green";
    }
    return this.addNode(pre + visEl.name, (function(_this) {
      return function() {
        return _this.g.vis.set(visEl.id, !_this.g.vis.get(visEl.id));
      };
    })(this), {
      style: style
    });
  },
  getVisElements: function() {
    var vis;
    vis = [];
    vis.push({
      name: "Markers",
      id: "markers"
    });
    vis.push({
      name: "Labels",
      id: "labels"
    });
    vis.push({
      name: "Meta info",
      id: "metacell"
    });
    vis.push({
      name: "Overviewbox",
      id: "overviewbox"
    });
    vis.push({
      name: "Conserv",
      id: "conserv"
    });
    vis.push({
      name: "Seq. logo",
      id: "seqlogo"
    });
    vis.push({
      name: "Gap Header",
      id: "gapHeader"
    });
    vis.push({
      name: "Left header",
      id: "leftHeader"
    });
    vis.push({
      name: "Label name",
      id: "labelName"
    });
    vis.push({
      name: "Label id",
      id: "labelId"
    });
    vis.push({
      name: "Label checkbox",
      id: "labelCheckbox"
    });
    vis.push({
      name: "Meta gaps",
      id: "metaGaps"
    });
    vis.push({
      name: "Meta identity",
      id: "metaIdentity"
    });
    vis.push({
      name: "Meta links",
      id: "metaLinks"
    });
    return vis;
  }
});



},{"../menubuilder":86,"dom-helper":41}],97:[function(require,module,exports){
var Feature, Model;

Feature = require("./Feature");

Model = require("backbone-thin").Model;

module.exports = Feature = Model.extend({
  defaults: {
    xStart: -1,
    xEnd: -1,
    height: -1,
    text: "",
    fillColor: "red",
    fillOpacity: 0.5,
    type: "rectangle",
    borderSize: 1,
    borderColor: "black",
    borderOpacity: 0.5,
    validate: true,
    row: 0
  },
  initialize: function(obj) {
    if (obj.start != null) {
      this.set("xStart", obj.start);
    }
    if (obj.end != null) {
      this.set("xEnd", obj.end);
    }
    if (obj.attributes != null) {
      if (obj.attributes.Name != null) {
        this.set("text", obj.attributes.Name);
      }
      if (obj.attributes.Color != null) {
        this.set("fillColor", obj.attributes.Color);
      }
    }
    if (this.attributes.xEnd < this.attributes.xStart) {
      console.warn("invalid feature range for", this.attributes);
    }
    if (!_.isNumber(this.attributes.xStart) || !_.isNumber(this.attributes.xEnd)) {
      console.warn("please provide numeric feature ranges", obj);
      this.set("xStart", parseInt(this.attributes.xStart));
      return this.set("xEnd", parseInt(this.attributes.xEnd));
    }
  },
  validate: function() {
    if (isNaN(this.attributes.xStart || isNaN(this.attributes.xEnd))) {
      return "features need integer start and end.";
    }
  },
  contains: function(index) {
    return this.attributes.xStart <= index && index <= this.attributes.xEnd;
  }
});



},{"./Feature":97,"backbone-thin":4}],98:[function(require,module,exports){
var Collection, Feature, FeatureCol, _;

Feature = require("./Feature");

Collection = require("backbone-thin").Collection;

_ = require("underscore");

module.exports = FeatureCol = Collection.extend({
  model: Feature,
  constructor: function() {
    this.startOnCache = [];
    this.on("all", function() {
      return this.startOnCache = [];
    }, this);
    return Collection.apply(this, arguments);
  },
  startOn: function(index) {
    if (this.startOnCache[index] == null) {
      this.startOnCache[index] = this.where({
        xStart: index
      });
    }
    return this.startOnCache[index];
  },
  contains: function(index) {
    return this.reduce(function(el, memo) {
      return memo || el.contains(index);
    }, false);
  },
  getFeatureOnRow: function(row, x) {
    return this.filter(function(el) {
      return el.get("row") === row && el.get("xStart") <= x && x <= el.get("xEnd");
    });
  },
  assignRows: function() {
    var len, rows, x;
    len = (this.max(function(el) {
      return el.get("xEnd");
    })).attributes.xEnd;
    rows = (function() {
      var i, ref, results;
      results = [];
      for (x = i = 0, ref = len; 0 <= ref ? i <= ref : i >= ref; x = 0 <= ref ? ++i : --i) {
        results.push(0);
      }
      return results;
    })();
    this.each(function(el) {
      var i, max, ref, ref1;
      max = 0;
      for (x = i = ref = el.get("xStart"), ref1 = el.get("xEnd"); i <= ref1; x = i += 1) {
        if (rows[x] > max) {
          max = rows[x];
        }
        rows[x]++;
      }
      return el.set("row", max);
    });
    return _.max(rows);
  },
  getCurrentHeight: function() {
    return (this.max(function(el) {
      return el.get("row");
    })).attributes.row + 1;
  },
  getMinRows: function() {
    var len, rows, x;
    len = (this.max(function(el) {
      return el.get("xEnd");
    })).attributes.xEnd;
    rows = (function() {
      var i, ref, results;
      results = [];
      for (x = i = 0, ref = len; 0 <= ref ? i <= ref : i >= ref; x = 0 <= ref ? ++i : --i) {
        results.push(0);
      }
      return results;
    })();
    this.each(function(el) {
      var i, ref, ref1, results;
      results = [];
      for (x = i = ref = el.get("xStart"), ref1 = el.get("xEnd"); i <= ref1; x = i += 1) {
        results.push(rows[x]++);
      }
      return results;
    });
    return _.max(rows);
  }
});



},{"./Feature":97,"backbone-thin":4,"underscore":66}],99:[function(require,module,exports){
var Collection, FeatureCol, SeqManager, Sequence;

Sequence = require("./Sequence");

FeatureCol = require("./FeatureCol");

Collection = require("backbone-thin").Collection;

module.exports = SeqManager = Collection.extend({
  model: Sequence,
  constructor: function(seqs, g) {
    Collection.apply(this, arguments);
    this.g = g;
    this.on("add reset remove", (function(_this) {
      return function() {
        _this.lengthCache = null;
        return _this._bindSeqsWithFeatures();
      };
    })(this), this);
    this.on("reset", (function(_this) {
      return function() {
        return _this._autoSetRefSeq();
      };
    })(this));
    this._autoSetRefSeq();
    this.lengthCache = null;
    this.features = {};
    return this;
  },
  getMaxLength: function() {
    if (this.models.length === 0) {
      return 0;
    }
    if (this.lengthCache === null) {
      this.lengthCache = this.max(function(seq) {
        return seq.get("seq").length;
      }).get("seq").length;
    }
    return this.lengthCache;
  },
  prev: function(model, endless) {
    var index;
    index = this.indexOf(model) - 1;
    if (index < 0 && endless) {
      index = this.length - 1;
    }
    return this.at(index);
  },
  next: function(model, endless) {
    var index;
    index = this.indexOf(model) + 1;
    if (index === this.length && endless) {
      index = 0;
    }
    return this.at(index);
  },
  calcHiddenSeqs: function(n) {
    var i, j, nNew, ref;
    nNew = n;
    for (i = j = 0, ref = nNew; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      if (this.at(i).get("hidden")) {
        nNew++;
      }
    }
    return nNew - n;
  },
  addFeatures: function(features) {
    var colors, obj;
    if (features.config != null) {
      obj = features;
      features = features.seqs;
      if (obj.config.colors != null) {
        colors = obj.config.colors;
        _.each(features, function(seq) {
          return _.each(seq, function(val) {
            if (colors[val.feature] != null) {
              return val.fillColor = colors[val.feature];
            }
          });
        });
      }
    }
    if (_.isEmpty(this.features)) {
      this.features = features;
    } else {
      _.each(features, (function(_this) {
        return function(val, key) {
          if (!_this.features.hasOwnProperty(key)) {
            return _this.features[key] = val;
          } else {
            return _this.features[key] = _.union(_this.features[key], val);
          }
        };
      })(this));
    }
    return this._bindSeqsWithFeatures();
  },
  _bindSeqWithFeatures: function(seq) {
    var features;
    features = this.features[seq.attributes.name];
    if (features) {
      seq.set("features", new FeatureCol(features));
      seq.attributes.features.assignRows();
      return seq.set("height", seq.attributes.features.getCurrentHeight() + 1);
    }
  },
  _bindSeqsWithFeatures: function() {
    return this.each((function(_this) {
      return function(seq) {
        return _this._bindSeqWithFeatures(seq);
      };
    })(this));
  },
  removeAllFeatures: function() {
    return delete this.features;
  },
  _autoSetRefSeq: function() {
    if (this.length > 0) {
      return this.at(0).set("ref", true);
    }
  },
  setRef: function(seq) {
    var obj;
    obj = this.get(seq);
    this.each(function(s) {
      if (seq.cid) {
        if (obj.cid === s.cid) {
          return s.set("ref", true);
        } else {
          return s.set("ref", false);
        }
      }
    });
    this.g.config.set("hasRef", true);
    return this.trigger("change:reference", seq);
  }
});



},{"./FeatureCol":98,"./Sequence":100,"backbone-thin":4}],100:[function(require,module,exports){
var FeatureCol, Model, Sequence;

Model = require("backbone-thin").Model;

FeatureCol = require("./FeatureCol");

module.exports = Sequence = Model.extend({
  defaults: {
    name: "",
    id: "",
    seq: "",
    height: 1,
    ref: false
  },
  initialize: function() {
    this.set("grey", []);
    if (this.get("features") == null) {
      return this.set("features", new FeatureCol());
    }
  }
});



},{"./FeatureCol":98,"backbone-thin":4}],101:[function(require,module,exports){
module.exports.seq = require("./Sequence");

module.exports.seqcol = require("./SeqCollection");

module.exports.feature = require("./Feature");

module.exports.featurecol = require("./FeatureCol");



},{"./Feature":97,"./FeatureCol":98,"./SeqCollection":99,"./Sequence":100}],102:[function(require,module,exports){
var $, Colorator, Columns, Config, Eventhandler, FileHelper, Package, ProxyHelper, SelCol, SeqCollection, Stage, Stats, TreeHelper, User, VisOrdering, Visibility, Zoomer, boneView;

SeqCollection = require("./model/SeqCollection");

Colorator = require("./g/colorscheme");

Columns = require("./g/columns");

Config = require("./g/config");

Package = require("./g/package");

SelCol = require("./g/selection/SelectionCol");

User = require("./g/user");

Visibility = require("./g/visibility");

VisOrdering = require("./g/visOrdering");

Zoomer = require("./g/zoomer");

boneView = require("backbone-childs");

Eventhandler = require("biojs-events");

Stage = require("./views/Stage");

Stats = require("stat.seqs");

$ = require("jbone");

FileHelper = require("./utils/file");

TreeHelper = require("./utils/tree");

ProxyHelper = require("./utils/proxy");

module.exports = boneView.extend({
  initialize: function(data) {
    var events, pureSeq, ref;
    if (data == null) {
      data = {};
    }
    if (data.colorscheme == null) {
      data.colorscheme = {};
    }
    if (data.columns == null) {
      data.columns = {};
    }
    if (data.conf == null) {
      data.conf = {};
    }
    if (data.vis == null) {
      data.vis = {};
    }
    if (data.zoomer == null) {
      if (!((ref = data.visorder) != null ? ref : data.zoomer = {})) {
        data.visorder = {};
      }
    }
    this.g = Eventhandler.mixin({});
    this.seqs = new SeqCollection(data.seqs, this.g);
    this.g.config = new Config(data.conf);
    this.g["package"] = new Package(this.g);
    this.g.selcol = new SelCol([], {
      g: this.g
    });
    this.g.user = new User();
    this.g.vis = new Visibility(data.vis, {
      model: this.seqs
    });
    this.g.visorder = new VisOrdering(data.visorder);
    this.g.zoomer = new Zoomer(data.zoomer, {
      g: this.g,
      model: this.seqs
    });
    if (window.location.hostname === "localhost") {
      this.g.config.set("debug", true);
    }
    pureSeq = this.seqs.pluck("seq");
    this.g.stats = new Stats(this.seqs);
    this.g.stats.alphabetSize = this.g.config.get("alphabetSize");
    this.g.columns = new Columns(data.columns, this.g.stats);
    this.g.colorscheme = new Colorator(data.colorscheme, pureSeq, this.g.stats);
    this.g.zoomer.setEl(this.el, this.seqs);
    this.addView("stage", new Stage({
      model: this.seqs,
      g: this.g
    }));
    this.el.setAttribute("class", "biojs_msa_div");
    this.u = {};
    this.u.file = new FileHelper(this);
    this.u.proxy = new ProxyHelper({
      g: this.g
    });
    this.u.tree = new TreeHelper(this);
    if (this.g.config.get("eventBus") === true) {
      this.startEventBus();
    }
    if (this.g.config.get("dropImport")) {
      events = {
        "dragover": this.dragOver,
        "drop": this.dropFile
      };
      this.delegateEvents(events);
    }
    return $(window).on("resize", (function(_this) {
      return function(e) {
        var f;
        f = function() {
          return this.g.zoomer.autoResize();
        };
        return setTimeout(f.bind(_this), 5);
      };
    })(this));
  },
  dragOver: function(e) {
    e.preventDefault();
    e.target.className = 'hover';
    return false;
  },
  dropFile: function(e) {
    var files;
    e.preventDefault();
    files = e.target.files || e.dataTransfer.files;
    this.u.file.importFiles(files);
    return false;
  },
  startEventBus: function() {
    var busObjs, i, key, len, results;
    busObjs = ["config", "columns", "colorscheme", "selcol", "vis", "visorder", "zoomer"];
    results = [];
    for (i = 0, len = busObjs.length; i < len; i++) {
      key = busObjs[i];
      results.push(this._proxyToG(key));
    }
    return results;
  },
  _proxyToG: function(key) {
    return this.listenTo(this.g[key], "all", function(name, prev, now, opts) {
      if (name === "change") {
        return;
      }
      if (opts != null) {
        return this.g.trigger(key + ":" + name, now, prev, opts);
      } else {
        return this.g.trigger(key + ":" + name, now, prev);
      }
    });
  },
  render: function() {
    if (this.seqs === void 0 || this.seqs.length === 0) {
      console.log("warning. empty seqs.");
    }
    this.renderSubviews();
    this.g.vis.set("loaded", true);
    return this;
  }
});



},{"./g/colorscheme":73,"./g/columns":74,"./g/config":75,"./g/package":76,"./g/selection/SelectionCol":78,"./g/user":79,"./g/visOrdering":80,"./g/visibility":81,"./g/zoomer":82,"./model/SeqCollection":99,"./utils/file":105,"./utils/proxy":108,"./utils/tree":111,"./views/Stage":115,"backbone-childs":2,"biojs-events":13,"jbone":42,"stat.seqs":65}],103:[function(require,module,exports){
var BMath;

module.exports = BMath = (function() {
  function BMath() {}

  BMath.randomInt = function(lower, upper) {
    var ref, ref1;
    if (upper == null) {
      ref = [0, lower], lower = ref[0], upper = ref[1];
    }
    if (lower > upper) {
      ref1 = [upper, lower], lower = ref1[0], upper = ref1[1];
    }
    return Math.floor(Math.random() * (upper - lower + 1) + lower);
  };

  BMath.uniqueId = function(length) {
    var id;
    if (length == null) {
      length = 8;
    }
    id = "";
    while (id.length < length) {
      id += Math.random().toString(36).substr(2);
    }
    return id.substr(0, length);
  };

  BMath.getRandomInt = function(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  };

  return BMath;

})();



},{}],104:[function(require,module,exports){
var Exporter, Fasta, GFF, _, blobURL, saveAs, xhr;

Fasta = require("biojs-io-fasta");

GFF = require("biojs-io-gff");

xhr = require("xhr");

blobURL = require("blueimp_canvastoblob");

saveAs = require("browser-saveas");

_ = require("underscore");

module.exports = Exporter = {
  openInJalview: function(url, colorscheme) {
    var host, jalviewUrl;
    if (url.charAt(0) === '.') {
      url = document.URL.substr(0, document.URL.lastIndexOf('/')) + "/" + url;
    }
    if (url.indexOf("http") < 0) {
      host = "http://" + window.location.hostname;
      url = host + url;
    }
    url = encodeURIComponent(url);
    jalviewUrl = "http://www.jalview.org/services/launchApp?open=" + url;
    jalviewUrl += "&colour=" + colorscheme;
    return window.open(jalviewUrl, '_blank');
  },
  publishWeb: function(that, cb) {
    var text, url;
    text = Fasta.write(that.seqs.toJSON());
    text = encodeURIComponent(text);
    url = that.u.proxy.corsURL("http://sprunge.biojs.net");
    return xhr({
      method: "POST",
      body: "sprunge=" + text,
      uri: url,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded"
      }
    }, function(err, rep, body) {
      var link;
      link = body.trim();
      return cb(link);
    });
  },
  shareLink: function(that, cb) {
    var fCB, msaURL, url;
    url = that.g.config.get("importURL");
    msaURL = "http://biojs-msa.org/app/?seq=";
    fCB = function(link) {
      var fURL;
      fURL = msaURL + link;
      if (cb) {
        return cb(fURL);
      }
    };
    if (!url) {
      return Exporter.publishWeb(that, fCB);
    } else {
      return fCB(url);
    }
  },
  saveAsFile: function(that, name) {
    var blob, text;
    text = Fasta.write(that.seqs.toJSON());
    blob = new Blob([text], {
      type: 'text/plain'
    });
    return saveAs(blob, name);
  },
  saveSelection: function(that, name) {
    var blob, i, j, ref, selection, text;
    selection = that.g.selcol.pluck("seqId");
    console.log(selection);
    if (selection.length > 0) {
      selection = that.seqs.filter(function(el) {
        return _.contains(selection, el.get("id"));
      });
      for (i = j = 0, ref = selection.length - 1; j <= ref; i = j += 1) {
        selection[i] = selection[i].toJSON();
      }
    } else {
      selection = that.seqs.toJSON();
      console.warn("no selection found");
    }
    text = Fasta.write(selection);
    blob = new Blob([text], {
      type: 'text/plain'
    });
    return saveAs(blob, name);
  },
  saveAnnots: function(that, name) {
    var blob, features, text;
    features = that.seqs.map(function(el) {
      var seqname;
      features = el.get("features");
      if (features.length === 0) {
        return;
      }
      seqname = el.get("name");
      features.each(function(s) {
        return s.set("seqname", seqname);
      });
      return features.toJSON();
    });
    features = _.flatten(_.compact(features));
    console.log(features);
    text = GFF.exportLines(features);
    blob = new Blob([text], {
      type: 'text/plain'
    });
    return saveAs(blob, name);
  },
  saveAsImg: function(that, name) {
    var canvas, url;
    canvas = that.getView('stage').getView('body').getView('seqblock').el;
    if (canvas != null) {
      url = canvas.toDataURL('image/png');
      return saveAs(blobURL(url), name, "image/png");
    }
  }
};



},{"biojs-io-fasta":"biojs-io-fasta","biojs-io-gff":"biojs-io-gff","blueimp_canvastoblob":38,"browser-saveas":39,"underscore":66,"xhr":"xhr"}],105:[function(require,module,exports){
var ClustalReader, FastaReader, FileHelper, GffReader, _, funs, xhr;

FastaReader = require("biojs-io-fasta");

ClustalReader = require("biojs-io-clustal");

GffReader = require("biojs-io-gff");

_ = require("underscore");

xhr = require("xhr");

module.exports = FileHelper = function(msa) {
  this.msa = msa;
  return this;
};

funs = {
  guessFileType: function(name) {
    var fileName;
    name = name.split(".");
    fileName = name[name.length(-1)];
    switch (fileName) {
      case "aln":
      case "clustal":
        return ClustalReader;
      case "fasta":
        return FastaReader;
      default:
        return FastaReader;
    }
  },
  guessFileFromText: function(text) {
    var reader, type;
    if (text == null) {
      console.warn("invalid file format");
      return ["", "error"];
    }
    if (text.substring(0, 7) === "CLUSTAL") {
      reader = ClustalReader;
      type = "seqs";
    } else if (text.substring(0, 1) === ">") {
      reader = FastaReader;
      type = "seqs";
    } else if (text.substring(0, 1) === "(") {
      type = "newick";
    } else {
      reader = GffReader;
      type = "features";
    }
    return [reader, type];
  },
  parseText: function(text) {
    var features, reader, ref, seqs, type;
    ref = this.guessFileFromText(text), reader = ref[0], type = ref[1];
    if (type === "seqs") {
      seqs = reader.parse(text);
      return [seqs, type];
    } else if (type === "features") {
      features = reader.parseSeqs(text);
      return [features, type];
    } else {
      return [text, type];
    }
  },
  importFiles: function(files) {
    var file, i, j, reader, ref, results;
    results = [];
    for (i = j = 0, ref = files.length - 1; j <= ref; i = j += 1) {
      file = files[i];
      reader = new FileReader();
      reader.onload = (function(_this) {
        return function(evt) {
          return _this.importFile(evt.target.result);
        };
      })(this);
      results.push(reader.readAsText(file));
    }
    return results;
  },
  importFile: function(file) {
    var fileName, objs, ref, type;
    ref = this.parseText(file), objs = ref[0], type = ref[1];
    if (type === "error") {
      return "error";
    }
    if (type === "seqs") {
      this.msa.seqs.reset(objs);
      this.msa.g.config.set("url", "userimport");
      this.msa.g.trigger("url:userImport");
    } else if (type === "features") {
      this.msa.seqs.addFeatures(objs);
    } else if (type === "newick") {
      this.msa.u.tree.loadTree((function(_this) {
        return function() {
          return _this.msa.u.tree.showTree(file);
        };
      })(this));
    }
    return fileName = file.name;
  },
  importURL: function(url, cb) {
    url = this.msa.u.proxy.corsURL(url);
    this.msa.g.config.set("url", url);
    return xhr(url, (function(_this) {
      return function(err, status, body) {
        var res;
        if (!err) {
          res = _this.importFile(body);
          if (res === "error") {
            return;
          }
          _this.msa.g.trigger("import:url", url);
          if (cb) {
            return cb();
          }
        } else {
          return console.log(err);
        }
      };
    })(this));
  }
};

_.extend(FileHelper.prototype, funs);



},{"biojs-io-clustal":"biojs-io-clustal","biojs-io-fasta":"biojs-io-fasta","biojs-io-gff":"biojs-io-gff","underscore":66,"xhr":"xhr"}],106:[function(require,module,exports){
module.exports.bmath = require("./bmath");

module.exports.proxy = require("./proxy");

module.exports.seqgen = require("./seqgen");

module.exports.file = require("./file");

module.exports["export"] = require("./export");



},{"./bmath":103,"./export":104,"./file":105,"./proxy":108,"./seqgen":109}],107:[function(require,module,exports){
var k, loader,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

k = require("koala-js");

module.exports = loader = {
  loadScript: function(url, cb) {
    var s, t;
    s = k.mk("script");
    s.type = "text/javascript";
    s.src = url;
    s.async = true;
    s.onload = s.onreadystatechange = function() {
      var r;
      if (!r && (!this.readyState || this.readyState === "complete")) {
        r = true;
        return cb();
      }
    };
    t = document.getElementsByTagName("script")[0];
    return t.parentNode.appendChild(s);
  },
  joinCb: function(retCb, finalLength, finalScope) {
    var callbackWrapper, cbsFinished, counter;
    finalLength = finalLength || 1;
    cbsFinished = 0;
    callbackWrapper = function(cb, scope) {
      if (cb == null) {
        return counter();
      } else {
        return function() {
          if (indexOf.call(cb, "apply") >= 0) {
            cb.apply(scope, arguments);
          }
          return counter();
        };
      }
    };
    counter = function() {
      cbsFinished++;
      if (cbsFinished === finalLength) {
        return retCb.call(finalScope);
      }
    };
    return callbackWrapper;
  }
};



},{"koala-js":43}],108:[function(require,module,exports){
var ProxyHelper, _, proxyFun;

_ = require("underscore");

module.exports = ProxyHelper = function(opts) {
  this.g = opts.g;
  return this;
};

proxyFun = {
  corsURL: function(url) {
    if (document.URL.indexOf('localhost') >= 0 && url[0] === "/") {
      return url;
    }
    if (url.charAt(0) === "." || url.charAt(0) === "/") {
      return url;
    }
    url = url.replace("www\.", "");
    url = url.replace("http://", "");
    url = this.g.config.get('importProxy') + url;
    return url;
  }
};

_.extend(ProxyHelper.prototype, proxyFun);



},{"underscore":66}],109:[function(require,module,exports){
var BMath, Sequence, Stat, seqgen;

Sequence = require("biojs-model").seq;

BMath = require("./bmath");

Stat = require("stat.seqs");

seqgen = module.exports = {
  _generateSequence: function(len) {
    var i, k, ref, text;
    text = "";
    for (i = k = 0, ref = len - 1; k <= ref; i = k += 1) {
      text += seqgen.getRandomChar();
    }
    return text;
  },
  getDummySequences: function(len, seqLen) {
    var i, k, ref, seqs;
    seqs = [];
    if (len == null) {
      len = BMath.getRandomInt(3, 5);
    }
    if (seqLen == null) {
      seqLen = BMath.getRandomInt(50, 200);
    }
    for (i = k = 1, ref = len; k <= ref; i = k += 1) {
      seqs.push(new Sequence(seqgen._generateSequence(seqLen), "seq" + i, "r" + i));
    }
    return seqs;
  },
  getRandomChar: function(dict) {
    var possible;
    possible = dict || "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    return possible.charAt(Math.floor(Math.random() * possible.length));
  },
  genConservedSequences: function(len, seqLen, dict) {
    var c, cConserv, conservAim, counter, i, j, k, l, m, n, observed, pseqs, ref, ref1, ref2, ref3, seqs, tolerance;
    seqs = [];
    if (len == null) {
      len = BMath.getRandomInt(3, 5);
    }
    if (seqLen == null) {
      seqLen = BMath.getRandomInt(50, 200);
    }
    dict = dict || "ACDEFGHIKLMNPQRSTVWY---";
    for (i = k = 1, ref = len; k <= ref; i = k += 1) {
      seqs[i - 1] = "";
    }
    tolerance = 0.2;
    conservAim = 1;
    for (i = l = 0, ref1 = seqLen - 1; l <= ref1; i = l += 1) {
      if (i % 3 === 0) {
        conservAim = (BMath.getRandomInt(50, 100)) / 100;
      }
      observed = [];
      for (j = m = 0, ref2 = len - 1; m <= ref2; j = m += 1) {
        counter = 0;
        while (counter < 100) {
          c = seqgen.getRandomChar(dict);
          cConserv = Stat(observed);
          cConserv.addSeq(c);
          counter++;
          if (Math.abs(conservAim - cConserv.scale(cConserv.conservation())[0]) < tolerance) {
            break;
          }
        }
        seqs[j] += c;
        observed.push(c);
      }
    }
    pseqs = [];
    for (i = n = 1, ref3 = len; n <= ref3; i = n += 1) {
      pseqs.push(new Sequence(seqs[i - 1], "seq" + i, "r" + i));
    }
    return pseqs;
  }
};



},{"./bmath":103,"biojs-model":21,"stat.seqs":65}],110:[function(require,module,exports){
var Base, Line, Polygon, Rect, setAttr, svgns;

svgns = "http://www.w3.org/2000/svg";

setAttr = function(obj, opts) {
  var name, value;
  for (name in opts) {
    value = opts[name];
    obj.setAttributeNS(null, name, value);
  }
  return obj;
};

Base = function(opts) {
  var svg;
  svg = document.createElementNS(svgns, 'svg');
  svg.setAttribute("width", opts.width);
  svg.setAttribute("height", opts.height);
  return svg;
};

Rect = function(opts) {
  var rect;
  rect = document.createElementNS(svgns, 'rect');
  return setAttr(rect, opts);
};

Line = function(opts) {
  var line;
  line = document.createElementNS(svgns, 'line');
  return setAttr(line, opts);
};

Polygon = function(opts) {
  var line;
  line = document.createElementNS(svgns, 'polygon');
  return setAttr(line, opts);
};

module.exports.rect = Rect;

module.exports.line = Line;

module.exports.polygon = Polygon;

module.exports.base = Base;



},{}],111:[function(require,module,exports){
var _, tf, treeHelper;

_ = require("underscore");

module.exports = treeHelper = function(msa) {
  this.msa = msa;
  return this;
};

tf = {
  loadTree: function(cb) {
    return this.msa.g["package"].loadPackages(["msa-tnt", "biojs-io-newick"], cb);
  },
  showTree: function(newickStr) {
    var mt, newick, newickObj, nodes, sel, t, treeDiv;
    newick = this.require("biojs-io-newick");
    if (typeof newickStr === "string") {
      newickObj = newick.parse_newick(newickStr);
    } else {
      newickObj = newickStr;
    }
    mt = this.require("msa-tnt");
    sel = new mt.selections();
    treeDiv = document.createElement("div");
    document.body.appendChild(treeDiv);
    console.log(this.msa.seqs.models);
    console.log(newickObj);
    nodes = mt.app({
      seqs: this.msa.seqs.models,
      tree: newickObj
    });
    console.log("nodes", nodes);
    t = new mt.adapters.tree({
      model: nodes,
      el: treeDiv,
      sel: sel
    });
    return treeDiv.style.width = "500px";
  },
  require: function(pkg) {
    return require(pkg);
  }
};

_.extend(treeHelper.prototype, tf);



},{"underscore":66}],112:[function(require,module,exports){
var LabelBlock, SeqBlock, boneView;

boneView = require("backbone-childs");

SeqBlock = require("./canvas/CanvasSeqBlock");

LabelBlock = require("./labels/LabelBlock");

module.exports = boneView.extend({
  initialize: function(data) {
    var labelblock, seqblock;
    this.g = data.g;
    if (true) {
      labelblock = new LabelBlock({
        model: this.model,
        g: this.g
      });
      labelblock.ordering = -1;
      this.addView("labelblock", labelblock);
    }
    if (this.g.vis.get("sequences")) {
      seqblock = new SeqBlock({
        model: this.model,
        g: this.g
      });
      seqblock.ordering = 0;
      this.addView("seqblock", seqblock);
    }
    this.listenTo(this.g.zoomer, "change:alignmentHeight", this.adjustHeight);
    this.listenTo(this.g.zoomer, "change:alignmentWidth", this.adjustWidth);
    return this.listenTo(this.g.columns, "change:hidden", this.adjustHeight);
  },
  render: function() {
    this.renderSubviews();
    this.el.className = "biojs_msa_albody";
    this.el.style.whiteSpace = "nowrap";
    this.adjustHeight();
    this.adjustWidth();
    return this;
  },
  adjustHeight: function() {
    if (this.g.zoomer.get("alignmentHeight") === "auto") {
      return this.el.style.height = (this.g.zoomer.get("rowHeight") * this.model.length) + 5;
    } else {
      return this.el.style.height = this.g.zoomer.get("alignmentHeight");
    }
  },
  adjustWidth: function() {
    return this.el.style.width = this.getWidth();
  },
  getWidth: function() {
    var width;
    width = 0;
    width += this.g.zoomer.getLeftBlockWidth();
    if (this.g.vis.get("sequences")) {
      width += this.g.zoomer.get("alignmentWidth");
    }
    return width;
  }
});



},{"./canvas/CanvasSeqBlock":119,"./labels/LabelBlock":128,"backbone-childs":2}],113:[function(require,module,exports){
var OverviewBox, _, jbone, mouse, selection, view;

view = require("backbone-viewj");

mouse = require("mouse-pos");

selection = require("../g/selection/Selection");

jbone = require("jbone");

_ = require("underscore");

module.exports = OverviewBox = view.extend({
  className: "biojs_msa_overviewbox",
  tagName: "canvas",
  initialize: function(data) {
    this.g = data.g;
    this.listenTo(this.g.zoomer, "change:boxRectWidth change:boxRectHeight change:overviewboxPaddingTop", this.render);
    this.listenTo(this.g.selcol, "add reset change", this.render);
    this.listenTo(this.g.columns, "change:hidden", this.render);
    this.listenTo(this.g.colorscheme, "change:showLowerCase", this.render);
    this.listenTo(this.model, "change", _.debounce(this.render, 5));
    this.color = this.g.colorscheme.getSelectedScheme();
    this.listenTo(this.g.colorscheme, "change:scheme", function() {
      this.color = this.g.colorscheme.getSelectedScheme();
      return this.render();
    });
    return this.dragStart = [];
  },
  events: {
    click: "_onclick",
    mousedown: "_onmousedown"
  },
  render: function() {
    var c, color, hidden, i, j, k, l, rectHeight, rectWidth, ref, ref1, seq, showLowerCase, x, y;
    this._createCanvas();
    this.el.textContent = "overview";
    this.el.style.marginTop = this.g.zoomer.get("overviewboxPaddingTop");
    this.ctx.fillStyle = "#999999";
    this.ctx.fillRect(0, 0, this.el.width, this.el.height);
    rectWidth = this.g.zoomer.get("boxRectWidth");
    rectHeight = this.g.zoomer.get("boxRectHeight");
    hidden = this.g.columns.get("hidden");
    showLowerCase = this.g.colorscheme.get("showLowerCase");
    y = -rectHeight;
    for (i = k = 0, ref = this.model.length - 1; k <= ref; i = k += 1) {
      seq = this.model.at(i).get("seq");
      x = 0;
      y = y + rectHeight;
      if (this.model.at(i).get("hidden")) {
        console.log(this.model.at(i).get("hidden"));
        this.ctx.fillStyle = "grey";
        this.ctx.fillRect(0, y, seq.length * rectWidth, rectHeight);
        continue;
      }
      for (j = l = 0, ref1 = seq.length - 1; l <= ref1; j = l += 1) {
        c = seq[j];
        if (showLowerCase) {
          c = c.toUpperCase();
        }
        color = this.color.getColor(c, {
          pos: j
        });
        if (hidden.indexOf(j) >= 0) {
          color = "grey";
        }
        if (color != null) {
          this.ctx.fillStyle = color;
          this.ctx.fillRect(x, y, rectWidth, rectHeight);
        }
        x = x + rectWidth;
      }
    }
    return this._drawSelection();
  },
  _drawSelection: function() {
    var i, k, maxHeight, pos, rectHeight, rectWidth, ref, sel, seq;
    if (this.dragStart.length > 0 && !this.prolongSelection) {
      return;
    }
    rectWidth = this.g.zoomer.get("boxRectWidth");
    rectHeight = this.g.zoomer.get("boxRectHeight");
    maxHeight = rectHeight * this.model.length;
    this.ctx.fillStyle = "#ffff00";
    this.ctx.globalAlpha = 0.9;
    for (i = k = 0, ref = this.g.selcol.length - 1; k <= ref; i = k += 1) {
      sel = this.g.selcol.at(i);
      if (sel.get('type') === 'column') {
        this.ctx.fillRect(rectWidth * sel.get('xStart'), 0, rectWidth * (sel.get('xEnd') - sel.get('xStart') + 1), maxHeight);
      } else if (sel.get('type') === 'row') {
        seq = (this.model.filter(function(el) {
          return el.get('id') === sel.get('seqId');
        }))[0];
        pos = this.model.indexOf(seq);
        this.ctx.fillRect(0, rectHeight * pos, rectWidth * seq.get('seq').length, rectHeight);
      } else if (sel.get('type') === 'pos') {
        seq = (this.model.filter(function(el) {
          return el.get('id') === sel.get('seqId');
        }))[0];
        pos = this.model.indexOf(seq);
        this.ctx.fillRect(rectWidth * sel.get('xStart'), rectHeight * pos, rectWidth * (sel.get('xEnd') - sel.get('xStart') + 1), rectHeight);
      }
    }
    return this.ctx.globalAlpha = 1;
  },
  _onclick: function(evt) {
    return this.g.trigger("meta:click", {
      seqId: this.model.get("id", {
        evt: evt
      })
    });
  },
  _onmousemove: function(e) {
    var rect;
    if (this.dragStart.length === 0) {
      return;
    }
    this.render();
    this.ctx.fillStyle = "#ffff00";
    this.ctx.globalAlpha = 0.9;
    rect = this._calcSelection(mouse.abs(e));
    this.ctx.fillRect(rect[0][0], rect[1][0], rect[0][1] - rect[0][0], rect[1][1] - rect[1][0]);
    e.preventDefault();
    return e.stopPropagation();
  },
  _onmousedown: function(e) {
    this.dragStart = mouse.abs(e);
    this.dragStartRel = mouse.rel(e);
    if (e.ctrlKey || e.metaKey) {
      this.prolongSelection = true;
    } else {
      this.prolongSelection = false;
    }
    jbone(document.body).on('mousemove.overmove', (function(_this) {
      return function(e) {
        return _this._onmousemove(e);
      };
    })(this));
    jbone(document.body).on('mouseup.overup', (function(_this) {
      return function(e) {
        return _this._onmouseup(e);
      };
    })(this));
    return this.dragStart;
  },
  _calcSelection: function(dragMove) {
    var dragRel, i, k, l, rect;
    dragRel = [dragMove[0] - this.dragStart[0], dragMove[1] - this.dragStart[1]];
    for (i = k = 0; k <= 1; i = k += 1) {
      dragRel[i] = this.dragStartRel[i] + dragRel[i];
    }
    rect = [[this.dragStartRel[0], dragRel[0]], [this.dragStartRel[1], dragRel[1]]];
    for (i = l = 0; l <= 1; i = l += 1) {
      if (rect[i][1] < rect[i][0]) {
        rect[i] = [rect[i][1], rect[i][0]];
      }
      rect[i][0] = Math.max(rect[i][0], 0);
    }
    return rect;
  },
  _endSelection: function(dragEnd) {
    var args, i, j, k, l, m, rect, ref, ref1, selis;
    jbone(document.body).off('.overmove');
    jbone(document.body).off('.overup');
    if (this.dragStart.length === 0) {
      return;
    }
    rect = this._calcSelection(dragEnd);
    for (i = k = 0; k <= 1; i = ++k) {
      rect[0][i] = Math.floor(rect[0][i] / this.g.zoomer.get("boxRectWidth"));
    }
    for (i = l = 0; l <= 1; i = ++l) {
      rect[1][i] = Math.floor(rect[1][i] / this.g.zoomer.get("boxRectHeight"));
    }
    rect[0][1] = Math.min(this.model.getMaxLength() - 1, rect[0][1]);
    rect[1][1] = Math.min(this.model.length - 1, rect[1][1]);
    selis = [];
    for (j = m = ref = rect[1][0], ref1 = rect[1][1]; m <= ref1; j = m += 1) {
      args = {
        seqId: this.model.at(j).get('id'),
        xStart: rect[0][0],
        xEnd: rect[0][1]
      };
      selis.push(new selection.possel(args));
    }
    this.dragStart = [];
    if (this.prolongSelection) {
      this.g.selcol.add(selis);
    } else {
      this.g.selcol.reset(selis);
    }
    this.g.zoomer.setLeftOffset(rect[0][0]);
    return this.g.zoomer.setTopOffset(rect[1][0]);
  },
  _onmouseup: function(e) {
    return this._endSelection(mouse.abs(e));
  },
  _onmouseout: function(e) {
    return this._endSelection(mouse.abs(e));
  },
  _createCanvas: function() {
    var rectHeight, rectWidth;
    rectWidth = this.g.zoomer.get("boxRectWidth");
    rectHeight = this.g.zoomer.get("boxRectHeight");
    this.el.height = this.model.length * rectHeight;
    this.el.width = this.model.getMaxLength() * rectWidth;
    this.ctx = this.el.getContext("2d");
    this.el.style.overflow = "scroll";
    return this.el.style.cursor = "crosshair";
  }
});



},{"../g/selection/Selection":77,"backbone-viewj":9,"jbone":42,"mouse-pos":46,"underscore":66}],114:[function(require,module,exports){
var _, boneView, dom, k, sel;

boneView = require("backbone-childs");

_ = require('underscore');

k = require('koala-js');

dom = require('dom-helper');

sel = require("../g/selection/Selection");

module.exports = boneView.extend({
  initialize: function(data) {
    this.g = data.g;
    this.listenTo(this.g.user, "change:searchText", function(model, prop) {
      this.search(prop);
      return this.render();
    });
    this.sel = [];
    return this.selPos = 0;
  },
  events: {
    "scroll": "_sendScrollEvent"
  },
  render: function() {
    var searchText;
    this.renderSubviews();
    this.el.className = "biojs_msa_searchresult";
    searchText = this.g.user.get("searchText");
    if ((searchText != null) && searchText.length > 0) {
      if (this.sel.length === 0) {
        this.el.textContent = "no selection found";
      } else {
        this.resultBox = k.mk("div");
        this.resultBox.className = "biojs_msa_searchresult_ovbox";
        this.updateResult();
        this.el.appendChild(this.resultBox);
        this.el.appendChild(this.buildBtns());
      }
    }
    return this;
  },
  updateResult: function() {
    var seli, text;
    text = "search pattern: " + this.g.user.get("searchText");
    text += ", selection: " + (this.selPos + 1);
    seli = this.sel[this.selPos];
    text += " (";
    text += seli.get("xStart") + " - " + seli.get("xEnd");
    text += ", id: " + seli.get("seqId");
    text += ")";
    return this.resultBox.textContent = text;
  },
  buildBtns: function() {
    var allBtn, nextBtn, prevBtn, searchrow;
    prevBtn = k.mk("button");
    prevBtn.textContent = "Prev";
    prevBtn.addEventListener("click", (function(_this) {
      return function() {
        return _this.moveSel(-1);
      };
    })(this));
    nextBtn = k.mk("button");
    nextBtn.textContent = "Next";
    nextBtn.addEventListener("click", (function(_this) {
      return function() {
        return _this.moveSel(1);
      };
    })(this));
    allBtn = k.mk("button");
    allBtn.textContent = "All";
    allBtn.addEventListener("click", (function(_this) {
      return function() {
        return _this.g.selcol.reset(_this.sel);
      };
    })(this));
    searchrow = k.mk("div");
    searchrow.appendChild(prevBtn);
    searchrow.appendChild(nextBtn);
    searchrow.appendChild(allBtn);
    searchrow.className = "biojs_msa_searchresult_row";
    return searchrow;
  },
  moveSel: function(relDist) {
    var selNew;
    selNew = this.selPos + relDist;
    if (selNew < 0 || selNew >= this.sel.length) {
      return -1;
    } else {
      this.focus(selNew);
      this.selPos = selNew;
      return this.updateResult();
    }
  },
  focus: function(selPos) {
    var leftIndex, seli;
    seli = this.sel[selPos];
    leftIndex = seli.get("xStart");
    this.g.zoomer.setLeftOffset(leftIndex);
    return this.g.selcol.reset([seli]);
  },
  search: function(searchText) {
    var leftestIndex, newSeli, origIndex, search;
    search = new RegExp(searchText, "gi");
    newSeli = [];
    leftestIndex = origIndex = 100042;
    this.model.each(function(seq) {
      var args, index, match, results, strSeq;
      strSeq = seq.get("seq");
      results = [];
      while (match = search.exec(strSeq)) {
        index = match.index;
        args = {
          xStart: index,
          xEnd: index + match[0].length - 1,
          seqId: seq.get("id")
        };
        newSeli.push(new sel.possel(args));
        results.push(leftestIndex = Math.min(index, leftestIndex));
      }
      return results;
    });
    this.g.selcol.reset(newSeli);
    if (leftestIndex === origIndex) {
      leftestIndex = 0;
    }
    this.g.zoomer.setLeftOffset(leftestIndex);
    return this.sel = newSeli;
  }
});



},{"../g/selection/Selection":77,"backbone-childs":2,"dom-helper":41,"koala-js":43,"underscore":66}],115:[function(require,module,exports){
var AlignmentBody, HeaderBlock, OverviewBox, Search, _, boneView;

boneView = require("backbone-childs");

AlignmentBody = require("./AlignmentBody");

HeaderBlock = require("./header/HeaderBlock");

OverviewBox = require("./OverviewBox");

Search = require("./Search");

_ = require('underscore');

module.exports = boneView.extend({
  initialize: function(data) {
    this.g = data.g;
    this.draw();
    this.listenTo(this.g.stats, "reset", function() {
      return this.rerender();
    });
    this.listenTo(this.model, "change:hidden", _.debounce(this.rerender, 10));
    this.listenTo(this.model, "sort", this.rerender);
    this.listenTo(this.model, "add", function() {
      return console.log("seq add");
    });
    this.listenTo(this.g.vis, "change:sequences", this.rerender);
    this.listenTo(this.g.vis, "change:overviewbox", this.rerender);
    return this.listenTo(this.g.visorder, "change", this.rerender);
  },
  draw: function() {
    var body, headerblock, overviewbox, searchblock;
    this.removeViews();
    if (this.g.vis.get("overviewbox")) {
      overviewbox = new OverviewBox({
        model: this.model,
        g: this.g
      });
      overviewbox.ordering = this.g.visorder.get('overviewBox');
      this.addView("overviewBox", overviewbox);
    }
    if (true) {
      headerblock = new HeaderBlock({
        model: this.model,
        g: this.g
      });
      headerblock.ordering = this.g.visorder.get('headerBox');
      this.addView("headerBox", headerblock);
    }
    if (true) {
      searchblock = new Search({
        model: this.model,
        g: this.g
      });
      searchblock.ordering = this.g.visorder.get('searchBox');
      this.addView("searchbox", searchblock);
    }
    body = new AlignmentBody({
      model: this.model,
      g: this.g
    });
    body.ordering = this.g.visorder.get('alignmentBody');
    return this.addView("body", body);
  },
  render: function() {
    this.renderSubviews();
    this.el.className = "biojs_msa_stage";
    return this;
  },
  rerender: function() {
    this.draw();
    return this.render();
  }
});



},{"./AlignmentBody":112,"./OverviewBox":113,"./Search":114,"./header/HeaderBlock":123,"backbone-childs":2,"underscore":66}],116:[function(require,module,exports){
var CanvasCharCache, Events;

Events = require("biojs-events");

module.exports = CanvasCharCache = (function() {
  function CanvasCharCache(g) {
    this.g = g;
    this.cache = {};
    this.cacheHeight = 0;
    this.cacheWidth = 0;
  }

  CanvasCharCache.prototype.getFontTile = function(letter, width, height) {
    if (width !== this.cacheWidth || height !== this.cacheHeight) {
      this.cacheHeight = height;
      this.cacheWidth = width;
      this.cache = {};
    }
    if (this.cache[letter] === void 0) {
      this.createTile(letter, width, height);
    }
    return this.cache[letter];
  };

  CanvasCharCache.prototype.createTile = function(letter, width, height) {
    var canvas;
    canvas = this.cache[letter] = document.createElement("canvas");
    canvas.width = width;
    canvas.height = height;
    this.ctx = canvas.getContext('2d');
    this.ctx.font = this.g.zoomer.get("residueFont") + "px mono";
    this.ctx.textBaseline = 'middle';
    this.ctx.textAlign = "center";
    return this.ctx.fillText(letter, width / 2, height / 2, width);
  };

  return CanvasCharCache;

})();



},{"biojs-events":13}],117:[function(require,module,exports){
var Events, _, cache, cacheConstructor;

_ = require("underscore");

Events = require("biojs-events");

cache = {
  setMaxScrollHeight: function() {
    return this.maxScrollHeight = this.g.zoomer.getMaxAlignmentHeight() - this.g.zoomer.get('alignmentHeight');
  },
  setMaxScrollWidth: function() {
    return this.maxScrollWidth = this.g.zoomer.getMaxAlignmentWidth() - this.g.zoomer.getAlignmentWidth();
  }
};

module.exports = cacheConstructor = function(g, model) {
  this.g = g;
  this.model = model;
  this.maxScrollWidth = 0;
  this.maxScrollHeight = 0;
  this.setMaxScrollHeight();
  this.setMaxScrollWidth();
  this.listenTo(this.g.zoomer, "change:rowHeight", this.setMaxScrollHeight);
  this.listenTo(this.g.zoomer, "change:columnWidth", this.setMaxScrollWidth);
  this.listenTo(this.g.zoomer, "change:alignmentWidth", this.setMaxScrollWidth);
  this.listenTo(this.g.zoomer, "change:alignmentHeight", this.setMaxScrollHeight);
  this.listenTo(this.model, "add change reset", function() {
    this.setMaxScrollHeight();
    return this.setMaxScrollWidth();
  }, this);
  return this;
};

_.extend(cacheConstructor.prototype, cache);

Events.mixin(cacheConstructor.prototype);



},{"biojs-events":13,"underscore":66}],118:[function(require,module,exports){
var SelectionClass, _;

_ = require("underscore");

module.exports = SelectionClass = function(g, ctx) {
  this.g = g;
  this.ctx = ctx;
  return this;
};

_.extend(SelectionClass.prototype, {
  _getSelection: function(model) {
    var j, l, len, m, maxLen, n, ref, ref1, ref2, rows, sel, selection, sels;
    maxLen = model.get("seq").length;
    selection = [];
    sels = this.g.selcol.getSelForRow(model.get("id"));
    rows = _.find(sels, function(el) {
      return el.get("type") === "row";
    });
    if (rows != null) {
      for (n = j = 0, ref = maxLen - 1; j <= ref; n = j += 1) {
        selection.push(n);
      }
    } else if (sels.length > 0) {
      for (l = 0, len = sels.length; l < len; l++) {
        sel = sels[l];
        for (n = m = ref1 = sel.get("xStart"), ref2 = sel.get("xEnd"); m <= ref2; n = m += 1) {
          selection.push(n);
        }
      }
    }
    return selection;
  },
  _appendSelection: function(data) {
    var boxHeight, boxWidth, hiddenOffset, j, k, mNextSel, mPrevSel, n, ref, ref1, results, selection, seq;
    seq = data.model.get("seq");
    selection = this._getSelection(data.model);
    ref = this._getPrevNextSelection(data.model), mPrevSel = ref[0], mNextSel = ref[1];
    boxWidth = this.g.zoomer.get("columnWidth");
    boxHeight = this.g.zoomer.get("rowHeight");
    if (selection.length === 0) {
      return;
    }
    hiddenOffset = 0;
    results = [];
    for (n = j = 0, ref1 = seq.length - 1; j <= ref1; n = j += 1) {
      if (data.hidden.indexOf(n) >= 0) {
        results.push(hiddenOffset++);
      } else {
        k = n - hiddenOffset;
        if (selection.indexOf(n) >= 0 && (k === 0 || selection.indexOf(n - 1) < 0)) {
          results.push(this._renderSelection({
            n: n,
            k: k,
            selection: selection,
            mPrevSel: mPrevSel,
            mNextSel: mNextSel,
            xZero: data.xZero,
            yZero: data.yZero,
            model: data.model
          }));
        } else {
          results.push(void 0);
        }
      }
    }
    return results;
  },
  _renderSelection: function(data) {
    var beforeStyle, beforeWidth, boxHeight, boxWidth, hidden, i, j, k, l, mNextSel, mPrevSel, n, ref, ref1, ref2, selection, selectionLength, totalWidth, xPart, xPos, xZero, yZero;
    xZero = data.xZero;
    yZero = data.yZero;
    n = data.n;
    k = data.k;
    selection = data.selection;
    mPrevSel = data.mPrevSel;
    mNextSel = data.mNextSel;
    selectionLength = 0;
    for (i = j = ref = n, ref1 = data.model.get("seq").length - 1; j <= ref1; i = j += 1) {
      if (selection.indexOf(i) >= 0) {
        selectionLength++;
      } else {
        break;
      }
    }
    boxWidth = this.g.zoomer.get("columnWidth");
    boxHeight = this.g.zoomer.get("rowHeight");
    totalWidth = (boxWidth * selectionLength) + 1;
    hidden = this.g.columns.get('hidden');
    this.ctx.beginPath();
    beforeWidth = this.ctx.lineWidth;
    this.ctx.lineWidth = 3;
    beforeStyle = this.ctx.strokeStyle;
    this.ctx.strokeStyle = "#FF0000";
    xZero += k * boxWidth;
    xPart = 0;
    for (i = l = 0, ref2 = selectionLength - 1; 0 <= ref2 ? l <= ref2 : l >= ref2; i = 0 <= ref2 ? ++l : --l) {
      xPos = n + i;
      if (hidden.indexOf(xPos) >= 0) {
        continue;
      }
      if (!((mPrevSel != null) && mPrevSel.indexOf(xPos) >= 0)) {
        this.ctx.moveTo(xZero + xPart, yZero);
        this.ctx.lineTo(xPart + boxWidth + xZero, yZero);
      }
      if (!((mNextSel != null) && mNextSel.indexOf(xPos) >= 0)) {
        this.ctx.moveTo(xPart + xZero, boxHeight + yZero);
        this.ctx.lineTo(xPart + boxWidth + xZero, boxHeight + yZero);
      }
      xPart += boxWidth;
    }
    this.ctx.moveTo(xZero, yZero);
    this.ctx.lineTo(xZero, boxHeight + yZero);
    this.ctx.moveTo(xZero + totalWidth, yZero);
    this.ctx.lineTo(xZero + totalWidth, boxHeight + yZero);
    this.ctx.stroke();
    this.ctx.strokeStyle = beforeStyle;
    return this.ctx.lineWidth = beforeWidth;
  },
  _getPrevNextSelection: function(model) {
    var mNextSel, mPrevSel, modelNext, modelPrev;
    modelPrev = model.collection.prev(model);
    modelNext = model.collection.next(model);
    if (modelPrev != null) {
      mPrevSel = this._getSelection(modelPrev);
    }
    if (modelNext != null) {
      mNextSel = this._getSelection(modelNext);
    }
    return [mPrevSel, mNextSel];
  }
});



},{"underscore":66}],119:[function(require,module,exports){
var CanvasCoordsCache, CanvasSeqDrawer, CharCache, SelectionClass, _, boneView, jbone, mouse;

boneView = require("backbone-childs");

mouse = require("mouse-pos");

_ = require("underscore");

jbone = require("jbone");

CharCache = require("./CanvasCharCache");

SelectionClass = require("./CanvasSelection");

CanvasSeqDrawer = require("./CanvasSeqDrawer");

CanvasCoordsCache = require("./CanvasCoordsCache");

module.exports = boneView.extend({
  tagName: "canvas",
  initialize: function(data) {
    this.g = data.g;
    this.listenTo(this.g.zoomer, "change:_alignmentScrollLeft change:_alignmentScrollTop", function(model, value, options) {
      if (((options != null ? options.origin : void 0) == null) || options.origin !== "canvasseq") {
        return this.render();
      }
    });
    this.listenTo(this.g.columns, "change:hidden", this.render);
    this.listenTo(this.g.zoomer, "change:alignmentWidth change:alignmentHeight", this.render);
    this.listenTo(this.g.colorscheme, "change", this.render);
    this.listenTo(this.g.selcol, "reset add", this.render);
    this.el.style.display = "inline-block";
    this.el.style.overflowX = "hidden";
    this.el.style.overflowY = "hidden";
    this.el.className = "biojs_msa_seqblock";
    this.ctx = this.el.getContext('2d');
    this.cache = new CharCache(this.g);
    this.coordsCache = new CanvasCoordsCache(this.g, this.model);
    this.listenTo(this.g.zoomer, "change:residueFont", function() {
      this.cache = new CharCache(this.g);
      return this.render();
    });
    this.sel = new SelectionClass(this.g, this.ctx);
    this._setColor();
    this.throttleTime = 0;
    this.throttleCounts = 0;
    if (document.documentElement.style.webkitAppearance != null) {
      this.throttledDraw = function() {
        var start, tTime;
        start = +new Date();
        this.draw();
        this.throttleTime += +new Date() - start;
        this.throttleCounts++;
        if (this.throttleCounts > 15) {
          tTime = Math.ceil(this.throttleTime / this.throttleCounts);
          console.log("avgDrawTime/WebKit", tTime);
          return this.throttledDraw = this.draw;
        }
      };
    } else {
      this.throttledDraw = _.throttle(this.throttledDraw, 30);
    }
    return this.manageEvents();
  },
  throttledDraw: function() {
    var start, tTime;
    start = +new Date();
    this.draw();
    this.throttleTime += +new Date() - start;
    this.throttleCounts++;
    if (this.throttleCounts > 15) {
      tTime = Math.ceil(this.throttleTime / this.throttleCounts);
      console.log("avgDrawTime", tTime);
      tTime *= 1.2;
      tTime = Math.max(20, tTime);
      return this.throttledDraw = _.throttle(this.draw, tTime);
    }
  },
  manageEvents: function() {
    var events;
    events = {};
    events.mousedown = "_onmousedown";
    events.touchstart = "_ontouchstart";
    if (this.g.config.get("registerMouseClicks")) {
      events.dblclick = "_onclick";
    }
    if (this.g.config.get("registerMouseHover")) {
      events.mousein = "_onmousein";
      events.mouseout = "_onmouseout";
    }
    events.mousewheel = "_onmousewheel";
    events.DOMMouseScroll = "_onmousewheel";
    this.delegateEvents(events);
    this.listenTo(this.g.config, "change:registerMouseHover", this.manageEvents);
    this.listenTo(this.g.config, "change:registerMouseClick", this.manageEvents);
    return this.dragStart = [];
  },
  _setColor: function() {
    return this.color = this.g.colorscheme.getSelectedScheme();
  },
  draw: function() {
    this.el.width = this.el.width;
    if ((this.seqDrawer != null) && this.model.length > 0) {
      this.seqDrawer.drawLetters();
      this.seqDrawer.drawRows(this.sel._appendSelection, this.sel);
      return this.seqDrawer.drawRows(this.drawFeatures, this);
    }
  },
  drawFeatures: function(data) {
    var ctx, rectHeight, rectWidth;
    rectWidth = this.g.zoomer.get("columnWidth");
    rectHeight = this.g.zoomer.get("rowHeight");
    if (data.model.attributes.height > 1) {
      ctx = this.ctx;
      data.model.attributes.features.each(function(feature) {
        var len, y;
        ctx.fillStyle = feature.attributes.fillColor || "red";
        len = feature.attributes.xEnd - feature.attributes.xStart + 1;
        y = (feature.attributes.row + 1) * rectHeight;
        return ctx.fillRect(feature.attributes.xStart * rectWidth + data.xZero, y + data.yZero, rectWidth * len, rectHeight);
      });
      ctx.fillStyle = "black";
      ctx.font = this.g.zoomer.get("residueFont") + "px mono";
      ctx.textBaseline = 'middle';
      ctx.textAlign = "center";
      return data.model.attributes.features.each(function(feature) {
        var len, y;
        len = feature.attributes.xEnd - feature.attributes.xStart + 1;
        y = (feature.attributes.row + 1) * rectHeight;
        return ctx.fillText(feature.attributes.text, data.xZero + feature.attributes.xStart * rectWidth + (len / 2) * rectWidth, data.yZero + rectHeight * 0.5 + y);
      });
    }
  },
  render: function() {
    this.el.setAttribute('height', this.g.zoomer.get("alignmentHeight") + "px");
    this.el.setAttribute('width', this.g.zoomer.getAlignmentWidth() + "px");
    this.g.zoomer._checkScrolling(this._checkScrolling([this.g.zoomer.get('_alignmentScrollLeft'), this.g.zoomer.get('_alignmentScrollTop')]), {
      header: "canvasseq"
    });
    this._setColor();
    this.seqDrawer = new CanvasSeqDrawer(this.g, this.ctx, this.model, {
      width: this.el.width,
      height: this.el.height,
      color: this.color,
      cache: this.cache
    });
    this.throttledDraw();
    return this;
  },
  _onmousemove: function(e, reversed) {
    var dragEnd, i, j, k, l, relDist, relEnd, scaleFactor, scrollCorrected;
    if (this.dragStart.length === 0) {
      return;
    }
    dragEnd = mouse.abs(e);
    relEnd = [dragEnd[0] - this.dragStart[0], dragEnd[1] - this.dragStart[1]];
    scaleFactor = this.g.zoomer.get("canvasEventScale");
    if (reversed) {
      scaleFactor = 3;
    }
    for (i = j = 0; j <= 1; i = j += 1) {
      relEnd[i] = relEnd[i] * scaleFactor;
    }
    relDist = [this.dragStartScroll[0] - relEnd[0], this.dragStartScroll[1] - relEnd[1]];
    for (i = k = 0; k <= 1; i = k += 1) {
      relDist[i] = Math.round(relDist[i]);
    }
    scrollCorrected = this._checkScrolling(relDist);
    this.g.zoomer._checkScrolling(scrollCorrected, {
      origin: "canvasseq"
    });
    for (i = l = 0; l <= 1; i = l += 1) {
      if (scrollCorrected[i] !== relDist[i]) {
        if (scrollCorrected[i] === 0) {
          this.dragStart[i] = dragEnd[i];
          this.dragStartScroll[i] = 0;
        } else {
          this.dragStart[i] = dragEnd[i] - scrollCorrected[i];
        }
      }
    }
    this.throttledDraw();
    if (e.preventDefault != null) {
      e.preventDefault();
      return e.stopPropagation();
    }
  },
  _ontouchmove: function(e) {
    this._onmousemove(e.changedTouches[0], true);
    e.preventDefault();
    return e.stopPropagation();
  },
  _onmousedown: function(e) {
    this.dragStart = mouse.abs(e);
    this.dragStartScroll = [this.g.zoomer.get('_alignmentScrollLeft'), this.g.zoomer.get('_alignmentScrollTop')];
    jbone(document.body).on('mousemove.overmove', (function(_this) {
      return function(e) {
        return _this._onmousemove(e);
      };
    })(this));
    jbone(document.body).on('mouseup.overup', (function(_this) {
      return function() {
        return _this._cleanup();
      };
    })(this));
    return e.preventDefault();
  },
  _ontouchstart: function(e) {
    this.dragStart = mouse.abs(e.changedTouches[0]);
    this.dragStartScroll = [this.g.zoomer.get('_alignmentScrollLeft'), this.g.zoomer.get('_alignmentScrollTop')];
    jbone(document.body).on('touchmove.overtmove', (function(_this) {
      return function(e) {
        return _this._ontouchmove(e);
      };
    })(this));
    return jbone(document.body).on('touchend.overtend touchleave.overtleave touchcancel.overtcanel', (function(_this) {
      return function(e) {
        return _this._touchCleanup(e);
      };
    })(this));
  },
  _onmousewinout: function(e) {
    if (e.toElement === document.body.parentNode) {
      return this._cleanup();
    }
  },
  _cleanup: function() {
    this.dragStart = [];
    jbone(document.body).off('.overmove');
    jbone(document.body).off('.overup');
    return jbone(document.body).off('.overout');
  },
  _touchCleanup: function(e) {
    if (e.changedTouches.length > 0) {
      this._onmousemove(e.changedTouches[0], true);
    }
    this.dragStart = [];
    jbone(document.body).off('.overtmove');
    jbone(document.body).off('.overtend');
    jbone(document.body).off('.overtleave');
    return jbone(document.body).off('.overtcancel');
  },
  _onmousewheel: function(e) {
    var delta;
    delta = mouse.wheelDelta(e);
    this.g.zoomer.set('_alignmentScrollLeft', this.g.zoomer.get('_alignmentScrollLeft') + delta[0]);
    this.g.zoomer.set('_alignmentScrollTop', this.g.zoomer.get('_alignmentScrollTop') + delta[1]);
    return e.preventDefault();
  },
  _onclick: function(e) {
    var res;
    res = this._getClickPos(e);
    if (res != null) {
      if (res.feature != null) {
        this.g.trigger("feature:click", res);
      } else {
        this.g.trigger("residue:click", res);
      }
    }
    return this.throttledDraw();
  },
  _onmousein: function(e) {
    var res;
    res = this._getClickPos(e);
    if (res != null) {
      if (res.feature != null) {
        this.g.trigger("feature:mousein", res);
      } else {
        this.g.trigger("residue:mousein", res);
      }
    }
    return this.throttledDraw();
  },
  _onmouseout: function(e) {
    var res;
    res = this._getClickPos(e);
    if (res != null) {
      if (res.feature != null) {
        this.g.trigger("feature:mouseout", res);
      } else {
        this.g.trigger("residue:mouseout", res);
      }
    }
    return this.throttledDraw();
  },
  _getClickPos: function(e) {
    var coords, feature, features, ref, rowNumber, seqId, x, y;
    coords = mouse.rel(e);
    coords[0] += this.g.zoomer.get("_alignmentScrollLeft");
    x = Math.floor(coords[0] / this.g.zoomer.get("columnWidth"));
    ref = this.seqDrawer._getSeqForYClick(coords[1]), y = ref[0], rowNumber = ref[1];
    x += this.g.columns.calcHiddenColumns(x);
    y += this.model.calcHiddenSeqs(y);
    x = Math.max(0, x);
    y = Math.max(0, y);
    seqId = this.model.at(y).get("id");
    if (rowNumber > 0) {
      features = this.model.at(y).get("features").getFeatureOnRow(rowNumber - 1, x);
      if (features.length !== 0) {
        feature = features[0];
        console.log(features[0].attributes);
        return {
          seqId: seqId,
          feature: feature,
          rowPos: x,
          evt: e
        };
      }
    } else {
      return {
        seqId: seqId,
        rowPos: x,
        evt: e
      };
    }
  },
  _checkScrolling: function(scrollObj) {
    var i, j, max;
    max = [this.coordsCache.maxScrollWidth, this.coordsCache.maxScrollHeight];
    for (i = j = 0; j <= 1; i = j += 1) {
      if (scrollObj[i] > max[i]) {
        scrollObj[i] = max[i];
      }
      if (scrollObj[i] < 0) {
        scrollObj[i] = 0;
      }
    }
    return scrollObj;
  }
});



},{"./CanvasCharCache":116,"./CanvasCoordsCache":117,"./CanvasSelection":118,"./CanvasSeqDrawer":120,"backbone-childs":2,"jbone":42,"mouse-pos":46,"underscore":66}],120:[function(require,module,exports){
var _, construc, drawer;

_ = require("underscore");

drawer = {
  drawLetters: function() {
    var rectHeight;
    rectHeight = this.rectHeight;
    this.ctx.globalAlpha = this.g.colorscheme.get("opacity");
    this.drawSeqs(function(data) {
      return this.drawSeq(data, this._drawRect);
    });
    this.ctx.globalAlpha = 1;
    return this.drawSeqs(function(data) {
      return this.drawSeq(data, this._drawLetter);
    });
  },
  drawSeqs: function(callback, target) {
    var hidden, i, k, ref, ref1, ref2, results, seq, seqHeight, start, y;
    hidden = this.g.columns.get("hidden");
    target = target || this;
    ref = this.getStartSeq(), start = ref[0], y = ref[1];
    results = [];
    for (i = k = ref1 = start, ref2 = this.model.length - 1; k <= ref2; i = k += 1) {
      seq = this.model.at(i);
      if (seq.get('hidden')) {
        continue;
      }
      callback.call(target, {
        model: seq,
        yPos: y,
        y: i,
        hidden: hidden
      });
      seqHeight = (seq.attributes.height || 1) * this.rectHeight;
      y = y + seqHeight;
      if (y > this.height) {
        break;
      } else {
        results.push(void 0);
      }
    }
    return results;
  },
  drawRows: function(callback, target) {
    return this.drawSeqs(function(data) {
      return this.drawRow(data, callback, target);
    });
  },
  drawRow: function(data, callback, target) {
    var rectWidth, start, x, xZero, yZero;
    rectWidth = this.g.zoomer.get("columnWidth");
    start = Math.max(0, Math.abs(Math.ceil(-this.g.zoomer.get('_alignmentScrollLeft') / rectWidth)));
    x = -Math.abs(-this.g.zoomer.get('_alignmentScrollLeft') % rectWidth);
    xZero = x - start * rectWidth;
    yZero = data.yPos;
    return callback.call(target, {
      model: data.model,
      xZero: xZero,
      yZero: yZero,
      hidden: data.hidden
    });
  },
  getStartSeq: function() {
    var counter, i, start, y;
    start = (Math.max(0, Math.floor(this.g.zoomer.get('_alignmentScrollTop') / this.rectHeight))) + 1;
    counter = 0;
    i = 0;
    while (counter < start && i < this.model.length) {
      counter += this.model.at(i).attributes.height || 1;
      i++;
    }
    y = Math.max(0, this.g.zoomer.get('_alignmentScrollTop') - counter * this.rectHeight + (this.model.at(i - 1).attributes.height || 1) * this.rectHeight);
    return [i - 1, -y];
  },
  _getSeqForYClick: function(click) {
    var clickedRows, counter, i, ref, rowNumber, start, yDiff, yRel;
    ref = this.getStartSeq(), start = ref[0], yDiff = ref[1];
    yRel = yDiff % this.rectHeight;
    clickedRows = (Math.max(0, Math.floor((click - yRel) / this.rectHeight))) + 1;
    counter = 0;
    i = start;
    while (counter < clickedRows && i < this.model.length) {
      counter += this.model.at(i).attributes.height || 1;
      i++;
    }
    rowNumber = Math.max(0, Math.floor(click / this.rectHeight) - counter + (this.model.at(i - 1).get("height") || 1));
    return [i - 1, rowNumber];
  },
  drawSeq: function(data, callback) {
    var c, elWidth, j, k, rectHeight, rectWidth, ref, ref1, res, results, seq, start, x, y;
    seq = data.model.get("seq");
    y = data.yPos;
    rectWidth = this.rectWidth;
    rectHeight = this.rectHeight;
    start = Math.max(0, Math.abs(Math.ceil(-this.g.zoomer.get('_alignmentScrollLeft') / rectWidth)));
    x = -Math.abs(-this.g.zoomer.get('_alignmentScrollLeft') % rectWidth);
    res = {
      rectWidth: rectWidth,
      rectHeight: rectHeight,
      yPos: y,
      y: data.y
    };
    elWidth = this.width;
    results = [];
    for (j = k = ref = start, ref1 = seq.length - 1; k <= ref1; j = k += 1) {
      c = seq[j];
      c = c.toUpperCase();
      res.x = j;
      res.c = c;
      res.xPos = x;
      if (data.hidden.indexOf(j) < 0) {
        callback(this, res);
      } else {
        continue;
      }
      x = x + rectWidth;
      if (x > elWidth) {
        break;
      } else {
        results.push(void 0);
      }
    }
    return results;
  },
  _drawRect: function(that, data) {
    var color;
    color = that.color.getColor(data.c, {
      pos: data.x,
      y: data.y
    });
    if (color != null) {
      that.ctx.fillStyle = color;
      return that.ctx.fillRect(data.xPos, data.yPos, data.rectWidth, data.rectHeight);
    }
  },
  _drawLetter: function(that, data) {
    return that.ctx.drawImage(that.cache.getFontTile(data.c, data.rectWidth, data.rectHeight), data.xPos, data.yPos, data.rectWidth, data.rectHeight);
  }
};

module.exports = construc = function(g, ctx, model, opts) {
  this.g = g;
  this.ctx = ctx;
  this.model = model;
  this.width = opts.width;
  this.height = opts.height;
  this.color = opts.color;
  this.cache = opts.cache;
  this.rectHeight = this.g.zoomer.get("rowHeight");
  this.rectWidth = this.g.zoomer.get("columnWidth");
  return this;
};

_.extend(construc.prototype, drawer);



},{"underscore":66}],121:[function(require,module,exports){
var ConservationView, dom, svg, view;

view = require("backbone-viewj");

dom = require("dom-helper");

svg = require("../../utils/svg");

ConservationView = view.extend({
  className: "biojs_msa_conserv",
  initialize: function(data) {
    this.g = data.g;
    this.listenTo(this.g.zoomer, "change:stepSize change:labelWidth change:columnWidth", this.render);
    this.listenTo(this.g.vis, "change:labels change:metacell", this.render);
    this.listenTo(this.g.columns, "change:scaling", this.render);
    this.listenTo(this.g.stats, "reset", this.render);
    return this.manageEvents();
  },
  render: function() {
    var avgHeight, cellWidth, conserv, height, hidden, i, j, maxHeight, n, nMax, rect, ref, s, stepSize, width, x;
    conserv = this.g.stats.scale(this.g.stats.conservation());
    dom.removeAllChilds(this.el);
    nMax = this.model.getMaxLength();
    cellWidth = this.g.zoomer.get("columnWidth");
    maxHeight = 20;
    width = cellWidth * (nMax - this.g.columns.get('hidden').length);
    s = svg.base({
      height: maxHeight,
      width: width
    });
    s.style.display = "inline-block";
    s.style.cursor = "pointer";
    stepSize = this.g.zoomer.get("stepSize");
    hidden = this.g.columns.get("hidden");
    x = 0;
    n = 0;
    while (n < nMax) {
      if (hidden.indexOf(n) >= 0) {
        n += stepSize;
        continue;
      }
      width = cellWidth * stepSize;
      avgHeight = 0;
      for (i = j = 0, ref = stepSize - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        avgHeight += conserv[n];
      }
      height = maxHeight * (avgHeight / stepSize);
      rect = svg.rect({
        x: x,
        y: maxHeight - height,
        width: width - cellWidth / 4,
        height: height,
        style: "stroke:red;stroke-width:1;"
      });
      rect.rowPos = n;
      s.appendChild(rect);
      x += width;
      n += stepSize;
    }
    this.el.appendChild(s);
    return this;
  },
  _onclick: function(evt) {
    var i, j, ref, results, rowPos, stepSize;
    rowPos = evt.target.rowPos;
    stepSize = this.g.zoomer.get("stepSize");
    results = [];
    for (i = j = 0, ref = stepSize - 1; j <= ref; i = j += 1) {
      results.push(this.g.trigger("bar:click", {
        rowPos: rowPos + i,
        evt: evt
      }));
    }
    return results;
  },
  manageEvents: function() {
    var events;
    events = {};
    if (this.g.config.get("registerMouseClicks")) {
      events.click = "_onclick";
    }
    if (this.g.config.get("registerMouseHover")) {
      events.mousein = "_onmousein";
      events.mouseout = "_onmouseout";
    }
    this.delegateEvents(events);
    this.listenTo(this.g.config, "change:registerMouseHover", this.manageEvents);
    return this.listenTo(this.g.config, "change:registerMouseClick", this.manageEvents);
  },
  _onmousein: function(evt) {
    var rowPos;
    rowPos = this.g.zoomer.get("stepSize" * evt.rowPos);
    return this.g.trigger("bar:mousein", {
      rowPos: rowPos,
      evt: evt
    });
  },
  _onmouseout: function(evt) {
    var rowPos;
    rowPos = this.g.zoomer.get("stepSize" * evt.rowPos);
    return this.g.trigger("bar:mouseout", {
      rowPos: rowPos,
      evt: evt
    });
  }
});

module.exports = ConservationView;



},{"../../utils/svg":110,"backbone-viewj":9,"dom-helper":41}],122:[function(require,module,exports){
var ConservationView, dom, svg, view;

view = require("backbone-viewj");

dom = require("dom-helper");

svg = require("../../utils/svg");

ConservationView = view.extend({
  className: "biojs_msa_gapview",
  initialize: function(data) {
    this.g = data.g;
    this.listenTo(this.g.zoomer, "change:stepSize change:labelWidth change:columnWidth", this.render);
    this.listenTo(this.g.vis, "change:labels change:metacell", this.render);
    this.listenTo(this.g.columns, "change:scaling", this.render);
    this.listenTo(this.model, "reset", this.render);
    return this.manageEvents();
  },
  render: function() {
    var avgHeight, cellWidth, gaps, height, hidden, i, j, maxHeight, n, nMax, rect, ref, s, stepSize, width, x;
    gaps = this.g.stats.gaps();
    dom.removeAllChilds(this.el);
    nMax = this.model.getMaxLength();
    cellWidth = this.g.zoomer.get("columnWidth");
    maxHeight = 20;
    width = cellWidth * (nMax - this.g.columns.get('hidden').length);
    s = svg.base({
      height: maxHeight,
      width: width
    });
    s.style.display = "inline-block";
    s.style.cursor = "pointer";
    stepSize = this.g.zoomer.get("stepSize");
    hidden = this.g.columns.get("hidden");
    x = 0;
    n = 0;
    while (n < nMax) {
      if (hidden.indexOf(n) >= 0) {
        n += stepSize;
        continue;
      }
      width = cellWidth * stepSize;
      avgHeight = 0;
      for (i = j = 0, ref = stepSize - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        avgHeight += gaps[n];
      }
      height = maxHeight * (avgHeight / stepSize);
      rect = svg.rect({
        x: x,
        y: maxHeight - height,
        width: width - cellWidth / 4,
        height: height,
        style: "stroke:red;stroke-width:1;"
      });
      rect.rowPos = n;
      s.appendChild(rect);
      x += width;
      n += stepSize;
    }
    this.el.appendChild(s);
    return this;
  },
  _onclick: function(evt) {
    var i, j, ref, results, rowPos, stepSize;
    rowPos = evt.target.rowPos;
    stepSize = this.g.zoomer.get("stepSize");
    results = [];
    for (i = j = 0, ref = stepSize - 1; j <= ref; i = j += 1) {
      results.push(this.g.trigger("gap:click", {
        rowPos: rowPos + i,
        evt: evt
      }));
    }
    return results;
  },
  manageEvents: function() {
    var events;
    events = {};
    if (this.g.config.get("registerMouseClicks")) {
      events.click = "_onclick";
    }
    if (this.g.config.get("registerMouseHover")) {
      events.mousein = "_onmousein";
      events.mouseout = "_onmouseout";
    }
    this.delegateEvents(events);
    this.listenTo(this.g.config, "change:registerMouseHover", this.manageEvents);
    return this.listenTo(this.g.config, "change:registerMouseClick", this.manageEvents);
  },
  _onmousein: function(evt) {
    var rowPos;
    rowPos = this.g.zoomer.get("stepSize" * evt.rowPos);
    return this.g.trigger("gap:mousein", {
      rowPos: rowPos,
      evt: evt
    });
  },
  _onmouseout: function(evt) {
    var rowPos;
    rowPos = this.g.zoomer.get("stepSize" * evt.rowPos);
    return this.g.trigger("gap:mouseout", {
      rowPos: rowPos,
      evt: evt
    });
  }
});

module.exports = ConservationView;



},{"../../utils/svg":110,"backbone-viewj":9,"dom-helper":41}],123:[function(require,module,exports){
var LabelHeader, RightLabelHeader, boneView;

boneView = require("backbone-childs");

LabelHeader = require("./LabelHeader");

RightLabelHeader = require("./RightHeaderBlock");

module.exports = boneView.extend({
  initialize: function(data) {
    this.g = data.g;
    this.draw();
    return this.listenTo(this.g.vis, "change:labels change:metacell change:leftHeader", (function(_this) {
      return function() {
        _this.draw();
        return _this.render();
      };
    })(this));
  },
  draw: function() {
    var lHeader, rHeader;
    this.removeViews();
    if (this.g.vis.get("leftHeader") && (this.g.vis.get("labels") || this.g.vis.get("metacell"))) {
      lHeader = new LabelHeader({
        model: this.model,
        g: this.g
      });
      lHeader.ordering = -50;
      this.addView("lHeader", lHeader);
    }
    rHeader = new RightLabelHeader({
      model: this.model,
      g: this.g
    });
    rHeader.ordering = 0;
    return this.addView("rHeader", rHeader);
  },
  render: function() {
    this.renderSubviews();
    return this.el.className = "biojs_msa_header";
  }
});



},{"./LabelHeader":124,"./RightHeaderBlock":126,"backbone-childs":2}],124:[function(require,module,exports){
var LabelHeader, dom, k, view;

k = require("koala-js");

view = require("backbone-viewj");

dom = require("dom-helper");

module.exports = LabelHeader = view.extend({
  className: "biojs_msa_headers",
  initialize: function(data) {
    this.g = data.g;
    this.listenTo(this.g.vis, "change:metacell change:labels", this.render);
    return this.listenTo(this.g.zoomer, "change:labelWidth change:metaWidth", this.render);
  },
  render: function() {
    var width;
    dom.removeAllChilds(this.el);
    width = 0;
    width += this.g.zoomer.getLeftBlockWidth();
    this.el.style.width = width + "px";
    if (this.g.vis.get("labels")) {
      this.el.appendChild(this.labelDOM());
    }
    if (this.g.vis.get("metacell")) {
      this.el.appendChild(this.metaDOM());
    }
    this.el.style.display = "inline-block";
    this.el.style.fontSize = this.g.zoomer.get("markerFontsize");
    return this;
  },
  labelDOM: function() {
    var labelHeader, name;
    labelHeader = k.mk("div");
    labelHeader.style.width = this.g.zoomer.getLabelWidth();
    labelHeader.style.display = "inline-block";
    if (this.g.vis.get("labelCheckbox")) {
      labelHeader.appendChild(this.addEl(".", 10));
    }
    if (this.g.vis.get("labelId")) {
      labelHeader.appendChild(this.addEl("id", this.g.zoomer.get("labelIdLength")));
    }
    if (this.g.vis.get("labelPartition")) {
      labelHeader.appendChild(this.addEl("part", 15));
    }
    if (this.g.vis.get("labelName")) {
      name = this.addEl("name");
      labelHeader.appendChild(name);
    }
    return labelHeader;
  },
  addEl: function(content, width) {
    var id;
    id = document.createElement("span");
    id.textContent = content;
    if (width != null) {
      id.style.width = width + "px";
    }
    id.style.display = "inline-block";
    return id;
  },
  metaDOM: function() {
    var metaHeader;
    metaHeader = k.mk("div");
    metaHeader.style.width = this.g.zoomer.getMetaWidth();
    metaHeader.style.display = "inline-block";
    if (this.g.vis.get("metaGaps")) {
      metaHeader.appendChild(this.addEl("gaps", this.g.zoomer.get('metaGapWidth')));
    }
    if (this.g.vis.get("metaIdentity")) {
      metaHeader.appendChild(this.addEl("ident", this.g.zoomer.get('metaIdentWidth')));
    }
    if (this.g.vis.get("metaLinks")) {
      metaHeader.appendChild(this.addEl("links"));
    }
    return metaHeader;
  }
});



},{"backbone-viewj":9,"dom-helper":41,"koala-js":43}],125:[function(require,module,exports){
var HeaderView, dom, jbone, svg, view;

view = require("backbone-viewj");

dom = require("dom-helper");

svg = require("../../utils/svg");

jbone = require("jbone");

HeaderView = view.extend({
  className: "biojs_msa_marker",
  initialize: function(data) {
    this.g = data.g;
    this.listenTo(this.g.zoomer, "change:stepSize change:labelWidth change:columnWidth change:markerStepSize change:markerFontsize", this.render);
    this.listenTo(this.g.vis, "change:labels change:metacell", this.render);
    return this.manageEvents();
  },
  render: function() {
    var cellWidth, container, hidden, n, nMax, span, stepSize;
    dom.removeAllChilds(this.el);
    this.el.style.fontSize = this.g.zoomer.get("markerFontsize");
    container = document.createElement("span");
    n = 0;
    cellWidth = this.g.zoomer.get("columnWidth");
    nMax = this.model.getMaxLength();
    stepSize = this.g.zoomer.get("stepSize");
    hidden = this.g.columns.get("hidden");
    while (n < nMax) {
      if (hidden.indexOf(n) >= 0) {
        this.markerHidden(span, n, stepSize);
        n += stepSize;
        continue;
      }
      span = document.createElement("span");
      span.style.width = (cellWidth * stepSize) + "px";
      span.style.display = "inline-block";
      if ((n + 1) % this.g.zoomer.get('markerStepSize') === 0) {
        span.textContent = n + 1;
      } else {
        span.textContent = ".";
      }
      span.rowPos = n;
      n += stepSize;
      container.appendChild(span);
    }
    this.el.appendChild(container);
    return this;
  },
  markerHidden: function(span, n, stepSize) {
    var hidden, i, index, j, k, length, min, nMax, prevHidden, ref, ref1, ref2, ref3, s, triangle;
    hidden = this.g.columns.get("hidden").slice(0);
    min = Math.max(0, n - stepSize);
    prevHidden = true;
    for (j = i = ref = min, ref1 = n; i <= ref1; j = i += 1) {
      prevHidden &= hidden.indexOf(j) >= 0;
    }
    if (prevHidden) {
      return;
    }
    nMax = this.model.getMaxLength();
    length = 0;
    index = -1;
    for (n = k = ref2 = n, ref3 = nMax; k <= ref3; n = k += 1) {
      if (!(index >= 0)) {
        index = hidden.indexOf(n);
      }
      if (hidden.indexOf(n) >= 0) {
        length++;
      } else {
        break;
      }
    }
    s = svg.base({
      height: 10,
      width: 10
    });
    s.style.position = "relative";
    triangle = svg.polygon({
      points: "0,0 5,5 10,0",
      style: "fill:lime;stroke:purple;stroke-width:1"
    });
    jbone(triangle).on("click", (function(_this) {
      return function(evt) {
        hidden.splice(index, length);
        return _this.g.columns.set("hidden", hidden);
      };
    })(this));
    s.appendChild(triangle);
    span.appendChild(s);
    return s;
  },
  manageEvents: function() {
    var events;
    events = {};
    if (this.g.config.get("registerMouseClicks")) {
      events.click = "_onclick";
    }
    if (this.g.config.get("registerMouseHover")) {
      events.mousein = "_onmousein";
      events.mouseout = "_onmouseout";
    }
    this.delegateEvents(events);
    this.listenTo(this.g.config, "change:registerMouseHover", this.manageEvents);
    return this.listenTo(this.g.config, "change:registerMouseClick", this.manageEvents);
  },
  _onclick: function(evt) {
    var rowPos, stepSize;
    rowPos = evt.target.rowPos;
    stepSize = this.g.zoomer.get("stepSize");
    return this.g.trigger("column:click", {
      rowPos: rowPos,
      stepSize: stepSize,
      evt: evt
    });
  },
  _onmousein: function(evt) {
    var rowPos, stepSize;
    rowPos = this.g.zoomer.get("stepSize" * evt.rowPos);
    stepSize = this.g.zoomer.get("stepSize");
    return this.g.trigger("column:mousein", {
      rowPos: rowPos,
      stepSize: stepSize,
      evt: evt
    });
  },
  _onmouseout: function(evt) {
    var rowPos, stepSize;
    rowPos = this.g.zoomer.get("stepSize" * evt.rowPos);
    stepSize = this.g.zoomer.get("stepSize");
    return this.g.trigger("column:mouseout", {
      rowPos: rowPos,
      stepSize: stepSize,
      evt: evt
    });
  }
});

module.exports = HeaderView;



},{"../../utils/svg":110,"backbone-viewj":9,"dom-helper":41,"jbone":42}],126:[function(require,module,exports){
var ConservationView, GapView, MarkerView, SeqLogoWrapper, _, boneView;

MarkerView = require("./MarkerView");

ConservationView = require("./ConservationView");

boneView = require("backbone-childs");

_ = require('underscore');

SeqLogoWrapper = require("./SeqLogoWrapper");

GapView = require("./GapView");

module.exports = boneView.extend({
  initialize: function(data) {
    this.g = data.g;
    this.blockEvents = false;
    this.listenTo(this.g.vis, "change:header", function() {
      this.draw();
      return this.render();
    });
    this.listenTo(this.g.vis, "change", this._setSpacer);
    this.listenTo(this.g.zoomer, "change:alignmentWidth", this._setWidth);
    this.listenTo(this.g.zoomer, "change:_alignmentScrollLeft", this._adjustScrollingLeft);
    this.listenTo(this.g.columns, "change:hidden", function() {
      this.draw();
      return this.render();
    });
    this.draw();
    return this.g.vis.once('change:loaded', this._adjustScrollingLeft, this);
  },
  events: {
    "scroll": "_sendScrollEvent"
  },
  draw: function() {
    var conserv, gapview, marker, seqlogo;
    this.removeViews();
    if (this.g.vis.get("conserv")) {
      conserv = new ConservationView({
        model: this.model,
        g: this.g
      });
      conserv.ordering = -20;
      this.addView("conserv", conserv);
    }
    if (this.g.vis.get("markers")) {
      marker = new MarkerView({
        model: this.model,
        g: this.g
      });
      marker.ordering = -10;
      this.addView("marker", marker);
    }
    if (this.g.vis.get("seqlogo")) {
      seqlogo = new SeqLogoWrapper({
        model: this.model,
        g: this.g
      });
      seqlogo.ordering = -30;
      this.addView("seqlogo", seqlogo);
    }
    if (this.g.vis.get("gapHeader")) {
      gapview = new GapView({
        model: this.model,
        g: this.g
      });
      gapview.ordering = -25;
      return this.addView("gapview", gapview);
    }
  },
  render: function() {
    this.renderSubviews();
    this._setSpacer();
    this.el.className = "biojs_msa_rheader";
    this.el.style.overflowX = "auto";
    this.el.style.display = "inline-block";
    this._setWidth();
    this._adjustScrollingLeft();
    return this;
  },
  _sendScrollEvent: function() {
    if (!this.blockEvents) {
      this.g.zoomer.set("_alignmentScrollLeft", this.el.scrollLeft, {
        origin: "header"
      });
    }
    return this.blockEvents = false;
  },
  _adjustScrollingLeft: function(model, value, options) {
    var scrollLeft;
    if (((options != null ? options.origin : void 0) == null) || options.origin !== "header") {
      scrollLeft = this.g.zoomer.get("_alignmentScrollLeft");
      this.blockEvents = true;
      return this.el.scrollLeft = scrollLeft;
    }
  },
  _setSpacer: function() {
    return this.el.style.marginLeft = this._getLabelWidth() + "px";
  },
  _getLabelWidth: function() {
    var paddingLeft;
    paddingLeft = 0;
    if (!this.g.vis.get("leftHeader")) {
      paddingLeft += this.g.zoomer.getLeftBlockWidth();
    }
    return paddingLeft;
  },
  _setWidth: function() {
    return this.el.style.width = this.g.zoomer.getAlignmentWidth() + "px";
  }
});



},{"./ConservationView":121,"./GapView":122,"./MarkerView":125,"./SeqLogoWrapper":127,"backbone-childs":2,"underscore":66}],127:[function(require,module,exports){
var SeqLogoView, view;

SeqLogoView = require("biojs-vis-seqlogo/light");

view = require("backbone-viewj");

module.exports = view.extend({
  initialize: function(data) {
    this.g = data.g;
    this.listenTo(this.g.zoomer, "change:alignmentWidth", this.render);
    this.listenTo(this.g.colorscheme, "change", function() {
      var colors;
      colors = this.g.colorscheme.getSelectedScheme();
      this.seqlogo.changeColors(colors);
      return this.render();
    });
    this.listenTo(this.g.zoomer, "change:columnWidth", function() {
      return this.seqlogo.column_width = this.g.zoomer.get('columnWidth');
    });
    this.render;
    return this.draw();
  },
  draw: function() {
    var arr, colors, data;
    console.log("redraw");
    arr = this.g.stats.conservResidue({
      scaled: true
    });
    arr = _.map(arr, function(el) {
      return _.pick(el, function(e, k) {
        return k !== "-";
      });
    });
    data = {
      alphabet: "aa",
      heightArr: arr
    };
    colors = this.g.colorscheme.getSelectedScheme();
    return this.seqlogo = new SeqLogoView({
      model: this.model,
      g: this.g,
      data: data,
      yaxis: false,
      scroller: false,
      xaxis: false,
      height: 100,
      column_width: this.g.zoomer.get('columnWidth'),
      positionMarker: false,
      zoom: 1,
      el: this.el,
      colors: colors
    });
  },
  render: function() {
    return this.seqlogo.render();
  }
});



},{"backbone-viewj":9,"biojs-vis-seqlogo/light":23}],128:[function(require,module,exports){
var LabelRowView, boneView;

LabelRowView = require("./LabelRowView");

boneView = require("backbone-childs");

module.exports = boneView.extend({
  initialize: function(data) {
    this.g = data.g;
    this.draw();
    this.listenTo(this.g.zoomer, "change:_alignmentScrollTop", this._adjustScrollingTop);
    this.g.vis.once('change:loaded', this._adjustScrollingTop, this);
    this.listenTo(this.g.zoomer, "change:alignmentHeight", this._setHeight);
    return this.listenTo(this.model, "change:reference", this.draw);
  },
  draw: function() {
    var i, j, ref, results, view;
    this.removeViews();
    results = [];
    for (i = j = 0, ref = this.model.length - 1; j <= ref; i = j += 1) {
      if (this.model.at(i).get('hidden')) {
        continue;
      }
      view = new LabelRowView({
        model: this.model.at(i),
        g: this.g
      });
      view.ordering = i;
      results.push(this.addView("row_" + i, view));
    }
    return results;
  },
  events: {
    "scroll": "_sendScrollEvent"
  },
  _sendScrollEvent: function() {
    return this.g.zoomer.set("_alignmentScrollTop", this.el.scrollTop, {
      origin: "label"
    });
  },
  _adjustScrollingTop: function() {
    return this.el.scrollTop = this.g.zoomer.get("_alignmentScrollTop");
  },
  render: function() {
    this.renderSubviews();
    this.el.className = "biojs_msa_labelblock";
    this.el.style.display = "inline-block";
    this.el.style.verticalAlign = "top";
    this.el.style.overflowY = "auto";
    this.el.style.overflowX = "hidden";
    this.el.style.fontSize = (this.g.zoomer.get('labelFontsize')) + "px";
    this.el.style.lineHeight = "" + (this.g.zoomer.get("labelLineHeight"));
    this._setHeight();
    return this;
  },
  _setHeight: function() {
    return this.el.style.height = this.g.zoomer.get("alignmentHeight") + "px";
  }
});



},{"./LabelRowView":129,"backbone-childs":2}],129:[function(require,module,exports){
var LabelView, MetaView, boneView;

boneView = require("backbone-childs");

LabelView = require("./LabelView");

MetaView = require("./MetaView");

module.exports = boneView.extend({
  initialize: function(data) {
    this.g = data.g;
    this.draw();
    this.listenTo(this.g.vis, "change:labels", this.drawR);
    this.listenTo(this.g.vis, "change:metacell", this.drawR);
    this.listenTo(this.g.zoomer, "change:rowHeight", function() {
      return this.el.style.height = this.g.zoomer.get("rowHeight") + "px";
    });
    return this.listenTo(this.g.selcol, "change reset add", this.setSelection);
  },
  draw: function() {
    var meta;
    this.removeViews();
    if (this.g.vis.get("labels")) {
      this.addView("labels", new LabelView({
        model: this.model,
        g: this.g
      }));
    }
    if (this.g.vis.get("metacell")) {
      meta = new MetaView({
        model: this.model,
        g: this.g
      });
      return this.addView("metacell", meta);
    }
  },
  drawR: function() {
    this.draw();
    return this.render();
  },
  render: function() {
    this.renderSubviews();
    this.el.setAttribute("class", "biojs_msa_labelrow");
    this.el.style.height = this.g.zoomer.get("rowHeight") * (this.model.attributes.height || 1) + "px";
    this.setSelection();
    return this;
  },
  setSelection: function() {
    var sel;
    sel = this.g.selcol.getSelForRow(this.model.id);
    if (sel.length > 0) {
      return this.el.style.fontWeight = "bold";
    } else {
      return this.el.style.fontWeight = "normal";
    }
  }
});



},{"./LabelView":130,"./MetaView":131,"backbone-childs":2}],130:[function(require,module,exports){
var LabelView, dom, view;

view = require("backbone-viewj");

dom = require("dom-helper");

LabelView = view.extend({
  initialize: function(data) {
    this.seq = data.seq;
    this.g = data.g;
    return this.manageEvents();
  },
  manageEvents: function() {
    var events;
    events = {};
    if (this.g.config.get("registerMouseClicks")) {
      events.click = "_onclick";
    }
    if (this.g.config.get("registerMouseHover")) {
      events.mousein = "_onmousein";
      events.mouseout = "_onmouseout";
    }
    this.delegateEvents(events);
    this.listenTo(this.g.config, "change:registerMouseHover", this.manageEvents);
    this.listenTo(this.g.config, "change:registerMouseClick", this.manageEvents);
    this.listenTo(this.g.vis, "change:labelName change:labelId change:labelPartition change:labelCheckbox", this.render);
    this.listenTo(this.g.zoomer, "change:labelIdLength change:labelNameLength change:labelPartLength change:labelCheckLength", this.render);
    return this.listenTo(this.g.zoomer, "change:labelFontSize change:labelLineHeight change:labelWidth change:rowHeight", this.render);
  },
  render: function() {
    var checkBox, id, name, part, val;
    dom.removeAllChilds(this.el);
    this.el.style.width = (this.g.zoomer.getLabelWidth()) + "px";
    this.el.setAttribute("class", "biojs_msa_labels");
    if (this.g.vis.get("labelCheckbox")) {
      checkBox = document.createElement("input");
      checkBox.setAttribute("type", "checkbox");
      checkBox.value = this.model.get('id');
      checkBox.name = "seq";
      checkBox.style.width = this.g.zoomer.get("labelCheckLength") + "px";
      this.el.appendChild(checkBox);
    }
    if (this.g.vis.get("labelId")) {
      id = document.createElement("span");
      val = this.model.get("id");
      if (!isNaN(val)) {
        val++;
      }
      id.textContent = val;
      id.style.width = this.g.zoomer.get("labelIdLength") + "px";
      id.style.display = "inline-block";
      this.el.appendChild(id);
    }
    if (this.g.vis.get("labelPartition")) {
      part = document.createElement("span");
      part.style.width = this.g.zoomer.get("labelPartLength") + "px";
      part.textContent = this.model.get("partition");
      part.style.display = "inline-block";
      this.el.appendChild(id);
      this.el.appendChild(part);
    }
    if (this.g.vis.get("labelName")) {
      name = document.createElement("span");
      name.textContent = this.model.get("name");
      if (this.model.get("ref") && this.g.config.get("hasRef")) {
        name.style.fontWeight = "bold";
      }
      name.style.width = this.g.zoomer.get("labelNameLength") + "px";
      this.el.appendChild(name);
    }
    this.el.style.overflow = scroll;
    this.el.style.fontSize = (this.g.zoomer.get('labelFontsize')) + "px";
    return this;
  },
  _onclick: function(evt) {
    var seqId;
    seqId = this.model.get("id");
    return this.g.trigger("row:click", {
      seqId: seqId,
      evt: evt
    });
  },
  _onmousein: function(evt) {
    var seqId;
    seqId = this.model.get("id");
    return this.g.trigger("row:mouseout", {
      seqId: seqId,
      evt: evt
    });
  },
  _onmouseout: function(evt) {
    var seqId;
    seqId = this.model.get("id");
    return this.g.trigger("row:mouseout", {
      seqId: seqId,
      evt: evt
    });
  }
});

module.exports = LabelView;



},{"backbone-viewj":9,"dom-helper":41}],131:[function(require,module,exports){
var MenuBuilder, MetaView, _, dom, st, view;

view = require("backbone-viewj");

MenuBuilder = require("../../menu/menubuilder");

_ = require('underscore');

dom = require("dom-helper");

st = require("msa-seqtools");

module.exports = MetaView = view.extend({
  className: "biojs_msa_metaview",
  initialize: function(data) {
    this.g = data.g;
    this.listenTo(this.g.vis, "change:metacell", this.render);
    return this.listenTo(this.g.zoomer, "change:metaWidth", this.render);
  },
  events: {
    click: "_onclick",
    mousein: "_onmousein",
    mouseout: "_onmouseout"
  },
  render: function() {
    var gapSpan, gaps, ident, identSpan, linkEl, links, menu, seq, width;
    dom.removeAllChilds(this.el);
    this.el.style.display = "inline-block";
    width = this.g.zoomer.getMetaWidth();
    this.el.style.width = width - 10;
    this.el.style.paddingRight = 5;
    this.el.style.paddingLeft = 5;
    this.el.style.fontSize = (this.g.zoomer.get('labelFontsize') - 2) + "px";
    if (this.g.vis.get("metaGaps")) {
      seq = this.model.get('seq');
      gaps = _.reduce(seq, (function(memo, c) {
        if (c === '-') {
          memo++;
        }
        return memo;
      }), 0);
      gaps = (gaps / seq.length).toFixed(1);
      gapSpan = document.createElement('span');
      gapSpan.textContent = gaps;
      gapSpan.style.display = "inline-block";
      gapSpan.style.width = 35;
      this.el.appendChild(gapSpan);
    }
    if (this.g.vis.get("metaIdentity")) {
      ident = this.g.stats.identity()[this.model.id];
      identSpan = document.createElement('span');
      if (this.model.get("ref") && this.g.config.get("hasRef")) {
        identSpan.textContent = "ref.";
      } else if (ident != null) {
        identSpan.textContent = ident.toFixed(2);
      }
      identSpan.style.display = "inline-block";
      identSpan.style.width = 40;
      this.el.appendChild(identSpan);
    }
    if (this.g.vis.get("metaLinks")) {
      if (this.model.attributes.ids) {
        links = st.buildLinks(this.model.attributes.ids);
        if (_.keys(links).length > 0) {
          menu = new MenuBuilder({
            name: "↗"
          });
          console.log(_.keys(links));
          _.each(links, function(val, key) {
            return menu.addNode(key, function(e) {
              return window.open(val);
            });
          });
          linkEl = menu.buildDOM();
          linkEl.style.cursor = "pointer";
          return this.el.appendChild(linkEl);
        }
      }
    }
  },
  _onclick: function(evt) {
    return this.g.trigger("meta:click", {
      seqId: this.model.get("id", {
        evt: evt
      })
    });
  },
  _onmousein: function(evt) {
    return this.g.trigger("meta:mousein", {
      seqId: this.model.get("id", {
        evt: evt
      })
    });
  },
  _onmouseout: function(evt) {
    return this.g.trigger("meta:mouseout", {
      seqId: this.model.get("id", {
        evt: evt
      })
    });
  }
});



},{"../../menu/menubuilder":86,"backbone-viewj":9,"dom-helper":41,"msa-seqtools":64,"underscore":66}],"biojs-io-clustal":[function(require,module,exports){
// Generated by CoffeeScript 1.8.0
var Clustal, GenericReader, st,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

GenericReader = require("./generic_reader");

st = require("msa-seqtools");

module.exports = Clustal = (function(_super) {
  __extends(Clustal, _super);

  function Clustal() {
    return Clustal.__super__.constructor.apply(this, arguments);
  }

  Clustal.parse = function(text) {
    var blockstate, cSeq, k, keys, label, line, lines, match, obj, regex, seqCounter, seqs, sequence;
    seqs = [];
    if (Object.prototype.toString.call(text) === '[object Array]') {
      lines = text;
    } else {
      lines = text.split("\n");
    }
    if (lines[0].slice(0, 6) === !"CLUSTAL") {
      throw new Error("Invalid CLUSTAL Header");
    }
    k = 0;
    blockstate = 1;
    seqCounter = 0;
    while (k < lines.length) {
      k++;
      line = lines[k];
      if ((line == null) || line.length === 0) {
        blockstate = 1;
        continue;
      }
      if (line.trim().length === 0) {
        blockstate = 1;
        continue;
      } else {
        if (st.contains(line, "*")) {
          continue;
        }
        if (blockstate === 1) {
          seqCounter = 0;
          blockstate = 0;
        }
        regex = /^(?:\s*)(\S+)(?:\s+)(\S+)(?:\s*)(\d*)(?:\s*|$)/g;
        match = regex.exec(line);
        if (match != null) {
          label = match[1];
          sequence = match[2];
          if (seqCounter >= seqs.length) {
            obj = st.getMeta(label);
            label = obj.name;
            cSeq = new st.model(sequence, label, seqCounter);
            cSeq.ids = obj.ids || {};
            cSeq.details = obj.details || {};
            keys = Object.keys(cSeq.ids);
            if (keys.length > 0) {
              cSeq.id = cSeq.ids[keys[0]];
            }
            seqs.push(cSeq);
          } else {
            seqs[seqCounter].seq += sequence;
          }
          seqCounter++;
        } else {
          console.log("parse error", line);
        }
      }
    }
    return seqs;
  };

  return Clustal;

})(GenericReader);

},{"./generic_reader":16,"msa-seqtools":64}],"biojs-io-fasta":[function(require,module,exports){
// Generated by CoffeeScript 1.9.0
module.exports = require("./parser");

},{"./parser":18}],"biojs-io-gff":[function(require,module,exports){
/*
 * biojs-io-gff
 * https://github.com/greenify/biojs-io-gff
 *
 * Copyright (c) 2014 greenify
 * Licensed under the Apache 2 license.
 */

var gff = function() {};

module.exports = gff;

var utils = require("./utils");
var jalview = require("./jalview");

/**
 * Method responsible to parse GFF
 * @see https://www.sanger.ac.uk/resources/software/gff/spec.html#t_2
 *
 * @example
 *
 *     biojsiogff.parse('SEQ1  EMBL  atg  103  105  .  +  0');
 *
 * @method parse
 * @param {String} file GFF file
 * @return {String} Returns JSON representation
 */

gff.parse = function(file) {
  var lines = file.split("\n");
  var config = {};
  var arr = [];
  config.type = gff._guessType(lines);
  var offset = 0;
  if (config.type === "jalview") {
    var ret = jalview.readHeader(lines);
    //console.log(ret);
    offset = ret.offset;
    config.colors = ret.colors;
    arr = ret.features;
  }
  for (var i = offset; i < lines.length; i++) {
    // ignore comments for now
    var line = lines[i];
    if (line.length === 0 || line[0] === "#")
      continue;

    line = gff.parseLine(line);
    if (line !== undefined)
      arr.push(line);
  }
  return {
    features: arr,
    config: config
  };
};

gff._guessType = function(line) {
  if (line[0].substring(0, 15) === "##gff-version 3") {
    return "gff3";
  } else if (line[0].indexOf("#") < 0 && line[0].split("\t").length === 2) {
    // no comments and two columns. let's hope this is from jalview
    return "jalview";
  }
  // unable to read file header. lets hope this is gff3
  return "gff3";
};

/**
 * parses GFF and returns a dictionary of all seqs with their features
 * @method parseSeqs
 * @param {String} file GFF file
 * @return {String} Returns dictionary of sequences with an array of their features
 */
gff.parseSeqs = function(file) {
  var obj = gff.parse(file);
  var seqs = {};
  obj.features.forEach(function(entry) {
    var key = entry.seqname;
    if (seqs[key] === undefined) seqs[key] = [];
    delete entry.seqname;
    seqs[key].push(entry);
  });
  delete obj.features;
  obj.seqs = seqs;
  return obj;
};

/*
 * parses one GFF line and returns it
 */
gff.parseLine = function(line) {
  var tLine = {};

  var columns = line.split(/\s+/);
  // ignore empty lines
  if (columns.length === 1)
    return;

  tLine.seqname = columns[0];
  tLine.source = columns[1];
  tLine.feature = columns[2];
  tLine.start = parseInt(columns[3]);
  tLine.end = parseInt(columns[4]);
  tLine.score = columns[5]; // only DNA,RNA
  tLine.strand = columns[6]; // only DNA,RNA
  tLine.frame = columns[7]; // only DNA,RNA
  var attr = columns.slice(8).join(" "); // plain text comments

  // remove undefined (dot)
  Object.keys(tLine).forEach(function(key) {
    if (tLine[key] === ".") {
      tLine[key] = undefined;
    }
  });

  // parse optional parameters
  if (tLine.score) {
    tLine.score = parseFloat(tLine.score);
  }
  if (tLine.frame) {
    tLine.frame = parseInt(tLine.frame);
  }

  tLine.attributes = utils.extractKeys(attr);
  return tLine;
};

gff.exportLine = function(line) {
  var attrs = Object.keys(line.attributes).map(function(key) {
    return key + "=" + line.attributes[key];
  }).join(";");
  var cells = [line.seqname, line.source, line.feature, line.start, line.end, line.score,
    line.strand, line.frame, attrs
  ];
  cells = cells.map(function(e) {
    if (e === undefined) {
      return ".";
    }
    return e;
  });
  return cells.join("\t");
};

gff.exportLines = function(lines) {
  return "##gff-version 3\n" + lines.map(gff.exportLine).join("\n");
};

gff.exportSeqs = function(seqs) {
  var lines = [];
  for (var key in seqs) {
    seqs[key].forEach(function(e) {
      e.seqname = key;
      lines.push(e);
    });
  }
  return gff.exportLines(lines);
};

},{"./jalview":19,"./utils":20}],"msa":[function(require,module,exports){
// browser globals
if (typeof biojs === 'undefined') {
  biojs = {};
}
if (typeof biojs.vis === 'undefined') {
  biojs.vis = {};
}
// use two namespaces
window.msa = biojs.vis.msa = module.exports = require('./src/index');

// TODO: how should this be bundled

if (typeof biojs.io === 'undefined') {
  biojs.io = {};
}

// just bundle the two parsers
window.biojs.io.fasta = require("biojs-io-fasta");
window.biojs.io.clustal = require("biojs-io-clustal");
window.biojs.xhr = require("xhr");

module.exports = require("./src/index");

require('./css/msa.css');

},{"./css/msa.css":1,"./src/index":83,"biojs-io-clustal":"biojs-io-clustal","biojs-io-fasta":"biojs-io-fasta","xhr":"xhr"}],"xhr":[function(require,module,exports){
var window = require("global/window")
var once = require("once")
var parseHeaders = require('parse-headers')

var messages = {
    "0": "Internal XMLHttpRequest Error",
    "4": "4xx Client Error",
    "5": "5xx Server Error"
}

var XHR = window.XMLHttpRequest || noop
var XDR = "withCredentials" in (new XHR()) ? XHR : window.XDomainRequest

module.exports = createXHR

function createXHR(options, callback) {
    if (typeof options === "string") {
        options = { uri: options }
    }

    options = options || {}
    callback = once(callback)

    var xhr = options.xhr || null

    if (!xhr) {
        if (options.cors || options.useXDR) {
            xhr = new XDR()
        }else{
            xhr = new XHR()
        }
    }

    var uri = xhr.url = options.uri || options.url
    var method = xhr.method = options.method || "GET"
    var body = options.body || options.data
    var headers = xhr.headers = options.headers || {}
    var sync = !!options.sync
    var isJson = false
    var key
    var load = options.response ? loadResponse : loadXhr

    if ("json" in options) {
        isJson = true
        headers["Accept"] = "application/json"
        if (method !== "GET" && method !== "HEAD") {
            headers["Content-Type"] = "application/json"
            body = JSON.stringify(options.json)
        }
    }

    xhr.onreadystatechange = readystatechange
    xhr.onload = load
    xhr.onerror = error
    // IE9 must have onprogress be set to a unique function.
    xhr.onprogress = function () {
        // IE must die
    }
    // hate IE
    xhr.ontimeout = noop
    xhr.open(method, uri, !sync)
                                    //backward compatibility
    if (options.withCredentials || (options.cors && options.withCredentials !== false)) {
        xhr.withCredentials = true
    }

    // Cannot set timeout with sync request
    if (!sync) {
        xhr.timeout = "timeout" in options ? options.timeout : 5000
    }

    if (xhr.setRequestHeader) {
        for(key in headers){
            if(headers.hasOwnProperty(key)){
                xhr.setRequestHeader(key, headers[key])
            }
        }
    } else if (options.headers) {
        throw new Error("Headers cannot be set on an XDomainRequest object")
    }

    if ("responseType" in options) {
        xhr.responseType = options.responseType
    }
    
    if ("beforeSend" in options && 
        typeof options.beforeSend === "function"
    ) {
        options.beforeSend(xhr)
    }

    xhr.send(body)

    return xhr

    function readystatechange() {
        if (xhr.readyState === 4) {
            load()
        }
    }

    function getBody() {
        // Chrome with requestType=blob throws errors arround when even testing access to responseText
        var body = null

        if (xhr.response) {
            body = xhr.response
        } else if (xhr.responseType === 'text' || !xhr.responseType) {
            body = xhr.responseText || xhr.responseXML
        }

        if (isJson) {
            try {
                body = JSON.parse(body)
            } catch (e) {}
        }

        return body
    }

    function getStatusCode() {
        return xhr.status === 1223 ? 204 : xhr.status
    }

    // if we're getting a none-ok statusCode, build & return an error
    function errorFromStatusCode(status, body) {
        var error = null
        if (status === 0 || (status >= 400 && status < 600)) {
            var message = (typeof body === "string" ? body : false) ||
                messages[String(status).charAt(0)]
            error = new Error(message)
            error.statusCode = status
        }

        return error
    }

    // will load the data & process the response in a special response object
    function loadResponse() {
        var status = getStatusCode()
        var body = getBody()
        var error = errorFromStatusCode(status, body)
        var response = {
            body: body,
            statusCode: status,
            statusText: xhr.statusText,
            raw: xhr
        }
        if(xhr.getAllResponseHeaders){ //remember xhr can in fact be XDR for CORS in IE
            response.headers = parseHeaders(xhr.getAllResponseHeaders())
        } else {
            response.headers = {}
        }

        callback(error, response, response.body)
    }

    // will load the data and add some response properties to the source xhr
    // and then respond with that
    function loadXhr() {
        var status = getStatusCode()
        var error = errorFromStatusCode(status)

        xhr.status = xhr.statusCode = status
        xhr.body = getBody()
        xhr.headers = parseHeaders(xhr.getAllResponseHeaders())

        callback(error, xhr, xhr.body)
    }

    function error(evt) {
        callback(evt, xhr)
    }
}


function noop() {}

},{"global/window":67,"once":68,"parse-headers":72}]},{},["msa"])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjc3MvbXNhLmNzcyIsIm5vZGVfbW9kdWxlcy9iYWNrYm9uZS1jaGlsZHMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYmFja2JvbmUtdGhpbi9jb2xsZWN0aW9uLmpzIiwibm9kZV9tb2R1bGVzL2JhY2tib25lLXRoaW4vaW5kZXguanMiLCJub2RlX21vZHVsZXMvYmFja2JvbmUtdGhpbi9tb2RlbC5qcyIsIm5vZGVfbW9kdWxlcy9iYWNrYm9uZS10aGluL25vZGVfbW9kdWxlcy9iYWNrYm9uZS1ldmVudHMtc3RhbmRhbG9uZS9iYWNrYm9uZS1ldmVudHMtc3RhbmRhbG9uZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWNrYm9uZS10aGluL25vZGVfbW9kdWxlcy9iYWNrYm9uZS1ldmVudHMtc3RhbmRhbG9uZS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9iYWNrYm9uZS10aGluL25vZGVfbW9kdWxlcy9iYWNrYm9uZS1leHRlbmQtc3RhbmRhbG9uZS9iYWNrYm9uZS1leHRlbmQtc3RhbmRhbG9uZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWNrYm9uZS12aWV3ai9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9iaW9qcy1ldmVudHMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYmlvanMtaW8tY2x1c3RhbC9saWIvZ2VuZXJpY19yZWFkZXIuanMiLCJub2RlX21vZHVsZXMvYmlvanMtaW8tZmFzdGEvbGliL2dlbmVyaWNfcmVhZGVyLmpzIiwibm9kZV9tb2R1bGVzL2Jpb2pzLWlvLWZhc3RhL2xpYi9wYXJzZXIuanMiLCJub2RlX21vZHVsZXMvYmlvanMtaW8tZ2ZmL2xpYi9qYWx2aWV3LmpzIiwibm9kZV9tb2R1bGVzL2Jpb2pzLWlvLWdmZi9saWIvdXRpbHMuanMiLCJub2RlX21vZHVsZXMvYmlvanMtbW9kZWwvc3JjL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Jpb2pzLW1vZGVsL3NyYy9zZXEuanMiLCJub2RlX21vZHVsZXMvYmlvanMtdmlzLXNlcWxvZ28vbGlnaHQuanMiLCJub2RlX21vZHVsZXMvYmlvanMtdmlzLXNlcWxvZ28vc3JjL2F4aXMuanMiLCJub2RlX21vZHVsZXMvYmlvanMtdmlzLXNlcWxvZ28vc3JjL2NhbnZhc1N1cHBvcnQuanMiLCJub2RlX21vZHVsZXMvYmlvanMtdmlzLXNlcWxvZ28vc3JjL2NvbG9ycy9hYS5qcyIsIm5vZGVfbW9kdWxlcy9iaW9qcy12aXMtc2VxbG9nby9zcmMvY29sb3JzL2RuYS5qcyIsIm5vZGVfbW9kdWxlcy9iaW9qcy12aXMtc2VxbG9nby9zcmMvZXZlbnRMaXN0ZW5lci5qcyIsIm5vZGVfbW9kdWxlcy9iaW9qcy12aXMtc2VxbG9nby9zcmMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYmlvanMtdmlzLXNlcWxvZ28vc3JjL2luZm8vc2V0dGluZ3MuanMiLCJub2RlX21vZHVsZXMvYmlvanMtdmlzLXNlcWxvZ28vc3JjL21vZGVsL2xldHRlci5qcyIsIm5vZGVfbW9kdWxlcy9iaW9qcy12aXMtc2VxbG9nby9zcmMvcmVuZGVyL2RyYXcvYm9yZGVyLmpzIiwibm9kZV9tb2R1bGVzL2Jpb2pzLXZpcy1zZXFsb2dvL3NyYy9yZW5kZXIvZHJhdy9jb2x1bW5fbnVtYmVyLmpzIiwibm9kZV9tb2R1bGVzL2Jpb2pzLXZpcy1zZXFsb2dvL3NyYy9yZW5kZXIvZHJhdy90aWNrcy5qcyIsIm5vZGVfbW9kdWxlcy9iaW9qcy12aXMtc2VxbG9nby9zcmMvcmVuZGVyL3JlbmRlci5qcyIsIm5vZGVfbW9kdWxlcy9iaW9qcy12aXMtc2VxbG9nby9zcmMvcmVuZGVyL3JlbmRlcl93aXRoX3JlY3RzLmpzIiwibm9kZV9tb2R1bGVzL2Jpb2pzLXZpcy1zZXFsb2dvL3NyYy9yZW5kZXIvcmVuZGVyX3dpdGhfdGV4dC5qcyIsIm5vZGVfbW9kdWxlcy9ibHVlaW1wX2NhbnZhc3RvYmxvYi9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyLXNhdmVhcy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jc3NpZnkvYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy9kb20taGVscGVyL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2pib25lL2Rpc3QvamJvbmUuanMiLCJub2RlX21vZHVsZXMva29hbGEtanMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvbWVudS1idWlsZGVyL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL21lbnUtYnVpbGRlci9saWIvbWVudWJ1aWxkZXIuanMiLCJub2RlX21vZHVsZXMvbW91c2UtcG9zL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL21zYS1jb2xvcnNjaGVtZXMvc3JjL2J1cmllZC5qcyIsIm5vZGVfbW9kdWxlcy9tc2EtY29sb3JzY2hlbWVzL3NyYy9jaW5lbWEuanMiLCJub2RlX21vZHVsZXMvbXNhLWNvbG9yc2NoZW1lcy9zcmMvY2x1c3RhbC5qcyIsIm5vZGVfbW9kdWxlcy9tc2EtY29sb3JzY2hlbWVzL3NyYy9jbHVzdGFsMi5qcyIsIm5vZGVfbW9kdWxlcy9tc2EtY29sb3JzY2hlbWVzL3NyYy9oZWxpeC5qcyIsIm5vZGVfbW9kdWxlcy9tc2EtY29sb3JzY2hlbWVzL3NyYy9oeWRyb3Bob2JpY2l0eS5qcyIsIm5vZGVfbW9kdWxlcy9tc2EtY29sb3JzY2hlbWVzL3NyYy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9tc2EtY29sb3JzY2hlbWVzL3NyYy9sZXNrLmpzIiwibm9kZV9tb2R1bGVzL21zYS1jb2xvcnNjaGVtZXMvc3JjL21hZS5qcyIsIm5vZGVfbW9kdWxlcy9tc2EtY29sb3JzY2hlbWVzL3NyYy9udWNsZW90aWRlLmpzIiwibm9kZV9tb2R1bGVzL21zYS1jb2xvcnNjaGVtZXMvc3JjL3BpZF9jb2xvcnMuanMiLCJub2RlX21vZHVsZXMvbXNhLWNvbG9yc2NoZW1lcy9zcmMvcHVyaW5lLmpzIiwibm9kZV9tb2R1bGVzL21zYS1jb2xvcnNjaGVtZXMvc3JjL3NjaGVtZWNsYXNzLmpzIiwibm9kZV9tb2R1bGVzL21zYS1jb2xvcnNjaGVtZXMvc3JjL3N0cmFuZC5qcyIsIm5vZGVfbW9kdWxlcy9tc2EtY29sb3JzY2hlbWVzL3NyYy90YXlsb3IuanMiLCJub2RlX21vZHVsZXMvbXNhLWNvbG9yc2NoZW1lcy9zcmMvdHVybi5qcyIsIm5vZGVfbW9kdWxlcy9tc2EtY29sb3JzY2hlbWVzL3NyYy96YXBwby5qcyIsIm5vZGVfbW9kdWxlcy9tc2Etc2VxdG9vbHMvbGliL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3N0YXQuc2Vxcy9saWIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvdW5kZXJzY29yZS91bmRlcnNjb3JlLmpzIiwibm9kZV9tb2R1bGVzL3hoci9ub2RlX21vZHVsZXMvZ2xvYmFsL3dpbmRvdy5qcyIsIm5vZGVfbW9kdWxlcy94aHIvbm9kZV9tb2R1bGVzL29uY2Uvb25jZS5qcyIsIm5vZGVfbW9kdWxlcy94aHIvbm9kZV9tb2R1bGVzL3BhcnNlLWhlYWRlcnMvbm9kZV9tb2R1bGVzL2Zvci1lYWNoL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3hoci9ub2RlX21vZHVsZXMvcGFyc2UtaGVhZGVycy9ub2RlX21vZHVsZXMvZm9yLWVhY2gvbm9kZV9tb2R1bGVzL2lzLWZ1bmN0aW9uL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3hoci9ub2RlX21vZHVsZXMvcGFyc2UtaGVhZGVycy9ub2RlX21vZHVsZXMvdHJpbS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy94aHIvbm9kZV9tb2R1bGVzL3BhcnNlLWhlYWRlcnMvcGFyc2UtaGVhZGVycy5qcyIsIi9ob21lL3RyYXZpcy9idWlsZC9ncmVlbmlmeS9tc2Evc3JjL2cvY29sb3JzY2hlbWUuY29mZmVlIiwiL2hvbWUvdHJhdmlzL2J1aWxkL2dyZWVuaWZ5L21zYS9zcmMvZy9jb2x1bW5zLmNvZmZlZSIsIi9ob21lL3RyYXZpcy9idWlsZC9ncmVlbmlmeS9tc2Evc3JjL2cvY29uZmlnLmNvZmZlZSIsIi9ob21lL3RyYXZpcy9idWlsZC9ncmVlbmlmeS9tc2Evc3JjL2cvcGFja2FnZS5jb2ZmZWUiLCIvaG9tZS90cmF2aXMvYnVpbGQvZ3JlZW5pZnkvbXNhL3NyYy9nL3NlbGVjdGlvbi9TZWxlY3Rpb24uY29mZmVlIiwiL2hvbWUvdHJhdmlzL2J1aWxkL2dyZWVuaWZ5L21zYS9zcmMvZy9zZWxlY3Rpb24vU2VsZWN0aW9uQ29sLmNvZmZlZSIsIi9ob21lL3RyYXZpcy9idWlsZC9ncmVlbmlmeS9tc2Evc3JjL2cvdXNlci5jb2ZmZWUiLCIvaG9tZS90cmF2aXMvYnVpbGQvZ3JlZW5pZnkvbXNhL3NyYy9nL3Zpc09yZGVyaW5nLmNvZmZlZSIsIi9ob21lL3RyYXZpcy9idWlsZC9ncmVlbmlmeS9tc2Evc3JjL2cvdmlzaWJpbGl0eS5jb2ZmZWUiLCIvaG9tZS90cmF2aXMvYnVpbGQvZ3JlZW5pZnkvbXNhL3NyYy9nL3pvb21lci5jb2ZmZWUiLCIvaG9tZS90cmF2aXMvYnVpbGQvZ3JlZW5pZnkvbXNhL3NyYy9pbmRleC5jb2ZmZWUiLCIvaG9tZS90cmF2aXMvYnVpbGQvZ3JlZW5pZnkvbXNhL3NyYy9tZW51L2RlZmF1bHRtZW51LmNvZmZlZSIsIi9ob21lL3RyYXZpcy9idWlsZC9ncmVlbmlmeS9tc2Evc3JjL21lbnUvaW5kZXguY29mZmVlIiwiL2hvbWUvdHJhdmlzL2J1aWxkL2dyZWVuaWZ5L21zYS9zcmMvbWVudS9tZW51YnVpbGRlci5jb2ZmZWUiLCIvaG9tZS90cmF2aXMvYnVpbGQvZ3JlZW5pZnkvbXNhL3NyYy9tZW51L3ZpZXdzL0NvbG9yTWVudS5jb2ZmZWUiLCIvaG9tZS90cmF2aXMvYnVpbGQvZ3JlZW5pZnkvbXNhL3NyYy9tZW51L3ZpZXdzL0RlYnVnTWVudS5jb2ZmZWUiLCIvaG9tZS90cmF2aXMvYnVpbGQvZ3JlZW5pZnkvbXNhL3NyYy9tZW51L3ZpZXdzL0V4cG9ydE1lbnUuY29mZmVlIiwiL2hvbWUvdHJhdmlzL2J1aWxkL2dyZWVuaWZ5L21zYS9zcmMvbWVudS92aWV3cy9FeHRyYU1lbnUuY29mZmVlIiwiL2hvbWUvdHJhdmlzL2J1aWxkL2dyZWVuaWZ5L21zYS9zcmMvbWVudS92aWV3cy9GaWx0ZXJNZW51LmNvZmZlZSIsIi9ob21lL3RyYXZpcy9idWlsZC9ncmVlbmlmeS9tc2Evc3JjL21lbnUvdmlld3MvSGVscE1lbnUuY29mZmVlIiwiL2hvbWUvdHJhdmlzL2J1aWxkL2dyZWVuaWZ5L21zYS9zcmMvbWVudS92aWV3cy9JbXBvcnRNZW51LmNvZmZlZSIsIi9ob21lL3RyYXZpcy9idWlsZC9ncmVlbmlmeS9tc2Evc3JjL21lbnUvdmlld3MvT3JkZXJpbmdNZW51LmNvZmZlZSIsIi9ob21lL3RyYXZpcy9idWlsZC9ncmVlbmlmeS9tc2Evc3JjL21lbnUvdmlld3MvU2VsZWN0aW9uTWVudS5jb2ZmZWUiLCIvaG9tZS90cmF2aXMvYnVpbGQvZ3JlZW5pZnkvbXNhL3NyYy9tZW51L3ZpZXdzL1Zpc01lbnUuY29mZmVlIiwiL2hvbWUvdHJhdmlzL2J1aWxkL2dyZWVuaWZ5L21zYS9zcmMvbW9kZWwvRmVhdHVyZS5jb2ZmZWUiLCIvaG9tZS90cmF2aXMvYnVpbGQvZ3JlZW5pZnkvbXNhL3NyYy9tb2RlbC9GZWF0dXJlQ29sLmNvZmZlZSIsIi9ob21lL3RyYXZpcy9idWlsZC9ncmVlbmlmeS9tc2Evc3JjL21vZGVsL1NlcUNvbGxlY3Rpb24uY29mZmVlIiwiL2hvbWUvdHJhdmlzL2J1aWxkL2dyZWVuaWZ5L21zYS9zcmMvbW9kZWwvU2VxdWVuY2UuY29mZmVlIiwiL2hvbWUvdHJhdmlzL2J1aWxkL2dyZWVuaWZ5L21zYS9zcmMvbW9kZWwvaW5kZXguY29mZmVlIiwiL2hvbWUvdHJhdmlzL2J1aWxkL2dyZWVuaWZ5L21zYS9zcmMvbXNhLmNvZmZlZSIsIi9ob21lL3RyYXZpcy9idWlsZC9ncmVlbmlmeS9tc2Evc3JjL3V0aWxzL2JtYXRoLmNvZmZlZSIsIi9ob21lL3RyYXZpcy9idWlsZC9ncmVlbmlmeS9tc2Evc3JjL3V0aWxzL2V4cG9ydC5jb2ZmZWUiLCIvaG9tZS90cmF2aXMvYnVpbGQvZ3JlZW5pZnkvbXNhL3NyYy91dGlscy9maWxlLmNvZmZlZSIsIi9ob21lL3RyYXZpcy9idWlsZC9ncmVlbmlmeS9tc2Evc3JjL3V0aWxzL2luZGV4LmNvZmZlZSIsIi9ob21lL3RyYXZpcy9idWlsZC9ncmVlbmlmeS9tc2Evc3JjL3V0aWxzL2xvYWRlci5jb2ZmZWUiLCIvaG9tZS90cmF2aXMvYnVpbGQvZ3JlZW5pZnkvbXNhL3NyYy91dGlscy9wcm94eS5jb2ZmZWUiLCIvaG9tZS90cmF2aXMvYnVpbGQvZ3JlZW5pZnkvbXNhL3NyYy91dGlscy9zZXFnZW4uY29mZmVlIiwiL2hvbWUvdHJhdmlzL2J1aWxkL2dyZWVuaWZ5L21zYS9zcmMvdXRpbHMvc3ZnLmNvZmZlZSIsIi9ob21lL3RyYXZpcy9idWlsZC9ncmVlbmlmeS9tc2Evc3JjL3V0aWxzL3RyZWUuY29mZmVlIiwiL2hvbWUvdHJhdmlzL2J1aWxkL2dyZWVuaWZ5L21zYS9zcmMvdmlld3MvQWxpZ25tZW50Qm9keS5jb2ZmZWUiLCIvaG9tZS90cmF2aXMvYnVpbGQvZ3JlZW5pZnkvbXNhL3NyYy92aWV3cy9PdmVydmlld0JveC5jb2ZmZWUiLCIvaG9tZS90cmF2aXMvYnVpbGQvZ3JlZW5pZnkvbXNhL3NyYy92aWV3cy9TZWFyY2guY29mZmVlIiwiL2hvbWUvdHJhdmlzL2J1aWxkL2dyZWVuaWZ5L21zYS9zcmMvdmlld3MvU3RhZ2UuY29mZmVlIiwiL2hvbWUvdHJhdmlzL2J1aWxkL2dyZWVuaWZ5L21zYS9zcmMvdmlld3MvY2FudmFzL0NhbnZhc0NoYXJDYWNoZS5jb2ZmZWUiLCIvaG9tZS90cmF2aXMvYnVpbGQvZ3JlZW5pZnkvbXNhL3NyYy92aWV3cy9jYW52YXMvQ2FudmFzQ29vcmRzQ2FjaGUuY29mZmVlIiwiL2hvbWUvdHJhdmlzL2J1aWxkL2dyZWVuaWZ5L21zYS9zcmMvdmlld3MvY2FudmFzL0NhbnZhc1NlbGVjdGlvbi5jb2ZmZWUiLCIvaG9tZS90cmF2aXMvYnVpbGQvZ3JlZW5pZnkvbXNhL3NyYy92aWV3cy9jYW52YXMvQ2FudmFzU2VxQmxvY2suY29mZmVlIiwiL2hvbWUvdHJhdmlzL2J1aWxkL2dyZWVuaWZ5L21zYS9zcmMvdmlld3MvY2FudmFzL0NhbnZhc1NlcURyYXdlci5jb2ZmZWUiLCIvaG9tZS90cmF2aXMvYnVpbGQvZ3JlZW5pZnkvbXNhL3NyYy92aWV3cy9oZWFkZXIvQ29uc2VydmF0aW9uVmlldy5jb2ZmZWUiLCIvaG9tZS90cmF2aXMvYnVpbGQvZ3JlZW5pZnkvbXNhL3NyYy92aWV3cy9oZWFkZXIvR2FwVmlldy5jb2ZmZWUiLCIvaG9tZS90cmF2aXMvYnVpbGQvZ3JlZW5pZnkvbXNhL3NyYy92aWV3cy9oZWFkZXIvSGVhZGVyQmxvY2suY29mZmVlIiwiL2hvbWUvdHJhdmlzL2J1aWxkL2dyZWVuaWZ5L21zYS9zcmMvdmlld3MvaGVhZGVyL0xhYmVsSGVhZGVyLmNvZmZlZSIsIi9ob21lL3RyYXZpcy9idWlsZC9ncmVlbmlmeS9tc2Evc3JjL3ZpZXdzL2hlYWRlci9NYXJrZXJWaWV3LmNvZmZlZSIsIi9ob21lL3RyYXZpcy9idWlsZC9ncmVlbmlmeS9tc2Evc3JjL3ZpZXdzL2hlYWRlci9SaWdodEhlYWRlckJsb2NrLmNvZmZlZSIsIi9ob21lL3RyYXZpcy9idWlsZC9ncmVlbmlmeS9tc2Evc3JjL3ZpZXdzL2hlYWRlci9TZXFMb2dvV3JhcHBlci5jb2ZmZWUiLCIvaG9tZS90cmF2aXMvYnVpbGQvZ3JlZW5pZnkvbXNhL3NyYy92aWV3cy9sYWJlbHMvTGFiZWxCbG9jay5jb2ZmZWUiLCIvaG9tZS90cmF2aXMvYnVpbGQvZ3JlZW5pZnkvbXNhL3NyYy92aWV3cy9sYWJlbHMvTGFiZWxSb3dWaWV3LmNvZmZlZSIsIi9ob21lL3RyYXZpcy9idWlsZC9ncmVlbmlmeS9tc2Evc3JjL3ZpZXdzL2xhYmVscy9MYWJlbFZpZXcuY29mZmVlIiwiL2hvbWUvdHJhdmlzL2J1aWxkL2dyZWVuaWZ5L21zYS9zcmMvdmlld3MvbGFiZWxzL01ldGFWaWV3LmNvZmZlZSIsIm5vZGVfbW9kdWxlcy9iaW9qcy1pby1jbHVzdGFsL2xpYi9jbHVzdGFsLmpzIiwibm9kZV9tb2R1bGVzL2Jpb2pzLWlvLWZhc3RhL2xpYi9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9iaW9qcy1pby1nZmYvbGliL2luZGV4LmpzIiwiYnJvd3NlciIsIm5vZGVfbW9kdWxlcy94aHIvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlXQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JSQTtBQUNBOztBQ0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDL0tBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQ0E7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7O0FDRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDalpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdlBBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcjNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUJBO0FBQ0E7O0FDREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5SUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25GQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbFlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ3orQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNUQTtBQUNB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LEVBQUksR0FBSjtPQUFqQixDQUFSO0tBQTVCLEVBRFc7RUFBQSxDQS9FYjtDQUYwQixDQU41QixDQUFBOzs7OztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0VBO0FBQ0E7QUFDQTs7QUNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJ2YXIgY3NzID0gXCIvKiBCQVNJQyAqL1xcblxcbi5iaW9qc19tc2Ffc3RhZ2Uge1xcbiAgICBjdXJzb3I6IGRlZmF1bHQ7XFxuICAgIGxpbmUtaGVpZ2h0OiBub3JtYWw7IFxcbn1cXG5cXG4uYmlvanNfbXNhX3NlcWJsb2NrIHtcXG4gICAgY3Vyc29yOiBtb3ZlO1xcbn1cXG5cXG4uYmlvanNfbXNhX2xheWVye1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG59XFxuXFxuLmJpb2pzX21zYV9sYWJlbHMge1xcbiAgICBjb2xvcjpibGFjaztcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgIHZlcnRpY2FsLWFsaWduOm1pZGRsZTtcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gICAgdGV4dC1vdmVyZmxvdzogY2xpcDtcXG4gICAgLyptYXJnaW46YXV0bzsgKi9cXG4gICAgdGV4dC1hbGlnbjogbGVmdDtcXG59XFxuXFxuLmJpb2pzX21zYV9oZWFkZXIge1xcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xcbn1cXG5cXG4uYmlvanNfbXNhX2xhYmVscm93OmJlZm9yZSB7XFxuICAgIGNvbnRlbnQ6ICcnO1xcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAgIHdpZHRoOiAwO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxufVxcblxcbi5iaW9qc19tc2FfbGFiZWxyb3d7XFxuICAgIGhlaWdodDogMTAwJTtcXG59XFxuXFxuLmJpb2pzX21zYV9sYWJlbGJsb2NrOjotd2Via2l0LXNjcm9sbGJhciwgLmJpb2pzX21zYV9yaGVhZGVyOjotd2Via2l0LXNjcm9sbGJhcntcXG4gICAgLy8gRklYIHNjcm9sbGJhcnMgb24gTWFjXFxuICAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcXG4gICAgd2lkdGg6IDdweDtcXG4gICAgaGVpZ2h0OiA3cHg7XFxufVxcbi5iaW9qc19tc2FfbGFiZWxibG9jazo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWIsIC5iaW9qc19tc2FfcmhlYWRlcjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWJ7XFxuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLDAsMCwuNSk7XFxuICAgIGJveC1zaGFkb3c6IDAgMCAxcHggcmdiYSgyNTUsMjU1LDI1NSwuNSk7XFxufVxcblxcbi8qIEVORCBCQVNJQyAqL1xcbi8qIE1hcmtlciAqL1xcblxcbi5iaW9qc19tc2FfbWFya2Vye1xcbiAgICBjb2xvcjpncmV5O1xcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5iaW9qc19tc2FfbWFya2VyIHNwYW57XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuXFxuLyogRU5EIE1hcmtlciAqL1xcbi8qIE1lbnViYXIgKi9cXG5cXG4uc21lbnViYXIgLnNtZW51YmFyX2FsaW5rIHtcXG4gICAgYmFja2dyb3VuZDogIzM0OThkYjtcXG4gICAgYmFja2dyb3VuZC1pbWFnZTogLXdlYmtpdC1saW5lYXItZ3JhZGllbnQodG9wLCAjMzQ5OGRiLCAjMjk4MGI5KTtcXG4gICAgYmFja2dyb3VuZC1pbWFnZTogLW1vei1saW5lYXItZ3JhZGllbnQodG9wLCAjMzQ5OGRiLCAjMjk4MGI5KTtcXG4gICAgYmFja2dyb3VuZC1pbWFnZTogLW1zLWxpbmVhci1ncmFkaWVudCh0b3AsICMzNDk4ZGIsICMyOTgwYjkpO1xcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiAtby1saW5lYXItZ3JhZGllbnQodG9wLCAjMzQ5OGRiLCAjMjk4MGI5KTtcXG4gICAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRvIGJvdHRvbSwgIzM0OThkYiwgIzI5ODBiOSk7XFxuICAgIC13ZWJraXQtYm9yZGVyLXJhZGl1czogMjg7XFxuICAgIC1tb3otYm9yZGVyLXJhZGl1czogMjg7XFxuICAgIGJvcmRlci1yYWRpdXM6IDI4cHg7XFxuICAgIGZvbnQtZmFtaWx5OiBBcmlhbDtcXG4gICAgY29sb3I6ICNmZmZmZmY7XFxuICAgIHBhZGRpbmc6IDNweCAxMHB4IDNweCAxMHB4O1xcbiAgICBtYXJnaW4tbGVmdDogMTBweDtcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbn1cXG4uc21lbnViYXIge1xcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxufVxcblxcbi5zbWVudWJhciAuc21lbnViYXJfYWxpbms6aG92ZXIge1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcblxcbi8qIGpxdWVyeSBkcm9wZG93biBDU1MgKi9cXG5cXG4uc21lbnUtZHJvcGRvd24ge1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHotaW5kZXg6IDk5OTk5OTk7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi5zbWVudS1kcm9wZG93biAuc21lbnUtZHJvcGRvd24tbWVudSxcXG4uc21lbnUtZHJvcGRvd24gLnNtZW51LWRyb3Bkb3duLXBhbmVsIHtcXG4gICAgbWluLXdpZHRoOiAxNjBweDtcXG4gICAgbWF4LXdpZHRoOiAzNjBweDtcXG4gICAgbGlzdC1zdHlsZTogbm9uZTtcXG4gICAgYmFja2dyb3VuZDogI0ZGRjtcXG4gICAgYm9yZGVyOiBzb2xpZCAxcHggI0RERDtcXG4gICAgYm9yZGVyOiBzb2xpZCAxcHggcmdiYSgwLCAwLCAwLCAuMik7XFxuICAgIGJvcmRlci1yYWRpdXM6IDZweDtcXG4gICAgYm94LXNoYWRvdzogMCA1cHggMTBweCByZ2JhKDAsIDAsIDAsIC4yKTtcXG4gICAgb3ZlcmZsb3c6IHZpc2libGU7XFxuICAgIHBhZGRpbmc6IDRweCAwO1xcbiAgICBtYXJnaW46IDA7XFxufVxcblxcbi5zbWVudS1kcm9wZG93biAuc21lbnUtZHJvcGRvd24tcGFuZWwge1xcbiAgICBwYWRkaW5nOiAxMHB4O1xcbn1cXG5cXG5cXG4uc21lbnUtZHJvcGRvd24uc21lbnUtZHJvcGRvd24tc2Nyb2xsIC5zbWVudS1kcm9wZG93bi1tZW51LFxcbi5zbWVudS1kcm9wZG93bi5zbWVudS1kcm9wZG93bi1zY3JvbGwgLnNtZW51LWRyb3Bkb3duLXBhbmVsIHtcXG4gICAgbWF4LWhlaWdodDogMzU4cHg7XFxuICAgIG92ZXJmbG93OiBhdXRvO1xcbn1cXG5cXG4uc21lbnUtZHJvcGRvd24gLnNtZW51LWRyb3Bkb3duLW1lbnUgTEkge1xcbiAgICBsaXN0LXN0eWxlOiBub25lO1xcbiAgICBwYWRkaW5nOiAwIDA7XFxuICAgIG1hcmdpbjogMDtcXG4gICAgbGluZS1oZWlnaHQ6IDE4cHg7XFxufVxcblxcbi5zbWVudS1kcm9wZG93biAuc21lbnUtZHJvcGRvd24tbWVudSBMSSxcXG4uc21lbnUtZHJvcGRvd24gLnNtZW51LWRyb3Bkb3duLW1lbnUgTEFCRUwge1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgY29sb3I6ICM1NTU7XFxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG4gICAgbGluZS1oZWlnaHQ6IDE4cHg7XFxuICAgIHBhZGRpbmc6IDNweCAxNXB4O1xcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbn1cXG5cXG4uc21lbnUtZHJvcGRvd24gLnNtZW51LWRyb3Bkb3duLW1lbnUgTEk6aG92ZXIsXFxuLnNtZW51LWRyb3Bkb3duIC5zbWVudS1kcm9wZG93bi1tZW51IExBQkVMOmhvdmVyIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzA4QztcXG4gICAgY29sb3I6ICNGRkY7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLnNtZW51LWRyb3Bkb3duIC5zbWVudS1kcm9wZG93bi1tZW51IC5zbWVudS1kcm9wZG93bi1kaXZpZGVyIHtcXG4gICAgZm9udC1zaXplOiAxcHg7XFxuICAgIGJvcmRlci10b3A6IHNvbGlkIDFweCAjRTVFNUU1O1xcbiAgICBwYWRkaW5nOiAwO1xcbiAgICBtYXJnaW46IDVweCAwO1xcbn1cXG5cXG4vKiBFTkQgTWVudWJhciAqL1xcblwiOyAocmVxdWlyZShcIi9ob21lL3RyYXZpcy9idWlsZC9ncmVlbmlmeS9tc2Evbm9kZV9tb2R1bGVzL2Nzc2lmeVwiKSkoY3NzKTsgbW9kdWxlLmV4cG9ydHMgPSBjc3M7IiwidmFyIF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJyk7XG52YXIgdmlld1R5cGUgPSByZXF1aXJlKFwiYmFja2JvbmUtdmlld2pcIik7XG52YXIgcGx1Z2luYXRvcjtcblxuLyoqXG4gKiBSZW1vdmUgYW4gZWxlbWVudCBhbmQgcHJvdmlkZSBhIGZ1bmN0aW9uIHRoYXQgaW5zZXJ0cyBpdCBpbnRvIGl0cyBvcmlnaW5hbCBwb3NpdGlvblxuICogQHBhcmFtIGVsZW1lbnQge0VsZW1lbnR9IFRoZSBlbGVtZW50IHRvIGJlIHRlbXBvcmFyaWx5IHJlbW92ZWRcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRoYXQgaW5zZXJ0cyB0aGUgZWxlbWVudCBpbnRvIGl0cyBvcmlnaW5hbCBwb3NpdGlvblxuICoqL1xuZnVuY3Rpb24gcmVtb3ZlVG9JbnNlcnRMYXRlcihlbGVtZW50KSB7XG4gIHZhciBwYXJlbnROb2RlID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICB2YXIgbmV4dFNpYmxpbmcgPSBlbGVtZW50Lm5leHRTaWJsaW5nO1xuICBwYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsZW1lbnQpO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgaWYgKG5leHRTaWJsaW5nKSB7XG4gICAgICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShlbGVtZW50LCBuZXh0U2libGluZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcmVudE5vZGUuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG52YXIgcmVtb3ZlQ2hpbGRzID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICB2YXIgbGFzdDtcbiAgICB3aGlsZSAobGFzdCA9IG5vZGUubGFzdENoaWxkKSBub2RlLnJlbW92ZUNoaWxkKGxhc3QpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBwbHVnaW5hdG9yID0gdmlld1R5cGUuZXh0ZW5kKHtcbiAgcmVuZGVyU3Vidmlld3M6IGZ1bmN0aW9uKCkge1xuICAgIC8vIGl0IGlzIGZhc3RlciB0byByZW1vdmUgdGhlIGVudGlyZSBlbGVtZW50IGFuZCByZXBsYWNlIGl0XG4gICAgLy8gLT4gaG93ZXZlciB0aGlzIHdpbGwgbGVhZCB0byBsb3N0IGlkLGNsYXNzIGFuZCBzdHlsZSBwcm9wc1xuICAgIHZhciBvbGRFbCA9IHRoaXMuZWw7XG5cbiAgICAvLyBpdCBtaWdodCBiZSB0aGF0IHRoZSBlbGVtZW50IGlzIG5vdCBvbiB0aGUgRE9NIHlldFxuICAgIHZhciBlbE9uRG9tID0gb2xkRWwucGFyZW50Tm9kZSAhPSB1bmRlZmluZWQ7XG4gICAgaWYoZWxPbkRvbSl7XG4gICAgICB2YXIgaW5zZXJ0ID0gcmVtb3ZlVG9JbnNlcnRMYXRlcihvbGRFbClcbiAgICB9XG4gICAgcmVtb3ZlQ2hpbGRzKG9sZEVsKTtcblxuICAgIHZhciBmcmFnID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgIHZhciB2aWV3cyA9IHRoaXMuX3ZpZXdzKCk7XG4gICAgdmFyIHZpZXdzU29ydGVkID0gXy5zb3J0Qnkodmlld3MsIGZ1bmN0aW9uKGVsKSB7XG4gICAgICByZXR1cm4gZWwub3JkZXJpbmc7XG4gICAgfSk7XG4gICAgdmFyIHZpZXcsIG5vZGU7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAgdmlld3NTb3J0ZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZpZXcgPSB2aWV3c1NvcnRlZFtpXTtcbiAgICAgIHZpZXcucmVuZGVyKCk7XG4gICAgICBub2RlID0gdmlldy5lbDtcbiAgICAgIGlmIChub2RlICE9IG51bGwpIHtcbiAgICAgICAgZnJhZy5hcHBlbmRDaGlsZChub2RlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBvbGRFbC5hcHBlbmRDaGlsZChmcmFnKTtcbiAgICBpZihlbE9uRG9tKXtcbiAgICAgIGluc2VydCgpO1xuICAgIH1cbiAgICByZXR1cm4gb2xkRWw7XG4gIH0sXG4gIGFkZFZpZXc6IGZ1bmN0aW9uKGtleSwgdmlldykge1xuICAgIHZhciB2aWV3cyA9IHRoaXMuX3ZpZXdzKCk7XG4gICAgaWYgKHZpZXcgPT0gbnVsbCkge1xuICAgICAgdGhyb3cgXCJJbnZhbGlkIHBsdWdpbi4gXCI7XG4gICAgfVxuICAgIGlmICh2aWV3Lm9yZGVyaW5nID09IG51bGwpIHtcbiAgICAgIHZpZXcub3JkZXJpbmcgPSBrZXk7XG4gICAgfVxuICAgIHJldHVybiB2aWV3c1trZXldID0gdmlldztcbiAgfSxcbiAgcmVtb3ZlVmlld3M6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBlbCwga2V5O1xuICAgIHZhciB2aWV3cyA9IHRoaXMuX3ZpZXdzKCk7XG4gICAgZm9yIChrZXkgaW4gdmlld3MpIHtcbiAgICAgIGVsID0gdmlld3Nba2V5XTtcbiAgICAgIGVsLnVuZGVsZWdhdGVFdmVudHMoKTtcbiAgICAgIGVsLnVuYmluZCgpO1xuICAgICAgaWYgKGVsLnJlbW92ZVZpZXdzICE9IG51bGwpIHtcbiAgICAgICAgZWwucmVtb3ZlVmlld3MoKTtcbiAgICAgIH1cbiAgICAgIGVsLnJlbW92ZSgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy52aWV3cyA9IHt9O1xuICB9LFxuICByZW1vdmVWaWV3OiBmdW5jdGlvbihrZXkpIHtcbiAgICB2YXIgdmlld3MgPSB0aGlzLl92aWV3cygpO1xuICAgIHZpZXdzW2tleV0ucmVtb3ZlKCk7XG4gICAgcmV0dXJuIGRlbGV0ZSB2aWV3c1trZXldO1xuICB9LFxuICBnZXRWaWV3OiBmdW5jdGlvbihrZXkpIHtcbiAgICB2YXIgdmlld3MgPSB0aGlzLl92aWV3cygpO1xuICAgIHJldHVybiB2aWV3c1trZXldO1xuICB9LFxuICByZW1vdmU6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlVmlld3MoKTtcbiAgICByZXR1cm4gdmlld1R5cGUucHJvdG90eXBlLnJlbW92ZS5hcHBseSh0aGlzKTtcbiAgfSxcbiAgX3ZpZXdzOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy52aWV3cyA9PSBudWxsKSB7XG4gICAgICB0aGlzLnZpZXdzID0ge307XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnZpZXdzO1xuICB9XG59KTtcbiIsIi8vICAgICBCYWNrYm9uZS5qcyAxLjEuMlxuXG4vLyAgICAgKGMpIDIwMTAtMjAxNCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuLy8gICAgIEJhY2tib25lIG1heSBiZSBmcmVlbHkgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuLy8gICAgIEZvciBhbGwgZGV0YWlscyBhbmQgZG9jdW1lbnRhdGlvbjpcbi8vICAgICBodHRwOi8vYmFja2JvbmVqcy5vcmdcblxudmFyIEV2ZW50cyA9IHJlcXVpcmUoXCJiYWNrYm9uZS1ldmVudHMtc3RhbmRhbG9uZVwiKTtcbnZhciBleHRlbmQgPSByZXF1aXJlKFwiYmFja2JvbmUtZXh0ZW5kLXN0YW5kYWxvbmVcIik7XG52YXIgXyA9IHJlcXVpcmUoXCJ1bmRlcnNjb3JlXCIpO1xudmFyIE1vZGVsID0gcmVxdWlyZShcIi4vbW9kZWxcIik7XG5cbi8vIENyZWF0ZSBsb2NhbCByZWZlcmVuY2VzIHRvIGFycmF5IG1ldGhvZHMgd2UnbGwgd2FudCB0byB1c2UgbGF0ZXIuXG52YXIgYXJyYXkgPSBbXTtcbnZhciBzbGljZSA9IGFycmF5LnNsaWNlO1xuXG4vLyBCYWNrYm9uZS5Db2xsZWN0aW9uXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vIElmIG1vZGVscyB0ZW5kIHRvIHJlcHJlc2VudCBhIHNpbmdsZSByb3cgb2YgZGF0YSwgYSBCYWNrYm9uZSBDb2xsZWN0aW9uIGlzXG4vLyBtb3JlIGFuYWxvZ291cyB0byBhIHRhYmxlIGZ1bGwgb2YgZGF0YSAuLi4gb3IgYSBzbWFsbCBzbGljZSBvciBwYWdlIG9mIHRoYXRcbi8vIHRhYmxlLCBvciBhIGNvbGxlY3Rpb24gb2Ygcm93cyB0aGF0IGJlbG9uZyB0b2dldGhlciBmb3IgYSBwYXJ0aWN1bGFyIHJlYXNvblxuLy8gLS0gYWxsIG9mIHRoZSBtZXNzYWdlcyBpbiB0aGlzIHBhcnRpY3VsYXIgZm9sZGVyLCBhbGwgb2YgdGhlIGRvY3VtZW50c1xuLy8gYmVsb25naW5nIHRvIHRoaXMgcGFydGljdWxhciBhdXRob3IsIGFuZCBzbyBvbi4gQ29sbGVjdGlvbnMgbWFpbnRhaW5cbi8vIGluZGV4ZXMgb2YgdGhlaXIgbW9kZWxzLCBib3RoIGluIG9yZGVyLCBhbmQgZm9yIGxvb2t1cCBieSBgaWRgLlxuXG4vLyBDcmVhdGUgYSBuZXcgKipDb2xsZWN0aW9uKiosIHBlcmhhcHMgdG8gY29udGFpbiBhIHNwZWNpZmljIHR5cGUgb2YgYG1vZGVsYC5cbi8vIElmIGEgYGNvbXBhcmF0b3JgIGlzIHNwZWNpZmllZCwgdGhlIENvbGxlY3Rpb24gd2lsbCBtYWludGFpblxuLy8gaXRzIG1vZGVscyBpbiBzb3J0IG9yZGVyLCBhcyB0aGV5J3JlIGFkZGVkIGFuZCByZW1vdmVkLlxudmFyIENvbGxlY3Rpb24gPSBmdW5jdGlvbihtb2RlbHMsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTtcbiAgaWYgKG9wdGlvbnMubW9kZWwpIHRoaXMubW9kZWwgPSBvcHRpb25zLm1vZGVsO1xuICBpZiAob3B0aW9ucy5jb21wYXJhdG9yICE9PSB2b2lkIDApIHRoaXMuY29tcGFyYXRvciA9IG9wdGlvbnMuY29tcGFyYXRvcjtcbiAgdGhpcy5fcmVzZXQoKTtcbiAgdGhpcy5pbml0aWFsaXplLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIGlmIChtb2RlbHMpIHRoaXMucmVzZXQobW9kZWxzLCBfLmV4dGVuZCh7c2lsZW50OiB0cnVlfSwgb3B0aW9ucykpO1xufTtcblxuLy8gRGVmYXVsdCBvcHRpb25zIGZvciBgQ29sbGVjdGlvbiNzZXRgLlxudmFyIHNldE9wdGlvbnMgPSB7YWRkOiB0cnVlLCByZW1vdmU6IHRydWUsIG1lcmdlOiB0cnVlfTtcbnZhciBhZGRPcHRpb25zID0ge2FkZDogdHJ1ZSwgcmVtb3ZlOiBmYWxzZX07XG5cbi8vIERlZmluZSB0aGUgQ29sbGVjdGlvbidzIGluaGVyaXRhYmxlIG1ldGhvZHMuXG5fLmV4dGVuZChDb2xsZWN0aW9uLnByb3RvdHlwZSwgRXZlbnRzLCB7XG5cbiAgLy8gVGhlIGRlZmF1bHQgbW9kZWwgZm9yIGEgY29sbGVjdGlvbiBpcyBqdXN0IGEgKipCYWNrYm9uZS5Nb2RlbCoqLlxuICAvLyBUaGlzIHNob3VsZCBiZSBvdmVycmlkZGVuIGluIG1vc3QgY2FzZXMuXG4gIG1vZGVsOiBNb2RlbCxcblxuICAvLyBJbml0aWFsaXplIGlzIGFuIGVtcHR5IGZ1bmN0aW9uIGJ5IGRlZmF1bHQuIE92ZXJyaWRlIGl0IHdpdGggeW91ciBvd25cbiAgLy8gaW5pdGlhbGl6YXRpb24gbG9naWMuXG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uKCl7fSxcblxuICAgIC8vIFRoZSBKU09OIHJlcHJlc2VudGF0aW9uIG9mIGEgQ29sbGVjdGlvbiBpcyBhbiBhcnJheSBvZiB0aGVcbiAgICAvLyBtb2RlbHMnIGF0dHJpYnV0ZXMuXG4gIHRvSlNPTjogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbihtb2RlbCl7IHJldHVybiBtb2RlbC50b0pTT04ob3B0aW9ucyk7IH0pO1xuICB9LFxuXG4gICAgLy8gUHJveHkgYEJhY2tib25lLnN5bmNgIGJ5IGRlZmF1bHQuXG4gIHN5bmM6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBCYWNrYm9uZS5zeW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH0sXG5cbiAgICAvLyBBZGQgYSBtb2RlbCwgb3IgbGlzdCBvZiBtb2RlbHMgdG8gdGhlIHNldC5cbiAgYWRkOiBmdW5jdGlvbihtb2RlbHMsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5zZXQobW9kZWxzLCBfLmV4dGVuZCh7bWVyZ2U6IGZhbHNlfSwgb3B0aW9ucywgYWRkT3B0aW9ucykpO1xuICB9LFxuXG4gICAgLy8gUmVtb3ZlIGEgbW9kZWwsIG9yIGEgbGlzdCBvZiBtb2RlbHMgZnJvbSB0aGUgc2V0LlxuICByZW1vdmU6IGZ1bmN0aW9uKG1vZGVscywgb3B0aW9ucykge1xuICAgIHZhciBzaW5ndWxhciA9ICFfLmlzQXJyYXkobW9kZWxzKTtcbiAgICBtb2RlbHMgPSBzaW5ndWxhciA/IFttb2RlbHNdIDogXy5jbG9uZShtb2RlbHMpO1xuICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IG1vZGVscy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFyIG1vZGVsID0gbW9kZWxzW2ldID0gdGhpcy5nZXQobW9kZWxzW2ldKTtcbiAgICAgIGlmICghbW9kZWwpIGNvbnRpbnVlO1xuICAgICAgdmFyIGlkID0gdGhpcy5tb2RlbElkKG1vZGVsLmF0dHJpYnV0ZXMpO1xuICAgICAgaWYgKGlkICE9IG51bGwpIGRlbGV0ZSB0aGlzLl9ieUlkW2lkXTtcbiAgICAgIGRlbGV0ZSB0aGlzLl9ieUlkW21vZGVsLmNpZF07XG4gICAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4T2YobW9kZWwpO1xuICAgICAgdGhpcy5tb2RlbHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIHRoaXMubGVuZ3RoLS07XG4gICAgICBpZiAoIW9wdGlvbnMuc2lsZW50KSB7XG4gICAgICAgIG9wdGlvbnMuaW5kZXggPSBpbmRleDtcbiAgICAgICAgbW9kZWwudHJpZ2dlcigncmVtb3ZlJywgbW9kZWwsIHRoaXMsIG9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgdGhpcy5fcmVtb3ZlUmVmZXJlbmNlKG1vZGVsLCBvcHRpb25zKTtcbiAgICB9XG4gICAgcmV0dXJuIHNpbmd1bGFyID8gbW9kZWxzWzBdIDogbW9kZWxzO1xuICB9LFxuXG4gICAgLy8gVXBkYXRlIGEgY29sbGVjdGlvbiBieSBgc2V0YC1pbmcgYSBuZXcgbGlzdCBvZiBtb2RlbHMsIGFkZGluZyBuZXcgb25lcyxcbiAgICAvLyByZW1vdmluZyBtb2RlbHMgdGhhdCBhcmUgbm8gbG9uZ2VyIHByZXNlbnQsIGFuZCBtZXJnaW5nIG1vZGVscyB0aGF0XG4gICAgLy8gYWxyZWFkeSBleGlzdCBpbiB0aGUgY29sbGVjdGlvbiwgYXMgbmVjZXNzYXJ5LiBTaW1pbGFyIHRvICoqTW9kZWwjc2V0KiosXG4gICAgLy8gdGhlIGNvcmUgb3BlcmF0aW9uIGZvciB1cGRhdGluZyB0aGUgZGF0YSBjb250YWluZWQgYnkgdGhlIGNvbGxlY3Rpb24uXG4gIHNldDogZnVuY3Rpb24obW9kZWxzLCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IF8uZGVmYXVsdHMoe30sIG9wdGlvbnMsIHNldE9wdGlvbnMpO1xuICAgIGlmIChvcHRpb25zLnBhcnNlKSBtb2RlbHMgPSB0aGlzLnBhcnNlKG1vZGVscywgb3B0aW9ucyk7XG4gICAgdmFyIHNpbmd1bGFyID0gIV8uaXNBcnJheShtb2RlbHMpO1xuICAgIG1vZGVscyA9IHNpbmd1bGFyID8gKG1vZGVscyA/IFttb2RlbHNdIDogW10pIDogbW9kZWxzLnNsaWNlKCk7XG4gICAgdmFyIGlkLCBtb2RlbCwgYXR0cnMsIGV4aXN0aW5nLCBzb3J0O1xuICAgIHZhciBhdCA9IG9wdGlvbnMuYXQ7XG4gICAgdmFyIHNvcnRhYmxlID0gdGhpcy5jb21wYXJhdG9yICYmIChhdCA9PSBudWxsKSAmJiBvcHRpb25zLnNvcnQgIT09IGZhbHNlO1xuICAgIHZhciBzb3J0QXR0ciA9IF8uaXNTdHJpbmcodGhpcy5jb21wYXJhdG9yKSA/IHRoaXMuY29tcGFyYXRvciA6IG51bGw7XG4gICAgdmFyIHRvQWRkID0gW10sIHRvUmVtb3ZlID0gW10sIG1vZGVsTWFwID0ge307XG4gICAgdmFyIGFkZCA9IG9wdGlvbnMuYWRkLCBtZXJnZSA9IG9wdGlvbnMubWVyZ2UsIHJlbW92ZSA9IG9wdGlvbnMucmVtb3ZlO1xuICAgIHZhciBvcmRlciA9ICFzb3J0YWJsZSAmJiBhZGQgJiYgcmVtb3ZlID8gW10gOiBmYWxzZTtcblxuICAgIC8vIFR1cm4gYmFyZSBvYmplY3RzIGludG8gbW9kZWwgcmVmZXJlbmNlcywgYW5kIHByZXZlbnQgaW52YWxpZCBtb2RlbHNcbiAgICAvLyBmcm9tIGJlaW5nIGFkZGVkLlxuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBtb2RlbHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGF0dHJzID0gbW9kZWxzW2ldO1xuXG4gICAgICAvLyBJZiBhIGR1cGxpY2F0ZSBpcyBmb3VuZCwgcHJldmVudCBpdCBmcm9tIGJlaW5nIGFkZGVkIGFuZFxuICAgICAgLy8gb3B0aW9uYWxseSBtZXJnZSBpdCBpbnRvIHRoZSBleGlzdGluZyBtb2RlbC5cbiAgICAgIGlmIChleGlzdGluZyA9IHRoaXMuZ2V0KGF0dHJzKSkge1xuICAgICAgICBpZiAocmVtb3ZlKSBtb2RlbE1hcFtleGlzdGluZy5jaWRdID0gdHJ1ZTtcbiAgICAgICAgaWYgKG1lcmdlICYmIGF0dHJzICE9PSBleGlzdGluZykge1xuICAgICAgICAgIGF0dHJzID0gdGhpcy5faXNNb2RlbChhdHRycykgPyBhdHRycy5hdHRyaWJ1dGVzIDogYXR0cnM7XG4gICAgICAgICAgaWYgKG9wdGlvbnMucGFyc2UpIGF0dHJzID0gZXhpc3RpbmcucGFyc2UoYXR0cnMsIG9wdGlvbnMpO1xuICAgICAgICAgIGV4aXN0aW5nLnNldChhdHRycywgb3B0aW9ucyk7XG4gICAgICAgICAgaWYgKHNvcnRhYmxlICYmICFzb3J0ICYmIGV4aXN0aW5nLmhhc0NoYW5nZWQoc29ydEF0dHIpKSBzb3J0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBtb2RlbHNbaV0gPSBleGlzdGluZztcblxuICAgICAgICAvLyBJZiB0aGlzIGlzIGEgbmV3LCB2YWxpZCBtb2RlbCwgcHVzaCBpdCB0byB0aGUgYHRvQWRkYCBsaXN0LlxuICAgICAgfSBlbHNlIGlmIChhZGQpIHtcbiAgICAgICAgbW9kZWwgPSBtb2RlbHNbaV0gPSB0aGlzLl9wcmVwYXJlTW9kZWwoYXR0cnMsIG9wdGlvbnMpO1xuICAgICAgICBpZiAoIW1vZGVsKSBjb250aW51ZTtcbiAgICAgICAgdG9BZGQucHVzaChtb2RlbCk7XG4gICAgICAgIHRoaXMuX2FkZFJlZmVyZW5jZShtb2RlbCwgb3B0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIC8vIERvIG5vdCBhZGQgbXVsdGlwbGUgbW9kZWxzIHdpdGggdGhlIHNhbWUgYGlkYC5cbiAgICAgIG1vZGVsID0gZXhpc3RpbmcgfHwgbW9kZWw7XG4gICAgICBpZiAoIW1vZGVsKSBjb250aW51ZTtcbiAgICAgIGlkID0gdGhpcy5tb2RlbElkKG1vZGVsLmF0dHJpYnV0ZXMpO1xuICAgICAgaWYgKG9yZGVyICYmIChtb2RlbC5pc05ldygpIHx8ICFtb2RlbE1hcFtpZF0pKSBvcmRlci5wdXNoKG1vZGVsKTtcbiAgICAgIG1vZGVsTWFwW2lkXSA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIG5vbmV4aXN0ZW50IG1vZGVscyBpZiBhcHByb3ByaWF0ZS5cbiAgICBpZiAocmVtb3ZlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gdGhpcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoIW1vZGVsTWFwWyhtb2RlbCA9IHRoaXMubW9kZWxzW2ldKS5jaWRdKSB0b1JlbW92ZS5wdXNoKG1vZGVsKTtcbiAgICAgIH1cbiAgICAgIGlmICh0b1JlbW92ZS5sZW5ndGgpIHRoaXMucmVtb3ZlKHRvUmVtb3ZlLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICAvLyBTZWUgaWYgc29ydGluZyBpcyBuZWVkZWQsIHVwZGF0ZSBgbGVuZ3RoYCBhbmQgc3BsaWNlIGluIG5ldyBtb2RlbHMuXG4gICAgaWYgKHRvQWRkLmxlbmd0aCB8fCAob3JkZXIgJiYgb3JkZXIubGVuZ3RoKSkge1xuICAgICAgaWYgKHNvcnRhYmxlKSBzb3J0ID0gdHJ1ZTtcbiAgICAgIHRoaXMubGVuZ3RoICs9IHRvQWRkLmxlbmd0aDtcbiAgICAgIGlmIChhdCAhPSBudWxsKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSB0b0FkZC5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgIHRoaXMubW9kZWxzLnNwbGljZShhdCArIGksIDAsIHRvQWRkW2ldKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKG9yZGVyKSB0aGlzLm1vZGVscy5sZW5ndGggPSAwO1xuICAgICAgICB2YXIgb3JkZXJlZE1vZGVscyA9IG9yZGVyIHx8IHRvQWRkO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gb3JkZXJlZE1vZGVscy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgIHRoaXMubW9kZWxzLnB1c2gob3JkZXJlZE1vZGVsc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTaWxlbnRseSBzb3J0IHRoZSBjb2xsZWN0aW9uIGlmIGFwcHJvcHJpYXRlLlxuICAgIGlmIChzb3J0KSB0aGlzLnNvcnQoe3NpbGVudDogdHJ1ZX0pO1xuXG4gICAgLy8gVW5sZXNzIHNpbGVuY2VkLCBpdCdzIHRpbWUgdG8gZmlyZSBhbGwgYXBwcm9wcmlhdGUgYWRkL3NvcnQgZXZlbnRzLlxuICAgIGlmICghb3B0aW9ucy5zaWxlbnQpIHtcbiAgICAgIHZhciBhZGRPcHRzID0gYXQgIT0gbnVsbCA/IF8uY2xvbmUob3B0aW9ucykgOiBvcHRpb25zO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IHRvQWRkLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChhdCAhPSBudWxsKSBhZGRPcHRzLmluZGV4ID0gYXQgKyBpO1xuICAgICAgICAobW9kZWwgPSB0b0FkZFtpXSkudHJpZ2dlcignYWRkJywgbW9kZWwsIHRoaXMsIGFkZE9wdHMpO1xuICAgICAgfVxuICAgICAgaWYgKHNvcnQgfHwgKG9yZGVyICYmIG9yZGVyLmxlbmd0aCkpIHRoaXMudHJpZ2dlcignc29ydCcsIHRoaXMsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIC8vIFJldHVybiB0aGUgYWRkZWQgKG9yIG1lcmdlZCkgbW9kZWwgKG9yIG1vZGVscykuXG4gICAgcmV0dXJuIHNpbmd1bGFyID8gbW9kZWxzWzBdIDogbW9kZWxzO1xuICB9LFxuXG4gICAgLy8gV2hlbiB5b3UgaGF2ZSBtb3JlIGl0ZW1zIHRoYW4geW91IHdhbnQgdG8gYWRkIG9yIHJlbW92ZSBpbmRpdmlkdWFsbHksXG4gICAgLy8geW91IGNhbiByZXNldCB0aGUgZW50aXJlIHNldCB3aXRoIGEgbmV3IGxpc3Qgb2YgbW9kZWxzLCB3aXRob3V0IGZpcmluZ1xuICAgIC8vIGFueSBncmFudWxhciBgYWRkYCBvciBgcmVtb3ZlYCBldmVudHMuIEZpcmVzIGByZXNldGAgd2hlbiBmaW5pc2hlZC5cbiAgICAvLyBVc2VmdWwgZm9yIGJ1bGsgb3BlcmF0aW9ucyBhbmQgb3B0aW1pemF0aW9ucy5cbiAgcmVzZXQ6IGZ1bmN0aW9uKG1vZGVscywgb3B0aW9ucykge1xuICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IHRoaXMubW9kZWxzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLl9yZW1vdmVSZWZlcmVuY2UodGhpcy5tb2RlbHNbaV0sIG9wdGlvbnMpO1xuICAgIH1cbiAgICBvcHRpb25zLnByZXZpb3VzTW9kZWxzID0gdGhpcy5tb2RlbHM7XG4gICAgdGhpcy5fcmVzZXQoKTtcbiAgICBtb2RlbHMgPSB0aGlzLmFkZChtb2RlbHMsIF8uZXh0ZW5kKHtzaWxlbnQ6IHRydWV9LCBvcHRpb25zKSk7XG4gICAgaWYgKCFvcHRpb25zLnNpbGVudCkgdGhpcy50cmlnZ2VyKCdyZXNldCcsIHRoaXMsIG9wdGlvbnMpO1xuICAgIHJldHVybiBtb2RlbHM7XG4gIH0sXG5cbiAgICAvLyBBZGQgYSBtb2RlbCB0byB0aGUgZW5kIG9mIHRoZSBjb2xsZWN0aW9uLlxuICBwdXNoOiBmdW5jdGlvbihtb2RlbCwgb3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLmFkZChtb2RlbCwgXy5leHRlbmQoe2F0OiB0aGlzLmxlbmd0aH0sIG9wdGlvbnMpKTtcbiAgfSxcblxuICAgIC8vIFJlbW92ZSBhIG1vZGVsIGZyb20gdGhlIGVuZCBvZiB0aGUgY29sbGVjdGlvbi5cbiAgcG9wOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdmFyIG1vZGVsID0gdGhpcy5hdCh0aGlzLmxlbmd0aCAtIDEpO1xuICAgIHRoaXMucmVtb3ZlKG1vZGVsLCBvcHRpb25zKTtcbiAgICByZXR1cm4gbW9kZWw7XG4gIH0sXG5cbiAgICAvLyBBZGQgYSBtb2RlbCB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBjb2xsZWN0aW9uLlxuICB1bnNoaWZ0OiBmdW5jdGlvbihtb2RlbCwgb3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLmFkZChtb2RlbCwgXy5leHRlbmQoe2F0OiAwfSwgb3B0aW9ucykpO1xuICB9LFxuXG4gICAgLy8gUmVtb3ZlIGEgbW9kZWwgZnJvbSB0aGUgYmVnaW5uaW5nIG9mIHRoZSBjb2xsZWN0aW9uLlxuICBzaGlmdDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHZhciBtb2RlbCA9IHRoaXMuYXQoMCk7XG4gICAgdGhpcy5yZW1vdmUobW9kZWwsIG9wdGlvbnMpO1xuICAgIHJldHVybiBtb2RlbDtcbiAgfSxcblxuICAgIC8vIFNsaWNlIG91dCBhIHN1Yi1hcnJheSBvZiBtb2RlbHMgZnJvbSB0aGUgY29sbGVjdGlvbi5cbiAgc2xpY2U6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzbGljZS5hcHBseSh0aGlzLm1vZGVscywgYXJndW1lbnRzKTtcbiAgfSxcblxuICAgIC8vIEdldCBhIG1vZGVsIGZyb20gdGhlIHNldCBieSBpZC5cbiAgZ2V0OiBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiB2b2lkIDA7XG4gICAgdmFyIGlkID0gdGhpcy5tb2RlbElkKHRoaXMuX2lzTW9kZWwob2JqKSA/IG9iai5hdHRyaWJ1dGVzIDogb2JqKTtcbiAgICByZXR1cm4gdGhpcy5fYnlJZFtvYmpdIHx8IHRoaXMuX2J5SWRbaWRdIHx8IHRoaXMuX2J5SWRbb2JqLmNpZF07XG4gIH0sXG5cbiAgICAvLyBHZXQgdGhlIG1vZGVsIGF0IHRoZSBnaXZlbiBpbmRleC5cbiAgYXQ6IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgaWYgKGluZGV4IDwgMCkgaW5kZXggKz0gdGhpcy5sZW5ndGg7XG4gICAgcmV0dXJuIHRoaXMubW9kZWxzW2luZGV4XTtcbiAgfSxcblxuICAgIC8vIFJldHVybiBtb2RlbHMgd2l0aCBtYXRjaGluZyBhdHRyaWJ1dGVzLiBVc2VmdWwgZm9yIHNpbXBsZSBjYXNlcyBvZlxuICAgIC8vIGBmaWx0ZXJgLlxuICB3aGVyZTogZnVuY3Rpb24oYXR0cnMsIGZpcnN0KSB7XG4gICAgaWYgKF8uaXNFbXB0eShhdHRycykpIHJldHVybiBmaXJzdCA/IHZvaWQgMCA6IFtdO1xuICAgIHJldHVybiB0aGlzW2ZpcnN0ID8gJ2ZpbmQnIDogJ2ZpbHRlciddKGZ1bmN0aW9uKG1vZGVsKSB7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gYXR0cnMpIHtcbiAgICAgICAgaWYgKGF0dHJzW2tleV0gIT09IG1vZGVsLmdldChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgfSxcblxuICAgIC8vIFJldHVybiB0aGUgZmlyc3QgbW9kZWwgd2l0aCBtYXRjaGluZyBhdHRyaWJ1dGVzLiBVc2VmdWwgZm9yIHNpbXBsZSBjYXNlc1xuICAgIC8vIG9mIGBmaW5kYC5cbiAgZmluZFdoZXJlOiBmdW5jdGlvbihhdHRycykge1xuICAgIHJldHVybiB0aGlzLndoZXJlKGF0dHJzLCB0cnVlKTtcbiAgfSxcblxuICAgIC8vIEZvcmNlIHRoZSBjb2xsZWN0aW9uIHRvIHJlLXNvcnQgaXRzZWxmLiBZb3UgZG9uJ3QgbmVlZCB0byBjYWxsIHRoaXMgdW5kZXJcbiAgICAvLyBub3JtYWwgY2lyY3Vtc3RhbmNlcywgYXMgdGhlIHNldCB3aWxsIG1haW50YWluIHNvcnQgb3JkZXIgYXMgZWFjaCBpdGVtXG4gICAgLy8gaXMgYWRkZWQuXG4gIHNvcnQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICBpZiAoIXRoaXMuY29tcGFyYXRvcikgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3Qgc29ydCBhIHNldCB3aXRob3V0IGEgY29tcGFyYXRvcicpO1xuICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7XG5cbiAgICAvLyBSdW4gc29ydCBiYXNlZCBvbiB0eXBlIG9mIGBjb21wYXJhdG9yYC5cbiAgICBpZiAoXy5pc1N0cmluZyh0aGlzLmNvbXBhcmF0b3IpIHx8IHRoaXMuY29tcGFyYXRvci5sZW5ndGggPT09IDEpIHtcbiAgICAgIHRoaXMubW9kZWxzID0gdGhpcy5zb3J0QnkodGhpcy5jb21wYXJhdG9yLCB0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5tb2RlbHMuc29ydChfLmJpbmQodGhpcy5jb21wYXJhdG9yLCB0aGlzKSk7XG4gICAgfVxuXG4gICAgaWYgKCFvcHRpb25zLnNpbGVudCkgdGhpcy50cmlnZ2VyKCdzb3J0JywgdGhpcywgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgICAvLyBQbHVjayBhbiBhdHRyaWJ1dGUgZnJvbSBlYWNoIG1vZGVsIGluIHRoZSBjb2xsZWN0aW9uLlxuICBwbHVjazogZnVuY3Rpb24oYXR0cikge1xuICAgIHJldHVybiBfLmludm9rZSh0aGlzLm1vZGVscywgJ2dldCcsIGF0dHIpO1xuICB9LFxuXG4gICAgLy8gRmV0Y2ggdGhlIGRlZmF1bHQgc2V0IG9mIG1vZGVscyBmb3IgdGhpcyBjb2xsZWN0aW9uLCByZXNldHRpbmcgdGhlXG4gICAgLy8gY29sbGVjdGlvbiB3aGVuIHRoZXkgYXJyaXZlLiBJZiBgcmVzZXQ6IHRydWVgIGlzIHBhc3NlZCwgdGhlIHJlc3BvbnNlXG4gICAgLy8gZGF0YSB3aWxsIGJlIHBhc3NlZCB0aHJvdWdoIHRoZSBgcmVzZXRgIG1ldGhvZCBpbnN0ZWFkIG9mIGBzZXRgLlxuICBmZXRjaDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zID8gXy5jbG9uZShvcHRpb25zKSA6IHt9O1xuICAgIGlmIChvcHRpb25zLnBhcnNlID09PSB2b2lkIDApIG9wdGlvbnMucGFyc2UgPSB0cnVlO1xuICAgIHZhciBzdWNjZXNzID0gb3B0aW9ucy5zdWNjZXNzO1xuICAgIHZhciBjb2xsZWN0aW9uID0gdGhpcztcbiAgICBvcHRpb25zLnN1Y2Nlc3MgPSBmdW5jdGlvbihyZXNwKSB7XG4gICAgICB2YXIgbWV0aG9kID0gb3B0aW9ucy5yZXNldCA/ICdyZXNldCcgOiAnc2V0JztcbiAgICAgIGNvbGxlY3Rpb25bbWV0aG9kXShyZXNwLCBvcHRpb25zKTtcbiAgICAgIGlmIChzdWNjZXNzKSBzdWNjZXNzKGNvbGxlY3Rpb24sIHJlc3AsIG9wdGlvbnMpO1xuICAgICAgY29sbGVjdGlvbi50cmlnZ2VyKCdzeW5jJywgY29sbGVjdGlvbiwgcmVzcCwgb3B0aW9ucyk7XG4gICAgfTtcbiAgICB3cmFwRXJyb3IodGhpcywgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHRoaXMuc3luYygncmVhZCcsIHRoaXMsIG9wdGlvbnMpO1xuICB9LFxuXG4gICAgLy8gQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIGEgbW9kZWwgaW4gdGhpcyBjb2xsZWN0aW9uLiBBZGQgdGhlIG1vZGVsIHRvIHRoZVxuICAgIC8vIGNvbGxlY3Rpb24gaW1tZWRpYXRlbHksIHVubGVzcyBgd2FpdDogdHJ1ZWAgaXMgcGFzc2VkLCBpbiB3aGljaCBjYXNlIHdlXG4gICAgLy8gd2FpdCBmb3IgdGhlIHNlcnZlciB0byBhZ3JlZS5cbiAgY3JlYXRlOiBmdW5jdGlvbihtb2RlbCwgb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zID8gXy5jbG9uZShvcHRpb25zKSA6IHt9O1xuICAgIGlmICghKG1vZGVsID0gdGhpcy5fcHJlcGFyZU1vZGVsKG1vZGVsLCBvcHRpb25zKSkpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoIW9wdGlvbnMud2FpdCkgdGhpcy5hZGQobW9kZWwsIG9wdGlvbnMpO1xuICAgIHZhciBjb2xsZWN0aW9uID0gdGhpcztcbiAgICB2YXIgc3VjY2VzcyA9IG9wdGlvbnMuc3VjY2VzcztcbiAgICBvcHRpb25zLnN1Y2Nlc3MgPSBmdW5jdGlvbihtb2RlbCwgcmVzcCkge1xuICAgICAgaWYgKG9wdGlvbnMud2FpdCkgY29sbGVjdGlvbi5hZGQobW9kZWwsIG9wdGlvbnMpO1xuICAgICAgaWYgKHN1Y2Nlc3MpIHN1Y2Nlc3MobW9kZWwsIHJlc3AsIG9wdGlvbnMpO1xuICAgIH07XG4gICAgbW9kZWwuc2F2ZShudWxsLCBvcHRpb25zKTtcbiAgICByZXR1cm4gbW9kZWw7XG4gIH0sXG5cbiAgICAvLyAqKnBhcnNlKiogY29udmVydHMgYSByZXNwb25zZSBpbnRvIGEgbGlzdCBvZiBtb2RlbHMgdG8gYmUgYWRkZWQgdG8gdGhlXG4gICAgLy8gY29sbGVjdGlvbi4gVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gaXMganVzdCB0byBwYXNzIGl0IHRocm91Z2guXG4gIHBhcnNlOiBmdW5jdGlvbihyZXNwLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHJlc3A7XG4gIH0sXG5cbiAgICAvLyBDcmVhdGUgYSBuZXcgY29sbGVjdGlvbiB3aXRoIGFuIGlkZW50aWNhbCBsaXN0IG9mIG1vZGVscyBhcyB0aGlzIG9uZS5cbiAgY2xvbmU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLm1vZGVscywge1xuICAgICAgbW9kZWw6IHRoaXMubW9kZWwsXG4gICAgICBjb21wYXJhdG9yOiB0aGlzLmNvbXBhcmF0b3JcbiAgICB9KTtcbiAgfSxcblxuICAgIC8vIERlZmluZSBob3cgdG8gdW5pcXVlbHkgaWRlbnRpZnkgbW9kZWxzIGluIHRoZSBjb2xsZWN0aW9uLlxuICBtb2RlbElkOiBmdW5jdGlvbiAoYXR0cnMpIHtcbiAgICByZXR1cm4gYXR0cnNbdGhpcy5tb2RlbC5wcm90b3R5cGUuaWRBdHRyaWJ1dGUgfHwgJ2lkJ107XG4gIH0sXG5cbiAgICAvLyBQcml2YXRlIG1ldGhvZCB0byByZXNldCBhbGwgaW50ZXJuYWwgc3RhdGUuIENhbGxlZCB3aGVuIHRoZSBjb2xsZWN0aW9uXG4gICAgLy8gaXMgZmlyc3QgaW5pdGlhbGl6ZWQgb3IgcmVzZXQuXG4gIF9yZXNldDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICAgIHRoaXMubW9kZWxzID0gW107XG4gICAgdGhpcy5fYnlJZCAgPSB7fTtcbiAgfSxcblxuICAgIC8vIFByZXBhcmUgYSBoYXNoIG9mIGF0dHJpYnV0ZXMgKG9yIG90aGVyIG1vZGVsKSB0byBiZSBhZGRlZCB0byB0aGlzXG4gICAgLy8gY29sbGVjdGlvbi5cbiAgX3ByZXBhcmVNb2RlbDogZnVuY3Rpb24oYXR0cnMsIG9wdGlvbnMpIHtcbiAgICBpZiAodGhpcy5faXNNb2RlbChhdHRycykpIHtcbiAgICAgIGlmICghYXR0cnMuY29sbGVjdGlvbikgYXR0cnMuY29sbGVjdGlvbiA9IHRoaXM7XG4gICAgICByZXR1cm4gYXR0cnM7XG4gICAgfVxuICAgIG9wdGlvbnMgPSBvcHRpb25zID8gXy5jbG9uZShvcHRpb25zKSA6IHt9O1xuICAgIG9wdGlvbnMuY29sbGVjdGlvbiA9IHRoaXM7XG4gICAgdmFyIG1vZGVsID0gbmV3IHRoaXMubW9kZWwoYXR0cnMsIG9wdGlvbnMpO1xuICAgIGlmICghbW9kZWwudmFsaWRhdGlvbkVycm9yKSByZXR1cm4gbW9kZWw7XG4gICAgdGhpcy50cmlnZ2VyKCdpbnZhbGlkJywgdGhpcywgbW9kZWwudmFsaWRhdGlvbkVycm9yLCBvcHRpb25zKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG5cbiAgICAvLyBNZXRob2QgZm9yIGNoZWNraW5nIHdoZXRoZXIgYW4gb2JqZWN0IHNob3VsZCBiZSBjb25zaWRlcmVkIGEgbW9kZWwgZm9yXG4gICAgLy8gdGhlIHB1cnBvc2VzIG9mIGFkZGluZyB0byB0aGUgY29sbGVjdGlvbi5cbiAgX2lzTW9kZWw6IGZ1bmN0aW9uIChtb2RlbCkge1xuICAgIHJldHVybiBtb2RlbCBpbnN0YW5jZW9mIE1vZGVsO1xuICB9LFxuXG4gICAgLy8gSW50ZXJuYWwgbWV0aG9kIHRvIGNyZWF0ZSBhIG1vZGVsJ3MgdGllcyB0byBhIGNvbGxlY3Rpb24uXG4gIF9hZGRSZWZlcmVuY2U6IGZ1bmN0aW9uKG1vZGVsLCBvcHRpb25zKSB7XG4gICAgdGhpcy5fYnlJZFttb2RlbC5jaWRdID0gbW9kZWw7XG4gICAgdmFyIGlkID0gdGhpcy5tb2RlbElkKG1vZGVsLmF0dHJpYnV0ZXMpO1xuICAgIGlmIChpZCAhPSBudWxsKSB0aGlzLl9ieUlkW2lkXSA9IG1vZGVsO1xuICAgIG1vZGVsLm9uKCdhbGwnLCB0aGlzLl9vbk1vZGVsRXZlbnQsIHRoaXMpO1xuICB9LFxuXG4gICAgLy8gSW50ZXJuYWwgbWV0aG9kIHRvIHNldmVyIGEgbW9kZWwncyB0aWVzIHRvIGEgY29sbGVjdGlvbi5cbiAgX3JlbW92ZVJlZmVyZW5jZTogZnVuY3Rpb24obW9kZWwsIG9wdGlvbnMpIHtcbiAgICBpZiAodGhpcyA9PT0gbW9kZWwuY29sbGVjdGlvbikgZGVsZXRlIG1vZGVsLmNvbGxlY3Rpb247XG4gICAgbW9kZWwub2ZmKCdhbGwnLCB0aGlzLl9vbk1vZGVsRXZlbnQsIHRoaXMpO1xuICB9LFxuXG4gICAgLy8gSW50ZXJuYWwgbWV0aG9kIGNhbGxlZCBldmVyeSB0aW1lIGEgbW9kZWwgaW4gdGhlIHNldCBmaXJlcyBhbiBldmVudC5cbiAgICAvLyBTZXRzIG5lZWQgdG8gdXBkYXRlIHRoZWlyIGluZGV4ZXMgd2hlbiBtb2RlbHMgY2hhbmdlIGlkcy4gQWxsIG90aGVyXG4gICAgLy8gZXZlbnRzIHNpbXBseSBwcm94eSB0aHJvdWdoLiBcImFkZFwiIGFuZCBcInJlbW92ZVwiIGV2ZW50cyB0aGF0IG9yaWdpbmF0ZVxuICAgIC8vIGluIG90aGVyIGNvbGxlY3Rpb25zIGFyZSBpZ25vcmVkLlxuICBfb25Nb2RlbEV2ZW50OiBmdW5jdGlvbihldmVudCwgbW9kZWwsIGNvbGxlY3Rpb24sIG9wdGlvbnMpIHtcbiAgICBpZiAoKGV2ZW50ID09PSAnYWRkJyB8fCBldmVudCA9PT0gJ3JlbW92ZScpICYmIGNvbGxlY3Rpb24gIT09IHRoaXMpIHJldHVybjtcbiAgICBpZiAoZXZlbnQgPT09ICdkZXN0cm95JykgdGhpcy5yZW1vdmUobW9kZWwsIG9wdGlvbnMpO1xuICAgIGlmIChldmVudCA9PT0gJ2NoYW5nZScpIHtcbiAgICAgIHZhciBwcmV2SWQgPSB0aGlzLm1vZGVsSWQobW9kZWwucHJldmlvdXNBdHRyaWJ1dGVzKCkpO1xuICAgICAgdmFyIGlkID0gdGhpcy5tb2RlbElkKG1vZGVsLmF0dHJpYnV0ZXMpO1xuICAgICAgaWYgKHByZXZJZCAhPT0gaWQpIHtcbiAgICAgICAgaWYgKHByZXZJZCAhPSBudWxsKSBkZWxldGUgdGhpcy5fYnlJZFtwcmV2SWRdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkgdGhpcy5fYnlJZFtpZF0gPSBtb2RlbDtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy50cmlnZ2VyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxufSk7XG5cbi8vIFVuZGVyc2NvcmUgbWV0aG9kcyB0aGF0IHdlIHdhbnQgdG8gaW1wbGVtZW50IG9uIHRoZSBDb2xsZWN0aW9uLlxuLy8gOTAlIG9mIHRoZSBjb3JlIHVzZWZ1bG5lc3Mgb2YgQmFja2JvbmUgQ29sbGVjdGlvbnMgaXMgYWN0dWFsbHkgaW1wbGVtZW50ZWRcbi8vIHJpZ2h0IGhlcmU6XG52YXIgbWV0aG9kcyA9IFsnZm9yRWFjaCcsICdlYWNoJywgJ21hcCcsICdjb2xsZWN0JywgJ3JlZHVjZScsICdmb2xkbCcsXG4gICAgJ2luamVjdCcsICdyZWR1Y2VSaWdodCcsICdmb2xkcicsICdmaW5kJywgJ2RldGVjdCcsICdmaWx0ZXInLCAnc2VsZWN0JyxcbiAgICAncmVqZWN0JywgJ2V2ZXJ5JywgJ2FsbCcsICdzb21lJywgJ2FueScsICdpbmNsdWRlJywgJ2NvbnRhaW5zJywgJ2ludm9rZScsXG4gICAgJ21heCcsICdtaW4nLCAndG9BcnJheScsICdzaXplJywgJ2ZpcnN0JywgJ2hlYWQnLCAndGFrZScsICdpbml0aWFsJywgJ3Jlc3QnLFxuICAgICd0YWlsJywgJ2Ryb3AnLCAnbGFzdCcsICd3aXRob3V0JywgJ2RpZmZlcmVuY2UnLCAnaW5kZXhPZicsICdzaHVmZmxlJyxcbiAgICAnbGFzdEluZGV4T2YnLCAnaXNFbXB0eScsICdjaGFpbicsICdzYW1wbGUnLCAncGFydGl0aW9uJ107XG5cbi8vIE1peCBpbiBlYWNoIFVuZGVyc2NvcmUgbWV0aG9kIGFzIGEgcHJveHkgdG8gYENvbGxlY3Rpb24jbW9kZWxzYC5cbl8uZWFjaChtZXRob2RzLCBmdW5jdGlvbihtZXRob2QpIHtcbiAgaWYgKCFfW21ldGhvZF0pIHJldHVybjtcbiAgQ29sbGVjdGlvbi5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgIGFyZ3MudW5zaGlmdCh0aGlzLm1vZGVscyk7XG4gICAgcmV0dXJuIF9bbWV0aG9kXS5hcHBseShfLCBhcmdzKTtcbiAgfTtcbn0pO1xuXG4vLyBVbmRlcnNjb3JlIG1ldGhvZHMgdGhhdCB0YWtlIGEgcHJvcGVydHkgbmFtZSBhcyBhbiBhcmd1bWVudC5cbnZhciBhdHRyaWJ1dGVNZXRob2RzID0gWydncm91cEJ5JywgJ2NvdW50QnknLCAnc29ydEJ5JywgJ2luZGV4QnknXTtcblxuLy8gVXNlIGF0dHJpYnV0ZXMgaW5zdGVhZCBvZiBwcm9wZXJ0aWVzLlxuXy5lYWNoKGF0dHJpYnV0ZU1ldGhvZHMsIGZ1bmN0aW9uKG1ldGhvZCkge1xuICBpZiAoIV9bbWV0aG9kXSkgcmV0dXJuO1xuICBDb2xsZWN0aW9uLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odmFsdWUsIGNvbnRleHQpIHtcbiAgICB2YXIgaXRlcmF0b3IgPSBfLmlzRnVuY3Rpb24odmFsdWUpID8gdmFsdWUgOiBmdW5jdGlvbihtb2RlbCkge1xuICAgICAgcmV0dXJuIG1vZGVsLmdldCh2YWx1ZSk7XG4gICAgfTtcbiAgICByZXR1cm4gX1ttZXRob2RdKHRoaXMubW9kZWxzLCBpdGVyYXRvciwgY29udGV4dCk7XG4gIH07XG59KTtcblxuLy8gc2V0dXAgaW5oZXJpdGFuY2VcbkNvbGxlY3Rpb24uZXh0ZW5kID0gZXh0ZW5kO1xubW9kdWxlLmV4cG9ydHMgPSBDb2xsZWN0aW9uO1xuIiwibW9kdWxlLmV4cG9ydHMuTW9kZWwgPSByZXF1aXJlKFwiLi9tb2RlbFwiKTtcbm1vZHVsZS5leHBvcnRzLkNvbGxlY3Rpb24gPSByZXF1aXJlKFwiLi9jb2xsZWN0aW9uXCIpO1xubW9kdWxlLmV4cG9ydHMuRXZlbnRzID0gcmVxdWlyZShcImJhY2tib25lLWV2ZW50cy1zdGFuZGFsb25lXCIpO1xubW9kdWxlLmV4cG9ydHMuZXh0ZW5kID0gcmVxdWlyZShcImJhY2tib25lLWV4dGVuZC1zdGFuZGFsb25lXCIpO1xuIiwiLy8gICAgIEJhY2tib25lLmpzIDEuMS4yXG5cbi8vICAgICAoYykgMjAxMC0yMDE0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4vLyAgICAgQmFja2JvbmUgbWF5IGJlIGZyZWVseSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4vLyAgICAgRm9yIGFsbCBkZXRhaWxzIGFuZCBkb2N1bWVudGF0aW9uOlxuLy8gICAgIGh0dHA6Ly9iYWNrYm9uZWpzLm9yZ1xuXG52YXIgRXZlbnRzID0gcmVxdWlyZShcImJhY2tib25lLWV2ZW50cy1zdGFuZGFsb25lXCIpO1xudmFyIGV4dGVuZCA9IHJlcXVpcmUoXCJiYWNrYm9uZS1leHRlbmQtc3RhbmRhbG9uZVwiKTtcbnZhciBfID0gcmVxdWlyZShcInVuZGVyc2NvcmVcIik7XG5cbi8vIEJhY2tib25lLk1vZGVsXG4vLyAtLS0tLS0tLS0tLS0tLVxuXG4vLyBCYWNrYm9uZSAqKk1vZGVscyoqIGFyZSB0aGUgYmFzaWMgZGF0YSBvYmplY3QgaW4gdGhlIGZyYW1ld29yayAtLVxuLy8gZnJlcXVlbnRseSByZXByZXNlbnRpbmcgYSByb3cgaW4gYSB0YWJsZSBpbiBhIGRhdGFiYXNlIG9uIHlvdXIgc2VydmVyLlxuLy8gQSBkaXNjcmV0ZSBjaHVuayBvZiBkYXRhIGFuZCBhIGJ1bmNoIG9mIHVzZWZ1bCwgcmVsYXRlZCBtZXRob2RzIGZvclxuLy8gcGVyZm9ybWluZyBjb21wdXRhdGlvbnMgYW5kIHRyYW5zZm9ybWF0aW9ucyBvbiB0aGF0IGRhdGEuXG5cbi8vIENyZWF0ZSBhIG5ldyBtb2RlbCB3aXRoIHRoZSBzcGVjaWZpZWQgYXR0cmlidXRlcy4gQSBjbGllbnQgaWQgKGBjaWRgKVxuLy8gaXMgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgYW5kIGFzc2lnbmVkIGZvciB5b3UuXG52YXIgTW9kZWwgPSBmdW5jdGlvbihhdHRyaWJ1dGVzLCBvcHRpb25zKSB7XG4gIHZhciBhdHRycyA9IGF0dHJpYnV0ZXMgfHwge307XG4gIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7XG4gIHRoaXMuY2lkID0gXy51bmlxdWVJZCgnYycpO1xuICB0aGlzLmF0dHJpYnV0ZXMgPSB7fTtcbiAgaWYgKG9wdGlvbnMuY29sbGVjdGlvbikgdGhpcy5jb2xsZWN0aW9uID0gb3B0aW9ucy5jb2xsZWN0aW9uO1xuICBpZiAob3B0aW9ucy5wYXJzZSkgYXR0cnMgPSB0aGlzLnBhcnNlKGF0dHJzLCBvcHRpb25zKSB8fCB7fTtcbiAgYXR0cnMgPSBfLmRlZmF1bHRzKHt9LCBhdHRycywgXy5yZXN1bHQodGhpcywgJ2RlZmF1bHRzJykpO1xuICB0aGlzLnNldChhdHRycywgb3B0aW9ucyk7XG4gIHRoaXMuY2hhbmdlZCA9IHt9O1xuICB0aGlzLmluaXRpYWxpemUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5cbi8vIEF0dGFjaCBhbGwgaW5oZXJpdGFibGUgbWV0aG9kcyB0byB0aGUgTW9kZWwgcHJvdG90eXBlLlxuXy5leHRlbmQoTW9kZWwucHJvdG90eXBlLCBFdmVudHMsIHtcblxuICAvLyBBIGhhc2ggb2YgYXR0cmlidXRlcyB3aG9zZSBjdXJyZW50IGFuZCBwcmV2aW91cyB2YWx1ZSBkaWZmZXIuXG4gIGNoYW5nZWQ6IG51bGwsXG5cbiAgLy8gVGhlIHZhbHVlIHJldHVybmVkIGR1cmluZyB0aGUgbGFzdCBmYWlsZWQgdmFsaWRhdGlvbi5cbiAgdmFsaWRhdGlvbkVycm9yOiBudWxsLFxuXG4gICAgLy8gVGhlIGRlZmF1bHQgbmFtZSBmb3IgdGhlIEpTT04gYGlkYCBhdHRyaWJ1dGUgaXMgYFwiaWRcImAuIE1vbmdvREIgYW5kXG4gICAgLy8gQ291Y2hEQiB1c2VycyBtYXkgd2FudCB0byBzZXQgdGhpcyB0byBgXCJfaWRcImAuXG4gIGlkQXR0cmlidXRlOiAnaWQnLFxuXG4gICAgLy8gSW5pdGlhbGl6ZSBpcyBhbiBlbXB0eSBmdW5jdGlvbiBieSBkZWZhdWx0LiBPdmVycmlkZSBpdCB3aXRoIHlvdXIgb3duXG4gICAgLy8gaW5pdGlhbGl6YXRpb24gbG9naWMuXG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uKCl7fSxcblxuICAgIC8vIFJldHVybiBhIGNvcHkgb2YgdGhlIG1vZGVsJ3MgYGF0dHJpYnV0ZXNgIG9iamVjdC5cbiAgdG9KU09OOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgcmV0dXJuIF8uY2xvbmUodGhpcy5hdHRyaWJ1dGVzKTtcbiAgfSxcblxuICAgIC8vIFByb3h5IGBCYWNrYm9uZS5zeW5jYCBieSBkZWZhdWx0IC0tIGJ1dCBvdmVycmlkZSB0aGlzIGlmIHlvdSBuZWVkXG4gICAgLy8gY3VzdG9tIHN5bmNpbmcgc2VtYW50aWNzIGZvciAqdGhpcyogcGFydGljdWxhciBtb2RlbC5cbiAgc3luYzogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIEJhY2tib25lLnN5bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfSxcblxuICAgIC8vIEdldCB0aGUgdmFsdWUgb2YgYW4gYXR0cmlidXRlLlxuICBnZXQ6IGZ1bmN0aW9uKGF0dHIpIHtcbiAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzW2F0dHJdO1xuICB9LFxuXG4gICAgLy8gR2V0IHRoZSBIVE1MLWVzY2FwZWQgdmFsdWUgb2YgYW4gYXR0cmlidXRlLlxuICBlc2NhcGU6IGZ1bmN0aW9uKGF0dHIpIHtcbiAgICByZXR1cm4gXy5lc2NhcGUodGhpcy5nZXQoYXR0cikpO1xuICB9LFxuXG4gICAgLy8gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGF0dHJpYnV0ZSBjb250YWlucyBhIHZhbHVlIHRoYXQgaXMgbm90IG51bGxcbiAgICAvLyBvciB1bmRlZmluZWQuXG4gIGhhczogZnVuY3Rpb24oYXR0cikge1xuICAgIHJldHVybiB0aGlzLmdldChhdHRyKSAhPSBudWxsO1xuICB9LFxuXG4gICAgLy8gU2V0IGEgaGFzaCBvZiBtb2RlbCBhdHRyaWJ1dGVzIG9uIHRoZSBvYmplY3QsIGZpcmluZyBgXCJjaGFuZ2VcImAuIFRoaXMgaXNcbiAgICAvLyB0aGUgY29yZSBwcmltaXRpdmUgb3BlcmF0aW9uIG9mIGEgbW9kZWwsIHVwZGF0aW5nIHRoZSBkYXRhIGFuZCBub3RpZnlpbmdcbiAgICAvLyBhbnlvbmUgd2hvIG5lZWRzIHRvIGtub3cgYWJvdXQgdGhlIGNoYW5nZSBpbiBzdGF0ZS4gVGhlIGhlYXJ0IG9mIHRoZSBiZWFzdC5cbiAgc2V0OiBmdW5jdGlvbihrZXksIHZhbCwgb3B0aW9ucykge1xuICAgIHZhciBhdHRyLCBhdHRycywgdW5zZXQsIGNoYW5nZXMsIHNpbGVudCwgY2hhbmdpbmcsIHByZXYsIGN1cnJlbnQ7XG4gICAgaWYgKGtleSA9PSBudWxsKSByZXR1cm4gdGhpcztcblxuICAgIC8vIEhhbmRsZSBib3RoIGBcImtleVwiLCB2YWx1ZWAgYW5kIGB7a2V5OiB2YWx1ZX1gIC1zdHlsZSBhcmd1bWVudHMuXG4gICAgaWYgKHR5cGVvZiBrZXkgPT09ICdvYmplY3QnKSB7XG4gICAgICBhdHRycyA9IGtleTtcbiAgICAgIG9wdGlvbnMgPSB2YWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIChhdHRycyA9IHt9KVtrZXldID0gdmFsO1xuICAgIH1cblxuICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7XG5cbiAgICAvLyBSdW4gdmFsaWRhdGlvbi5cbiAgICBpZiAoIXRoaXMuX3ZhbGlkYXRlKGF0dHJzLCBvcHRpb25zKSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgLy8gRXh0cmFjdCBhdHRyaWJ1dGVzIGFuZCBvcHRpb25zLlxuICAgIHVuc2V0ICAgICAgICAgICA9IG9wdGlvbnMudW5zZXQ7XG4gICAgc2lsZW50ICAgICAgICAgID0gb3B0aW9ucy5zaWxlbnQ7XG4gICAgY2hhbmdlcyAgICAgICAgID0gW107XG4gICAgY2hhbmdpbmcgICAgICAgID0gdGhpcy5fY2hhbmdpbmc7XG4gICAgdGhpcy5fY2hhbmdpbmcgID0gdHJ1ZTtcblxuICAgIGlmICghY2hhbmdpbmcpIHtcbiAgICAgIHRoaXMuX3ByZXZpb3VzQXR0cmlidXRlcyA9IF8uY2xvbmUodGhpcy5hdHRyaWJ1dGVzKTtcbiAgICAgIHRoaXMuY2hhbmdlZCA9IHt9O1xuICAgIH1cbiAgICBjdXJyZW50ID0gdGhpcy5hdHRyaWJ1dGVzLCBwcmV2ID0gdGhpcy5fcHJldmlvdXNBdHRyaWJ1dGVzO1xuXG4gICAgLy8gQ2hlY2sgZm9yIGNoYW5nZXMgb2YgYGlkYC5cbiAgICBpZiAodGhpcy5pZEF0dHJpYnV0ZSBpbiBhdHRycykgdGhpcy5pZCA9IGF0dHJzW3RoaXMuaWRBdHRyaWJ1dGVdO1xuXG4gICAgLy8gRm9yIGVhY2ggYHNldGAgYXR0cmlidXRlLCB1cGRhdGUgb3IgZGVsZXRlIHRoZSBjdXJyZW50IHZhbHVlLlxuICAgIGZvciAoYXR0ciBpbiBhdHRycykge1xuICAgICAgdmFsID0gYXR0cnNbYXR0cl07XG4gICAgICBpZiAoIV8uaXNFcXVhbChjdXJyZW50W2F0dHJdLCB2YWwpKSBjaGFuZ2VzLnB1c2goYXR0cik7XG4gICAgICBpZiAoIV8uaXNFcXVhbChwcmV2W2F0dHJdLCB2YWwpKSB7XG4gICAgICAgIHRoaXMuY2hhbmdlZFthdHRyXSA9IHZhbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmNoYW5nZWRbYXR0cl07XG4gICAgICB9XG4gICAgICB1bnNldCA/IGRlbGV0ZSBjdXJyZW50W2F0dHJdIDogY3VycmVudFthdHRyXSA9IHZhbDtcbiAgICB9XG5cbiAgICAvLyBUcmlnZ2VyIGFsbCByZWxldmFudCBhdHRyaWJ1dGUgY2hhbmdlcy5cbiAgICBpZiAoIXNpbGVudCkge1xuICAgICAgaWYgKGNoYW5nZXMubGVuZ3RoKSB0aGlzLl9wZW5kaW5nID0gb3B0aW9ucztcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBjaGFuZ2VzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMudHJpZ2dlcignY2hhbmdlOicgKyBjaGFuZ2VzW2ldLCB0aGlzLCBjdXJyZW50W2NoYW5nZXNbaV1dLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBZb3UgbWlnaHQgYmUgd29uZGVyaW5nIHdoeSB0aGVyZSdzIGEgYHdoaWxlYCBsb29wIGhlcmUuIENoYW5nZXMgY2FuXG4gICAgLy8gYmUgcmVjdXJzaXZlbHkgbmVzdGVkIHdpdGhpbiBgXCJjaGFuZ2VcImAgZXZlbnRzLlxuICAgIGlmIChjaGFuZ2luZykgcmV0dXJuIHRoaXM7XG4gICAgaWYgKCFzaWxlbnQpIHtcbiAgICAgIHdoaWxlICh0aGlzLl9wZW5kaW5nKSB7XG4gICAgICAgIG9wdGlvbnMgPSB0aGlzLl9wZW5kaW5nO1xuICAgICAgICB0aGlzLl9wZW5kaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMudHJpZ2dlcignY2hhbmdlJywgdGhpcywgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX3BlbmRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9jaGFuZ2luZyA9IGZhbHNlO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gICAgLy8gUmVtb3ZlIGFuIGF0dHJpYnV0ZSBmcm9tIHRoZSBtb2RlbCwgZmlyaW5nIGBcImNoYW5nZVwiYC4gYHVuc2V0YCBpcyBhIG5vb3BcbiAgICAvLyBpZiB0aGUgYXR0cmlidXRlIGRvZXNuJ3QgZXhpc3QuXG4gIHVuc2V0OiBmdW5jdGlvbihhdHRyLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuc2V0KGF0dHIsIHZvaWQgMCwgXy5leHRlbmQoe30sIG9wdGlvbnMsIHt1bnNldDogdHJ1ZX0pKTtcbiAgfSxcblxuICAgIC8vIENsZWFyIGFsbCBhdHRyaWJ1dGVzIG9uIHRoZSBtb2RlbCwgZmlyaW5nIGBcImNoYW5nZVwiYC5cbiAgY2xlYXI6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB2YXIgYXR0cnMgPSB7fTtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5hdHRyaWJ1dGVzKSBhdHRyc1trZXldID0gdm9pZCAwO1xuICAgIHJldHVybiB0aGlzLnNldChhdHRycywgXy5leHRlbmQoe30sIG9wdGlvbnMsIHt1bnNldDogdHJ1ZX0pKTtcbiAgfSxcblxuICAgIC8vIERldGVybWluZSBpZiB0aGUgbW9kZWwgaGFzIGNoYW5nZWQgc2luY2UgdGhlIGxhc3QgYFwiY2hhbmdlXCJgIGV2ZW50LlxuICAgIC8vIElmIHlvdSBzcGVjaWZ5IGFuIGF0dHJpYnV0ZSBuYW1lLCBkZXRlcm1pbmUgaWYgdGhhdCBhdHRyaWJ1dGUgaGFzIGNoYW5nZWQuXG4gIGhhc0NoYW5nZWQ6IGZ1bmN0aW9uKGF0dHIpIHtcbiAgICBpZiAoYXR0ciA9PSBudWxsKSByZXR1cm4gIV8uaXNFbXB0eSh0aGlzLmNoYW5nZWQpO1xuICAgIHJldHVybiBfLmhhcyh0aGlzLmNoYW5nZWQsIGF0dHIpO1xuICB9LFxuXG4gICAgLy8gUmV0dXJuIGFuIG9iamVjdCBjb250YWluaW5nIGFsbCB0aGUgYXR0cmlidXRlcyB0aGF0IGhhdmUgY2hhbmdlZCwgb3JcbiAgICAvLyBmYWxzZSBpZiB0aGVyZSBhcmUgbm8gY2hhbmdlZCBhdHRyaWJ1dGVzLiBVc2VmdWwgZm9yIGRldGVybWluaW5nIHdoYXRcbiAgICAvLyBwYXJ0cyBvZiBhIHZpZXcgbmVlZCB0byBiZSB1cGRhdGVkIGFuZC9vciB3aGF0IGF0dHJpYnV0ZXMgbmVlZCB0byBiZVxuICAgIC8vIHBlcnNpc3RlZCB0byB0aGUgc2VydmVyLiBVbnNldCBhdHRyaWJ1dGVzIHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cbiAgICAvLyBZb3UgY2FuIGFsc28gcGFzcyBhbiBhdHRyaWJ1dGVzIG9iamVjdCB0byBkaWZmIGFnYWluc3QgdGhlIG1vZGVsLFxuICAgIC8vIGRldGVybWluaW5nIGlmIHRoZXJlICp3b3VsZCBiZSogYSBjaGFuZ2UuXG4gIGNoYW5nZWRBdHRyaWJ1dGVzOiBmdW5jdGlvbihkaWZmKSB7XG4gICAgaWYgKCFkaWZmKSByZXR1cm4gdGhpcy5oYXNDaGFuZ2VkKCkgPyBfLmNsb25lKHRoaXMuY2hhbmdlZCkgOiBmYWxzZTtcbiAgICB2YXIgdmFsLCBjaGFuZ2VkID0gZmFsc2U7XG4gICAgdmFyIG9sZCA9IHRoaXMuX2NoYW5naW5nID8gdGhpcy5fcHJldmlvdXNBdHRyaWJ1dGVzIDogdGhpcy5hdHRyaWJ1dGVzO1xuICAgIGZvciAodmFyIGF0dHIgaW4gZGlmZikge1xuICAgICAgaWYgKF8uaXNFcXVhbChvbGRbYXR0cl0sICh2YWwgPSBkaWZmW2F0dHJdKSkpIGNvbnRpbnVlO1xuICAgICAgKGNoYW5nZWQgfHwgKGNoYW5nZWQgPSB7fSkpW2F0dHJdID0gdmFsO1xuICAgIH1cbiAgICByZXR1cm4gY2hhbmdlZDtcbiAgfSxcblxuICAgIC8vIEdldCB0aGUgcHJldmlvdXMgdmFsdWUgb2YgYW4gYXR0cmlidXRlLCByZWNvcmRlZCBhdCB0aGUgdGltZSB0aGUgbGFzdFxuICAgIC8vIGBcImNoYW5nZVwiYCBldmVudCB3YXMgZmlyZWQuXG4gIHByZXZpb3VzOiBmdW5jdGlvbihhdHRyKSB7XG4gICAgaWYgKGF0dHIgPT0gbnVsbCB8fCAhdGhpcy5fcHJldmlvdXNBdHRyaWJ1dGVzKSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gdGhpcy5fcHJldmlvdXNBdHRyaWJ1dGVzW2F0dHJdO1xuICB9LFxuXG4gICAgLy8gR2V0IGFsbCBvZiB0aGUgYXR0cmlidXRlcyBvZiB0aGUgbW9kZWwgYXQgdGhlIHRpbWUgb2YgdGhlIHByZXZpb3VzXG4gICAgLy8gYFwiY2hhbmdlXCJgIGV2ZW50LlxuICBwcmV2aW91c0F0dHJpYnV0ZXM6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfLmNsb25lKHRoaXMuX3ByZXZpb3VzQXR0cmlidXRlcyk7XG4gIH0sXG5cbiAgICAvLyBGZXRjaCB0aGUgbW9kZWwgZnJvbSB0aGUgc2VydmVyLiBJZiB0aGUgc2VydmVyJ3MgcmVwcmVzZW50YXRpb24gb2YgdGhlXG4gICAgLy8gbW9kZWwgZGlmZmVycyBmcm9tIGl0cyBjdXJyZW50IGF0dHJpYnV0ZXMsIHRoZXkgd2lsbCBiZSBvdmVycmlkZGVuLFxuICAgIC8vIHRyaWdnZXJpbmcgYSBgXCJjaGFuZ2VcImAgZXZlbnQuXG4gIGZldGNoOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgPyBfLmNsb25lKG9wdGlvbnMpIDoge307XG4gICAgaWYgKG9wdGlvbnMucGFyc2UgPT09IHZvaWQgMCkgb3B0aW9ucy5wYXJzZSA9IHRydWU7XG4gICAgdmFyIG1vZGVsID0gdGhpcztcbiAgICB2YXIgc3VjY2VzcyA9IG9wdGlvbnMuc3VjY2VzcztcbiAgICBvcHRpb25zLnN1Y2Nlc3MgPSBmdW5jdGlvbihyZXNwKSB7XG4gICAgICBpZiAoIW1vZGVsLnNldChtb2RlbC5wYXJzZShyZXNwLCBvcHRpb25zKSwgb3B0aW9ucykpIHJldHVybiBmYWxzZTtcbiAgICAgIGlmIChzdWNjZXNzKSBzdWNjZXNzKG1vZGVsLCByZXNwLCBvcHRpb25zKTtcbiAgICAgIG1vZGVsLnRyaWdnZXIoJ3N5bmMnLCBtb2RlbCwgcmVzcCwgb3B0aW9ucyk7XG4gICAgfTtcbiAgICB3cmFwRXJyb3IodGhpcywgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHRoaXMuc3luYygncmVhZCcsIHRoaXMsIG9wdGlvbnMpO1xuICB9LFxuXG4gICAgLy8gU2V0IGEgaGFzaCBvZiBtb2RlbCBhdHRyaWJ1dGVzLCBhbmQgc3luYyB0aGUgbW9kZWwgdG8gdGhlIHNlcnZlci5cbiAgICAvLyBJZiB0aGUgc2VydmVyIHJldHVybnMgYW4gYXR0cmlidXRlcyBoYXNoIHRoYXQgZGlmZmVycywgdGhlIG1vZGVsJ3NcbiAgICAvLyBzdGF0ZSB3aWxsIGJlIGBzZXRgIGFnYWluLlxuICBzYXZlOiBmdW5jdGlvbihrZXksIHZhbCwgb3B0aW9ucykge1xuICAgIHZhciBhdHRycywgbWV0aG9kLCB4aHIsIGF0dHJpYnV0ZXMgPSB0aGlzLmF0dHJpYnV0ZXM7XG5cbiAgICAvLyBIYW5kbGUgYm90aCBgXCJrZXlcIiwgdmFsdWVgIGFuZCBge2tleTogdmFsdWV9YCAtc3R5bGUgYXJndW1lbnRzLlxuICAgIGlmIChrZXkgPT0gbnVsbCB8fCB0eXBlb2Yga2V5ID09PSAnb2JqZWN0Jykge1xuICAgICAgYXR0cnMgPSBrZXk7XG4gICAgICBvcHRpb25zID0gdmFsO1xuICAgIH0gZWxzZSB7XG4gICAgICAoYXR0cnMgPSB7fSlba2V5XSA9IHZhbDtcbiAgICB9XG5cbiAgICBvcHRpb25zID0gXy5leHRlbmQoe3ZhbGlkYXRlOiB0cnVlfSwgb3B0aW9ucyk7XG5cbiAgICAvLyBJZiB3ZSdyZSBub3Qgd2FpdGluZyBhbmQgYXR0cmlidXRlcyBleGlzdCwgc2F2ZSBhY3RzIGFzXG4gICAgLy8gYHNldChhdHRyKS5zYXZlKG51bGwsIG9wdHMpYCB3aXRoIHZhbGlkYXRpb24uIE90aGVyd2lzZSwgY2hlY2sgaWZcbiAgICAvLyB0aGUgbW9kZWwgd2lsbCBiZSB2YWxpZCB3aGVuIHRoZSBhdHRyaWJ1dGVzLCBpZiBhbnksIGFyZSBzZXQuXG4gICAgaWYgKGF0dHJzICYmICFvcHRpb25zLndhaXQpIHtcbiAgICAgIGlmICghdGhpcy5zZXQoYXR0cnMsIG9wdGlvbnMpKSByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghdGhpcy5fdmFsaWRhdGUoYXR0cnMsIG9wdGlvbnMpKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gU2V0IHRlbXBvcmFyeSBhdHRyaWJ1dGVzIGlmIGB7d2FpdDogdHJ1ZX1gLlxuICAgIGlmIChhdHRycyAmJiBvcHRpb25zLndhaXQpIHtcbiAgICAgIHRoaXMuYXR0cmlidXRlcyA9IF8uZXh0ZW5kKHt9LCBhdHRyaWJ1dGVzLCBhdHRycyk7XG4gICAgfVxuXG4gICAgLy8gQWZ0ZXIgYSBzdWNjZXNzZnVsIHNlcnZlci1zaWRlIHNhdmUsIHRoZSBjbGllbnQgaXMgKG9wdGlvbmFsbHkpXG4gICAgLy8gdXBkYXRlZCB3aXRoIHRoZSBzZXJ2ZXItc2lkZSBzdGF0ZS5cbiAgICBpZiAob3B0aW9ucy5wYXJzZSA9PT0gdm9pZCAwKSBvcHRpb25zLnBhcnNlID0gdHJ1ZTtcbiAgICB2YXIgbW9kZWwgPSB0aGlzO1xuICAgIHZhciBzdWNjZXNzID0gb3B0aW9ucy5zdWNjZXNzO1xuICAgIG9wdGlvbnMuc3VjY2VzcyA9IGZ1bmN0aW9uKHJlc3ApIHtcbiAgICAgIC8vIEVuc3VyZSBhdHRyaWJ1dGVzIGFyZSByZXN0b3JlZCBkdXJpbmcgc3luY2hyb25vdXMgc2F2ZXMuXG4gICAgICBtb2RlbC5hdHRyaWJ1dGVzID0gYXR0cmlidXRlcztcbiAgICAgIHZhciBzZXJ2ZXJBdHRycyA9IG1vZGVsLnBhcnNlKHJlc3AsIG9wdGlvbnMpO1xuICAgICAgaWYgKG9wdGlvbnMud2FpdCkgc2VydmVyQXR0cnMgPSBfLmV4dGVuZChhdHRycyB8fCB7fSwgc2VydmVyQXR0cnMpO1xuICAgICAgaWYgKF8uaXNPYmplY3Qoc2VydmVyQXR0cnMpICYmICFtb2RlbC5zZXQoc2VydmVyQXR0cnMsIG9wdGlvbnMpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChzdWNjZXNzKSBzdWNjZXNzKG1vZGVsLCByZXNwLCBvcHRpb25zKTtcbiAgICAgIG1vZGVsLnRyaWdnZXIoJ3N5bmMnLCBtb2RlbCwgcmVzcCwgb3B0aW9ucyk7XG4gICAgfTtcbiAgICB3cmFwRXJyb3IodGhpcywgb3B0aW9ucyk7XG5cbiAgICBtZXRob2QgPSB0aGlzLmlzTmV3KCkgPyAnY3JlYXRlJyA6IChvcHRpb25zLnBhdGNoID8gJ3BhdGNoJyA6ICd1cGRhdGUnKTtcbiAgICBpZiAobWV0aG9kID09PSAncGF0Y2gnICYmICFvcHRpb25zLmF0dHJzKSBvcHRpb25zLmF0dHJzID0gYXR0cnM7XG4gICAgeGhyID0gdGhpcy5zeW5jKG1ldGhvZCwgdGhpcywgb3B0aW9ucyk7XG5cbiAgICAvLyBSZXN0b3JlIGF0dHJpYnV0ZXMuXG4gICAgaWYgKGF0dHJzICYmIG9wdGlvbnMud2FpdCkgdGhpcy5hdHRyaWJ1dGVzID0gYXR0cmlidXRlcztcblxuICAgIHJldHVybiB4aHI7XG4gIH0sXG5cbiAgICAvLyBEZXN0cm95IHRoaXMgbW9kZWwgb24gdGhlIHNlcnZlciBpZiBpdCB3YXMgYWxyZWFkeSBwZXJzaXN0ZWQuXG4gICAgLy8gT3B0aW1pc3RpY2FsbHkgcmVtb3ZlcyB0aGUgbW9kZWwgZnJvbSBpdHMgY29sbGVjdGlvbiwgaWYgaXQgaGFzIG9uZS5cbiAgICAvLyBJZiBgd2FpdDogdHJ1ZWAgaXMgcGFzc2VkLCB3YWl0cyBmb3IgdGhlIHNlcnZlciB0byByZXNwb25kIGJlZm9yZSByZW1vdmFsLlxuICBkZXN0cm95OiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgPyBfLmNsb25lKG9wdGlvbnMpIDoge307XG4gICAgdmFyIG1vZGVsID0gdGhpcztcbiAgICB2YXIgc3VjY2VzcyA9IG9wdGlvbnMuc3VjY2VzcztcblxuICAgIHZhciBkZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gICAgICBtb2RlbC5zdG9wTGlzdGVuaW5nKCk7XG4gICAgICBtb2RlbC50cmlnZ2VyKCdkZXN0cm95JywgbW9kZWwsIG1vZGVsLmNvbGxlY3Rpb24sIG9wdGlvbnMpO1xuICAgIH07XG5cbiAgICBvcHRpb25zLnN1Y2Nlc3MgPSBmdW5jdGlvbihyZXNwKSB7XG4gICAgICBpZiAob3B0aW9ucy53YWl0IHx8IG1vZGVsLmlzTmV3KCkpIGRlc3Ryb3koKTtcbiAgICAgIGlmIChzdWNjZXNzKSBzdWNjZXNzKG1vZGVsLCByZXNwLCBvcHRpb25zKTtcbiAgICAgIGlmICghbW9kZWwuaXNOZXcoKSkgbW9kZWwudHJpZ2dlcignc3luYycsIG1vZGVsLCByZXNwLCBvcHRpb25zKTtcbiAgICB9O1xuXG4gICAgaWYgKHRoaXMuaXNOZXcoKSkge1xuICAgICAgb3B0aW9ucy5zdWNjZXNzKCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHdyYXBFcnJvcih0aGlzLCBvcHRpb25zKTtcblxuICAgIHZhciB4aHIgPSB0aGlzLnN5bmMoJ2RlbGV0ZScsIHRoaXMsIG9wdGlvbnMpO1xuICAgIGlmICghb3B0aW9ucy53YWl0KSBkZXN0cm95KCk7XG4gICAgcmV0dXJuIHhocjtcbiAgfSxcblxuICAgIC8vIERlZmF1bHQgVVJMIGZvciB0aGUgbW9kZWwncyByZXByZXNlbnRhdGlvbiBvbiB0aGUgc2VydmVyIC0tIGlmIHlvdSdyZVxuICAgIC8vIHVzaW5nIEJhY2tib25lJ3MgcmVzdGZ1bCBtZXRob2RzLCBvdmVycmlkZSB0aGlzIHRvIGNoYW5nZSB0aGUgZW5kcG9pbnRcbiAgICAvLyB0aGF0IHdpbGwgYmUgY2FsbGVkLlxuICB1cmw6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBiYXNlID1cbiAgICAgIF8ucmVzdWx0KHRoaXMsICd1cmxSb290JykgfHxcbiAgICAgIF8ucmVzdWx0KHRoaXMuY29sbGVjdGlvbiwgJ3VybCcpIHx8XG4gICAgICB1cmxFcnJvcigpO1xuICAgIGlmICh0aGlzLmlzTmV3KCkpIHJldHVybiBiYXNlO1xuICAgIHJldHVybiBiYXNlLnJlcGxhY2UoLyhbXlxcL10pJC8sICckMS8nKSArIGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLmlkKTtcbiAgfSxcblxuICAgIC8vICoqcGFyc2UqKiBjb252ZXJ0cyBhIHJlc3BvbnNlIGludG8gdGhlIGhhc2ggb2YgYXR0cmlidXRlcyB0byBiZSBgc2V0YCBvblxuICAgIC8vIHRoZSBtb2RlbC4gVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gaXMganVzdCB0byBwYXNzIHRoZSByZXNwb25zZSBhbG9uZy5cbiAgcGFyc2U6IGZ1bmN0aW9uKHJlc3AsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gcmVzcDtcbiAgfSxcblxuICAgIC8vIENyZWF0ZSBhIG5ldyBtb2RlbCB3aXRoIGlkZW50aWNhbCBhdHRyaWJ1dGVzIHRvIHRoaXMgb25lLlxuICBjbG9uZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMuYXR0cmlidXRlcyk7XG4gIH0sXG5cbiAgICAvLyBBIG1vZGVsIGlzIG5ldyBpZiBpdCBoYXMgbmV2ZXIgYmVlbiBzYXZlZCB0byB0aGUgc2VydmVyLCBhbmQgbGFja3MgYW4gaWQuXG4gIGlzTmV3OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gIXRoaXMuaGFzKHRoaXMuaWRBdHRyaWJ1dGUpO1xuICB9LFxuXG4gICAgLy8gQ2hlY2sgaWYgdGhlIG1vZGVsIGlzIGN1cnJlbnRseSBpbiBhIHZhbGlkIHN0YXRlLlxuICBpc1ZhbGlkOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbGlkYXRlKHt9LCBfLmV4dGVuZChvcHRpb25zIHx8IHt9LCB7IHZhbGlkYXRlOiB0cnVlIH0pKTtcbiAgfSxcblxuICAgIC8vIFJ1biB2YWxpZGF0aW9uIGFnYWluc3QgdGhlIG5leHQgY29tcGxldGUgc2V0IG9mIG1vZGVsIGF0dHJpYnV0ZXMsXG4gICAgLy8gcmV0dXJuaW5nIGB0cnVlYCBpZiBhbGwgaXMgd2VsbC4gT3RoZXJ3aXNlLCBmaXJlIGFuIGBcImludmFsaWRcImAgZXZlbnQuXG4gIF92YWxpZGF0ZTogZnVuY3Rpb24oYXR0cnMsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMudmFsaWRhdGUgfHwgIXRoaXMudmFsaWRhdGUpIHJldHVybiB0cnVlO1xuICAgIGF0dHJzID0gXy5leHRlbmQoe30sIHRoaXMuYXR0cmlidXRlcywgYXR0cnMpO1xuICAgIHZhciBlcnJvciA9IHRoaXMudmFsaWRhdGlvbkVycm9yID0gdGhpcy52YWxpZGF0ZShhdHRycywgb3B0aW9ucykgfHwgbnVsbDtcbiAgICBpZiAoIWVycm9yKSByZXR1cm4gdHJ1ZTtcbiAgICB0aGlzLnRyaWdnZXIoJ2ludmFsaWQnLCB0aGlzLCBlcnJvciwgXy5leHRlbmQob3B0aW9ucywge3ZhbGlkYXRpb25FcnJvcjogZXJyb3J9KSk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbn0pO1xuXG4vLyBVbmRlcnNjb3JlIG1ldGhvZHMgdGhhdCB3ZSB3YW50IHRvIGltcGxlbWVudCBvbiB0aGUgTW9kZWwuXG52YXIgbW9kZWxNZXRob2RzID0gWydrZXlzJywgJ3ZhbHVlcycsICdwYWlycycsICdpbnZlcnQnLCAncGljaycsICdvbWl0JywgJ2NoYWluJywgJ2lzRW1wdHknXTtcblxuLy8gTWl4IGluIGVhY2ggVW5kZXJzY29yZSBtZXRob2QgYXMgYSBwcm94eSB0byBgTW9kZWwjYXR0cmlidXRlc2AuXG5fLmVhY2gobW9kZWxNZXRob2RzLCBmdW5jdGlvbihtZXRob2QpIHtcbiAgaWYgKCFfW21ldGhvZF0pIHJldHVybjtcbiAgTW9kZWwucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICBhcmdzLnVuc2hpZnQodGhpcy5hdHRyaWJ1dGVzKTtcbiAgICByZXR1cm4gX1ttZXRob2RdLmFwcGx5KF8sIGFyZ3MpO1xuICB9O1xufSk7XG5cbi8vIHNldHVwIGluaGVyaXRhbmNlXG5Nb2RlbC5leHRlbmQgPSBleHRlbmQ7XG5tb2R1bGUuZXhwb3J0cyA9IE1vZGVsO1xuIiwiLyoqXG4gKiBTdGFuZGFsb25lIGV4dHJhY3Rpb24gb2YgQmFja2JvbmUuRXZlbnRzLCBubyBleHRlcm5hbCBkZXBlbmRlbmN5IHJlcXVpcmVkLlxuICogRGVncmFkZXMgbmljZWx5IHdoZW4gQmFja29uZS91bmRlcnNjb3JlIGFyZSBhbHJlYWR5IGF2YWlsYWJsZSBpbiB0aGUgY3VycmVudFxuICogZ2xvYmFsIGNvbnRleHQuXG4gKlxuICogTm90ZSB0aGF0IGRvY3Mgc3VnZ2VzdCB0byB1c2UgdW5kZXJzY29yZSdzIGBfLmV4dGVuZCgpYCBtZXRob2QgdG8gYWRkIEV2ZW50c1xuICogc3VwcG9ydCB0byBzb21lIGdpdmVuIG9iamVjdC4gQSBgbWl4aW4oKWAgbWV0aG9kIGhhcyBiZWVuIGFkZGVkIHRvIHRoZSBFdmVudHNcbiAqIHByb3RvdHlwZSB0byBhdm9pZCB1c2luZyB1bmRlcnNjb3JlIGZvciB0aGF0IHNvbGUgcHVycG9zZTpcbiAqXG4gKiAgICAgdmFyIG15RXZlbnRFbWl0dGVyID0gQmFja2JvbmVFdmVudHMubWl4aW4oe30pO1xuICpcbiAqIE9yIGZvciBhIGZ1bmN0aW9uIGNvbnN0cnVjdG9yOlxuICpcbiAqICAgICBmdW5jdGlvbiBNeUNvbnN0cnVjdG9yKCl7fVxuICogICAgIE15Q29uc3RydWN0b3IucHJvdG90eXBlLmZvbyA9IGZ1bmN0aW9uKCl7fVxuICogICAgIEJhY2tib25lRXZlbnRzLm1peGluKE15Q29uc3RydWN0b3IucHJvdG90eXBlKTtcbiAqXG4gKiAoYykgMjAwOS0yMDEzIEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBJbmMuXG4gKiAoYykgMjAxMyBOaWNvbGFzIFBlcnJpYXVsdFxuICovXG4vKiBnbG9iYWwgZXhwb3J0czp0cnVlLCBkZWZpbmUsIG1vZHVsZSAqL1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgcm9vdCA9IHRoaXMsXG4gICAgICBicmVha2VyID0ge30sXG4gICAgICBuYXRpdmVGb3JFYWNoID0gQXJyYXkucHJvdG90eXBlLmZvckVhY2gsXG4gICAgICBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksXG4gICAgICBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZSxcbiAgICAgIGlkQ291bnRlciA9IDA7XG5cbiAgLy8gUmV0dXJucyBhIHBhcnRpYWwgaW1wbGVtZW50YXRpb24gbWF0Y2hpbmcgdGhlIG1pbmltYWwgQVBJIHN1YnNldCByZXF1aXJlZFxuICAvLyBieSBCYWNrYm9uZS5FdmVudHNcbiAgZnVuY3Rpb24gbWluaXNjb3JlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBrZXlzOiBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIiB8fCBvYmogPT09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwia2V5cygpIGNhbGxlZCBvbiBhIG5vbi1vYmplY3RcIik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGtleSwga2V5cyA9IFtdO1xuICAgICAgICBmb3IgKGtleSBpbiBvYmopIHtcbiAgICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgIGtleXNba2V5cy5sZW5ndGhdID0ga2V5O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ga2V5cztcbiAgICAgIH0sXG5cbiAgICAgIHVuaXF1ZUlkOiBmdW5jdGlvbihwcmVmaXgpIHtcbiAgICAgICAgdmFyIGlkID0gKytpZENvdW50ZXIgKyAnJztcbiAgICAgICAgcmV0dXJuIHByZWZpeCA/IHByZWZpeCArIGlkIDogaWQ7XG4gICAgICB9LFxuXG4gICAgICBoYXM6IGZ1bmN0aW9uKG9iaiwga2V5KSB7XG4gICAgICAgIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTtcbiAgICAgIH0sXG5cbiAgICAgIGVhY2g6IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHtcbiAgICAgICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm47XG4gICAgICAgIGlmIChuYXRpdmVGb3JFYWNoICYmIG9iai5mb3JFYWNoID09PSBuYXRpdmVGb3JFYWNoKSB7XG4gICAgICAgICAgb2JqLmZvckVhY2goaXRlcmF0b3IsIGNvbnRleHQpO1xuICAgICAgICB9IGVsc2UgaWYgKG9iai5sZW5ndGggPT09ICtvYmoubGVuZ3RoKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpbaV0sIGksIG9iaikgPT09IGJyZWFrZXIpIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICAgICAgaWYgKHRoaXMuaGFzKG9iaiwga2V5KSkge1xuICAgICAgICAgICAgICBpZiAoaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpba2V5XSwga2V5LCBvYmopID09PSBicmVha2VyKSByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICBvbmNlOiBmdW5jdGlvbihmdW5jKSB7XG4gICAgICAgIHZhciByYW4gPSBmYWxzZSwgbWVtbztcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChyYW4pIHJldHVybiBtZW1vO1xuICAgICAgICAgIHJhbiA9IHRydWU7XG4gICAgICAgICAgbWVtbyA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICBmdW5jID0gbnVsbDtcbiAgICAgICAgICByZXR1cm4gbWVtbztcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgdmFyIF8gPSBtaW5pc2NvcmUoKSwgRXZlbnRzO1xuXG4gIC8vIEJhY2tib25lLkV2ZW50c1xuICAvLyAtLS0tLS0tLS0tLS0tLS1cblxuICAvLyBBIG1vZHVsZSB0aGF0IGNhbiBiZSBtaXhlZCBpbiB0byAqYW55IG9iamVjdCogaW4gb3JkZXIgdG8gcHJvdmlkZSBpdCB3aXRoXG4gIC8vIGN1c3RvbSBldmVudHMuIFlvdSBtYXkgYmluZCB3aXRoIGBvbmAgb3IgcmVtb3ZlIHdpdGggYG9mZmAgY2FsbGJhY2tcbiAgLy8gZnVuY3Rpb25zIHRvIGFuIGV2ZW50OyBgdHJpZ2dlcmAtaW5nIGFuIGV2ZW50IGZpcmVzIGFsbCBjYWxsYmFja3MgaW5cbiAgLy8gc3VjY2Vzc2lvbi5cbiAgLy9cbiAgLy8gICAgIHZhciBvYmplY3QgPSB7fTtcbiAgLy8gICAgIF8uZXh0ZW5kKG9iamVjdCwgQmFja2JvbmUuRXZlbnRzKTtcbiAgLy8gICAgIG9iamVjdC5vbignZXhwYW5kJywgZnVuY3Rpb24oKXsgYWxlcnQoJ2V4cGFuZGVkJyk7IH0pO1xuICAvLyAgICAgb2JqZWN0LnRyaWdnZXIoJ2V4cGFuZCcpO1xuICAvL1xuICBFdmVudHMgPSB7XG5cbiAgICAvLyBCaW5kIGFuIGV2ZW50IHRvIGEgYGNhbGxiYWNrYCBmdW5jdGlvbi4gUGFzc2luZyBgXCJhbGxcImAgd2lsbCBiaW5kXG4gICAgLy8gdGhlIGNhbGxiYWNrIHRvIGFsbCBldmVudHMgZmlyZWQuXG4gICAgb246IGZ1bmN0aW9uKG5hbWUsIGNhbGxiYWNrLCBjb250ZXh0KSB7XG4gICAgICBpZiAoIWV2ZW50c0FwaSh0aGlzLCAnb24nLCBuYW1lLCBbY2FsbGJhY2ssIGNvbnRleHRdKSB8fCAhY2FsbGJhY2spIHJldHVybiB0aGlzO1xuICAgICAgdGhpcy5fZXZlbnRzIHx8ICh0aGlzLl9ldmVudHMgPSB7fSk7XG4gICAgICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzW25hbWVdIHx8ICh0aGlzLl9ldmVudHNbbmFtZV0gPSBbXSk7XG4gICAgICBldmVudHMucHVzaCh7Y2FsbGJhY2s6IGNhbGxiYWNrLCBjb250ZXh0OiBjb250ZXh0LCBjdHg6IGNvbnRleHQgfHwgdGhpc30pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8vIEJpbmQgYW4gZXZlbnQgdG8gb25seSBiZSB0cmlnZ2VyZWQgYSBzaW5nbGUgdGltZS4gQWZ0ZXIgdGhlIGZpcnN0IHRpbWVcbiAgICAvLyB0aGUgY2FsbGJhY2sgaXMgaW52b2tlZCwgaXQgd2lsbCBiZSByZW1vdmVkLlxuICAgIG9uY2U6IGZ1bmN0aW9uKG5hbWUsIGNhbGxiYWNrLCBjb250ZXh0KSB7XG4gICAgICBpZiAoIWV2ZW50c0FwaSh0aGlzLCAnb25jZScsIG5hbWUsIFtjYWxsYmFjaywgY29udGV4dF0pIHx8ICFjYWxsYmFjaykgcmV0dXJuIHRoaXM7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICB2YXIgb25jZSA9IF8ub25jZShmdW5jdGlvbigpIHtcbiAgICAgICAgc2VsZi5vZmYobmFtZSwgb25jZSk7XG4gICAgICAgIGNhbGxiYWNrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9KTtcbiAgICAgIG9uY2UuX2NhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICByZXR1cm4gdGhpcy5vbihuYW1lLCBvbmNlLCBjb250ZXh0KTtcbiAgICB9LFxuXG4gICAgLy8gUmVtb3ZlIG9uZSBvciBtYW55IGNhbGxiYWNrcy4gSWYgYGNvbnRleHRgIGlzIG51bGwsIHJlbW92ZXMgYWxsXG4gICAgLy8gY2FsbGJhY2tzIHdpdGggdGhhdCBmdW5jdGlvbi4gSWYgYGNhbGxiYWNrYCBpcyBudWxsLCByZW1vdmVzIGFsbFxuICAgIC8vIGNhbGxiYWNrcyBmb3IgdGhlIGV2ZW50LiBJZiBgbmFtZWAgaXMgbnVsbCwgcmVtb3ZlcyBhbGwgYm91bmRcbiAgICAvLyBjYWxsYmFja3MgZm9yIGFsbCBldmVudHMuXG4gICAgb2ZmOiBmdW5jdGlvbihuYW1lLCBjYWxsYmFjaywgY29udGV4dCkge1xuICAgICAgdmFyIHJldGFpbiwgZXYsIGV2ZW50cywgbmFtZXMsIGksIGwsIGosIGs7XG4gICAgICBpZiAoIXRoaXMuX2V2ZW50cyB8fCAhZXZlbnRzQXBpKHRoaXMsICdvZmYnLCBuYW1lLCBbY2FsbGJhY2ssIGNvbnRleHRdKSkgcmV0dXJuIHRoaXM7XG4gICAgICBpZiAoIW5hbWUgJiYgIWNhbGxiYWNrICYmICFjb250ZXh0KSB7XG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgbmFtZXMgPSBuYW1lID8gW25hbWVdIDogXy5rZXlzKHRoaXMuX2V2ZW50cyk7XG4gICAgICBmb3IgKGkgPSAwLCBsID0gbmFtZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIG5hbWUgPSBuYW1lc1tpXTtcbiAgICAgICAgaWYgKGV2ZW50cyA9IHRoaXMuX2V2ZW50c1tuYW1lXSkge1xuICAgICAgICAgIHRoaXMuX2V2ZW50c1tuYW1lXSA9IHJldGFpbiA9IFtdO1xuICAgICAgICAgIGlmIChjYWxsYmFjayB8fCBjb250ZXh0KSB7XG4gICAgICAgICAgICBmb3IgKGogPSAwLCBrID0gZXZlbnRzLmxlbmd0aDsgaiA8IGs7IGorKykge1xuICAgICAgICAgICAgICBldiA9IGV2ZW50c1tqXTtcbiAgICAgICAgICAgICAgaWYgKChjYWxsYmFjayAmJiBjYWxsYmFjayAhPT0gZXYuY2FsbGJhY2sgJiYgY2FsbGJhY2sgIT09IGV2LmNhbGxiYWNrLl9jYWxsYmFjaykgfHxcbiAgICAgICAgICAgICAgICAgIChjb250ZXh0ICYmIGNvbnRleHQgIT09IGV2LmNvbnRleHQpKSB7XG4gICAgICAgICAgICAgICAgcmV0YWluLnB1c2goZXYpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghcmV0YWluLmxlbmd0aCkgZGVsZXRlIHRoaXMuX2V2ZW50c1tuYW1lXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLy8gVHJpZ2dlciBvbmUgb3IgbWFueSBldmVudHMsIGZpcmluZyBhbGwgYm91bmQgY2FsbGJhY2tzLiBDYWxsYmFja3MgYXJlXG4gICAgLy8gcGFzc2VkIHRoZSBzYW1lIGFyZ3VtZW50cyBhcyBgdHJpZ2dlcmAgaXMsIGFwYXJ0IGZyb20gdGhlIGV2ZW50IG5hbWVcbiAgICAvLyAodW5sZXNzIHlvdSdyZSBsaXN0ZW5pbmcgb24gYFwiYWxsXCJgLCB3aGljaCB3aWxsIGNhdXNlIHlvdXIgY2FsbGJhY2sgdG9cbiAgICAvLyByZWNlaXZlIHRoZSB0cnVlIG5hbWUgb2YgdGhlIGV2ZW50IGFzIHRoZSBmaXJzdCBhcmd1bWVudCkuXG4gICAgdHJpZ2dlcjogZnVuY3Rpb24obmFtZSkge1xuICAgICAgaWYgKCF0aGlzLl9ldmVudHMpIHJldHVybiB0aGlzO1xuICAgICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICBpZiAoIWV2ZW50c0FwaSh0aGlzLCAndHJpZ2dlcicsIG5hbWUsIGFyZ3MpKSByZXR1cm4gdGhpcztcbiAgICAgIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHNbbmFtZV07XG4gICAgICB2YXIgYWxsRXZlbnRzID0gdGhpcy5fZXZlbnRzLmFsbDtcbiAgICAgIGlmIChldmVudHMpIHRyaWdnZXJFdmVudHMoZXZlbnRzLCBhcmdzKTtcbiAgICAgIGlmIChhbGxFdmVudHMpIHRyaWdnZXJFdmVudHMoYWxsRXZlbnRzLCBhcmd1bWVudHMpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8vIFRlbGwgdGhpcyBvYmplY3QgdG8gc3RvcCBsaXN0ZW5pbmcgdG8gZWl0aGVyIHNwZWNpZmljIGV2ZW50cyAuLi4gb3JcbiAgICAvLyB0byBldmVyeSBvYmplY3QgaXQncyBjdXJyZW50bHkgbGlzdGVuaW5nIHRvLlxuICAgIHN0b3BMaXN0ZW5pbmc6IGZ1bmN0aW9uKG9iaiwgbmFtZSwgY2FsbGJhY2spIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7XG4gICAgICBpZiAoIWxpc3RlbmVycykgcmV0dXJuIHRoaXM7XG4gICAgICB2YXIgZGVsZXRlTGlzdGVuZXIgPSAhbmFtZSAmJiAhY2FsbGJhY2s7XG4gICAgICBpZiAodHlwZW9mIG5hbWUgPT09ICdvYmplY3QnKSBjYWxsYmFjayA9IHRoaXM7XG4gICAgICBpZiAob2JqKSAobGlzdGVuZXJzID0ge30pW29iai5fbGlzdGVuZXJJZF0gPSBvYmo7XG4gICAgICBmb3IgKHZhciBpZCBpbiBsaXN0ZW5lcnMpIHtcbiAgICAgICAgbGlzdGVuZXJzW2lkXS5vZmYobmFtZSwgY2FsbGJhY2ssIHRoaXMpO1xuICAgICAgICBpZiAoZGVsZXRlTGlzdGVuZXIpIGRlbGV0ZSB0aGlzLl9saXN0ZW5lcnNbaWRdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gIH07XG5cbiAgLy8gUmVndWxhciBleHByZXNzaW9uIHVzZWQgdG8gc3BsaXQgZXZlbnQgc3RyaW5ncy5cbiAgdmFyIGV2ZW50U3BsaXR0ZXIgPSAvXFxzKy87XG5cbiAgLy8gSW1wbGVtZW50IGZhbmN5IGZlYXR1cmVzIG9mIHRoZSBFdmVudHMgQVBJIHN1Y2ggYXMgbXVsdGlwbGUgZXZlbnRcbiAgLy8gbmFtZXMgYFwiY2hhbmdlIGJsdXJcImAgYW5kIGpRdWVyeS1zdHlsZSBldmVudCBtYXBzIGB7Y2hhbmdlOiBhY3Rpb259YFxuICAvLyBpbiB0ZXJtcyBvZiB0aGUgZXhpc3RpbmcgQVBJLlxuICB2YXIgZXZlbnRzQXBpID0gZnVuY3Rpb24ob2JqLCBhY3Rpb24sIG5hbWUsIHJlc3QpIHtcbiAgICBpZiAoIW5hbWUpIHJldHVybiB0cnVlO1xuXG4gICAgLy8gSGFuZGxlIGV2ZW50IG1hcHMuXG4gICAgaWYgKHR5cGVvZiBuYW1lID09PSAnb2JqZWN0Jykge1xuICAgICAgZm9yICh2YXIga2V5IGluIG5hbWUpIHtcbiAgICAgICAgb2JqW2FjdGlvbl0uYXBwbHkob2JqLCBba2V5LCBuYW1lW2tleV1dLmNvbmNhdChyZXN0KSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHNwYWNlIHNlcGFyYXRlZCBldmVudCBuYW1lcy5cbiAgICBpZiAoZXZlbnRTcGxpdHRlci50ZXN0KG5hbWUpKSB7XG4gICAgICB2YXIgbmFtZXMgPSBuYW1lLnNwbGl0KGV2ZW50U3BsaXR0ZXIpO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBuYW1lcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgb2JqW2FjdGlvbl0uYXBwbHkob2JqLCBbbmFtZXNbaV1dLmNvbmNhdChyZXN0KSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgLy8gQSBkaWZmaWN1bHQtdG8tYmVsaWV2ZSwgYnV0IG9wdGltaXplZCBpbnRlcm5hbCBkaXNwYXRjaCBmdW5jdGlvbiBmb3JcbiAgLy8gdHJpZ2dlcmluZyBldmVudHMuIFRyaWVzIHRvIGtlZXAgdGhlIHVzdWFsIGNhc2VzIHNwZWVkeSAobW9zdCBpbnRlcm5hbFxuICAvLyBCYWNrYm9uZSBldmVudHMgaGF2ZSAzIGFyZ3VtZW50cykuXG4gIHZhciB0cmlnZ2VyRXZlbnRzID0gZnVuY3Rpb24oZXZlbnRzLCBhcmdzKSB7XG4gICAgdmFyIGV2LCBpID0gLTEsIGwgPSBldmVudHMubGVuZ3RoLCBhMSA9IGFyZ3NbMF0sIGEyID0gYXJnc1sxXSwgYTMgPSBhcmdzWzJdO1xuICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgIGNhc2UgMDogd2hpbGUgKCsraSA8IGwpIChldiA9IGV2ZW50c1tpXSkuY2FsbGJhY2suY2FsbChldi5jdHgpOyByZXR1cm47XG4gICAgICBjYXNlIDE6IHdoaWxlICgrK2kgPCBsKSAoZXYgPSBldmVudHNbaV0pLmNhbGxiYWNrLmNhbGwoZXYuY3R4LCBhMSk7IHJldHVybjtcbiAgICAgIGNhc2UgMjogd2hpbGUgKCsraSA8IGwpIChldiA9IGV2ZW50c1tpXSkuY2FsbGJhY2suY2FsbChldi5jdHgsIGExLCBhMik7IHJldHVybjtcbiAgICAgIGNhc2UgMzogd2hpbGUgKCsraSA8IGwpIChldiA9IGV2ZW50c1tpXSkuY2FsbGJhY2suY2FsbChldi5jdHgsIGExLCBhMiwgYTMpOyByZXR1cm47XG4gICAgICBkZWZhdWx0OiB3aGlsZSAoKytpIDwgbCkgKGV2ID0gZXZlbnRzW2ldKS5jYWxsYmFjay5hcHBseShldi5jdHgsIGFyZ3MpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgbGlzdGVuTWV0aG9kcyA9IHtsaXN0ZW5UbzogJ29uJywgbGlzdGVuVG9PbmNlOiAnb25jZSd9O1xuXG4gIC8vIEludmVyc2lvbi1vZi1jb250cm9sIHZlcnNpb25zIG9mIGBvbmAgYW5kIGBvbmNlYC4gVGVsbCAqdGhpcyogb2JqZWN0IHRvXG4gIC8vIGxpc3RlbiB0byBhbiBldmVudCBpbiBhbm90aGVyIG9iamVjdCAuLi4ga2VlcGluZyB0cmFjayBvZiB3aGF0IGl0J3NcbiAgLy8gbGlzdGVuaW5nIHRvLlxuICBfLmVhY2gobGlzdGVuTWV0aG9kcywgZnVuY3Rpb24oaW1wbGVtZW50YXRpb24sIG1ldGhvZCkge1xuICAgIEV2ZW50c1ttZXRob2RdID0gZnVuY3Rpb24ob2JqLCBuYW1lLCBjYWxsYmFjaykge1xuICAgICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVycyB8fCAodGhpcy5fbGlzdGVuZXJzID0ge30pO1xuICAgICAgdmFyIGlkID0gb2JqLl9saXN0ZW5lcklkIHx8IChvYmouX2xpc3RlbmVySWQgPSBfLnVuaXF1ZUlkKCdsJykpO1xuICAgICAgbGlzdGVuZXJzW2lkXSA9IG9iajtcbiAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ29iamVjdCcpIGNhbGxiYWNrID0gdGhpcztcbiAgICAgIG9ialtpbXBsZW1lbnRhdGlvbl0obmFtZSwgY2FsbGJhY2ssIHRoaXMpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gQWxpYXNlcyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG4gIEV2ZW50cy5iaW5kICAgPSBFdmVudHMub247XG4gIEV2ZW50cy51bmJpbmQgPSBFdmVudHMub2ZmO1xuXG4gIC8vIE1peGluIHV0aWxpdHlcbiAgRXZlbnRzLm1peGluID0gZnVuY3Rpb24ocHJvdG8pIHtcbiAgICB2YXIgZXhwb3J0cyA9IFsnb24nLCAnb25jZScsICdvZmYnLCAndHJpZ2dlcicsICdzdG9wTGlzdGVuaW5nJywgJ2xpc3RlblRvJyxcbiAgICAgICAgICAgICAgICAgICAnbGlzdGVuVG9PbmNlJywgJ2JpbmQnLCAndW5iaW5kJ107XG4gICAgXy5lYWNoKGV4cG9ydHMsIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHByb3RvW25hbWVdID0gdGhpc1tuYW1lXTtcbiAgICB9LCB0aGlzKTtcbiAgICByZXR1cm4gcHJvdG87XG4gIH07XG5cbiAgLy8gRXhwb3J0IEV2ZW50cyBhcyBCYWNrYm9uZUV2ZW50cyBkZXBlbmRpbmcgb24gY3VycmVudCBjb250ZXh0XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBkZWZpbmUoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gRXZlbnRzO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgICAgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gRXZlbnRzO1xuICAgIH1cbiAgICBleHBvcnRzLkJhY2tib25lRXZlbnRzID0gRXZlbnRzO1xuICB9IGVsc2Uge1xuICAgIHJvb3QuQmFja2JvbmVFdmVudHMgPSBFdmVudHM7XG4gIH1cbn0pKHRoaXMpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2JhY2tib25lLWV2ZW50cy1zdGFuZGFsb25lJyk7XG4iLCIoZnVuY3Rpb24gKGRlZmluaXRpb24pIHtcbiAgaWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBkZWZpbml0aW9uKCk7XG4gIH1cbiAgZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKGRlZmluaXRpb24pO1xuICB9XG4gIGVsc2Uge1xuICAgIHdpbmRvdy5CYWNrYm9uZUV4dGVuZCA9IGRlZmluaXRpb24oKTtcbiAgfVxufSkoZnVuY3Rpb24gKCkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgXG4gIC8vIG1pbmktdW5kZXJzY29yZVxuICB2YXIgXyA9IHtcbiAgICBoYXM6IGZ1bmN0aW9uIChvYmosIGtleSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSk7XG4gICAgfSxcbiAgXG4gICAgZXh0ZW5kOiBmdW5jdGlvbihvYmopIHtcbiAgICAgIGZvciAodmFyIGk9MTsgaTxhcmd1bWVudHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICAgIGZvciAodmFyIHByb3AgaW4gc291cmNlKSB7XG4gICAgICAgICAgICBvYmpbcHJvcF0gPSBzb3VyY2VbcHJvcF07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqO1xuICAgIH1cbiAgfTtcblxuICAvLy8gRm9sbG93aW5nIGNvZGUgaXMgcGFzdGVkIGZyb20gQmFja2JvbmUuanMgLy8vXG5cbiAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGNvcnJlY3RseSBzZXQgdXAgdGhlIHByb3RvdHlwZSBjaGFpbiwgZm9yIHN1YmNsYXNzZXMuXG4gIC8vIFNpbWlsYXIgdG8gYGdvb2cuaW5oZXJpdHNgLCBidXQgdXNlcyBhIGhhc2ggb2YgcHJvdG90eXBlIHByb3BlcnRpZXMgYW5kXG4gIC8vIGNsYXNzIHByb3BlcnRpZXMgdG8gYmUgZXh0ZW5kZWQuXG4gIHZhciBleHRlbmQgPSBmdW5jdGlvbihwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIHZhciBwYXJlbnQgPSB0aGlzO1xuICAgIHZhciBjaGlsZDtcblxuICAgIC8vIFRoZSBjb25zdHJ1Y3RvciBmdW5jdGlvbiBmb3IgdGhlIG5ldyBzdWJjbGFzcyBpcyBlaXRoZXIgZGVmaW5lZCBieSB5b3VcbiAgICAvLyAodGhlIFwiY29uc3RydWN0b3JcIiBwcm9wZXJ0eSBpbiB5b3VyIGBleHRlbmRgIGRlZmluaXRpb24pLCBvciBkZWZhdWx0ZWRcbiAgICAvLyBieSB1cyB0byBzaW1wbHkgY2FsbCB0aGUgcGFyZW50J3MgY29uc3RydWN0b3IuXG4gICAgaWYgKHByb3RvUHJvcHMgJiYgXy5oYXMocHJvdG9Qcm9wcywgJ2NvbnN0cnVjdG9yJykpIHtcbiAgICAgIGNoaWxkID0gcHJvdG9Qcm9wcy5jb25zdHJ1Y3RvcjtcbiAgICB9IGVsc2Uge1xuICAgICAgY2hpbGQgPSBmdW5jdGlvbigpeyByZXR1cm4gcGFyZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gICAgfVxuXG4gICAgLy8gQWRkIHN0YXRpYyBwcm9wZXJ0aWVzIHRvIHRoZSBjb25zdHJ1Y3RvciBmdW5jdGlvbiwgaWYgc3VwcGxpZWQuXG4gICAgXy5leHRlbmQoY2hpbGQsIHBhcmVudCwgc3RhdGljUHJvcHMpO1xuXG4gICAgLy8gU2V0IHRoZSBwcm90b3R5cGUgY2hhaW4gdG8gaW5oZXJpdCBmcm9tIGBwYXJlbnRgLCB3aXRob3V0IGNhbGxpbmdcbiAgICAvLyBgcGFyZW50YCdzIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLlxuICAgIHZhciBTdXJyb2dhdGUgPSBmdW5jdGlvbigpeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH07XG4gICAgU3Vycm9nYXRlLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7XG4gICAgY2hpbGQucHJvdG90eXBlID0gbmV3IFN1cnJvZ2F0ZSgpO1xuXG4gICAgLy8gQWRkIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChpbnN0YW5jZSBwcm9wZXJ0aWVzKSB0byB0aGUgc3ViY2xhc3MsXG4gICAgLy8gaWYgc3VwcGxpZWQuXG4gICAgaWYgKHByb3RvUHJvcHMpIF8uZXh0ZW5kKGNoaWxkLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG5cbiAgICAvLyBTZXQgYSBjb252ZW5pZW5jZSBwcm9wZXJ0eSBpbiBjYXNlIHRoZSBwYXJlbnQncyBwcm90b3R5cGUgaXMgbmVlZGVkXG4gICAgLy8gbGF0ZXIuXG4gICAgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTtcblxuICAgIHJldHVybiBjaGlsZDtcbiAgfTtcblxuICAvLyBFeHBvc2UgdGhlIGV4dGVuZCBmdW5jdGlvblxuICByZXR1cm4gZXh0ZW5kO1xufSk7XG4iLCIvLyB0aGlzIGlzIHRoZSBleHRyYWN0ZWQgdmlldyBtb2RlbCBmcm9tIGJhY2tib25lXG4vLyBub3RlIHRoYXQgd2UgaW5qZWN0IGpib25lIGFzIGpxdWVyeSByZXBsYWNtZW50XG4vLyAoYW5kIHVuZGVyc2NvcmUgZGlyZWN0bHkpXG4vL1xuLy8gVmlld3MgYXJlIGFsbW9zdCBtb3JlIGNvbnZlbnRpb24gdGhhbiB0aGV5IGFyZSBhY3R1YWwgY29kZS5cbi8vICBNVkMgcGF0dGVyblxuLy8gQmFja2JvbmUuVmlld1xuLy8gLS0tLS0tLS0tLS0tLVxuXG52YXIgXyA9IHJlcXVpcmUoXCJ1bmRlcnNjb3JlXCIpO1xudmFyIEV2ZW50cyA9IHJlcXVpcmUoXCJiYWNrYm9uZS1ldmVudHMtc3RhbmRhbG9uZVwiKTtcbnZhciBleHRlbmQgPSByZXF1aXJlKFwiYmFja2JvbmUtZXh0ZW5kLXN0YW5kYWxvbmVcIik7XG52YXIgJCA9IHJlcXVpcmUoJ2pib25lJyk7XG5cbi8vIEJhY2tib25lIFZpZXdzIGFyZSBhbG1vc3QgbW9yZSBjb252ZW50aW9uIHRoYW4gdGhleSBhcmUgYWN0dWFsIGNvZGUuIEEgVmlld1xuLy8gaXMgc2ltcGx5IGEgSmF2YVNjcmlwdCBvYmplY3QgdGhhdCByZXByZXNlbnRzIGEgbG9naWNhbCBjaHVuayBvZiBVSSBpbiB0aGVcbi8vIERPTS4gVGhpcyBtaWdodCBiZSBhIHNpbmdsZSBpdGVtLCBhbiBlbnRpcmUgbGlzdCwgYSBzaWRlYmFyIG9yIHBhbmVsLCBvclxuLy8gZXZlbiB0aGUgc3Vycm91bmRpbmcgZnJhbWUgd2hpY2ggd3JhcHMgeW91ciB3aG9sZSBhcHAuIERlZmluaW5nIGEgY2h1bmsgb2Zcbi8vIFVJIGFzIGEgKipWaWV3KiogYWxsb3dzIHlvdSB0byBkZWZpbmUgeW91ciBET00gZXZlbnRzIGRlY2xhcmF0aXZlbHksIHdpdGhvdXRcbi8vIGhhdmluZyB0byB3b3JyeSBhYm91dCByZW5kZXIgb3JkZXIgLi4uIGFuZCBtYWtlcyBpdCBlYXN5IGZvciB0aGUgdmlldyB0b1xuLy8gcmVhY3QgdG8gc3BlY2lmaWMgY2hhbmdlcyBpbiB0aGUgc3RhdGUgb2YgeW91ciBtb2RlbHMuXG5cbi8vIENyZWF0aW5nIGEgQmFja2JvbmUuVmlldyBjcmVhdGVzIGl0cyBpbml0aWFsIGVsZW1lbnQgb3V0c2lkZSBvZiB0aGUgRE9NLFxuLy8gaWYgYW4gZXhpc3RpbmcgZWxlbWVudCBpcyBub3QgcHJvdmlkZWQuLi5cbnZhciBWaWV3ID0gIGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgdGhpcy5jaWQgPSBfLnVuaXF1ZUlkKCd2aWV3Jyk7XG4gIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7XG4gIF8uZXh0ZW5kKHRoaXMsIF8ucGljayhvcHRpb25zLCB2aWV3T3B0aW9ucykpO1xuICB0aGlzLl9lbnN1cmVFbGVtZW50KCk7XG4gIHRoaXMuaW5pdGlhbGl6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcblxuLy8gQ2FjaGVkIHJlZ2V4IHRvIHNwbGl0IGtleXMgZm9yIGBkZWxlZ2F0ZWAuXG52YXIgZGVsZWdhdGVFdmVudFNwbGl0dGVyID0gL14oXFxTKylcXHMqKC4qKSQvO1xuXG4vLyBMaXN0IG9mIHZpZXcgb3B0aW9ucyB0byBiZSBtZXJnZWQgYXMgcHJvcGVydGllcy5cbnZhciB2aWV3T3B0aW9ucyA9IFsnbW9kZWwnLCAnY29sbGVjdGlvbicsICdlbCcsICdpZCcsICdhdHRyaWJ1dGVzJywgJ2NsYXNzTmFtZScsICd0YWdOYW1lJywgJ2V2ZW50cyddO1xuXG4vLyBTZXQgdXAgYWxsIGluaGVyaXRhYmxlICoqQmFja2JvbmUuVmlldyoqIHByb3BlcnRpZXMgYW5kIG1ldGhvZHMuXG5fLmV4dGVuZChWaWV3LnByb3RvdHlwZSwgRXZlbnRzLCB7XG5cbiAgLy8gVGhlIGRlZmF1bHQgYHRhZ05hbWVgIG9mIGEgVmlldydzIGVsZW1lbnQgaXMgYFwiZGl2XCJgLlxuICB0YWdOYW1lOiAnZGl2JyxcblxuICAvLyBqUXVlcnkgZGVsZWdhdGUgZm9yIGVsZW1lbnQgbG9va3VwLCBzY29wZWQgdG8gRE9NIGVsZW1lbnRzIHdpdGhpbiB0aGVcbiAgLy8gY3VycmVudCB2aWV3LiBUaGlzIHNob3VsZCBiZSBwcmVmZXJyZWQgdG8gZ2xvYmFsIGxvb2t1cHMgd2hlcmUgcG9zc2libGUuXG4gICQ6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoc2VsZWN0b3IpO1xuICB9LFxuXG4gICAgLy8gSW5pdGlhbGl6ZSBpcyBhbiBlbXB0eSBmdW5jdGlvbiBieSBkZWZhdWx0LiBPdmVycmlkZSBpdCB3aXRoIHlvdXIgb3duXG4gICAgLy8gaW5pdGlhbGl6YXRpb24gbG9naWMuXG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uKCl7fSxcblxuICAgIC8vICoqcmVuZGVyKiogaXMgdGhlIGNvcmUgZnVuY3Rpb24gdGhhdCB5b3VyIHZpZXcgc2hvdWxkIG92ZXJyaWRlLCBpbiBvcmRlclxuICAgIC8vIHRvIHBvcHVsYXRlIGl0cyBlbGVtZW50IChgdGhpcy5lbGApLCB3aXRoIHRoZSBhcHByb3ByaWF0ZSBIVE1MLiBUaGVcbiAgICAvLyBjb252ZW50aW9uIGlzIGZvciAqKnJlbmRlcioqIHRvIGFsd2F5cyByZXR1cm4gYHRoaXNgLlxuICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gICAgLy8gUmVtb3ZlIHRoaXMgdmlldyBieSB0YWtpbmcgdGhlIGVsZW1lbnQgb3V0IG9mIHRoZSBET00sIGFuZCByZW1vdmluZyBhbnlcbiAgICAvLyBhcHBsaWNhYmxlIEJhY2tib25lLkV2ZW50cyBsaXN0ZW5lcnMuXG4gIHJlbW92ZTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fcmVtb3ZlRWxlbWVudCgpO1xuICAgIHRoaXMuc3RvcExpc3RlbmluZygpO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gICAgLy8gUmVtb3ZlIHRoaXMgdmlldydzIGVsZW1lbnQgZnJvbSB0aGUgZG9jdW1lbnQgYW5kIGFsbCBldmVudCBsaXN0ZW5lcnNcbiAgICAvLyBhdHRhY2hlZCB0byBpdC4gRXhwb3NlZCBmb3Igc3ViY2xhc3NlcyB1c2luZyBhbiBhbHRlcm5hdGl2ZSBET01cbiAgICAvLyBtYW5pcHVsYXRpb24gQVBJLlxuICBfcmVtb3ZlRWxlbWVudDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy4kZWwucmVtb3ZlKCk7XG4gIH0sXG5cbiAgICAvLyBDaGFuZ2UgdGhlIHZpZXcncyBlbGVtZW50IChgdGhpcy5lbGAgcHJvcGVydHkpIGFuZCByZS1kZWxlZ2F0ZSB0aGVcbiAgICAvLyB2aWV3J3MgZXZlbnRzIG9uIHRoZSBuZXcgZWxlbWVudC5cbiAgc2V0RWxlbWVudDogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIHRoaXMudW5kZWxlZ2F0ZUV2ZW50cygpO1xuICAgIHRoaXMuX3NldEVsZW1lbnQoZWxlbWVudCk7XG4gICAgdGhpcy5kZWxlZ2F0ZUV2ZW50cygpO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gICAgLy8gQ3JlYXRlcyB0aGUgYHRoaXMuZWxgIGFuZCBgdGhpcy4kZWxgIHJlZmVyZW5jZXMgZm9yIHRoaXMgdmlldyB1c2luZyB0aGVcbiAgICAvLyBnaXZlbiBgZWxgLiBgZWxgIGNhbiBiZSBhIENTUyBzZWxlY3RvciBvciBhbiBIVE1MIHN0cmluZywgYSBqUXVlcnlcbiAgICAvLyBjb250ZXh0IG9yIGFuIGVsZW1lbnQuIFN1YmNsYXNzZXMgY2FuIG92ZXJyaWRlIHRoaXMgdG8gdXRpbGl6ZSBhblxuICAgIC8vIGFsdGVybmF0aXZlIERPTSBtYW5pcHVsYXRpb24gQVBJIGFuZCBhcmUgb25seSByZXF1aXJlZCB0byBzZXQgdGhlXG4gICAgLy8gYHRoaXMuZWxgIHByb3BlcnR5LlxuICBfc2V0RWxlbWVudDogZnVuY3Rpb24oZWwpIHtcbiAgICB0aGlzLiRlbCA9IGVsIGluc3RhbmNlb2YgJCA/IGVsIDogJChlbCk7XG4gICAgdGhpcy5lbCA9IHRoaXMuJGVsWzBdO1xuICB9LFxuXG4gICAgLy8gU2V0IGNhbGxiYWNrcywgd2hlcmUgYHRoaXMuZXZlbnRzYCBpcyBhIGhhc2ggb2ZcbiAgICAvL1xuICAgIC8vICp7XCJldmVudCBzZWxlY3RvclwiOiBcImNhbGxiYWNrXCJ9KlxuICAgIC8vXG4gICAgLy8gICAgIHtcbiAgICAvLyAgICAgICAnbW91c2Vkb3duIC50aXRsZSc6ICAnZWRpdCcsXG4gICAgLy8gICAgICAgJ2NsaWNrIC5idXR0b24nOiAgICAgJ3NhdmUnLFxuICAgIC8vICAgICAgICdjbGljayAub3Blbic6ICAgICAgIGZ1bmN0aW9uKGUpIHsgLi4uIH1cbiAgICAvLyAgICAgfVxuICAgIC8vXG4gICAgLy8gcGFpcnMuIENhbGxiYWNrcyB3aWxsIGJlIGJvdW5kIHRvIHRoZSB2aWV3LCB3aXRoIGB0aGlzYCBzZXQgcHJvcGVybHkuXG4gICAgLy8gVXNlcyBldmVudCBkZWxlZ2F0aW9uIGZvciBlZmZpY2llbmN5LlxuICAgIC8vIE9taXR0aW5nIHRoZSBzZWxlY3RvciBiaW5kcyB0aGUgZXZlbnQgdG8gYHRoaXMuZWxgLlxuICBkZWxlZ2F0ZUV2ZW50czogZnVuY3Rpb24oZXZlbnRzKSB7XG4gICAgaWYgKCEoZXZlbnRzIHx8IChldmVudHMgPSBfLnJlc3VsdCh0aGlzLCAnZXZlbnRzJykpKSkgcmV0dXJuIHRoaXM7XG4gICAgdGhpcy51bmRlbGVnYXRlRXZlbnRzKCk7XG4gICAgZm9yICh2YXIga2V5IGluIGV2ZW50cykge1xuICAgICAgdmFyIG1ldGhvZCA9IGV2ZW50c1trZXldO1xuICAgICAgaWYgKCFfLmlzRnVuY3Rpb24obWV0aG9kKSkgbWV0aG9kID0gdGhpc1tldmVudHNba2V5XV07XG4gICAgICBpZiAoIW1ldGhvZCkgY29udGludWU7XG4gICAgICB2YXIgbWF0Y2ggPSBrZXkubWF0Y2goZGVsZWdhdGVFdmVudFNwbGl0dGVyKTtcbiAgICAgIHRoaXMuZGVsZWdhdGUobWF0Y2hbMV0sIG1hdGNoWzJdLCBfLmJpbmQobWV0aG9kLCB0aGlzKSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gICAgLy8gQWRkIGEgc2luZ2xlIGV2ZW50IGxpc3RlbmVyIHRvIHRoZSB2aWV3J3MgZWxlbWVudCAob3IgYSBjaGlsZCBlbGVtZW50XG4gICAgLy8gdXNpbmcgYHNlbGVjdG9yYCkuIFRoaXMgb25seSB3b3JrcyBmb3IgZGVsZWdhdGUtYWJsZSBldmVudHM6IG5vdCBgZm9jdXNgLFxuICAgIC8vIGBibHVyYCwgYW5kIG5vdCBgY2hhbmdlYCwgYHN1Ym1pdGAsIGFuZCBgcmVzZXRgIGluIEludGVybmV0IEV4cGxvcmVyLlxuICBkZWxlZ2F0ZTogZnVuY3Rpb24oZXZlbnROYW1lLCBzZWxlY3RvciwgbGlzdGVuZXIpIHtcbiAgICB0aGlzLiRlbC5vbihldmVudE5hbWUgKyAnLmRlbGVnYXRlRXZlbnRzJyArIHRoaXMuY2lkLCBzZWxlY3RvciwgbGlzdGVuZXIpO1xuICB9LFxuXG4gICAgLy8gQ2xlYXJzIGFsbCBjYWxsYmFja3MgcHJldmlvdXNseSBib3VuZCB0byB0aGUgdmlldyBieSBgZGVsZWdhdGVFdmVudHNgLlxuICAgIC8vIFlvdSB1c3VhbGx5IGRvbid0IG5lZWQgdG8gdXNlIHRoaXMsIGJ1dCBtYXkgd2lzaCB0byBpZiB5b3UgaGF2ZSBtdWx0aXBsZVxuICAgIC8vIEJhY2tib25lIHZpZXdzIGF0dGFjaGVkIHRvIHRoZSBzYW1lIERPTSBlbGVtZW50LlxuICB1bmRlbGVnYXRlRXZlbnRzOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy4kZWwpIHRoaXMuJGVsLm9mZignLmRlbGVnYXRlRXZlbnRzJyArIHRoaXMuY2lkKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAgIC8vIEEgZmluZXItZ3JhaW5lZCBgdW5kZWxlZ2F0ZUV2ZW50c2AgZm9yIHJlbW92aW5nIGEgc2luZ2xlIGRlbGVnYXRlZCBldmVudC5cbiAgICAvLyBgc2VsZWN0b3JgIGFuZCBgbGlzdGVuZXJgIGFyZSBib3RoIG9wdGlvbmFsLlxuICB1bmRlbGVnYXRlOiBmdW5jdGlvbihldmVudE5hbWUsIHNlbGVjdG9yLCBsaXN0ZW5lcikge1xuICAgIHRoaXMuJGVsLm9mZihldmVudE5hbWUgKyAnLmRlbGVnYXRlRXZlbnRzJyArIHRoaXMuY2lkLCBzZWxlY3RvciwgbGlzdGVuZXIpO1xuICB9LFxuXG4gICAgLy8gUHJvZHVjZXMgYSBET00gZWxlbWVudCB0byBiZSBhc3NpZ25lZCB0byB5b3VyIHZpZXcuIEV4cG9zZWQgZm9yXG4gICAgLy8gc3ViY2xhc3NlcyB1c2luZyBhbiBhbHRlcm5hdGl2ZSBET00gbWFuaXB1bGF0aW9uIEFQSS5cbiAgX2NyZWF0ZUVsZW1lbnQ6IGZ1bmN0aW9uKHRhZ05hbWUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKTtcbiAgfSxcblxuICAgIC8vIEVuc3VyZSB0aGF0IHRoZSBWaWV3IGhhcyBhIERPTSBlbGVtZW50IHRvIHJlbmRlciBpbnRvLlxuICAgIC8vIElmIGB0aGlzLmVsYCBpcyBhIHN0cmluZywgcGFzcyBpdCB0aHJvdWdoIGAkKClgLCB0YWtlIHRoZSBmaXJzdFxuICAgIC8vIG1hdGNoaW5nIGVsZW1lbnQsIGFuZCByZS1hc3NpZ24gaXQgdG8gYGVsYC4gT3RoZXJ3aXNlLCBjcmVhdGVcbiAgICAvLyBhbiBlbGVtZW50IGZyb20gdGhlIGBpZGAsIGBjbGFzc05hbWVgIGFuZCBgdGFnTmFtZWAgcHJvcGVydGllcy5cbiAgX2Vuc3VyZUVsZW1lbnQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICghdGhpcy5lbCkge1xuICAgICAgdmFyIGF0dHJzID0gXy5leHRlbmQoe30sIF8ucmVzdWx0KHRoaXMsICdhdHRyaWJ1dGVzJykpO1xuICAgICAgaWYgKHRoaXMuaWQpIGF0dHJzLmlkID0gXy5yZXN1bHQodGhpcywgJ2lkJyk7XG4gICAgICBpZiAodGhpcy5jbGFzc05hbWUpIGF0dHJzWydjbGFzcyddID0gXy5yZXN1bHQodGhpcywgJ2NsYXNzTmFtZScpO1xuICAgICAgdGhpcy5zZXRFbGVtZW50KHRoaXMuX2NyZWF0ZUVsZW1lbnQoXy5yZXN1bHQodGhpcywgJ3RhZ05hbWUnKSkpO1xuICAgICAgdGhpcy5fc2V0QXR0cmlidXRlcyhhdHRycyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0RWxlbWVudChfLnJlc3VsdCh0aGlzLCAnZWwnKSk7XG4gICAgfVxuICB9LFxuXG4gICAgLy8gU2V0IGF0dHJpYnV0ZXMgZnJvbSBhIGhhc2ggb24gdGhpcyB2aWV3J3MgZWxlbWVudC4gIEV4cG9zZWQgZm9yXG4gICAgLy8gc3ViY2xhc3NlcyB1c2luZyBhbiBhbHRlcm5hdGl2ZSBET00gbWFuaXB1bGF0aW9uIEFQSS5cbiAgX3NldEF0dHJpYnV0ZXM6IGZ1bmN0aW9uKGF0dHJpYnV0ZXMpIHtcbiAgICB0aGlzLiRlbC5hdHRyKGF0dHJpYnV0ZXMpO1xuICB9XG5cbn0pO1xuXG4vLyBzZXR1cCBpbmhlcml0YW5jZVxuVmlldy5leHRlbmQgPSBleHRlbmQ7XG5tb2R1bGUuZXhwb3J0cyA9IFZpZXc7XG4iLCJ2YXIgZXZlbnRzID0gcmVxdWlyZShcImJhY2tib25lLWV2ZW50cy1zdGFuZGFsb25lXCIpO1xuXG5ldmVudHMub25BbGwgPSBmdW5jdGlvbihjYWxsYmFjayxjb250ZXh0KXtcbiAgdGhpcy5vbihcImFsbFwiLCBjYWxsYmFjayxjb250ZXh0KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBNaXhpbiB1dGlsaXR5XG5ldmVudHMub2xkTWl4aW4gPSBldmVudHMubWl4aW47XG5ldmVudHMubWl4aW4gPSBmdW5jdGlvbihwcm90bykge1xuICBldmVudHMub2xkTWl4aW4ocHJvdG8pO1xuICAvLyBhZGQgY3VzdG9tIG9uQWxsXG4gIHZhciBleHBvcnRzID0gWydvbkFsbCddO1xuICBmb3IodmFyIGk9MDsgaSA8IGV4cG9ydHMubGVuZ3RoO2krKyl7XG4gICAgdmFyIG5hbWUgPSBleHBvcnRzW2ldO1xuICAgIHByb3RvW25hbWVdID0gdGhpc1tuYW1lXTtcbiAgfVxuICByZXR1cm4gcHJvdG87XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV2ZW50cztcbiIsIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS44LjBcbnZhciBHZW5lcmljUmVhZGVyLCB4aHI7XG5cbnhociA9IHJlcXVpcmUoJ3hocicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEdlbmVyaWNSZWFkZXIgPSAoZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIEdlbmVyaWNSZWFkZXIoKSB7fVxuXG4gIEdlbmVyaWNSZWFkZXIucmVhZCA9IGZ1bmN0aW9uKHVybCwgY2FsbGJhY2spIHtcbiAgICB2YXIgb25yZXQ7XG4gICAgb25yZXQgPSAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihlcnIsIHJlc3BvbnNlLCB0ZXh0KSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5fb25SZXRyaWV2YWwodGV4dCwgY2FsbGJhY2spO1xuICAgICAgfTtcbiAgICB9KSh0aGlzKTtcbiAgICByZXR1cm4geGhyKHVybCwgb25yZXQpO1xuICB9O1xuXG4gIEdlbmVyaWNSZWFkZXIuX29uUmV0cmlldmFsID0gZnVuY3Rpb24odGV4dCwgY2FsbGJhY2spIHtcbiAgICB2YXIgclRleHQ7XG4gICAgclRleHQgPSB0aGlzLnBhcnNlKHRleHQpO1xuICAgIHJldHVybiBjYWxsYmFjayhyVGV4dCk7XG4gIH07XG5cbiAgcmV0dXJuIEdlbmVyaWNSZWFkZXI7XG5cbn0pKCk7XG4iLCIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuOS4wXG52YXIgR2VuZXJpY1JlYWRlciwgeGhyO1xuXG54aHIgPSByZXF1aXJlKCd4aHInKTtcblxubW9kdWxlLmV4cG9ydHMgPSBHZW5lcmljUmVhZGVyID0gKGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBHZW5lcmljUmVhZGVyKCkge31cblxuICBHZW5lcmljUmVhZGVyLnJlYWQgPSBmdW5jdGlvbih1cmwsIGNhbGxiYWNrKSB7XG4gICAgdmFyIG9ucmV0O1xuICAgIG9ucmV0ID0gKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oZXJyLCByZXNwb25zZSwgdGV4dCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuX29uUmV0cmlldmFsKHRleHQsIGNhbGxiYWNrKTtcbiAgICAgIH07XG4gICAgfSkodGhpcyk7XG4gICAgcmV0dXJuIHhocih1cmwsIG9ucmV0KTtcbiAgfTtcblxuICBHZW5lcmljUmVhZGVyLl9vblJldHJpZXZhbCA9IGZ1bmN0aW9uKHRleHQsIGNhbGxiYWNrKSB7XG4gICAgdmFyIHJUZXh0O1xuICAgIHJUZXh0ID0gdGhpcy5wYXJzZSh0ZXh0KTtcbiAgICByZXR1cm4gY2FsbGJhY2soclRleHQpO1xuICB9O1xuXG4gIHJldHVybiBHZW5lcmljUmVhZGVyO1xuXG59KSgpO1xuIiwiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjkuMFxudmFyIEZhc3RhLCBHZW5lcmljUmVhZGVyLCBzdCxcbiAgX19leHRlbmRzID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChfX2hhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIF9faGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5HZW5lcmljUmVhZGVyID0gcmVxdWlyZShcIi4vZ2VuZXJpY19yZWFkZXJcIik7XG5cbnN0ID0gcmVxdWlyZShcIm1zYS1zZXF0b29sc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBGYXN0YSA9IChmdW5jdGlvbihfc3VwZXIpIHtcbiAgX19leHRlbmRzKEZhc3RhLCBfc3VwZXIpO1xuXG4gIGZ1bmN0aW9uIEZhc3RhKCkge1xuICAgIHJldHVybiBGYXN0YS5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIEZhc3RhLnBhcnNlID0gZnVuY3Rpb24odGV4dCkge1xuICAgIHZhciBjdXJyZW50U2VxLCBrZXlzLCBsYWJlbCwgbGluZSwgb2JqLCBzZXFzLCBfaSwgX2xlbjtcbiAgICBzZXFzID0gW107XG4gICAgaWYgKCF0ZXh0IHx8IHRleHQubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodGV4dCkgIT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgIHRleHQgPSB0ZXh0LnNwbGl0KFwiXFxuXCIpO1xuICAgIH1cbiAgICBmb3IgKF9pID0gMCwgX2xlbiA9IHRleHQubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHtcbiAgICAgIGxpbmUgPSB0ZXh0W19pXTtcbiAgICAgIGlmIChsaW5lWzBdID09PSBcIj5cIiB8fCBsaW5lWzBdID09PSBcIjtcIikge1xuICAgICAgICBsYWJlbCA9IGxpbmUuc2xpY2UoMSk7XG4gICAgICAgIG9iaiA9IHN0LmdldE1ldGEobGFiZWwpO1xuICAgICAgICBsYWJlbCA9IG9iai5uYW1lO1xuICAgICAgICBjdXJyZW50U2VxID0gbmV3IHN0Lm1vZGVsKFwiXCIsIGxhYmVsLCBzZXFzLmxlbmd0aCk7XG4gICAgICAgIGN1cnJlbnRTZXEuaWRzID0gb2JqLmlkcyB8fCB7fTtcbiAgICAgICAga2V5cyA9IE9iamVjdC5rZXlzKGN1cnJlbnRTZXEuaWRzKTtcbiAgICAgICAgaWYgKGtleXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGN1cnJlbnRTZXEuaWQgPSBjdXJyZW50U2VxLmlkc1trZXlzWzBdXTtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50U2VxLmRldGFpbHMgPSBvYmouZGV0YWlscyB8fCB7fTtcbiAgICAgICAgc2Vxcy5wdXNoKGN1cnJlbnRTZXEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3VycmVudFNlcS5zZXEgKz0gbGluZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNlcXM7XG4gIH07XG5cbiAgRmFzdGEud3JpdGUgPSBmdW5jdGlvbihzZXFzLCBhY2Nlc3MpIHtcbiAgICB2YXIgc2VxLCB0ZXh0LCBfaSwgX2xlbjtcbiAgICB0ZXh0ID0gXCJcIjtcbiAgICBmb3IgKF9pID0gMCwgX2xlbiA9IHNlcXMubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHtcbiAgICAgIHNlcSA9IHNlcXNbX2ldO1xuICAgICAgaWYgKGFjY2VzcyAhPSBudWxsKSB7XG4gICAgICAgIHNlcSA9IGFjY2VzcyhzZXEpO1xuICAgICAgfVxuICAgICAgdGV4dCArPSBcIj5cIiArIHNlcS5uYW1lICsgXCJcXG5cIjtcbiAgICAgIHRleHQgKz0gKHN0LnNwbGl0TkNoYXJzKHNlcS5zZXEsIDgwKSkuam9pbihcIlxcblwiKTtcbiAgICAgIHRleHQgKz0gXCJcXG5cIjtcbiAgICB9XG4gICAgcmV0dXJuIHRleHQ7XG4gIH07XG5cbiAgcmV0dXJuIEZhc3RhO1xuXG59KShHZW5lcmljUmVhZGVyKTtcbiIsInZhciBqYWx2aWV3ID0ge307XG5tb2R1bGUuZXhwb3J0cyA9IGphbHZpZXc7XG52YXIgdXRpbHMgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcblxuLy8gaHR0cDovL3d3dy5qYWx2aWV3Lm9yZy9oZWxwL2h0bWwvZmVhdHVyZXMvZmVhdHVyZXNGb3JtYXQuaHRtbFxuamFsdmlldy5yZWFkSGVhZGVyID0gZnVuY3Rpb24obGluZXMpIHtcbiAgdmFyIGNvbG9ycyA9IHt9O1xuICB2YXIgaSA9IDA7XG4gIHZhciBmZWF0dXJlcyA9IFtdO1xuICB2YXIgY3VycmVudEdyb3VwO1xuXG4gIGZvciAoOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbGluZSA9IGxpbmVzW2ldO1xuICAgIGlmIChsaW5lLmluZGV4T2YoXCIjXCIpID49IDApIHtcbiAgICAgIC8vIG5vIGNvbW1lbnRzIGFsbG93ZWQgLT4gc3RvcFxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHZhciBjb2x1bW5zID0gbGluZS5zcGxpdCgvXFx0Lyk7XG4gICAgdmFyIGZpcnN0Q2VsbCA9IGNvbHVtbnNbMF0udHJpbSgpO1xuICAgIGlmIChmaXJzdENlbGwgPT09IFwiR0ZGXCIpIHtcbiAgICAgIC8vIHRoaXMgc3ltYm9saXplcyB0aGUgZW5kIFxuICAgICAgYnJlYWs7XG4gICAgfSBlbHNlIGlmIChjb2x1bW5zLmxlbmd0aCA9PT0gMikge1xuICAgICAgaWYgKGZpcnN0Q2VsbCA9PT0gXCJzdGFydGdyb3VwXCIpIHtcbiAgICAgICAgY3VycmVudEdyb3VwID0gY29sdW1uc1sxXS50cmltKCk7XG4gICAgICB9IGVsc2UgaWYgKGZpcnN0Q2VsbCA9PT0gXCJlbmRncm91cFwiKSB7XG4gICAgICAgIGN1cnJlbnRHcm91cCA9IFwiXCI7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gcGFyc2UgY29sb3JcbiAgICAgICAgY29sb3JzW2NvbHVtbnNbMF1dID0gamFsdmlldy5wYXJzZUNvbG9yKGNvbHVtbnNbMV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZihjb2x1bW5zLmxlbmd0aCA+PSA1KXtcbiAgICAgIHZhciBhcnIgPSBqYWx2aWV3LnBhcnNlTGluZShjb2x1bW5zKTtcbiAgICAgIGlmIChjdXJyZW50R3JvdXApIHtcbiAgICAgICAgYXJyLmF0dHJpYnV0ZXMuUGFyZW50ID0gY3VycmVudEdyb3VwO1xuICAgICAgfVxuICAgICAgZmVhdHVyZXMucHVzaChhcnIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgb2Zmc2V0OiBpLFxuICAgIGNvbG9yczogY29sb3JzLFxuICAgIGZlYXR1cmVzOiBmZWF0dXJlc1xuICB9O1xufTtcblxuamFsdmlldy5wYXJzZUNvbG9yID0gZnVuY3Rpb24oY2VsbCkge1xuICBpZiAoY2VsbC5pbmRleE9mKFwiLFwiKSA+PSAwKSB7XG4gICAgLy8gcmdiIGNvZGVcbiAgICByZXR1cm4gdXRpbHMucmdiVG9IZXgoY2VsbC5zcGxpdChcIixcIikubWFwKGZ1bmN0aW9uKGVsKSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQoZWwpO1xuICAgIH0pKTtcbiAgfVxuICAvLyBjb2xvciBuYW1lcyB3aXRoIGxlbmd0aCA9PSA2XG4gIC8vICdiaXNxdWUsbWFyb29uLG9yYW5nZSxvcmNoaWQscHVycGxlLHNhbG1vbixzaWVubmEsdG9tYXRvLHZpb2xldCx5ZWxsb3cnXG4gIGlmIChjZWxsLmxlbmd0aCA9PT0gNiAmJiBwYXJzZUludChjZWxsLmNoYXJBdCgwKSwgMTYpIDw9IDE2ICYmIGNlbGwgIT09ICdiaXNxdWUnKSB7XG4gICAgLy8gaGV4IGNvZGVcbiAgICByZXR1cm4gXCIjXCIgKyBjZWxsO1xuICB9XG4gIC8vIGNvbG9yIG5hbWVcbiAgcmV0dXJuIGNlbGw7XG59O1xuXG5cbmphbHZpZXcucGFyc2VMaW5lID0gZnVuY3Rpb24oY29sdW1ucykge1xuICB2YXIgb2JqID0ge1xuICAgIGF0dHJpYnV0ZXM6IHt9XG4gIH07XG4gIG9iai5hdHRyaWJ1dGVzLk5hbWUgPSBjb2x1bW5zWzBdLnRyaW0oKTsgLy9kZXNjXG4gIG9iai5zZXFuYW1lID0gY29sdW1uc1sxXS50cmltKCk7IC8vIGlkXG4gIG9iai5zdGFydCA9IHBhcnNlSW50KGNvbHVtbnNbM10pO1xuICBvYmouZW5kID0gcGFyc2VJbnQoY29sdW1uc1s0XSk7XG4gIG9iai5mZWF0dXJlID0gY29sdW1uc1s1XS50cmltKCk7XG4gIGlmIChvYmouc2VxbmFtZSA9PT0gXCJJRF9OT1RfU1BFQ0lGSUVEXCIpIHtcbiAgICBvYmouc2VxbmFtZSA9IGNvbHVtbnNbMl0udHJpbSgpOyAvLyBhbHRlcm5hdGl2ZSBpZFxuICB9XG4gIHJldHVybiBvYmo7XG59O1xuIiwidmFyIHV0aWxzID0ge307XG5tb2R1bGUuZXhwb3J0cyA9IHV0aWxzO1xuXG51dGlscy5leHRyYWN0S2V5cyA9IGZ1bmN0aW9uIGV4dHJhY3RLZXlzKGF0dHIpIHtcbiAgLy8gZXh0cmFjdCBrZXktdmFsdWUgZGVmaW5pdGlvbnNcbiAgdmFyIGF0dHJpYnV0ZXMgPSB7fTtcbiAgdmFyIGF0dHJBcnIgPSBhdHRyLnNwbGl0KFwiO1wiKTtcbiAgYXR0ckFyci5mb3JFYWNoKGZ1bmN0aW9uKGVsKSB7XG4gICAgdmFyIGtleUFyciwga2V5LCB2YWw7XG4gICAgaWYgKGVsLmluZGV4T2YoXCI9XCIpID4gMCkge1xuICAgICAga2V5QXJyID0gZWwuc3BsaXQoXCI9XCIpO1xuICAgICAga2V5ID0ga2V5QXJyWzBdO1xuICAgICAgdmFsID0ga2V5QXJyWzFdO1xuICAgICAgYXR0cmlidXRlc1trZXldID0gdmFsO1xuICAgIH0gZWxzZSBpZiAoZWwuaW5kZXhPZihcIiBcIikgPiAwKSB7XG4gICAgICBrZXlBcnIgPSBlbC5zcGxpdChcIiBcIik7XG4gICAgICBrZXkgPSBrZXlBcnJbMF07XG4gICAgICB2YWwgPSBrZXlBcnJbMV0ucmVwbGFjZSgvXCIvZywgJycpO1xuICAgICAgYXR0cmlidXRlc1trZXldID0gdmFsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhdHRyaWJ1dGVzO1xufTtcblxuZnVuY3Rpb24gY29tcG9uZW50VG9IZXgoYykge1xuICB2YXIgaGV4ID0gYy50b1N0cmluZygxNik7XG4gIHJldHVybiBoZXgubGVuZ3RoID09PSAxID8gXCIwXCIgKyBoZXggOiBoZXg7XG59XG5cbnV0aWxzLnJnYlRvSGV4ID0gZnVuY3Rpb24ociwgZywgYikge1xuICBpZihyLmxlbmd0aCA9PT0gMyl7XG4gICAgcmV0dXJuIHV0aWxzLnJnYlRvSGV4KHJbMF0sclsxXSwgclsyXSk7XG4gIH1cbiAgcmV0dXJuIFwiI1wiICsgY29tcG9uZW50VG9IZXgocikgKyBjb21wb25lbnRUb0hleChnKSArIGNvbXBvbmVudFRvSGV4KGIpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzLnNlcSA9IHJlcXVpcmUoXCIuL3NlcVwiKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oc2VxLCBuYW1lLCBpZCkge1xuICAgIHRoaXMuc2VxID0gc2VxO1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5pZCA9IGlkO1xuICAgIHRoaXMubWV0YSA9IHt9O1xufTtcbiIsIi8vIHRoaXMgaXMgYSBsaWdodC13ZWlnaHQgYnVpbGQgd2l0aG91dCB0aGUgc2Nyb2xsaW5nIG1vZHVsZVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9zcmMvaW5kZXguanNcIik7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICByZW5kZXJfeF9heGlzX2xhYmVsOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbGFiZWwgPSBcIk1vZGVsIFBvc2l0aW9uXCI7XG4gICAgICBpZiAodGhpcy5kaXNwbGF5X2FsaV9tYXApIHtcbiAgICAgICAgbGFiZWwgPSBcIkFsaWdubWVudCBDb2x1bW5cIjtcbiAgICAgIH1cbiAgICAgIHRoaXMuY2FsbGVkX29uLmZpbmQoJy5sb2dvX3hheGlzJykucmVtb3ZlKCk7XG4gICAgICB0aGlzLmNhbGxlZF9vbi5wcmVwZW5kKCc8ZGl2IGNsYXNzPVwibG9nb194YXhpc1wiIGNsYXNzPVwiY2VudGVyZWRcIiBzdHlsZT1cIm1hcmdpbi1sZWZ0OjQwcHhcIj48cCBjbGFzcz1cInhheGlzX3RleHRcIiBzdHlsZT1cIndpZHRoOjEwZW07bWFyZ2luOjFlbSBhdXRvXCI+JyArIGxhYmVsICsgJzwvcD48L2Rpdj4nKTtcblxuICAgIH0sXG4gICAgcmVuZGVyX3lfYXhpc19sYWJlbDogZnVuY3Rpb24gKCkge1xuICAgICAgLy9hdHRhY2ggYSBjYW52YXMgZm9yIHRoZSB5LWF4aXNcbiAgICAgIHRoaXMuZG9tX2VsZW1lbnQucGFyZW50KCkuYmVmb3JlKCc8Y2FudmFzIGNsYXNzPVwibG9nb195YXhpc1wiIGhlaWdodD1cIicrdGhpcy5vcHRpb25zLmhlaWdodCsnXCIgd2lkdGg9XCI1NVwiPjwvY2FudmFzPicpO1xuICAgICAgdmFyIGNhbnZhcyA9IHRoaXMuY2FsbGVkX29uLmZpbmQoJy5sb2dvX3lheGlzJyksXG4gICAgICB0b3BfcGl4X2hlaWdodCA9IDAsXG4gICAgICBib3R0b21fcGl4X2hlaWdodCA9IDAsXG4gICAgICB0b3BfaGVpZ2h0ID0gTWF0aC5hYnModGhpcy5kYXRhLm1heF9oZWlnaHQpLFxuICAgICAgYm90dG9tX2hlaWdodCA9IChpc05hTih0aGlzLmRhdGEubWluX2hlaWdodF9vYnMpKSA/IDAgOiBwYXJzZUludCh0aGlzLmRhdGEubWluX2hlaWdodF9vYnMsIDEwKSxcbiAgICAgIGNvbnRleHQgPSBudWxsLFxuICAgICAgYXhpc19sYWJlbCA9IFwiSW5mb3JtYXRpb24gQ29udGVudCAoYml0cylcIjtcblxuICAgICAgY29udGV4dCA9IGNhbnZhc1swXS5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgLy9kcmF3IG1pbi9tYXggdGljayBtYXJrc1xuICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgIGNvbnRleHQubW92ZVRvKDU1LCAxKTtcbiAgICAgIGNvbnRleHQubGluZVRvKDQwLCAxKTtcblxuICAgICAgY29udGV4dC5tb3ZlVG8oNTUsIHRoaXMuaW5mb19jb250ZW50X2hlaWdodCk7XG4gICAgICBjb250ZXh0LmxpbmVUbyg0MCwgdGhpcy5pbmZvX2NvbnRlbnRfaGVpZ2h0KTtcblxuXG4gICAgICBjb250ZXh0Lm1vdmVUbyg1NSwgKHRoaXMuaW5mb19jb250ZW50X2hlaWdodCAvIDIpKTtcbiAgICAgIGNvbnRleHQubGluZVRvKDQwLCAodGhpcy5pbmZvX2NvbnRlbnRfaGVpZ2h0IC8gMikpO1xuICAgICAgY29udGV4dC5saW5lV2lkdGggPSAxO1xuICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IFwiIzY2NjY2NlwiO1xuICAgICAgY29udGV4dC5zdHJva2UoKTtcblxuICAgICAgLy9kcmF3IHRoZSBsYWJlbCB0ZXh0XG4gICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IFwiIzY2NjY2NlwiO1xuICAgICAgY29udGV4dC50ZXh0QWxpZ24gPSBcInJpZ2h0XCI7XG4gICAgICBjb250ZXh0LmZvbnQgPSBcImJvbGQgMTBweCBBcmlhbFwiO1xuXG4gICAgICAvLyBkcmF3IHRoZSBtYXggbGFiZWxcbiAgICAgIGNvbnRleHQudGV4dEJhc2VsaW5lID0gXCJ0b3BcIjtcbiAgICAgIGNvbnRleHQuZmlsbFRleHQocGFyc2VGbG9hdCh0aGlzLmRhdGEubWF4X2hlaWdodCkudG9GaXhlZCgxKSwgMzgsIDApO1xuICAgICAgY29udGV4dC50ZXh0QmFzZWxpbmUgPSBcIm1pZGRsZVwiO1xuXG4gICAgICAvLyBkcmF3IHRoZSBtaWRwb2ludCBsYWJlbHNcbiAgICAgIGNvbnRleHQuZmlsbFRleHQocGFyc2VGbG9hdCh0aGlzLmRhdGEubWF4X2hlaWdodCAvIDIpLnRvRml4ZWQoMSksIDM4LCAodGhpcy5pbmZvX2NvbnRlbnRfaGVpZ2h0IC8gMikpO1xuICAgICAgLy8gZHJhdyB0aGUgbWluIGxhYmVsXG4gICAgICBjb250ZXh0LmZpbGxUZXh0KCcwJywgMzgsIHRoaXMuaW5mb19jb250ZW50X2hlaWdodCk7XG5cbiAgICAgIC8vIGRyYXcgdGhlIGF4aXMgbGFiZWxcbiAgICAgIGlmICh0aGlzLmRhdGEuaGVpZ2h0X2NhbGMgPT09ICdzY29yZScpIHtcbiAgICAgICAgYXhpc19sYWJlbCA9IFwiU2NvcmUgKGJpdHMpXCI7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQuc2F2ZSgpO1xuICAgICAgY29udGV4dC50cmFuc2xhdGUoNSwgdGhpcy5oZWlnaHQgLyAyIC0gMjApO1xuICAgICAgY29udGV4dC5yb3RhdGUoLU1hdGguUEkgLyAyKTtcbiAgICAgIGNvbnRleHQudGV4dEFsaWduID0gXCJjZW50ZXJcIjtcbiAgICAgIGNvbnRleHQuZm9udCA9IFwibm9ybWFsIDEycHggQXJpYWxcIjtcbiAgICAgIGNvbnRleHQuZmlsbFRleHQoYXhpc19sYWJlbCwgMSwgMCk7XG4gICAgICBjb250ZXh0LnJlc3RvcmUoKTtcblxuICAgICAgLy8gZHJhdyB0aGUgaW5zZXJ0IHJvdyBsYWJlbHNcbiAgICAgIGNvbnRleHQuZmlsbFRleHQoJ29jY3VwYW5jeScsIDU1LCB0aGlzLmluZm9fY29udGVudF9oZWlnaHQgKyA3KTtcbiAgICAgIGlmICh0aGlzLnNob3dfaW5zZXJ0cykge1xuICAgICAgICBjb250ZXh0LmZpbGxUZXh0KCdpbnMuIHByb2IuJywgNTAsIDI4MCk7XG4gICAgICAgIGNvbnRleHQuZmlsbFRleHQoJ2lucy4gbGVuLicsIDQ2LCAyOTYpO1xuICAgICAgfVxuICAgIH1cbn07IFxuIiwidmFyIGNhbnZfc3VwcG9ydCA9IG51bGw7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY2FudmFzU3VwcG9ydCgpIHtcbiAgaWYgKCFjYW52X3N1cHBvcnQpIHtcbiAgICB2YXIgZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgIGNhbnZfc3VwcG9ydCA9ICEhKGVsZW0uZ2V0Q29udGV4dCAmJiBlbGVtLmdldENvbnRleHQoJzJkJykpO1xuICB9XG4gIHJldHVybiBjYW52X3N1cHBvcnQ7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgJ0EnOiAnI0ZGOTk2NicsXG4gICdDJzogJyMwMDk5OTknLFxuICAnRCc6ICcjRkYwMDAwJyxcbiAgJ0UnOiAnI0NDMDAzMycsXG4gICdGJzogJyMwMEZGMDAnLFxuICAnRyc6ICcjZjJmMjBjJyxcbiAgJ0gnOiAnIzY2MDAzMycsXG4gICdJJzogJyNDQzk5MzMnLFxuICAnSyc6ICcjNjYzMzAwJyxcbiAgJ0wnOiAnI0ZGOTkzMycsXG4gICdNJzogJyNDQzk5Q0MnLFxuICAnTic6ICcjMzM2NjY2JyxcbiAgJ1AnOiAnIzAwOTlGRicsXG4gICdRJzogJyM2NjY2Q0MnLFxuICAnUic6ICcjOTkwMDAwJyxcbiAgJ1MnOiAnIzAwMDBGRicsXG4gICdUJzogJyMwMEZGRkYnLFxuICAnVic6ICcjRkZDQzMzJyxcbiAgJ1cnOiAnIzY2Q0M2NicsXG4gICdZJzogJyMwMDY2MDAnXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgJ0EnOiAnI2NiZjc1MScsXG4gICAgJ0MnOiAnIzVlYzBjYycsXG4gICAgJ0cnOiAnI2ZmZGY1OScsXG4gICAgJ1QnOiAnI2I1MWYxNicsXG4gICAgJ1UnOiAnI2I1MWYxNidcbiAgfTtcbiIsInZhciAkID0gcmVxdWlyZShcImpib25lXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCRlbCxsb2dvLCBsb2dvX2dyYXBoaWMpe1xuXG4gICRlbC5maW5kKCcubG9nb19zZXR0aW5nc19zd2l0Y2gsIC5sb2dvX3NldHRpbmdzIC5jbG9zZScpLm9uKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICQoJy5sb2dvX3NldHRpbmdzJykudG9nZ2xlKCk7XG4gIH0pO1xuXG4gICRlbC5maW5kKCcubG9nb19yZXNldCcpLm9uKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGxvZ28uY2hhbmdlWm9vbSh7J3RhcmdldCc6IGxvZ28uZGVmYXVsdF96b29tfSk7XG4gIH0pO1xuXG4gICRlbC5maW5kKCcubG9nb19jaGFuZ2UnKS5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgfSk7XG5cbiAgJGVsLmZpbmQoJy5sb2dvX3pvb21pbicpLm9uKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGxvZ28uY2hhbmdlWm9vbSh7J2Rpc3RhbmNlJzogMC4xLCAnZGlyZWN0aW9uJzogJysnfSk7XG4gIH0pO1xuXG4gICRlbC5maW5kKCcubG9nb196b29tb3V0Jykub24oJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgbG9nby5jaGFuZ2Vab29tKHsnZGlzdGFuY2UnOiAwLjEsICdkaXJlY3Rpb24nOiAnLSd9KTtcbiAgfSk7XG5cbiAgJGVsLmZpbmQoJy5sb2dvX3NjYWxlJykub24oJ2NoYW5nZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgbG9nby50b2dnbGVTY2FsZSh0aGlzLnZhbHVlKTtcbiAgfSk7XG5cbiAgJGVsLmZpbmQoJy5sb2dvX2NvbG9yJykub24oJ2NoYW5nZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgbG9nby50b2dnbGVDb2xvcnNjaGVtZSh0aGlzLnZhbHVlKTtcbiAgfSk7XG5cbiAgJGVsLmZpbmQoJy5sb2dvX2FsaV9tYXAnKS5vbignY2hhbmdlJywgZnVuY3Rpb24gKGUpIHtcbiAgICBsb2dvLnRvZ2dsZUFsaU1hcCh0aGlzLnZhbHVlKTtcbiAgfSk7XG5cbiAgJGVsLmZpbmQoJy5sb2dvX3Bvc2l0aW9uJykub24oJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMudmFsdWUubWF0Y2goL15cXGQrJC9tKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsb2dvLnNjcm9sbFRvQ29sdW1uKHRoaXMudmFsdWUsIDEpO1xuICB9KTtcblxuICBsb2dvX2dyYXBoaWMub24oJ2RibGNsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICAvLyBuZWVkIHRvIGdldCBjb29yZGluYXRlcyBvZiBtb3VzZSBjbGlja1xuICAgIGNvbnNvbGUubG9nKFwiZGJsY2xpY2tcIiwgbG9nbyk7XG5cbiAgICBvZmZzZXQgPSBsb2dvLmxvZ29fZ3JhcGhpYy5vZmZzZXQoKSxcbiAgICB4ID0gcGFyc2VJbnQoKGUucGFnZVggLSBvZmZzZXQubGVmdCksIDEwKSxcblxuICAgIC8vIGdldCBtb3VzZSBwb3NpdGlvbiBpbiB0aGUgd2luZG93XG4gICAgd2luZG93X3Bvc2l0aW9uID0gZS5wYWdlWCAtICRlbC5wYXJlbnQoKS5vZmZzZXQoKS5sZWZ0LFxuXG4gICAgLy8gZ2V0IGNvbHVtbiBudW1iZXJcbiAgICBjb2wgPSBsb2dvLmNvbHVtbkZyb21Db29yZGluYXRlcyh4KSxcblxuICAgIGNvbnNvbGUubG9nKFwiY29sXCIsIGNvbCk7XG5cbiAgICAvLyBjaG9vc2UgbmV3IHpvb20gbGV2ZWwgYW5kIHpvb20gaW4uXG4gICAgY3VycmVudCA9IGxvZ28uem9vbTtcblxuICAgIGlmIChjdXJyZW50IDwgMSkge1xuICAgICAgbG9nby5jaGFuZ2Vab29tKHsndGFyZ2V0JzogMSwgb2Zmc2V0OiB3aW5kb3dfcG9zaXRpb24sIGNvbHVtbjogY29sfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZ28uY2hhbmdlWm9vbSh7J3RhcmdldCc6IDAuMywgb2Zmc2V0OiB3aW5kb3dfcG9zaXRpb24sIGNvbHVtbjogY29sfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9KTtcblxuICAkKGRvY3VtZW50KS5vbigkZWwuYXR0cignaWQnKSArIFwiLnNjcm9sbGVkVG9cIiwgZnVuY3Rpb24gKGUsIGxlZnQsIHRvcCwgem9vbSkge1xuICAgIGxvZ28ucmVuZGVyKHt0YXJnZXQ6IGxlZnR9KTtcbiAgfSk7XG5cbiAgJChkb2N1bWVudCkub24oJ2tleWRvd24nLCBmdW5jdGlvbiAoZSkge1xuICAgIGlmICghZS5jdHJsS2V5KSB7XG4gICAgICBpZiAoZS53aGljaCA9PT0gNjEgfHwgZS53aGljaCA9PT0gMTA3KSB7XG4gICAgICAgIHpvb20gKz0gMC4xO1xuICAgICAgICBsb2dvLmNoYW5nZVpvb20oeydkaXN0YW5jZSc6IDAuMSwgJ2RpcmVjdGlvbic6ICcrJ30pO1xuICAgICAgfVxuICAgICAgaWYgKGUud2hpY2ggPT09IDEwOSB8fCBlLndoaWNoID09PSAwKSB7XG4gICAgICAgIHpvb20gPSB6b29tIC0gMC4xO1xuICAgICAgICBsb2dvLmNoYW5nZVpvb20oeydkaXN0YW5jZSc6IDAuMSwgJ2RpcmVjdGlvbic6ICctJ30pO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG4iLCJfID0gcmVxdWlyZShcInVuZGVyc2NvcmVcIik7XG5cbi8vdmFyIENvbnNlbnN1c0NvbG9ycyA9IHJlcXVpcmUoXCIuL2NvbnNlbnN1c0NvbG9ycy5qc1wiKTtcbnZhciBjYW52YXNTdXBwb3J0ID0gcmVxdWlyZShcIi4vY2FudmFzU3VwcG9ydC5qc1wiKTtcbnZhciByZW5kZXIgPSByZXF1aXJlKFwiLi9yZW5kZXIvcmVuZGVyLmpzXCIpO1xudmFyIExldHRlciA9IHJlcXVpcmUoXCIuL21vZGVsL2xldHRlci5qc1wiKTtcbnZhciB2aWV3ID0gcmVxdWlyZShcImJhY2tib25lLXZpZXdqXCIpO1xudmFyIGF4aXMgPSByZXF1aXJlKFwiLi9heGlzXCIpO1xudmFyIGV2ZW50TGlzdGVuZXIgPSByZXF1aXJlKFwiLi9ldmVudExpc3RlbmVyLmpzXCIpO1xudmFyIHNldHRpbmdzID0gcmVxdWlyZShcIi4vaW5mby9zZXR0aW5ncy5qc1wiKTtcblxudmFyIGpib25lID0gcmVxdWlyZShcImpib25lXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHZpZXcuZXh0ZW5kKHtcblxuICBvcHRpb25zOiB7XG4gICAgeGF4aXM6IHRydWUsXG4gICAgeWF4aXM6IHRydWUsXG4gICAgaGVpZ2h0OiAzMDAsXG4gICAgY29sdW1uX3dpZHRoOiAzNCxcbiAgICBkZWJ1ZzogdHJ1ZSxcbiAgICBzY2FsZV9oZWlnaHRfZW5hYmxlZDogdHJ1ZSxcbiAgICBzY2FsZWRfbWF4OiB0cnVlLFxuICAgIHpvb21fYnV0dG9uczogdHJ1ZSxcbiAgICBjb2xvcnNjaGVtZTogJ2RlZmF1bHQnLFxuICAgIGRhdGE6IHVuZGVmaW5lZCxcbiAgICBzdGFydDogMSxcbiAgICBlbmQ6IHVuZGVmaW5lZCxcbiAgICB6b29tOiAwLjQsXG4gICAgY29sb3JzOiB1bmRlZmluZWQsXG4gICAgZGl2aWRlcjogZmFsc2UsXG4gICAgc2hvd19wcm9iczogZmFsc2UsXG4gICAgZGl2aWRlcl9zdGVwOiA1LFxuICAgIHNob3dfZGl2aWRlcjogZmFsc2UsXG4gICAgYm9yZGVyOiBmYWxzZSxcbiAgICBzZXR0aW5nczogZmFsc2UsXG4gICAgc2Nyb2xsZXI6IHRydWUsXG4gICAgcG9zaXRpb25NYXJrZXI6IHRydWVcbiAgfSxcblxuICBsb2FkRGVmYXVsdDogZnVuY3Rpb24ob3B0aW9ucyl7XG4gICAgdGhpcy5kYXRhID0gb3B0aW9ucy5kYXRhO1xuXG4gICAgLy8gbmV2ZXIgc2hvdyB0aGUgYWxpZ25tZW50IGNvb3JkaW5hdGVzIGJ5IGRlZmF1bHQgYXMgdGhhdCB3b3VsZCBnZXRcbiAgICAvLyByZWFsbHkgY29uZnVzaW5nLlxuICAgIHRoaXMuZGlzcGxheV9hbGlfbWFwID0gMDtcblxuICAgIHRoaXMuYWxwaGFiZXQgPSBvcHRpb25zLmRhdGEuYWxwaGFiZXQgfHwgJ2RuYSc7XG5cbiAgICB0aGlzLnN0YXJ0ID0gb3B0aW9ucy5zdGFydDtcbiAgICAvL3RoaXMuZW5kID0gb3B0aW9ucy5lbmQgfHwgdGhpcy5kYXRhLmhlaWdodEFyci5sZW5ndGg7XG4gICAgdGhpcy56b29tID0gcGFyc2VGbG9hdChvcHRpb25zLnpvb20pIHx8IDAuNDtcbiAgICB0aGlzLmRlZmF1bHRfem9vbSA9IHRoaXMuem9vbTtcblxuICAgIHRoaXMuY29sdW1uX3dpZHRoID0gb3B0aW9ucy5jb2x1bW5fd2lkdGg7XG4gICAgdGhpcy5oZWlnaHQgPSBvcHRpb25zLmhlaWdodDtcbiAgICB0aGlzLmNhbnZhc193aWR0aCA9IDUwMDA7XG4gICAgdGhpcy5zY2FsZV9oZWlnaHRfZW5hYmxlZCA9IG9wdGlvbnMuc2NhbGVfaGVpZ2h0X2VuYWJsZWQ7XG5cbiAgICAvLyB0aGlzIG5lZWRzIHRvIGJlIHNldCB0byBudWxsIGhlcmUgc28gdGhhdCB3ZSBjYW4gaW5pdGlhbGlzZSBpdCBhZnRlclxuICAgIC8vIHRoZSByZW5kZXIgZnVuY3Rpb24gaGFzIGZpcmVkIGFuZCB0aGUgd2lkdGggZGV0ZXJtaW5lZC5cbiAgICB0aGlzLnNjcm9sbG1lID0gbnVsbDtcblxuICAgIHRoaXMucHJldmlvdXNfdGFyZ2V0ID0gMDtcbiAgICAvLyBrZWVwcyB0cmFjayBvZiB3aGljaCBjYW52YXMgZWxlbWVudHMgaGF2ZSBiZWVuIGRyYXduIGFuZCB3aGljaCBvbmVzIGhhdmVuJ3QuXG4gICAgdGhpcy5yZW5kZXJlZCA9IFtdO1xuICAgIHRoaXMucHJldmlvdXNfem9vbSA9IDA7XG5cbiAgICBpZih0aGlzLmRhdGEubWF4X2hlaWdodCA9PSB1bmRlZmluZWQpe1xuICAgICAgdGhpcy5kYXRhLm1heF9oZWlnaHQgPSB0aGlzLmNhbGNNYXhIZWlnaHQodGhpcy5kYXRhLmhlaWdodEFycik7IFxuICAgIH1cblxuICAgIC8vIG9ubHkgc2hvdyBpbnNlcnQgd2hlbiB3ZSBhY3R1YWxseSBoYXZlIHRoZSBkYXRhXG4gICAgaWYoIXRoaXMuZGF0YS5pbnNlcnRfcHJvYnMgfHwgIXRoaXMuZGF0YS5kZWxldGVfcHJvYnMpe1xuICAgICAgdGhpcy5vcHRpb25zLnNob3dfcHJvYnMgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5zY2FsZWRfbWF4KSB7XG4gICAgICB0aGlzLmRhdGEubWF4X2hlaWdodCA9IG9wdGlvbnMuZGF0YS5tYXhfaGVpZ2h0X29icyB8fCB0aGlzLmRhdGEubWF4X2hlaWdodCB8fCAyO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRhdGEubWF4X2hlaWdodCA9IG9wdGlvbnMuZGF0YS5tYXhfaGVpZ2h0X3RoZW9yeSB8fCB0aGlzLmRhdGEubWF4X2hlaWdodCB8fCAyO1xuICAgIH1cblxuICAgIGlmKG9wdGlvbnMuY29sb3JzKXtcbiAgICAgIHRoaXMuY2hhbmdlQ29sb3JzKG9wdGlvbnMuY29sb3JzKTtcbiAgICB9ZWxzZXtcbiAgICAgIGlmICh0aGlzLmFscGhhYmV0ID09PSAnYWEnKSB7XG4gICAgICAgIHRoaXMuYWFfY29sb3JzID0gcmVxdWlyZShcIi4vY29sb3JzL2FhLmpzXCIpO1xuICAgICAgICB0aGlzLmNoYW5nZUNvbG9ycyh0aGlzLmFhX2NvbG9ycyk7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgdGhpcy5kbmFfY29sb3JzID0gcmVxdWlyZShcIi4vY29sb3JzL2RuYS5qc1wiKTtcbiAgICAgICAgdGhpcy5jaGFuZ2VDb2xvcnModGhpcy5kbmFfY29sb3JzKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICBpZiAoIWNhbnZhc1N1cHBvcnQoKSkge1xuICAgICAgdGhpcy5lbC50ZXh0Q29udGVudCA9IFwiWW91ciBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBjYW52YXMuXCI7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmKG9wdGlvbnMuZGF0YSA9PSB1bmRlZmluZWQpe1xuICAgICAgdGhpcy5lbC50ZXh0Q29udGVudCA9IFwiTm8gZGF0YSBhZGRlZC5cIjtcbiAgICB9XG5cbiAgICAvLyBsb2FkIGRlZmF1bHQgc2V0dGluZ3NcbiAgICBfLmV4dGVuZCh0aGlzLm9wdGlvbnMsb3B0aW9ucyk7XG4gICAgdmFyIG9wdCA9IHRoaXMub3B0aW9ucztcbiAgICB0aGlzLmxvYWREZWZhdWx0KG9wdCk7XG5cbiAgICBpZighdGhpcy5vcHRpb25zLnNob3dfcHJvYnMpe1xuICAgICAgdGhpcy5pbmZvX2NvbnRlbnRfaGVpZ2h0ID0gdGhpcy5oZWlnaHQ7XG4gICAgfWVsc2V7XG4gICAgICAvLyB0dXJuIG9mZiB0aGUgaW5zZXJ0IHJvd3MgaWYgdGhlIGhtbSB1c2VkIHRoZSBvYnNlcnZlZCBvciB3ZWlnaHRlZCBwcm9jZXNzaW5nIGZsYWdzLlxuICAgICAgaWYgKHRoaXMuZGF0YS5wcm9jZXNzaW5nICYmIC9eb2JzZXJ2ZWR8d2VpZ2h0ZWQvLnRlc3QodGhpcy5kYXRhLnByb2Nlc3NpbmcpKSB7XG4gICAgICAgIHRoaXMuc2hvd19pbnNlcnRzID0gMDtcbiAgICAgICAgdGhpcy5pbmZvX2NvbnRlbnRfaGVpZ2h0ID0gdGhpcy5oZWlnaHQgLSAxNDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2hvd19pbnNlcnRzID0gMTtcbiAgICAgICAgdGhpcy5pbmZvX2NvbnRlbnRfaGVpZ2h0ID0gdGhpcy5oZWlnaHQgLSA0NDtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy4kZWwgPSBqYm9uZSh0aGlzLmVsKTtcblxuICAgIHRoaXMuaW5pdERpdnMoKTtcblxuICAgIGlmKHRoaXMub3B0aW9ucy5zZXR0aW5ncyl7XG4gICAgICB2YXIgZm9ybSA9IHNldHRpbmdzKHRoaXMsb3B0KTtcbiAgICAgIHRoaXMuJGVsLmFwcGVuZChmb3JtKTtcbiAgICB9XG5cbiAgICBldmVudExpc3RlbmVyKHRoaXMuJGVsLHRoaXMsIHRoaXMubG9nb19ncmFwaGljKTtcbiAgICAvKlxuICAgICAgIGlmIChvcHQuY29sdW1uSW5mbykge1xuICAgICAgIHZhciBjb2x1bW5JbmZvID0gcmVxdWlyZShcIi4vaW5mby9jb2x1bW5faW5mby5qc1wiKTtcbiAgICAgICBjb2x1bW5JbmZvKHRoaXMpO1xuICAgICAgIH1cbiAgICAgICAqL1xuXG4gIH0sXG4gIGluaXREaXZzOiBmdW5jdGlvbigpe1xuICAgIHZhciBsb2dvX2dyYXBoaWMgPSBtayhcImRpdlwiKTtcbiAgICBsb2dvX2dyYXBoaWMuY2xhc3NOYW1lID0gXCJsb2dvX2dyYXBoaWNcIjtcbiAgICB0aGlzLmxvZ29fZ3JhcGhpYyA9IGpib25lKGxvZ29fZ3JhcGhpYyk7XG5cbiAgICB2YXIgY29udGFpbmVyID0gbWsoXCJkaXZcIik7XG4gICAgY29udGFpbmVyLmNsYXNzTmFtZSA9IFwibG9nb19jb250YWluZXJcIjtcbiAgICBjb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gdGhpcy5oZWlnaHQ7XG4gICAgdGhpcy5jb250YWluZXIgPSBqYm9uZShjb250YWluZXIpO1xuXG4gICAgdGhpcy5jb250YWluZXIuYXBwZW5kKGxvZ29fZ3JhcGhpYyk7XG5cbiAgICAvLyBhZGQgc29tZSBpbnRlcm5hbCBkaXZzIGZvciBzY3JvbGxpbmcgZXRjLlxuICAgIHRoaXMuJGVsLmFwcGVuZChjb250YWluZXIpO1xuXG4gICAgaWYodGhpcy5vcHRpb25zLmRpdmlkZXIpe1xuICAgICAgdmFyIGRpdmlkZXIgPSBtayhcImRpdlwiKTtcbiAgICAgIGRpdmlkZXIuY2xhc3NOYW1lID0gXCJsb2dvX2RpdmlkZXJcIjtcbiAgICAgIHRoaXMuJGVsLmFwcGVuZChkaXZpZGVyKTtcbiAgICB9XG5cbiAgICB0aGlzLmRvbV9lbGVtZW50ID0gamJvbmUobG9nb19ncmFwaGljKTtcbiAgICB0aGlzLmNhbGxlZF9vbiA9IHRoaXMuJGVsO1xuXG4gICAgaWYodGhpcy5vcHRpb25zLnhheGlzKXtcbiAgICAgIGF4aXMucmVuZGVyX3hfYXhpc19sYWJlbC5jYWxsKHRoaXMpO1xuICAgIH1cbiAgICBpZih0aGlzLm9wdGlvbnMueWF4aXMpe1xuICAgICAgYXhpcy5yZW5kZXJfeV9heGlzX2xhYmVsLmNhbGwodGhpcyk7XG4gICAgfWVsc2V7XG4gICAgICB0aGlzLmNvbnRhaW5lclswXS5zdHlsZS5tYXJnaW5MZWZ0ID0gXCIwcHhcIjtcbiAgICB9XG5cbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uKCl7XG4gICAgcmVuZGVyLmNhbGwodGhpcyk7IFxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIGNoYW5nZUNvbG9yczogZnVuY3Rpb24oY29sb3JzKXtcbiAgICB0aGlzLmNvbG9ycyA9IGNvbG9ycztcbiAgICB2YXIgYlVzZUNvbG9yT2JqZWN0ID0gKGNvbG9ycyAhPSB1bmRlZmluZWQgJiYgY29sb3JzLnR5cGUgIT0gdW5kZWZpbmVkKTtcbiAgICBpZihiVXNlQ29sb3JPYmplY3Qpe1xuICAgICAgdGhpcy5jb2xvcnNjaGVtZSA9IFwiZHluYW1pY1wiO1xuICAgIH1cbiAgICB0aGlzLmJ1aWxkQWxwaGFiZXQoKTtcbiAgfSxcblxuICBidWlsZEFscGhhYmV0OiBmdW5jdGlvbigpe1xuICAgIC8qXG4gICAgICAgaWYgKHRoaXMuYWxwaGFiZXQgPT09ICdhYScpIHtcbiAgICAgICB2YXIgcHJvYnNfYXJyID0gdGhpcy5kYXRhLnByb2JzX2FycjtcbiAgICAgICBpZiAocHJvYnNfYXJyKSB7XG4gICAgICAgdmFyIGNjID0gbmV3IENvbnNlbnN1c0NvbG9ycygpO1xuICAgICAgIHRoaXMuY21hcCA9IGNjLmNvbG9yX21hcChwcm9ic19hcnIpO1xuICAgICAgIH1cbiAgICAgICB9XG4gICAgICAgKi9cblxuICAgIC8vYnVpbGQgdGhlIGxldHRlciBjYW52YXNlc1xuICAgIHRoaXMubGV0dGVycyA9IHt9O1xuICAgIHZhciBjb2xvcnMgPSB0aGlzLmNvbG9ycztcbiAgICBpZih0aGlzLmNvbG9yc2NoZW1lID09IFwiZHluYW1pY1wiKXtcbiAgICAgIHZhciB0Q29sb3JzID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWlwiLnNwbGl0KCcnKTtcbiAgICAgIGNvbG9ycyA9IHt9O1xuICAgICAgdENvbG9ycy5mb3JFYWNoKGZ1bmN0aW9uKGUpe1xuICAgICAgICBjb2xvcnNbZV0gPSBcIlwiO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZvciAodmFyIGxldHRlciBpbiBjb2xvcnMpIHtcbiAgICAgIGlmIChjb2xvcnMuaGFzT3duUHJvcGVydHkobGV0dGVyKSkge1xuICAgICAgICB2YXIgbG9wdGlvbnMgPSB7Y29sb3I6IGNvbG9yc1tsZXR0ZXJdfTtcbiAgICAgICAgdGhpcy5sZXR0ZXJzW2xldHRlcl0gPSBuZXcgTGV0dGVyKGxldHRlciwgbG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICB0b2dnbGVDb2xvcnNjaGVtZTogZnVuY3Rpb24gKHNjaGVtZSkge1xuICAgIC8vIHdvcmsgb3V0IHRoZSBjdXJyZW50IGNvbHVtbiB3ZSBhcmUgb24gc28gd2UgY2FuIHJldHVybiB0aGVyZVxuICAgIHZhciBjb2xfdG90YWwgPSB0aGlzLmN1cnJlbnRDb2x1bW4oKTtcblxuICAgIGlmIChzY2hlbWUpIHtcbiAgICAgIGlmIChzY2hlbWUgPT09ICdkZWZhdWx0Jykge1xuICAgICAgICB0aGlzLmNvbG9yc2NoZW1lID0gJ2RlZmF1bHQnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jb2xvcnNjaGVtZSA9ICdjb25zZW5zdXMnO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5jb2xvcnNjaGVtZSA9PT0gJ2RlZmF1bHQnKSB7XG4gICAgICAgIHRoaXMuY29sb3JzY2hlbWUgPSAnY29uc2Vuc3VzJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY29sb3JzY2hlbWUgPSAnZGVmYXVsdCc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gcmVzZXQgdGhlIHJlbmRlcmVkIGNvdW50ZXIgc28gdGhhdCBlYWNoIHNlY3Rpb24gd2lsbCByZS1yZW5kZXJcbiAgICAvLyB3aXRoIHRoZSBuZXcgaGVpZ2h0c1xuICAgIHRoaXMucmVuZGVyZWQgPSBbXTtcblxuICAgIC8vIHJlLWZsb3cgYW5kIHJlLXJlbmRlciB0aGUgY29udGVudFxuICAgIHRoaXMuc2Nyb2xsbWUucmVmbG93KCk7XG4gICAgLy9zY3JvbGwgb2ZmIGJ5IG9uZSB0byBmb3JjZSBhIHJlbmRlciBvZiB0aGUgY2FudmFzLlxuICAgIHRoaXMuc2Nyb2xsVG9Db2x1bW4oY29sX3RvdGFsICsgMSk7XG4gICAgLy9zY3JvbGwgYmFjayB0byB0aGUgbG9jYXRpb24gd2Ugc3RhcnRlZCBhdC5cbiAgICB0aGlzLnNjcm9sbFRvQ29sdW1uKGNvbF90b3RhbCk7XG4gIH0sXG5cbiAgdG9nZ2xlU2NhbGU6IGZ1bmN0aW9uIChzY2FsZSkge1xuICAgIC8vIHdvcmsgb3V0IHRoZSBjdXJyZW50IGNvbHVtbiB3ZSBhcmUgb24gc28gd2UgY2FuIHJldHVybiB0aGVyZVxuICAgIHZhciBjb2xfdG90YWwgPSB0aGlzLmN1cnJlbnRDb2x1bW4oKTtcblxuICAgIGlmIChzY2FsZSkge1xuICAgICAgaWYgKHNjYWxlID09PSAnb2JzJykge1xuICAgICAgICB0aGlzLmRhdGEubWF4X2hlaWdodCA9IHRoaXMuZGF0YS5tYXhfaGVpZ2h0X29icztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZGF0YS5tYXhfaGVpZ2h0ID0gdGhpcy5kYXRhLm1heF9oZWlnaHRfdGhlb3J5O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyB0b2dnbGUgdGhlIG1heCBoZWlnaHRcbiAgICAgIGlmICh0aGlzLmRhdGEubWF4X2hlaWdodCA9PT0gdGhpcy5kYXRhLm1heF9oZWlnaHRfb2JzKSB7XG4gICAgICAgIHRoaXMuZGF0YS5tYXhfaGVpZ2h0ID0gdGhpcy5kYXRhLm1heF9oZWlnaHRfdGhlb3J5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kYXRhLm1heF9oZWlnaHQgPSB0aGlzLmRhdGEubWF4X2hlaWdodF9vYnM7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIHJlc2V0IHRoZSByZW5kZXJlZCBjb3VudGVyIHNvIHRoYXQgZWFjaCBzZWN0aW9uIHdpbGwgcmUtcmVuZGVyXG4gICAgLy8gd2l0aCB0aGUgbmV3IGhlaWdodHNcbiAgICB0aGlzLnJlbmRlcmVkID0gW107XG4gICAgLy91cGRhdGUgdGhlIHktYXhpc1xuICAgIGlmKHRoaXMubG9nb1lBeGlzKXtcbiAgICAgIHRoaXMubG9nb1lBeGlzLnJlbW92ZSgpO1xuICAgICAgLy90aGlzLmNhbGxlZF9vbi5maW5kKCcubG9nb195YXhpcycpLnJlbW92ZSgpO1xuICAgIH1cbiAgICBheGlzLnJlbmRlcl95X2F4aXNfbGFiZWwuY2FsbCh0aGlzKTtcblxuICAgIC8vIHJlLWZsb3cgYW5kIHJlLXJlbmRlciB0aGUgY29udGVudFxuICAgIHRoaXMuc2Nyb2xsbWUucmVmbG93KCk7XG4gICAgLy9zY3JvbGwgb2ZmIGJ5IG9uZSB0byBmb3JjZSBhIHJlbmRlciBvZiB0aGUgY2FudmFzLlxuICAgIHRoaXMuc2Nyb2xsVG9Db2x1bW4oY29sX3RvdGFsICsgMSk7XG4gICAgLy9zY3JvbGwgYmFjayB0byB0aGUgbG9jYXRpb24gd2Ugc3RhcnRlZCBhdC5cbiAgICB0aGlzLnNjcm9sbFRvQ29sdW1uKGNvbF90b3RhbCk7XG4gIH0sXG4gIHRvZ2dsZUFsaU1hcDogZnVuY3Rpb24gKGNvb3Jkcykge1xuICAgIC8vIHdvcmsgb3V0IHRoZSBjdXJyZW50IGNvbHVtbiB3ZSBhcmUgb24gc28gd2UgY2FuIHJldHVybiB0aGVyZVxuICAgIHZhciBjb2xfdG90YWwgPSB0aGlzLmN1cnJlbnRDb2x1bW4oKTtcblxuICAgIGlmIChjb29yZHMpIHtcbiAgICAgIGlmIChjb29yZHMgPT09ICdtb2RlbCcpIHtcbiAgICAgICAgdGhpcy5kaXNwbGF5X2FsaV9tYXAgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kaXNwbGF5X2FsaV9tYXAgPSAxO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyB0b2dnbGUgdGhlIG1heCBoZWlnaHRcbiAgICAgIGlmICh0aGlzLmRpc3BsYXlfYWxpX21hcCA9PT0gMSkge1xuICAgICAgICB0aGlzLmRpc3BsYXlfYWxpX21hcCA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmRpc3BsYXlfYWxpX21hcCA9IDE7XG4gICAgICB9XG4gICAgfVxuICAgIGF4aXMucmVuZGVyX3hfYXhpc19sYWJlbCh0aGlzKTtcblxuICAgIC8vIHJlc2V0IHRoZSByZW5kZXJlZCBjb3VudGVyIHNvIHRoYXQgZWFjaCBzZWN0aW9uIHdpbGwgcmUtcmVuZGVyXG4gICAgLy8gd2l0aCB0aGUgbmV3IGhlaWdodHNcbiAgICB0aGlzLnJlbmRlcmVkID0gW107XG5cbiAgICAvLyByZS1mbG93IGFuZCByZS1yZW5kZXIgdGhlIGNvbnRlbnRcbiAgICB0aGlzLnNjcm9sbG1lLnJlZmxvdygpO1xuICAgIC8vc2Nyb2xsIG9mZiBieSBvbmUgdG8gZm9yY2UgYSByZW5kZXIgb2YgdGhlIGNhbnZhcy5cbiAgICB0aGlzLnNjcm9sbFRvQ29sdW1uKGNvbF90b3RhbCArIDEpO1xuICAgIC8vc2Nyb2xsIGJhY2sgdG8gdGhlIGxvY2F0aW9uIHdlIHN0YXJ0ZWQgYXQuXG4gICAgdGhpcy5zY3JvbGxUb0NvbHVtbihjb2xfdG90YWwpO1xuICB9LFxuXG4gIGN1cnJlbnRDb2x1bW46IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYmVmb3JlX2xlZnQgPSB0aGlzLnNjcm9sbG1lLnNjcm9sbGVyLmdldFZhbHVlcygpLmxlZnQsXG4gICAgY29sX3dpZHRoID0gKHRoaXMuY29sdW1uX3dpZHRoICogdGhpcy56b29tKSxcbiAgICBjb2xfY291bnQgPSBiZWZvcmVfbGVmdCAvIGNvbF93aWR0aCxcbiAgICBoYWxmX3Zpc2libGVfY29sdW1ucyA9ICh0aGlzLmNvbnRhaW5lci53aWR0aCgpIC8gY29sX3dpZHRoKSAvIDIsXG4gICAgY29sX3RvdGFsID0gTWF0aC5jZWlsKGNvbF9jb3VudCArIGhhbGZfdmlzaWJsZV9jb2x1bW5zKTtcbiAgICByZXR1cm4gY29sX3RvdGFsO1xuICB9LFxuXG4gIGNoYW5nZVpvb206IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgdmFyIHpvb21fbGV2ZWwgPSAwLjMsXG4gICAgZXhwZWN0ZWRfd2lkdGggPSBudWxsO1xuICAgIGlmIChvcHRpb25zLnRhcmdldCkge1xuICAgICAgem9vbV9sZXZlbCA9IG9wdGlvbnMudGFyZ2V0O1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5kaXN0YW5jZSkge1xuICAgICAgem9vbV9sZXZlbCA9IChwYXJzZUZsb2F0KHRoaXMuem9vbSkgLSBwYXJzZUZsb2F0KG9wdGlvbnMuZGlzdGFuY2UpKS50b0ZpeGVkKDEpO1xuICAgICAgaWYgKG9wdGlvbnMuZGlyZWN0aW9uID09PSAnKycpIHtcbiAgICAgICAgem9vbV9sZXZlbCA9IChwYXJzZUZsb2F0KHRoaXMuem9vbSkgKyBwYXJzZUZsb2F0KG9wdGlvbnMuZGlzdGFuY2UpKS50b0ZpeGVkKDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh6b29tX2xldmVsID4gMSkge1xuICAgICAgem9vbV9sZXZlbCA9IDE7XG4gICAgfSBlbHNlIGlmICh6b29tX2xldmVsIDwgMC4xKSB7XG4gICAgICB6b29tX2xldmVsID0gMC4xO1xuICAgIH1cblxuICAgIC8vIHNlZSBpZiB3ZSBuZWVkIHRvIHpvb20gb3Igbm90XG4gICAgZXhwZWN0ZWRfd2lkdGggPSAodGhpcy5sb2dvX2dyYXBoaWMud2lkdGgoKSAqIHpvb21fbGV2ZWwpIC8gdGhpcy56b29tO1xuICAgIGlmIChleHBlY3RlZF93aWR0aCA+IHRoaXMuY29udGFpbmVyLndpZHRoKCkpIHtcbiAgICAgIC8vIGlmIGEgY2VudGVyIGlzIG5vdCBzcGVjaWZpZWQsIHRoZW4gdXNlIHRoZSBjdXJyZW50IGNlbnRlciBvZiB0aGUgdmlld1xuICAgICAgaWYgKCFvcHRpb25zLmNvbHVtbikge1xuICAgICAgICAvL3dvcmsgb3V0IG15IGN1cnJlbnQgcG9zaXRpb25cbiAgICAgICAgdmFyIGNvbF90b3RhbCA9IHRoaXMuY3VycmVudENvbHVtbigpO1xuXG4gICAgICAgIHRoaXMuem9vbSA9IHpvb21fbGV2ZWw7XG4gICAgICAgIHRoaXMucmVuZGVyKHt6b29tOiB0aGlzLnpvb219KTtcbiAgICAgICAgdGhpcy5zY3JvbGxtZS5yZWZsb3coKTtcblxuICAgICAgICAvL3Njcm9sbCB0byBwcmV2aW91cyBwb3NpdGlvblxuICAgICAgICB0aGlzLnNjcm9sbFRvQ29sdW1uKGNvbF90b3RhbCk7XG4gICAgICB9IGVsc2UgeyAvLyBjZW50ZXIgYXJvdW5kIHRoZSBtb3VzZSBjbGljayBwb3NpdGlvbi5cbiAgICAgICAgdGhpcy56b29tID0gem9vbV9sZXZlbDtcbiAgICAgICAgdGhpcy5yZW5kZXIoe3pvb206IHRoaXMuem9vbX0pO1xuICAgICAgICB0aGlzLnNjcm9sbG1lLnJlZmxvdygpO1xuXG4gICAgICAgIHZhciBjb29yZHMgPSB0aGlzLmNvb3JkaW5hdGVzRnJvbUNvbHVtbihvcHRpb25zLmNvbHVtbik7XG4gICAgICAgIHRoaXMuc2Nyb2xsbWUuc2Nyb2xsZXIuc2Nyb2xsVG8oY29vcmRzIC0gb3B0aW9ucy5vZmZzZXQpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy56b29tO1xuXG4gIH0sXG5cbiAgY29sdW1uRnJvbUNvb3JkaW5hdGVzOiBmdW5jdGlvbiAoeCkge1xuICAgIHZhciBjb2x1bW4gPSBNYXRoLmNlaWwoeCAvICh0aGlzLmNvbHVtbl93aWR0aCAqIHRoaXMuem9vbSkpO1xuICAgIHJldHVybiBjb2x1bW47XG4gIH0sXG5cbiAgY29vcmRpbmF0ZXNGcm9tQ29sdW1uOiBmdW5jdGlvbiAoY29sKSB7XG4gICAgdmFyIG5ld19jb2x1bW4gPSBjb2wgLSAxLFxuICAgIHggPSAobmV3X2NvbHVtbiAgKiAodGhpcy5jb2x1bW5fd2lkdGggKiB0aGlzLnpvb20pKSArICgodGhpcy5jb2x1bW5fd2lkdGggKiB0aGlzLnpvb20pIC8gMik7XG4gICAgcmV0dXJuIHg7XG4gIH0sXG5cbiAgc2Nyb2xsVG9Db2x1bW46IGZ1bmN0aW9uIChudW0sIGFuaW1hdGUpIHtcbiAgICB2YXIgaGFsZl92aWV3ID0gKHRoaXMubG9nb19jb250YWluZXIud2lkdGgoKSAvIDIpLFxuICAgIG5ld19sZWZ0ID0gdGhpcy5jb29yZGluYXRlc0Zyb21Db2x1bW4obnVtKTtcbiAgICB0aGlzLnNjcm9sbG1lLnNjcm9sbGVyLnNjcm9sbFRvKG5ld19sZWZ0IC0gaGFsZl92aWV3LCAwLCBhbmltYXRlKTtcbiAgfSxcbiAgY2FsY01heEhlaWdodDogZnVuY3Rpb24oY29sdW1ucyl7XG4gICAgLy8gbG9vcHMgb3ZlciBhbGwgY29sdW1ucyBhbmQgcmV0dXJuIHRoZSBtYXggaGVpZ2h0IHNlZW4gXG4gICAgcmV0dXJuIGNvbHVtbnMucmVkdWNlKGZ1bmN0aW9uKG0sYyl7XG4gICAgICB2YXIgY29sID0gMDtcbiAgICAgIGZvcih2YXIgayBpbiBjKXtcbiAgICAgICAgY29sICs9IGNba107XG4gICAgICB9XG4gICAgICByZXR1cm4gY29sID4gbSA/IGNvbCA6IG07XG4gICAgfSwwKTtcbiAgfVxuXG5cbn0pO1xuXG52YXIgbWsgPSBmdW5jdGlvbihuYW1lKXtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobmFtZSk7XG59XG4iLCJ2YXIgJCA9IHJlcXVpcmUoXCJqYm9uZVwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsb2dvLG9wdGlvbnMpe1xuICB2YXIgZm9ybSA9ICQoJzxmb3JtIGNsYXNzPVwibG9nb19mb3JtXCI+PGZpZWxkc2V0PjxsYWJlbCBmb3I9XCJwb3NpdGlvblwiPkNvbHVtbiBudW1iZXI8L2xhYmVsPicgK1xuICAgICAgICAgICAgICAgJzxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJwb3NpdGlvblwiIGNsYXNzPVwibG9nb19wb3NpdGlvblwiPjwvaW5wdXQ+JyArXG4gICAgICAgICAgICAgICAnPGJ1dHRvbiBjbGFzcz1cImJ1dHRvbiBsb2dvX2NoYW5nZVwiPkdvPC9idXR0b24+PC9maWVsZHNldD4nICtcbiAgICAgICAgICAgICAgICc8L2Zvcm0+Jyk7XG5cbiAgdmFyIHNldHRpbmdzID0gJCgnPGRpdiBjbGFzcz1cImxvZ29fc2V0dGluZ3NcIj48L2Rpdj4nKTtcbiAgc2V0dGluZ3MuYXBwZW5kKCc8c3BhbiBjbGFzcz1cImNsb3NlXCI+eDwvc3Bhbj4nKTtcblxuXG5cbiAgLyogd2UgZG9uJ3Qgd2FudCB0byB0b2dnbGUgaWYgdGhlIG1heCBoZWlnaHRfb2JzIGlzIGdyZWF0ZXIgdGhhbiBtYXggdGhlb3JldGljYWxcbiAgICogYXMgbGV0dGVycyB3aWxsIGZhbGwgb2ZmIHRoZSB0b3AuXG4gICAqL1xuICBpZiAobG9nby5zY2FsZV9oZWlnaHRfZW5hYmxlZCAmJiAobG9nby5kYXRhLm1heF9oZWlnaHRfb2JzIDwgbG9nby5kYXRhLm1heF9oZWlnaHRfdGhlb3J5KSkge1xuICAgIHZhciBvYnNfY2hlY2tlZCA9ICcnLFxuICAgIHRoZW9yeV9jaGVja2VkID0gJycsXG4gICAgdGhlb3J5X2hlbHAgPSAnJyxcbiAgICBvYnNfaGVscCA9ICcnO1xuXG4gICAgaWYgKGxvZ28uZGF0YS5tYXhfaGVpZ2h0X29icyA9PT0gbG9nby5kYXRhLm1heF9oZWlnaHQpIHtcbiAgICAgIG9ic19jaGVja2VkID0gJ2NoZWNrZWQnO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGVvcnlfY2hlY2tlZCA9ICdjaGVja2VkJztcbiAgICB9XG4gIH1cblxuXG5cbiAgdmFyIHNjYWxlX2NvbnRyb2xzID0gJzxmaWVsZHNldD48bGVnZW5kPlNjYWxlPC9sZWdlbmQ+JyArXG4gICAgJzxsYWJlbD48aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cInNjYWxlXCIgY2xhc3M9XCJsb2dvX3NjYWxlXCIgdmFsdWU9XCJvYnNcIiAnICsgb2JzX2NoZWNrZWQgK1xuICAgICcvPk1heGltdW0gT2JzZXJ2ZWQgJyArIG9ic19oZWxwICtcbiAgICAnPC9sYWJlbD48L2JyPicgK1xuICAgICc8bGFiZWw+PGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJzY2FsZVwiIGNsYXNzPVwibG9nb19zY2FsZVwiIHZhbHVlPVwidGhlb3J5XCIgJyArIHRoZW9yeV9jaGVja2VkICtcbiAgICAnLz5NYXhpbXVtIFRoZW9yZXRpY2FsICcgKyB0aGVvcnlfaGVscCArXG4gICAgJzwvbGFiZWw+JyArXG4gICAgJzwvZmllbGRzZXQ+JztcblxuICBzZXR0aW5ncy5hcHBlbmQoc2NhbGVfY29udHJvbHMpO1xuXG4gIGlmIChsb2dvLmRhdGEuaGVpZ2h0X2NhbGMgIT09ICdzY29yZScgJiYgbG9nby5kYXRhLmFscGhhYmV0ID09PSAnYWEnICYmIGxvZ28uZGF0YS5wcm9ic19hcnIpIHtcblxuICAgIHZhciBkZWZfY29sb3IgPSBudWxsLFxuICAgIGNvbl9jb2xvciA9IG51bGwsXG4gICAgZGVmX2hlbHAgPSAnJyxcbiAgICBjb25faGVscCA9ICcnO1xuXG4gICAgaWYgKGxvZ28uY29sb3JzY2hlbWUgPT09ICdkZWZhdWx0Jykge1xuICAgICAgZGVmX2NvbG9yID0gJ2NoZWNrZWQnO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25fY29sb3IgPSAnY2hlY2tlZCc7XG4gICAgfTtcblxuICAgIGlmIChvcHRpb25zLmhlbHApIHtcbiAgICAgIGRlZl9oZWxwID0gJzxhIGNsYXNzPVwiaGVscFwiIGhyZWY9XCIvaGVscCNjb2xvcnNfZGVmYXVsdFwiIHRpdGxlPVwiRWFjaCBsZXR0ZXIgcmVjZWl2ZXMgaXRzIG93biBjb2xvci5cIj4nICtcbiAgICAgICAgJzxzcGFuIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIGRhdGEtaWNvbj1cIj9cIj48L3NwYW4+PHNwYW4gY2xhc3M9XCJyZWFkZXItdGV4dFwiPmhlbHA8L3NwYW4+PC9hPic7XG4gICAgICBjb25faGVscCA9ICc8YSBjbGFzcz1cImhlbHBcIiBocmVmPVwiL2hlbHAjY29sb3JzX2NvbnNlbnN1c1wiIHRpdGxlPVwiTGV0dGVycyBhcmUgY29sb3JlZCBhcyBpbiBDbHVzdGFseCBhbmQgSmFsdmlldywgd2l0aCBjb2xvcnMgZGVwZW5kaW5nIG9uIGNvbXBvc2l0aW9uIG9mIHRoZSBjb2x1bW4uXCI+JyArXG4gICAgICAgICc8c3BhbiBhcmlhLWhpZGRlbj1cInRydWVcIiBkYXRhLWljb249XCI/XCI+PC9zcGFuPjxzcGFuIGNsYXNzPVwicmVhZGVyLXRleHRcIj5oZWxwPC9zcGFuPjwvYT4nO1xuICAgIH1cblxuICAgIHZhciBjb2xvcl9jb250cm9scyA9ICc8ZmllbGRzZXQ+PGxlZ2VuZD5Db2xvciBTY2hlbWU8L2xlZ2VuZD4nICtcbiAgICAgICc8bGFiZWw+PGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJjb2xvclwiIGNsYXNzPVwibG9nb19jb2xvclwiIHZhbHVlPVwiZGVmYXVsdFwiICcgKyBkZWZfY29sb3IgK1xuICAgICAgJy8+RGVmYXVsdCAnICsgZGVmX2hlbHAgK1xuICAgICAgJzwvbGFiZWw+PC9icj4nICtcbiAgICAgICc8bGFiZWw+PGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJjb2xvclwiIGNsYXNzPVwibG9nb19jb2xvclwiIHZhbHVlPVwiY29uc2Vuc3VzXCIgJyArIGNvbl9jb2xvciArXG4gICAgICAnLz5Db25zZW5zdXMgQ29sb3JzICcgKyBjb25faGVscCArXG4gICAgICAnPC9sYWJlbD4nICtcbiAgICAgICc8L2ZpZWxkc2V0Pic7XG4gICAgc2V0dGluZ3MuYXBwZW5kKGNvbG9yX2NvbnRyb2xzKTtcbiAgfVxuXG5cbiAgaWYgKGxvZ28uZGF0YS5hbGlfbWFwKSB7XG4gICAgdmFyIG1vZF9jaGVja2VkID0gbnVsbCxcbiAgICBhbGlfY2hlY2tlZCA9IG51bGwsXG4gICAgbW9kX2hlbHAgPSAnJyxcbiAgICBhbGlfaGVscCA9ICcnO1xuXG4gICAgaWYgKGxvZ28uZGlzcGxheV9hbGlfbWFwID09PSAwKSB7XG4gICAgICBtb2RfY2hlY2tlZCA9ICdjaGVja2VkJztcbiAgICB9IGVsc2Uge1xuICAgICAgYWxpX2NoZWNrZWQgPSAnY2hlY2tlZCc7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuaGVscCkge1xuICAgICAgbW9kX2hlbHAgPSAnPGEgY2xhc3M9XCJoZWxwXCIgaHJlZj1cIi9oZWxwI2Nvb3Jkc19tb2RlbFwiIHRpdGxlPVwiVGhlIGNvb3JkaW5hdGVzIGFsb25nIHRoZSB0b3Agb2YgdGhlIHBsb3Qgc2hvdyB0aGUgbW9kZWwgcG9zaXRpb24uXCI+JyArXG4gICAgICAgICc8c3BhbiBhcmlhLWhpZGRlbj1cInRydWVcIiBkYXRhLWljb249XCI/XCI+PC9zcGFuPjxzcGFuIGNsYXNzPVwicmVhZGVyLXRleHRcIj5oZWxwPC9zcGFuPjwvYT4nO1xuICAgICAgYWxpX2hlbHAgPSAnPGEgY2xhc3M9XCJoZWxwXCIgaHJlZj1cIi9oZWxwI2Nvb3Jkc19hbGlcIiB0aXRsZT1cIlRoZSBjb29yZGluYXRlcyBhbG9uZyB0aGUgdG9wIG9mIHRoZSBwbG90IHNob3cgdGhlIGNvbHVtbiBpbiB0aGUgYWxpZ25tZW50IGFzc29jaWF0ZWQgd2l0aCB0aGUgbW9kZWxcIj4nICtcbiAgICAgICAgJzxzcGFuIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIGRhdGEtaWNvbj1cIj9cIj48L3NwYW4+PHNwYW4gY2xhc3M9XCJyZWFkZXItdGV4dFwiPmhlbHA8L3NwYW4+PC9hPic7XG4gICAgfVxuXG4gICAgdmFyIGFsaV9jb250cm9scyA9ICc8ZmllbGRzZXQ+PGxlZ2VuZD5Db29yZGluYXRlczwvbGVnZW5kPicgK1xuICAgICAgJzxsYWJlbD48aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cImNvb3Jkc1wiIGNsYXNzPVwibG9nb19hbGlfbWFwXCIgdmFsdWU9XCJtb2RlbFwiICcgKyBtb2RfY2hlY2tlZCArXG4gICAgICAnLz5Nb2RlbCAnICsgbW9kX2hlbHAgK1xuICAgICAgJzwvbGFiZWw+PC9icj4nICtcbiAgICAgICc8bGFiZWw+PGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJjb29yZHNcIiBjbGFzcz1cImxvZ29fYWxpX21hcFwiIHZhbHVlPVwiYWxpZ25tZW50XCIgJyArIGFsaV9jaGVja2VkICtcbiAgICAgICcvPkFsaWdubWVudCAnICsgYWxpX2hlbHAgK1xuICAgICAgJzwvbGFiZWw+JyArXG4gICAgICAnPC9maWVsZHNldD4nO1xuICAgIHNldHRpbmdzLmFwcGVuZChhbGlfY29udHJvbHMpO1xuICB9XG5cblxuICB2YXIgY29udHJvbHMgPSAkKCc8ZGl2IGNsYXNzPVwibG9nb19jb250cm9sc1wiPjwvZGl2PicpO1xuICBpZiAobG9nby56b29tX2VuYWJsZWQpIHtcbiAgICBjb250cm9scy5hcHBlbmQoJzxidXR0b24gY2xhc3M9XCJsb2dvX3pvb21vdXQgYnV0dG9uXCI+LTwvYnV0dG9uPicgK1xuICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiBjbGFzcz1cImxvZ29fem9vbWluIGJ1dHRvblwiPis8L2J1dHRvbj4nKTtcbiAgfVxuXG4gIGlmIChzZXR0aW5ncy5jaGlsZHJlbigpLmxlbmd0aCA+IDApIHtcbiAgICBjb250cm9scy5hcHBlbmQoJzxidXR0b24gY2xhc3M9XCJsb2dvX3NldHRpbmdzX3N3aXRjaCBidXR0b25cIj5TZXR0aW5nczwvYnV0dG9uPicpO1xuICAgIGNvbnRyb2xzLmFwcGVuZChzZXR0aW5ncyk7XG4gIH1cblxuICBmb3JtLmFwcGVuZChjb250cm9scyk7XG5cbiAgcmV0dXJuIGZvcm07XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIExldHRlcihsZXR0ZXIsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHRoaXMudmFsdWUgPSBsZXR0ZXI7XG4gIHRoaXMud2lkdGggPSBwYXJzZUludChvcHRpb25zLndpZHRoLCAxMCkgfHwgMTAwO1xuXG4gIC8vVyBpcyAzMCUgd2lkZXIgdGhhbiB0aGUgb3RoZXIgbGV0dGVycywgc28gbmVlZCB0byBtYWtlIHN1cmVcbiAgLy9pdCBnZXRzIG1vZGlmaWVkIGFjY29yZGluZ2x5LlxuICBpZiAodGhpcy52YWx1ZSA9PT0gJ1cnKSB7XG4gICAgdGhpcy53aWR0aCArPSAodGhpcy53aWR0aCAqIDMwKSAvIDEwMDtcbiAgfVxuXG4gIHRoaXMuaGVpZ2h0ID0gcGFyc2VJbnQob3B0aW9ucy5oZWlnaHQsIDEwKSB8fCAxMDA7XG5cbiAgdGhpcy5jb2xvciA9IG9wdGlvbnMuY29sb3IgfHwgJyMwMDAwMDAnO1xuICAvLyBpZiB0aGUgaGVpZ2h0IGFuZCB3aWR0aCBhcmUgY2hhbmdlZCBmcm9tIHRoZSBkZWZhdWx0LCB0aGVuXG4gIC8vIHRoaXMgd2lsbCBhbHNvIG5lZWQgdG8gYmUgY2hhbmdlZCBhcyBpdCBjYW50IGJlIGNhbGN1bGF0ZWRcbiAgLy8gZHluYW1pY2FsbHkuXG4gIHRoaXMuZm9udFNpemUgPSBvcHRpb25zLmZvbnRTaXplIHx8IDEzODtcblxuICB0aGlzLnNjYWxlZCA9IGZ1bmN0aW9uICgpIHsgfTtcblxuICB0aGlzLmRyYXcgPSBmdW5jdGlvbiAoZXh0X2N0eCwgdGFyZ2V0X2hlaWdodCwgdGFyZ2V0X3dpZHRoLCB4LCB5LCBjb2xvcikge1xuICAgIHZhciBoX3JhdGlvID0gdGFyZ2V0X2hlaWdodCAvIHRoaXMuaGVpZ2h0LFxuICAgIHdfcmF0aW8gPSB0YXJnZXRfd2lkdGggLyB0aGlzLndpZHRoLFxuICAgIHByZXZfZm9udCA9IGV4dF9jdHguZm9udDtcbiAgICBleHRfY3R4LnRyYW5zZm9ybSh3X3JhdGlvLCAwLCAwLCBoX3JhdGlvLCB4LCB5KTtcbiAgICBleHRfY3R4LmZpbGxTdHlsZSA9IGNvbG9yIHx8IHRoaXMuY29sb3I7XG4gICAgZXh0X2N0eC50ZXh0QWxpZ24gPSBcImNlbnRlclwiO1xuICAgIGV4dF9jdHguZm9udCA9IFwiYm9sZCBcIiArIHRoaXMuZm9udFNpemUgKyBcInB4IEFyaWFsXCI7XG5cbiAgICBleHRfY3R4LmZpbGxUZXh0KHRoaXMudmFsdWUsIDAsIDApO1xuICAgIC8vcmVzdG9yZSB0aGUgY2FudmFzIHNldHRpbmdzXG4gICAgZXh0X2N0eC5zZXRUcmFuc2Zvcm0oMSwgMCwgMCwgMSwgMCwgMCk7XG4gICAgZXh0X2N0eC5maWxsU3R5bGUgPSAnIzAwMDAwMCc7XG4gICAgZXh0X2N0eC5mb250ID0gcHJldl9mb250O1xuICB9O1xuXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRyYXdfYm9yZGVyKGNvbnRleHQsIHksIHdpZHRoKSB7XG4gIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gIGNvbnRleHQubW92ZVRvKDAsIHkpO1xuICBjb250ZXh0LmxpbmVUbyh3aWR0aCwgeSk7XG4gIGNvbnRleHQubGluZVdpZHRoID0gMTtcbiAgY29udGV4dC5zdHJva2VTdHlsZSA9IFwiIzk5OTk5OVwiO1xuICBjb250ZXh0LnN0cm9rZSgpO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkcmF3X2NvbHVtbl9udW1iZXIoY29udGV4dCwgeCwgeSwgY29sX3dpZHRoLCBjb2xfbnVtLCBmb250c2l6ZSwgcmlnaHQpIHtcbiAgY29udGV4dC5mb250ID0gZm9udHNpemUgKyBcInB4IEFyaWFsXCI7XG4gIGNvbnRleHQudGV4dEFsaWduID0gcmlnaHQgPyBcInJpZ2h0XCIgOiBcImNlbnRlclwiO1xuICBjb250ZXh0LmZpbGxTdHlsZSA9IFwiIzY2NjY2NlwiO1xuICBjb250ZXh0LmZpbGxUZXh0KGNvbF9udW0sIHggKyAoY29sX3dpZHRoIC8gMiksIHkpO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkcmF3X3RpY2tzKGNvbnRleHQsIHgsIHksIGhlaWdodCwgY29sb3IpIHtcbiAgY29sb3IgPSBjb2xvciB8fCAnIzk5OTk5OSc7XG4gIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gIGNvbnRleHQubW92ZVRvKHgsIHkpO1xuICBjb250ZXh0LmxpbmVUbyh4LCB5ICsgaGVpZ2h0KTtcbiAgY29udGV4dC5saW5lV2lkdGggPSAxO1xuICBjb250ZXh0LnN0cm9rZVN0eWxlID0gY29sb3I7XG4gIGNvbnRleHQuc3Ryb2tlKCk7XG59XG4iLCJ2YXIgcmVuZGVyV2l0aFRleHQgPSByZXF1aXJlKFwiLi9yZW5kZXJfd2l0aF90ZXh0LmpzXCIpO1xudmFyIHJlbmRlcldpdGhSZWN0ID0gcmVxdWlyZShcIi4vcmVuZGVyX3dpdGhfcmVjdHMuanNcIik7XG52YXIgamJvbmUgPSByZXF1aXJlKFwiamJvbmVcIik7XG5cbi8vIHRoZSBtYWluIHJlbmRlciBmdW5jdGlvbiB0aGF0IGRyYXdzIHRoZSBsb2dvIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBvcHRpb25zLlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICBpZiAoIXRoaXMuZGF0YSkge1xuICAgIHJldHVybjtcbiAgfVxuICBvcHRpb25zICAgID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHpvb20gICA9IG9wdGlvbnMuem9vbSB8fCB0aGlzLnpvb20sXG4gIHRhcmdldCA9IG9wdGlvbnMudGFyZ2V0IHx8IDEsXG4gIHNjYWxlZCA9IG9wdGlvbnMuc2NhbGVkIHx8IG51bGw7XG4gIHZhciBwYXJlbnRfd2lkdGggPSB0aGlzLmRvbV9lbGVtZW50LnBhcmVudCgpLmF0dHIoJ3dpZHRoJyksXG4gIG1heF9jYW52YXNfd2lkdGggPSAxLFxuICBlbmQgPSBudWxsLFxuICBzdGFydCA9IG51bGwsXG4gIGkgPSAwO1xuXG4gIC8qXG4gIGlmICh0YXJnZXQgPT09IHRoaXMucHJldmlvdXNfdGFyZ2V0KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gICovXG5cbiAgdGhpcy5wcmV2aW91c190YXJnZXQgPSB0YXJnZXQ7XG5cblxuICBpZiAob3B0aW9ucy5zdGFydCkge1xuICAgIHRoaXMuc3RhcnQgPSBvcHRpb25zLnN0YXJ0O1xuICB9XG4gIGlmIChvcHRpb25zLmVuZCkge1xuICAgIHRoaXMuZW5kID0gb3B0aW9ucy5lbmQ7XG4gIH1cblxuICBpZiAoem9vbSA8PSAwLjEpIHtcbiAgICB6b29tID0gMC4xO1xuICB9IGVsc2UgaWYgKHpvb20gPj0gMSkge1xuICAgIHpvb20gPSAxO1xuICB9XG5cbiAgdGhpcy56b29tID0gem9vbTtcblxuICBlbmQgPSB0aGlzLmVuZCB8fCB0aGlzLmRhdGEuaGVpZ2h0QXJyLmxlbmd0aDtcbiAgc3RhcnQgPSB0aGlzLnN0YXJ0IHx8IDE7XG4gIGVuZCAgICAgPSAoZW5kID4gdGhpcy5kYXRhLmhlaWdodEFyci5sZW5ndGgpID8gdGhpcy5kYXRhLmhlaWdodEFyci5sZW5ndGggOiBlbmQ7XG4gIGVuZCAgICAgPSAoZW5kIDwgc3RhcnQpID8gc3RhcnQgOiBlbmQ7XG5cbiAgc3RhcnQgICAgID0gKHN0YXJ0ID4gZW5kKSA/IGVuZCA6IHN0YXJ0O1xuICBzdGFydCAgICAgPSAoc3RhcnQgPiAxKSA/IHN0YXJ0IDogMTtcblxuICB0aGlzLnkgPSB0aGlzLmhlaWdodCAtIDIwO1xuICAvLyBDaGVjayB0byBzZWUgaWYgdGhlIGxvZ28gd2lsbCBmaXQgb24gdGhlIHNjcmVlbiBhdCBmdWxsIHpvb20uXG4gIHRoaXMubWF4X3dpZHRoID0gdGhpcy5jb2x1bW5fd2lkdGggKiAoKGVuZCAtIHN0YXJ0KSArIDEpO1xuICAvLyBJZiBpdCBmaXRzIHRoZW4gem9vbSBvdXQgYW5kIGRpc2FibGUgem9vbWluZy5cbiAgaWYgKHBhcmVudF93aWR0aCA+IHRoaXMubWF4X3dpZHRoKSB7XG4gICAgem9vbSA9IDE7XG4gICAgdGhpcy56b29tX2VuYWJsZWQgPSBmYWxzZTtcbiAgfVxuICB0aGlzLnpvb20gPSB6b29tO1xuXG4gIHRoaXMuem9vbWVkX2NvbHVtbiA9IHRoaXMuY29sdW1uX3dpZHRoICogem9vbTtcbiAgdGhpcy50b3RhbF93aWR0aCA9IHRoaXMuem9vbWVkX2NvbHVtbiAqICgoZW5kIC0gc3RhcnQpICsgMSk7XG5cbiAgLy8gSWYgem9vbSBpcyBub3QgbWF4ZWQgYW5kIHdlIHN0aWxsIGFyZW4ndCBmaWxsaW5nIHRoZSB3aW5kb3dcbiAgLy8gdGhlbiByYW1wIHVwIHRoZSB6b29tIGxldmVsIHVudGlsIGl0IGZpdHMsIHRoZW4gZGlzYWJsZSB6b29taW5nLlxuICAvLyBUaGVuIHdlIGdldCBhIGRlY2VudCBsb2dvIHdpdGggb3V0IG5lZWRpbmcgdG8gem9vbSBpbiBvciBvdXQuXG4gIGlmICh6b29tIDwgMSkge1xuICAgIHdoaWxlICh0aGlzLnRvdGFsX3dpZHRoIDwgcGFyZW50X3dpZHRoKSB7XG4gICAgICB0aGlzLnpvb20gKz0gMC4xO1xuICAgICAgdGhpcy56b29tZWRfY29sdW1uID0gdGhpcy5jb2x1bW5fd2lkdGggKiB0aGlzLnpvb207XG4gICAgICB0aGlzLnRvdGFsX3dpZHRoID0gdGhpcy56b29tZWRfY29sdW1uICogKChlbmQgLSBzdGFydCkgKyAxKTtcbiAgICAgIHRoaXMuem9vbV9lbmFibGVkID0gZmFsc2U7XG4gICAgICBpZiAoem9vbSA+PSAxKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICh0YXJnZXQgPiB0aGlzLnRvdGFsX3dpZHRoKSB7XG4gICAgdGFyZ2V0ID0gdGhpcy50b3RhbF93aWR0aDtcbiAgfVxuICB0aGlzLmRvbV9lbGVtZW50LmF0dHIoeyd3aWR0aCc6IHRoaXMudG90YWxfd2lkdGggKyAncHgnfSkuY3NzKHt3aWR0aDogdGhpcy50b3RhbF93aWR0aCArICdweCd9KTtcblxuICB0aGlzLmNhbnZhc193aWR0aCA9IHRoaXMudG90YWxfd2lkdGg7XG4gIHZhciBjYW52YXNfY291bnQgPSBNYXRoLmNlaWwodGhpcy50b3RhbF93aWR0aCAvIHRoaXMuY2FudmFzX3dpZHRoKTtcbiAgdGhpcy5jb2x1bW5zX3Blcl9jYW52YXMgPSBNYXRoLmNlaWwodGhpcy5jYW52YXNfd2lkdGggLyB0aGlzLnpvb21lZF9jb2x1bW4pO1xuXG5cbiAgaWYgKHRoaXMucHJldmlvdXNfem9vbSAhPT0gdGhpcy56b29tKSB7XG4gICAgdGhpcy5kb21fZWxlbWVudC5maW5kKCdjYW52YXMnKS5yZW1vdmUoKTtcbiAgICB0aGlzLnByZXZpb3VzX3pvb20gPSB0aGlzLnpvb207XG4gICAgdGhpcy5yZW5kZXJlZCA9IFtdO1xuICB9XG5cbiAgdGhpcy5jYW52YXNlcyA9IFtdO1xuICB0aGlzLmNvbnRleHRzID0gW107XG5cblxuICBmb3IgKGkgPSAwOyBpIDwgY2FudmFzX2NvdW50OyBpKyspIHtcblxuICAgIHZhciBzcGxpdF9zdGFydCA9ICh0aGlzLmNvbHVtbnNfcGVyX2NhbnZhcyAqIGkpICsgc3RhcnQsXG4gICAgc3BsaXRfZW5kICAgPSBzcGxpdF9zdGFydCArIHRoaXMuY29sdW1uc19wZXJfY2FudmFzIC0gMTtcbiAgICBpZiAoc3BsaXRfZW5kID4gZW5kKSB7XG4gICAgICBzcGxpdF9lbmQgPSBlbmQ7XG4gICAgfVxuXG4gICAgdmFyIGFkanVzdGVkX3dpZHRoID0gKChzcGxpdF9lbmQgLSBzcGxpdF9zdGFydCkgKyAxKSAqIHRoaXMuem9vbWVkX2NvbHVtbjtcblxuICAgIGlmIChhZGp1c3RlZF93aWR0aCA+IG1heF9jYW52YXNfd2lkdGgpIHtcbiAgICAgIG1heF9jYW52YXNfd2lkdGggPSBhZGp1c3RlZF93aWR0aDtcbiAgICB9XG5cbiAgICB2YXIgY2Fudl9zdGFydCA9IG1heF9jYW52YXNfd2lkdGggKiBpLFxuICAgIGNhbnZfZW5kID0gY2Fudl9zdGFydCArIGFkanVzdGVkX3dpZHRoO1xuXG4gICAgaWYgKHRhcmdldCA8IGNhbnZfZW5kICsgKGNhbnZfZW5kIC8gMikgJiYgdGFyZ2V0ID4gY2Fudl9zdGFydCAtIChjYW52X3N0YXJ0IC8gMikpIHtcbiAgICAgIC8vIENoZWNrIHRoYXQgd2UgYXJlbid0IHJlZHJhd2luZyB0aGUgY2FudmFzIGFuZCBpZiBub3QsIHRoZW4gYXR0YWNoIGl0IGFuZCBkcmF3LlxuICAgICAgLy9pZiAodGhpcy5yZW5kZXJlZFtpXSAhPT0gMSkge1xuXG4gICAgICAgIHRoaXMuY2FudmFzZXNbaV0gPSBhdHRhY2hfY2FudmFzKHRoaXMuZG9tX2VsZW1lbnQsIHRoaXMuaGVpZ2h0LCBhZGp1c3RlZF93aWR0aCwgaSwgbWF4X2NhbnZhc193aWR0aCk7XG4gICAgICAgIHRoaXMuY29udGV4dHNbaV0gPSB0aGlzLmNhbnZhc2VzW2ldLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgIHRoaXMuY29udGV4dHNbaV0uc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApO1xuICAgICAgICB0aGlzLmNvbnRleHRzW2ldLmNsZWFyUmVjdCgwLCAwLCBhZGp1c3RlZF93aWR0aCwgdGhpcy5oZWlnaHQpO1xuICAgICAgICB0aGlzLmNvbnRleHRzW2ldLmZpbGxTdHlsZSA9IFwiI2ZmZmZmZlwiO1xuICAgICAgICB0aGlzLmNvbnRleHRzW2ldLmZpbGxSZWN0KDAsIDAsIGNhbnZfZW5kLCB0aGlzLmhlaWdodCk7XG5cblxuICAgICAgICBpZiAodGhpcy56b29tZWRfY29sdW1uID4gMTIpIHtcbiAgICAgICAgICB2YXIgZm9udHNpemUgPSBwYXJzZUludCgxMCAqIHpvb20sIDEwKTtcbiAgICAgICAgICBmb250c2l6ZSA9IChmb250c2l6ZSA+IDEwKSA/IDEwIDogZm9udHNpemU7XG4gICAgICAgICAgaWYgKHRoaXMuZGVidWcpIHtcbiAgICAgICAgICAgIHJlbmRlcldpdGhSZWN0LmNhbGwodGhpcyxzcGxpdF9zdGFydCwgc3BsaXRfZW5kLCBpLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVuZGVyV2l0aFRleHQuY2FsbCh0aGlzLHNwbGl0X3N0YXJ0LCBzcGxpdF9lbmQsIGksIGZvbnRzaXplKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZW5kZXJXaXRoUmVjdC5jYWxsKHRoaXMsc3BsaXRfc3RhcnQsIHNwbGl0X2VuZCwgaSk7XG4gICAgICAgIH1cbiAgICAgICAgLy90aGlzLnJlbmRlcmVkW2ldID0gMTtcbiAgICAgIC8vfVxuICAgIH1cblxuICB9XG5cbiAgLy8gY2hlY2sgaWYgdGhlIHNjcm9sbGVyIG9iamVjdCBoYXMgYmVlbiBpbml0aWFsaXNlZCBhbmQgaWYgbm90IHRoZW4gZG8gc28uXG4gIC8vIHdlIGRvIHRoaXMgaGVyZSBhcyBvcHBvc2VkIHRvIGF0IG9iamVjdCBjcmVhdGlvbiwgYmVjYXVzZSB3ZSBuZWVkIHRvXG4gIC8vIG1ha2Ugc3VyZSB0aGUgbG9nbyBoYXMgYmVlbiByZW5kZXJlZCBhbmQgdGhlIHdpZHRoIGlzIGNvcnJlY3QsIG90aGVyd2lzZVxuICAvLyB3ZSBnZXQgYSB3ZWlyZCBpbml0aWFsIHN0YXRlIHdoZXJlIHRoZSBjYW52YXMgd2lsbCBib3VuY2UgYmFjayB0byB0aGVcbiAgLy8gYmVnaW5uaW5nIHRoZSBmaXJzdCB0aW1lIGl0IGlzIHNjcm9sbGVkLCBiZWNhdXNlIGl0IHRoaW5rcyBpdCBoYXMgYVxuICAvLyB3aWR0aCBvZiAwLlxuICBpZiAoIXRoaXMuc2Nyb2xsbWUgJiYgdGhpcy5vcHRpb25zLnNjcm9sbGVyKSB7XG4gICAgdGhpcy5zY3JvbGxtZSA9IG5ldyBFYXN5U2Nyb2xsZXIodGhpcy5kb21fZWxlbWVudFswXSwge1xuICAgICAgc2Nyb2xsaW5nWDogMSxcbiAgICAgIHNjcm9sbGluZ1k6IDAsXG4gICAgICBldmVudFRhcmdldDogdGhpcy5jYWxsZWRfb25cbiAgICB9KTtcbiAgfVxuXG4gIGlmICh0YXJnZXQgIT09IDEpIHtcbiAgICB0aGlzLnNjcm9sbG1lLnJlZmxvdygpO1xuICB9XG4gIHJldHVybjtcbn07XG5cblxuZnVuY3Rpb24gYXR0YWNoX2NhbnZhcyhET01pZCwgaGVpZ2h0LCB3aWR0aCwgaWQsIGNhbnZfd2lkdGgpIHtcbiAgdmFyIGNhbnZhcyA9IGpib25lKERPTWlkKS5maW5kKCcjY2Fudl8nICsgaWQpO1xuXG4gIGlmICghY2FudmFzLmxlbmd0aCkge1xuICAgIGpib25lKERPTWlkKS5hcHBlbmQoJzxjYW52YXMgY2xhc3M9XCJjYW52YXNfbG9nb1wiIGlkPVwiY2Fudl8nICsgaWQgKyAnXCIgIGhlaWdodD1cIicgKyBoZWlnaHQgKyAnXCIgd2lkdGg9XCInICsgd2lkdGggKyAnXCIgc3R5bGU9XCJsZWZ0OicgKyBjYW52X3dpZHRoICogaWQgKyAncHhcIj48L2NhbnZhcz4nKTtcbiAgICBjYW52YXMgPSBqYm9uZShET01pZCkuZmluZCgnI2NhbnZfJyArIGlkKTtcbiAgfVxuXG4gIGpib25lKGNhbnZhcykuYXR0cignd2lkdGgnLCB3aWR0aCkuYXR0cignaGVpZ2h0JywgaGVpZ2h0KTtcblxuICByZXR1cm4gY2FudmFzWzBdO1xufVxuIiwidmFyIGRyYXdfYm9yZGVyID0gcmVxdWlyZShcIi4vZHJhdy9ib3JkZXIuanNcIik7XG52YXIgZHJhd190aWNrcyA9IHJlcXVpcmUoXCIuL2RyYXcvdGlja3MuanNcIik7XG52YXIgZHJhd19jb2x1bW5fbnVtYmVyID0gcmVxdWlyZShcIi4vZHJhdy9jb2x1bW5fbnVtYmVyLmpzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzdGFydCwgZW5kLCBjb250ZXh0X251bSwgYm9yZGVycykge1xuICB2YXIgeCA9IDAsXG4gIGNvbHVtbl9udW0gPSBzdGFydCxcbiAgY29sdW1uX2xhYmVsID0gbnVsbCxcbiAgaSA9IDAsXG4gIHRvcF9oZWlnaHQgPSBNYXRoLmFicyh0aGlzLmRhdGEubWF4X2hlaWdodCksXG4gIGJvdHRvbV9oZWlnaHQgPSBNYXRoLmFicyh0aGlzLmRhdGEubWluX2hlaWdodF9vYnMpLFxuICB0b3RhbF9oZWlnaHQgPSB0b3BfaGVpZ2h0ICsgYm90dG9tX2hlaWdodCxcbiAgdG9wX3BlcmNlbnRhZ2UgICAgPSBNYXRoLnJvdW5kKChNYXRoLmFicyh0aGlzLmRhdGEubWF4X2hlaWdodCkgKiAxMDApIC8gdG90YWxfaGVpZ2h0KSxcbiAgLy9jb252ZXJ0ICUgdG8gcGl4ZWxzXG4gIHRvcF9waXhfaGVpZ2h0ID0gTWF0aC5yb3VuZCgodGhpcy5pbmZvX2NvbnRlbnRfaGVpZ2h0ICogdG9wX3BlcmNlbnRhZ2UpIC8gMTAwKSxcbiAgYm90dG9tX3BpeF9oZWlnaHQgPSB0aGlzLmluZm9fY29udGVudF9oZWlnaHQgLSB0b3BfcGl4X2hlaWdodCxcbiAgbW9kID0gMTA7XG5cblxuICBmb3IgKGkgPSBzdGFydDsgaSA8PSBlbmQ7IGkrKykge1xuICAgIGlmICh0aGlzLmRhdGEubW1saW5lICYmIHRoaXMuZGF0YS5tbWxpbmVbaSAtIDFdID09PSAxKSB7XG4gICAgICB0aGlzLmNvbnRleHRzW2NvbnRleHRfbnVtXS5maWxsU3R5bGUgPSAnI2NjY2NjYyc7XG4gICAgICB0aGlzLmNvbnRleHRzW2NvbnRleHRfbnVtXS5maWxsUmVjdCh4LCAxMCwgdGhpcy56b29tZWRfY29sdW1uLCB0aGlzLmhlaWdodCAtIDQwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGNvbHVtbiA9IHRoaXMuZGF0YS5oZWlnaHRBcnJbaSAtIDFdLFxuICAgICAgcHJldmlvdXNfaGVpZ2h0ID0gMCxcbiAgICAgIHByZXZpb3VzX25lZ19oZWlnaHQgPSB0b3BfcGl4X2hlaWdodCxcbiAgICAgIGxldHRlcnMgPSBjb2x1bW4ubGVuZ3RoLFxuICAgICAgaiA9IDA7XG4gICAgICBmb3IodmFyIGogaW4gY29sdW1uKXtcbiAgICAgICAgdmFsdWVzID0gW2osY29sdW1uW2pdXTtcbiAgICAgICAgaWYgKHZhbHVlc1sxXSA+IDAuMDEpIHtcbiAgICAgICAgICB2YXIgbGV0dGVyX2hlaWdodCA9IHBhcnNlRmxvYXQodmFsdWVzWzFdKSAvIHRoaXMuZGF0YS5tYXhfaGVpZ2h0LFxuICAgICAgICAgIHhfcG9zID0geCxcbiAgICAgICAgICBnbHlwaF9oZWlnaHQgPSAodGhpcy5pbmZvX2NvbnRlbnRfaGVpZ2h0IC0gMikgKiBsZXR0ZXJfaGVpZ2h0LFxuICAgICAgICAgIHlfcG9zID0gKHRoaXMuaW5mb19jb250ZW50X2hlaWdodCAtIDIpIC0gcHJldmlvdXNfaGVpZ2h0IC0gZ2x5cGhfaGVpZ2h0LFxuICAgICAgICAgIGNvbG9yID0gbnVsbDtcblxuXG4gICAgICAgICAgaWYodGhpcy5jb2xvcnNjaGVtZSA9PT0gJ2R5bmFtaWMnKXtcbiAgICAgICAgICAgIGNvbG9yID0gdGhpcy5jb2xvcnMuZ2V0Q29sb3IodmFsdWVzWzBdLCB7cG9zOiBpIC0gMX0gKVxuICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgaWYodGhpcy5jb2xvcnNjaGVtZSA9PT0gJ2NvbnNlbnN1cycpIHtcbiAgICAgICAgICAgICAgY29sb3IgPSB0aGlzLmNtYXBbaSAtIDFdW3ZhbHVlc1swXV0gfHwgXCIjN2E3YTdhXCI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb2xvciA9IHRoaXMuY29sb3JzW3ZhbHVlc1swXV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGJvcmRlcnMpIHtcbiAgICAgICAgICAgIHRoaXMuY29udGV4dHNbY29udGV4dF9udW1dLnN0cm9rZVN0eWxlID0gY29sb3I7XG4gICAgICAgICAgICB0aGlzLmNvbnRleHRzW2NvbnRleHRfbnVtXS5zdHJva2VSZWN0KHhfcG9zLCB5X3BvcywgdGhpcy56b29tZWRfY29sdW1uLCBnbHlwaF9oZWlnaHQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRleHRzW2NvbnRleHRfbnVtXS5maWxsU3R5bGUgPSBjb2xvcjtcbiAgICAgICAgICAgIHRoaXMuY29udGV4dHNbY29udGV4dF9udW1dLmZpbGxSZWN0KHhfcG9zLCB5X3BvcywgdGhpcy56b29tZWRfY29sdW1uLCBnbHlwaF9oZWlnaHQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHByZXZpb3VzX2hlaWdodCA9IHByZXZpb3VzX2hlaWdodCArIGdseXBoX2hlaWdodDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuXG4gICAgaWYgKHRoaXMuem9vbSA8IDAuMikge1xuICAgICAgbW9kID0gMjA7XG4gICAgfSBlbHNlIGlmICh0aGlzLnpvb20gPCAwLjMpIHtcbiAgICAgIG1vZCA9IDEwO1xuICAgIH1cblxuICAgIGlmKHRoaXMub3B0aW9ucy5wb3NpdGlvbk1hcmtlcil7XG4gICAgICBpZiAoaSAlIG1vZCA9PT0gMCkge1xuICAgICAgICAvLyBkcmF3IGNvbHVtbiBkaXZpZGVyc1xuICAgICAgICBpZih0aGlzLm9wdGlvbnMuc2hvd19wcm9icyl7XG4gICAgICAgICAgZHJhd190aWNrcyh0aGlzLmNvbnRleHRzW2NvbnRleHRfbnVtXSwgeCArIHRoaXMuem9vbWVkX2NvbHVtbiwgdGhpcy5oZWlnaHQgLSAzMCwgcGFyc2VGbG9hdCh0aGlzLmhlaWdodCksICcjZGRkZGRkJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZHJhdyB0b3AgdGlja3NcbiAgICAgICAgZHJhd190aWNrcyh0aGlzLmNvbnRleHRzW2NvbnRleHRfbnVtXSwgeCArIHRoaXMuem9vbWVkX2NvbHVtbiwgMCwgNSk7XG5cbiAgICAgICAgLy8gaWYgYWxpX2Nvb3JkaW5hdGVzIGV4aXN0IGFuZCB0b2dnbGUgaXMgc2V0IHRoZW4gZGlzcGxheSB0aGVcbiAgICAgICAgLy8gYWxpZ25tZW50IGNvb3JkaW5hdGVzIGFuZCBub3QgdGhlIG1vZGVsIGNvb3JkaW5hdGVzLlxuICAgICAgICBpZiAodGhpcy5kaXNwbGF5X2FsaV9tYXApIHtcbiAgICAgICAgICBjb2x1bW5fbGFiZWwgPSB0aGlzLmRhdGEuYWxpX21hcFtpIC0gMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29sdW1uX2xhYmVsID0gY29sdW1uX251bTtcbiAgICAgICAgfVxuICAgICAgICAvLyBkcmF3IGNvbHVtbiBudW1iZXJzXG4gICAgICAgIGRyYXdfY29sdW1uX251bWJlcih0aGlzLmNvbnRleHRzW2NvbnRleHRfbnVtXSwgeCAtIDIsICAxMCwgdGhpcy56b29tZWRfY29sdW1uLCBjb2x1bW5fbGFiZWwsIDEwLCB0cnVlKTtcbiAgICAgIH1cblxuICAgIH1cblxuXG4gICAgLy8gZHJhdyBpbnNlcnQgcHJvYmFiaWxpdGllcy9sZW5ndGhzXG4gICAgaWYodGhpcy5vcHRpb25zLnNob3dfcHJvYnMpe1xuICAgICAgZHJhd19zbWFsbF9pbnNlcnQoXG4gICAgICAgIHRoaXMuY29udGV4dHNbY29udGV4dF9udW1dLFxuICAgICAgICB4LFxuICAgICAgICB0aGlzLmhlaWdodCAtIDQyLFxuICAgICAgICB0aGlzLnpvb21lZF9jb2x1bW4sXG4gICAgICAgIHRoaXMuZGF0YS5pbnNlcnRfcHJvYnNbaSAtIDFdLFxuICAgICAgICB0aGlzLmRhdGEuaW5zZXJ0X2xlbmd0aHNbaSAtIDFdLFxuICAgICAgICB0aGlzLmRhdGEuZGVsZXRlX3Byb2JzW2kgLSAxXSxcbiAgICAgICAgdGhpcy5zaG93X2luc2VydHNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYodGhpcy5vcHRpb25zLnNob3dfcHJvYnMpe1xuICAgICAgLy8gZHJhdyBvdGhlciBkaXZpZGVyc1xuICAgICAgaWYgKHRoaXMuc2hvd19pbnNlcnRzKSB7XG4gICAgICAgIGRyYXdfYm9yZGVyKHRoaXMuY29udGV4dHNbY29udGV4dF9udW1dLCB0aGlzLmhlaWdodCAtIDQ1LCB0aGlzLnRvdGFsX3dpZHRoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRyYXdfYm9yZGVyKHRoaXMuY29udGV4dHNbY29udGV4dF9udW1dLCB0aGlzLmhlaWdodCAtIDE1LCB0aGlzLnRvdGFsX3dpZHRoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZih0aGlzLm9wdGlvbnMuYm9yZGVyKXtcbiAgICAgIGRyYXdfYm9yZGVyKHRoaXMuY29udGV4dHNbY29udGV4dF9udW1dLCAwLCB0aGlzLnRvdGFsX3dpZHRoKTtcbiAgICB9XG5cbiAgICB4ICs9IHRoaXMuem9vbWVkX2NvbHVtbjtcbiAgICBjb2x1bW5fbnVtKys7XG4gIH1cblxufTtcblxuXG5mdW5jdGlvbiBkcmF3X3NtYWxsX2luc2VydChjb250ZXh0LCB4LCB5LCBjb2xfd2lkdGgsIGluX29kZHMsIGluX2xlbmd0aCwgZGVsX29kZHMsIHNob3dfaW5zZXJ0cykge1xuICB2YXIgZmlsbCA9IFwiI2ZmZmZmZlwiO1xuICBpZiAoc2hvd19pbnNlcnRzKSB7XG4gICAgaWYgKGluX29kZHMgPiAwLjEpIHtcbiAgICAgIGZpbGwgPSAnI2Q3MzAxZic7XG4gICAgfSBlbHNlIGlmIChpbl9vZGRzID4gMC4wNSkge1xuICAgICAgZmlsbCA9ICcjZmM4ZDU5JztcbiAgICB9IGVsc2UgaWYgKGluX29kZHMgPiAwLjAzKSB7XG4gICAgICBmaWxsID0gJyNmZGNjOGEnO1xuICAgIH1cbiAgICBjb250ZXh0LmZpbGxTdHlsZSA9IGZpbGw7XG4gICAgY29udGV4dC5maWxsUmVjdCh4LCB5ICsgMTUsIGNvbF93aWR0aCwgMTApO1xuXG4gICAgZmlsbCA9IFwiI2ZmZmZmZlwiO1xuICAgIC8vIGRyYXcgaW5zZXJ0IGxlbmd0aFxuICAgIGlmIChpbl9sZW5ndGggPiA5KSB7XG4gICAgICBmaWxsID0gJyNkNzMwMWYnO1xuICAgIH0gZWxzZSBpZiAoaW5fbGVuZ3RoID4gNykge1xuICAgICAgZmlsbCA9ICcjZmM4ZDU5JztcbiAgICB9IGVsc2UgaWYgKGluX2xlbmd0aCA+IDQpIHtcbiAgICAgIGZpbGwgPSAnI2ZkY2M4YSc7XG4gICAgfVxuICAgIGNvbnRleHQuZmlsbFN0eWxlID0gZmlsbDtcbiAgICBjb250ZXh0LmZpbGxSZWN0KHgsIHkgKyAzMCwgY29sX3dpZHRoLCAxMCk7XG4gIH0gZWxzZSB7XG4gICAgeSAgPSB5ICsgMzA7XG4gIH1cblxuICBmaWxsID0gXCIjZmZmZmZmXCI7XG4gIC8vIGRyYXcgZGVsZXRlIG9kZHNcbiAgaWYgKGRlbF9vZGRzIDwgMC43NSkge1xuICAgIGZpbGwgPSAnIzIxNzFiNSc7XG4gIH0gZWxzZSBpZiAoZGVsX29kZHMgPCAwLjg1KSB7XG4gICAgZmlsbCA9ICcjNmJhZWQ2JztcbiAgfSBlbHNlIGlmIChkZWxfb2RkcyA8IDAuOTUpIHtcbiAgICBmaWxsID0gJyNiZGQ3ZTcnO1xuICB9XG4gIGNvbnRleHQuZmlsbFN0eWxlID0gZmlsbDtcbiAgY29udGV4dC5maWxsUmVjdCh4LCB5LCBjb2xfd2lkdGgsIDEwKTtcbn1cblxuXG4iLCJ2YXIgZHJhd19ib3JkZXIgPSByZXF1aXJlKFwiLi9kcmF3L2JvcmRlci5qc1wiKTtcbnZhciBkcmF3X3RpY2tzID0gcmVxdWlyZShcIi4vZHJhdy90aWNrcy5qc1wiKTtcbnZhciBkcmF3X2NvbHVtbl9udW1iZXIgPSByZXF1aXJlKFwiLi9kcmF3L2NvbHVtbl9udW1iZXIuanNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHN0YXJ0LCBlbmQsIGNvbnRleHRfbnVtLCBmb250c2l6ZSkge1xuICB2YXIgeCA9IDAsXG4gIGNvbHVtbl9udW0gPSBzdGFydCxcbiAgY29sdW1uX2xhYmVsID0gbnVsbCxcbiAgaSA9IDAsXG4gIHRvcF9oZWlnaHQgPSBNYXRoLmFicyh0aGlzLmRhdGEubWF4X2hlaWdodCksXG4gIGJvdHRvbV9oZWlnaHQgPSAoaXNOYU4odGhpcy5kYXRhLm1pbl9oZWlnaHRfb2JzKSkgPyAwIDogcGFyc2VJbnQodGhpcy5kYXRhLm1pbl9oZWlnaHRfb2JzLCAxMCksXG4gIHRvdGFsX2hlaWdodCA9IHRvcF9oZWlnaHQgKyBNYXRoLmFicyhib3R0b21faGVpZ2h0KSxcbiAgdG9wX3BlcmNlbnRhZ2UgICAgPSBNYXRoLnJvdW5kKChNYXRoLmFicyh0aGlzLmRhdGEubWF4X2hlaWdodCkgKiAxMDApIC8gdG90YWxfaGVpZ2h0KSxcbiAgLy9jb252ZXJ0ICUgdG8gcGl4ZWxzXG4gIHRvcF9waXhfaGVpZ2h0ID0gTWF0aC5yb3VuZCgodGhpcy5pbmZvX2NvbnRlbnRfaGVpZ2h0ICogdG9wX3BlcmNlbnRhZ2UpIC8gMTAwKSxcbiAgYm90dG9tX3BpeF9oZWlnaHQgPSB0aGlzLmluZm9fY29udGVudF9oZWlnaHQgLSB0b3BfcGl4X2hlaWdodCxcbiAgLy8gdGhpcyBpcyB1c2VkIHRvIHRyYW5zZm9ybSB0aGUgMjU2cHggaGlnaCBsZXR0ZXJzIGludG8gdGhlIGNvcnJlY3Qgc2l6ZVxuICAvLyB3aGVuIGRpc3BsYXlpbmcgbmVnYXRpdmUgdmFsdWVzLCBzbyB0aGF0IHRoZXkgZml0IGFib3ZlIHRoZSAwIGxpbmUuXG4gIHRvcF9waXhfY29udmVyc2lvbiA9IHRvcF9waXhfaGVpZ2h0IC8gdGhpcy5pbmZvX2NvbnRlbnRfaGVpZ2h0LFxuICBib3R0b21fcGl4X2NvbnZlcnNpb24gPSBib3R0b21fcGl4X2hlaWdodCAvIHRoaXMuaW5mb19jb250ZW50X2hlaWdodDtcblxuICAvLyBhZGQgMyBleHRyYSBjb2x1bW5zIHNvIHRoYXQgbnVtYmVycyBkb24ndCBnZXQgY2xpcHBlZCBhdCB0aGUgZW5kIG9mIGEgY2FudmFzXG4gIC8vIHRoYXQgZW5kcyBiZWZvcmUgYSBsYXJnZSBjb2x1bW4uIERGMDAwMDgzMCB3YXMgc3VmZmVyaW5nIGF0IHpvb20gbGV2ZWwgMC42LFxuICAvLyBjb2x1bW4gMjIxNS4gVGhpcyBhZGRzIGEgbGl0dGxlIGV4dHJhIG92ZXJoZWFkLCBidXQgaXMgdGhlIGVhc2llc3QgZml4IGZvciBub3cuXG4gIGlmIChlbmQgKyAzIDw9IHRoaXMuZW5kKSB7XG4gICAgZW5kICs9IDM7XG4gIH1cblxuICBmb3IgKGkgPSBzdGFydDsgaSA8PSBlbmQ7IGkrKykge1xuICAgIGlmICh0aGlzLmRhdGEubW1saW5lICYmIHRoaXMuZGF0YS5tbWxpbmVbaSAtIDFdID09PSAxKSB7XG4gICAgICB0aGlzLmNvbnRleHRzW2NvbnRleHRfbnVtXS5maWxsU3R5bGUgPSAnI2NjY2NjYyc7XG4gICAgICB0aGlzLmNvbnRleHRzW2NvbnRleHRfbnVtXS5maWxsUmVjdCh4LCAxMCwgdGhpcy56b29tZWRfY29sdW1uLCB0aGlzLmhlaWdodCAtIDQwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGNvbHVtbiA9IHRoaXMuZGF0YS5oZWlnaHRBcnJbaSAtIDFdLFxuICAgICAgY29sX3Bvc2l0aW9ucyA9IFtdO1xuICAgICAgaWYgKGNvbHVtbikge1xuICAgICAgICB2YXIgcHJldmlvdXNfaGVpZ2h0ID0gMCxcbiAgICAgICAgbGV0dGVycyA9IGNvbHVtbi5sZW5ndGgsXG4gICAgICAgIHByZXZpb3VzX25lZ19oZWlnaHQgPSB0b3BfcGl4X2hlaWdodCxcbiAgICAgICAgaiA9IDAsXG4gICAgICAgIGNvbG9yID0gbnVsbDtcblxuICAgICAgICBmb3IodmFyIGogaW4gY29sdW1uKXtcbiAgICAgICAgICB2YXIgbGV0dGVyID0gY29sdW1uW2pdLFxuICAgICAgICAgIHZhbHVlcyA9IFtqLGxldHRlcl07XG4gICAgICAgICAgeF9wb3MgPSB4ICsgKHRoaXMuem9vbWVkX2NvbHVtbiAvIDIpLFxuICAgICAgICAgIGxldHRlcl9oZWlnaHQgPSBudWxsO1xuXG4gICAgICAgICAgLy8gd2UgZG9uJ3QgcmVuZGVyIGFueXRoaW5nIHdpdGggYSB2YWx1ZSBiZXR3ZWVuIDAgYW5kIDAuMDEuIFRoZXNlXG4gICAgICAgICAgLy8gbGV0dGVycyB3b3VsZCBiZSB0b28gc21hbGwgdG8gYmUgbWVhbmluZ2Z1bCBvbiBhbnkgc2NhbGUsIHNvIHdlXG4gICAgICAgICAgLy8ganVzdCBzcXVhc2ggdGhlbSBvdXQuXG4gICAgICAgICAgaWYgKHZhbHVlc1sxXSA+IDAuMDEpIHtcbiAgICAgICAgICAgIGxldHRlcl9oZWlnaHQgPSBwYXJzZUZsb2F0KHZhbHVlc1sxXSkgLyB0aGlzLmRhdGEubWF4X2hlaWdodDtcbiAgICAgICAgICAgIHZhciB5X3BvcyA9ICh0aGlzLmluZm9fY29udGVudF9oZWlnaHQgLSAyKSAtIHByZXZpb3VzX2hlaWdodCxcbiAgICAgICAgICAgIGdseXBoX2hlaWdodCA9ICh0aGlzLmluZm9fY29udGVudF9oZWlnaHQgLSAyKSAqIGxldHRlcl9oZWlnaHQ7XG5cbiAgICAgICAgICAgIGNvbF9wb3NpdGlvbnNbal0gPSBbZ2x5cGhfaGVpZ2h0LCB0aGlzLnpvb21lZF9jb2x1bW4sIHhfcG9zLCB5X3Bvc107XG4gICAgICAgICAgICBwcmV2aW91c19oZWlnaHQgPSBwcmV2aW91c19oZWlnaHQgKyBnbHlwaF9oZWlnaHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmVuZGVyIHRoZSBsZXR0ZXJzIGluIHJldmVyc2Ugb3JkZXIgc28gdGhhdCB0aGUgbGFyZ2VyIGxldHRlcnMgb24gdGhlIHRvcFxuICAgICAgICAvLyBkb24ndCBjbG9iYmVyIHRoZSBzbWFsbGVyIGxldHRlcnMgYmVsb3cgdGhlbS5cbiAgICAgICAgLy9mb3IgKGogPSBsZXR0ZXJzOyBqID49IDA7IGotLSkge1xuICAgICAgICBmb3IodmFyIGogaW4gY29sdW1uKXtcbiAgICAgICAgICBpZiAoY29sX3Bvc2l0aW9uc1tqXSAmJiB0aGlzLmxldHRlcnNbal0pIHtcblxuICAgICAgICAgICAgaWYodGhpcy5jb2xvcnNjaGVtZSA9PT0gJ2R5bmFtaWMnKXtcbiAgICAgICAgICAgICAgY29sb3IgPSB0aGlzLmNvbG9ycy5nZXRDb2xvcihqLCB7cG9zOiBpIC0gMX0gKTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICBpZiAodGhpcy5jb2xvcnNjaGVtZSA9PT0gJ2NvbnNlbnN1cycpIHtcbiAgICAgICAgICAgICAgICBjb2xvciA9IHRoaXMuY21hcFtpIC0gMV1bal0gfHwgXCIjN2E3YTdhXCI7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29sb3IgPSBudWxsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmxldHRlcnNbal0uZHJhdyh0aGlzLmNvbnRleHRzW2NvbnRleHRfbnVtXSwgY29sX3Bvc2l0aW9uc1tqXVswXSwgY29sX3Bvc2l0aW9uc1tqXVsxXSwgY29sX3Bvc2l0aW9uc1tqXVsyXSwgY29sX3Bvc2l0aW9uc1tqXVszXSwgY29sb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuXG4gICAgLy8gaWYgYWxpX2Nvb3JkaW5hdGVzIGV4aXN0IGFuZCB0b2dnbGUgaXMgc2V0IHRoZW4gZGlzcGxheSB0aGVcbiAgICAvLyBhbGlnbm1lbnQgY29vcmRpbmF0ZXMgYW5kIG5vdCB0aGUgbW9kZWwgY29vcmRpbmF0ZXMuXG4gICAgaWYgKHRoaXMuZGlzcGxheV9hbGlfbWFwKSB7XG4gICAgICBjb2x1bW5fbGFiZWwgPSB0aGlzLmRhdGEuYWxpX21hcFtpIC0gMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbHVtbl9sYWJlbCA9IGNvbHVtbl9udW07XG4gICAgfVxuXG4gICAgaWYodGhpcy5vcHRpb25zLnNob3dfZGl2aWRlcil7XG4gICAgICBpZiAodGhpcy56b29tIDwgMC43KSB7XG4gICAgICAgIGlmIChpICUgdGhpcy5vcHRpb25zLmRpdmlkZXJfc3RlcCA9PT0gMCkge1xuICAgICAgICAgIGRyYXdfY29sdW1uX2RpdmlkZXIodGhpcyx7XG4gICAgICAgICAgICBjb250ZXh0X251bSA6IGNvbnRleHRfbnVtLFxuICAgICAgICAgICAgeCA6IHgsXG4gICAgICAgICAgICBmb250c2l6ZTogMTAsXG4gICAgICAgICAgICBjb2x1bW5fbnVtOiBjb2x1bW5fbGFiZWwsXG4gICAgICAgICAgICByYWxpZ246IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZHJhd19jb2x1bW5fZGl2aWRlcih0aGlzLHtcbiAgICAgICAgICBjb250ZXh0X251bSA6IGNvbnRleHRfbnVtLFxuICAgICAgICAgIHggOiB4LFxuICAgICAgICAgIGZvbnRzaXplOiBmb250c2l6ZSxcbiAgICAgICAgICBjb2x1bW5fbnVtOiBjb2x1bW5fbGFiZWxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYodGhpcy5vcHRpb25zLnNob3dfcHJvYnMpe1xuICAgICAgZHJhd19kZWxldGVfb2Rkcyh0aGlzLmNvbnRleHRzW2NvbnRleHRfbnVtXSwgeCwgdGhpcy5oZWlnaHQsIHRoaXMuem9vbWVkX2NvbHVtbiwgdGhpcy5kYXRhLmRlbGV0ZV9wcm9ic1tpIC0gMV0sIGZvbnRzaXplLCB0aGlzLnNob3dfaW5zZXJ0cyk7XG4gICAgICAvL2RyYXcgaW5zZXJ0IGxlbmd0aCB0aWNrc1xuICAgICAgZHJhd190aWNrcyh0aGlzLmNvbnRleHRzW2NvbnRleHRfbnVtXSwgeCwgdGhpcy5oZWlnaHQgLSAxNSwgNSk7XG4gICAgICBpZiAodGhpcy5zaG93X2luc2VydHMpIHtcbiAgICAgICAgZHJhd19pbnNlcnRfb2Rkcyh0aGlzLmNvbnRleHRzW2NvbnRleHRfbnVtXSwgeCwgdGhpcy5oZWlnaHQsIHRoaXMuem9vbWVkX2NvbHVtbiwgdGhpcy5kYXRhLmluc2VydF9wcm9ic1tpIC0gMV0sIGZvbnRzaXplKTtcbiAgICAgICAgZHJhd19pbnNlcnRfbGVuZ3RoKHRoaXMuY29udGV4dHNbY29udGV4dF9udW1dLCB4LCB0aGlzLmhlaWdodCAtIDUsIHRoaXMuem9vbWVkX2NvbHVtbiwgdGhpcy5kYXRhLmluc2VydF9sZW5ndGhzW2kgLSAxXSwgZm9udHNpemUpO1xuXG4gICAgICAgIC8vIGRyYXcgZGVsZXRlIHByb2JhYmlsaXR5IHRpY2tzXG4gICAgICAgIGRyYXdfdGlja3ModGhpcy5jb250ZXh0c1tjb250ZXh0X251bV0sIHgsIHRoaXMuaGVpZ2h0IC0gNDUsIDUpO1xuICAgICAgICAvLyBkcmF3IGluc2VydCBwcm9iYWJpbGl0eSB0aWNrc1xuICAgICAgICBkcmF3X3RpY2tzKHRoaXMuY29udGV4dHNbY29udGV4dF9udW1dLCB4LCB0aGlzLmhlaWdodCAtIDMwLCA1KTtcbiAgICAgIH1cblxuICAgIH1cblxuICAgIHggKz0gdGhpcy56b29tZWRfY29sdW1uO1xuICAgIGNvbHVtbl9udW0rKztcbiAgfVxuXG5cbiAgaWYodGhpcy5vcHRpb25zLnNob3dfcHJvYnMpe1xuICAgIC8vIGRyYXcgb3RoZXIgZGl2aWRlcnNcbiAgICBpZiAodGhpcy5zaG93X2luc2VydHMpIHtcbiAgICAgIGRyYXdfYm9yZGVyKHRoaXMuY29udGV4dHNbY29udGV4dF9udW1dLCB0aGlzLmhlaWdodCAtIDMwLCB0aGlzLnRvdGFsX3dpZHRoKTtcbiAgICAgIGRyYXdfYm9yZGVyKHRoaXMuY29udGV4dHNbY29udGV4dF9udW1dLCB0aGlzLmhlaWdodCAtIDQ1LCB0aGlzLnRvdGFsX3dpZHRoKTtcbiAgICB9XG4gICAgZHJhd19ib3JkZXIodGhpcy5jb250ZXh0c1tjb250ZXh0X251bV0sIHRoaXMuaGVpZ2h0IC0gMTUsIHRoaXMudG90YWxfd2lkdGgpO1xuICB9XG4gIGlmKHRoaXMub3B0aW9ucy5ib3JkZXIpe1xuICAgIGRyYXdfYm9yZGVyKHRoaXMuY29udGV4dHNbY29udGV4dF9udW1dLCAwLCB0aGlzLnRvdGFsX3dpZHRoKTtcbiAgfVxufTtcblxuXG5mdW5jdGlvbiBkcmF3X2RlbGV0ZV9vZGRzKGNvbnRleHQsIHgsIGhlaWdodCwgY29sX3dpZHRoLCB0ZXh0LCBmb250c2l6ZSwgc2hvd19pbnNlcnRzKSB7XG4gIHZhciB5ICAgICAgICA9IGhlaWdodCAtIDQsXG4gIGZpbGwgICAgID0gJyNmZmZmZmYnLFxuICB0ZXh0ZmlsbCA9ICcjNTU1NTU1JztcblxuICBpZiAoc2hvd19pbnNlcnRzKSB7XG4gICAgeSA9IGhlaWdodCAtIDM1O1xuICB9XG5cbiAgaWYgKHRleHQgPCAwLjc1KSB7XG4gICAgZmlsbCAgICAgPSAnIzIxNzFiNSc7XG4gICAgdGV4dGZpbGwgPSAnI2ZmZmZmZic7XG4gIH0gZWxzZSBpZiAodGV4dCA8IDAuODUpIHtcbiAgICBmaWxsID0gJyM2YmFlZDYnO1xuICB9IGVsc2UgaWYgKHRleHQgPCAwLjk1KSB7XG4gICAgZmlsbCA9ICcjYmRkN2U3JztcbiAgfVxuXG4gIGRyYXdfcmVjdF93aXRoX3RleHQoY29udGV4dCwgeCwgeSwgdGV4dCwgZm9udHNpemUsIGNvbF93aWR0aCwgZmlsbCwgdGV4dGZpbGwpO1xufVxuXG5mdW5jdGlvbiBkcmF3X3JlY3Rfd2l0aF90ZXh0KGNvbnRleHQsIHgsIHksIHRleHQsIGZvbnRzaXplLCBjb2xfd2lkdGgsIGZpbGwsIHRleHRmaWxsKSB7XG4gIGNvbnRleHQuZm9udCA9IGZvbnRzaXplICsgXCJweCBBcmlhbFwiO1xuICBjb250ZXh0LmZpbGxTdHlsZSA9IGZpbGw7XG4gIGNvbnRleHQuZmlsbFJlY3QoeCwgeSAtIDEwLCBjb2xfd2lkdGgsIDE0KTtcbiAgY29udGV4dC50ZXh0QWxpZ24gPSBcImNlbnRlclwiO1xuICBjb250ZXh0LmZpbGxTdHlsZSA9IHRleHRmaWxsO1xuICBjb250ZXh0LmZpbGxUZXh0KHRleHQsIHggKyAoY29sX3dpZHRoIC8gMiksIHkpO1xufVxuXG5mdW5jdGlvbiBkcmF3X2NvbHVtbl9kaXZpZGVyKGluc3QsIG9wdHMpIHtcbiAgdmFyIGRpdl94ID0gb3B0cy5yYWxpZ24gPyBvcHRzLnggKyBpbnN0Lnpvb21lZF9jb2x1bW4gOiBvcHRzLngsXG4gIG51bV94ID0gb3B0cy5yYWxpZ24gPyBvcHRzLnggKyAyIDogb3B0cy54O1xuICAvLyBkcmF3IGNvbHVtbiBkaXZpZGVyc1xuICBkcmF3X3RpY2tzKGluc3QuY29udGV4dHNbb3B0cy5jb250ZXh0X251bV0sIGRpdl94LCBpbnN0LmhlaWdodCAtIDMwLCAtMzAgLSBpbnN0LmhlaWdodCwgJyNkZGRkZGQnKTtcbiAgLy8gZHJhdyB0b3AgdGlja3NcbiAgZHJhd190aWNrcyhpbnN0LmNvbnRleHRzW29wdHMuY29udGV4dF9udW1dLCBkaXZfeCwgMCwgNSk7XG4gIC8vIGRyYXcgY29sdW1uIG51bWJlcnNcbiAgZHJhd19jb2x1bW5fbnVtYmVyKGluc3QuY29udGV4dHNbb3B0cy5jb250ZXh0X251bV0sIG51bV94LCAxMCwgaW5zdC56b29tZWRfY29sdW1uLCBvcHRzLmNvbHVtbl9udW0sIG9wdHMuZm9udHNpemUsIG9wdHMucmFsaWduKTtcbn07XG5cblxuXG5mdW5jdGlvbiBkcmF3X2luc2VydF9vZGRzKGNvbnRleHQsIHgsIGhlaWdodCwgY29sX3dpZHRoLCB0ZXh0LCBmb250c2l6ZSkge1xuICB2YXIgeSAgICAgICAgPSBoZWlnaHQgLSAyMCxcbiAgZmlsbCAgICAgPSAnI2ZmZmZmZicsXG4gIHRleHRmaWxsID0gJyM1NTU1NTUnO1xuXG4gIGlmICh0ZXh0ID4gMC4xKSB7XG4gICAgZmlsbCAgICAgPSAnI2Q3MzAxZic7XG4gICAgdGV4dGZpbGwgPSAnI2ZmZmZmZic7XG4gIH0gZWxzZSBpZiAodGV4dCA+IDAuMDUpIHtcbiAgICBmaWxsID0gJyNmYzhkNTknO1xuICB9IGVsc2UgaWYgKHRleHQgPiAwLjAzKSB7XG4gICAgZmlsbCA9ICcjZmRjYzhhJztcbiAgfVxuXG4gIGRyYXdfcmVjdF93aXRoX3RleHQoY29udGV4dCwgeCwgeSwgdGV4dCwgZm9udHNpemUsIGNvbF93aWR0aCwgZmlsbCwgdGV4dGZpbGwpO1xuXG4gIC8vZHJhdyB2ZXJ0aWNhbCBsaW5lIHRvIGluZGljYXRlIHdoZXJlIHRoZSBpbnNlcnQgd291bGQgb2NjdXJcbiAgaWYgKHRleHQgPiAwLjAzKSB7XG4gICAgZHJhd190aWNrcyhjb250ZXh0LCB4ICsgY29sX3dpZHRoLCBoZWlnaHQgLSAzMCwgLTMwIC0gaGVpZ2h0LCBmaWxsKTtcbiAgfVxufVxuZnVuY3Rpb24gZHJhd19pbnNlcnRfbGVuZ3RoKGNvbnRleHQsIHgsIHksIGNvbF93aWR0aCwgdGV4dCwgZm9udHNpemUpIHtcbiAgdmFyIGZpbGwgPSAnI2ZmZmZmZicsXG4gIHRleHRmaWxsID0gJyM1NTU1NTUnO1xuXG4gIGlmICh0ZXh0ID4gOSkge1xuICAgIGZpbGwgICAgID0gJyNkNzMwMWYnO1xuICAgIHRleHRmaWxsID0gJyNmZmZmZmYnO1xuICB9IGVsc2UgaWYgKHRleHQgPiA3KSB7XG4gICAgZmlsbCA9ICcjZmM4ZDU5JztcbiAgfSBlbHNlIGlmICh0ZXh0ID4gNCkge1xuICAgIGZpbGwgPSAnI2ZkY2M4YSc7XG4gIH1cbiAgZHJhd19yZWN0X3dpdGhfdGV4dChjb250ZXh0LCB4LCB5LCB0ZXh0LCBmb250c2l6ZSwgY29sX3dpZHRoLCBmaWxsLCB0ZXh0ZmlsbCk7XG59XG4iLCIvKlxuICogSmF2YVNjcmlwdCBDYW52YXMgdG8gQmxvYiAyLjAuNVxuICogaHR0cHM6Ly9naXRodWIuY29tL2JsdWVpbXAvSmF2YVNjcmlwdC1DYW52YXMtdG8tQmxvYlxuICpcbiAqIENvcHlyaWdodCAyMDEyLCBTZWJhc3RpYW4gVHNjaGFuXG4gKiBodHRwczovL2JsdWVpbXAubmV0XG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlOlxuICogaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVRcbiAqXG4gKiBCYXNlZCBvbiBzdGFja292ZXJmbG93IHVzZXIgU3RvaXZlJ3MgY29kZSBzbmlwcGV0OlxuICogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3EvNDk5ODkwOFxuICovXG52YXIgQ2FudmFzUHJvdG90eXBlID0gd2luZG93LkhUTUxDYW52YXNFbGVtZW50ICYmXG53aW5kb3cuSFRNTENhbnZhc0VsZW1lbnQucHJvdG90eXBlLFxuICBoYXNCbG9iQ29uc3RydWN0b3IgPSB3aW5kb3cuQmxvYiAmJiAoZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gQm9vbGVhbihuZXcgQmxvYigpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9KCkpLFxuICBoYXNBcnJheUJ1ZmZlclZpZXdTdXBwb3J0ID0gaGFzQmxvYkNvbnN0cnVjdG9yICYmIHdpbmRvdy5VaW50OEFycmF5ICYmXG4gIChmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBuZXcgQmxvYihbbmV3IFVpbnQ4QXJyYXkoMTAwKV0pLnNpemUgPT09IDEwMDtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9KCkpLFxuICBCbG9iQnVpbGRlciA9IHdpbmRvdy5CbG9iQnVpbGRlciB8fCB3aW5kb3cuV2ViS2l0QmxvYkJ1aWxkZXIgfHxcbiAgd2luZG93Lk1vekJsb2JCdWlsZGVyIHx8IHdpbmRvdy5NU0Jsb2JCdWlsZGVyLFxuICBkYXRhVVJMdG9CbG9iID0gKGhhc0Jsb2JDb25zdHJ1Y3RvciB8fCBCbG9iQnVpbGRlcikgJiYgd2luZG93LmF0b2IgJiZcbiAgd2luZG93LkFycmF5QnVmZmVyICYmIHdpbmRvdy5VaW50OEFycmF5ICYmIGZ1bmN0aW9uIChkYXRhVVJJKSB7XG4gICAgdmFyIGJ5dGVTdHJpbmcsXG4gICAgYXJyYXlCdWZmZXIsXG4gICAgaW50QXJyYXksXG4gICAgICBpLFxuICAgICAgbWltZVN0cmluZyxcbiAgICAgICAgYmI7XG4gICAgaWYgKGRhdGFVUkkuc3BsaXQoJywnKVswXS5pbmRleE9mKCdiYXNlNjQnKSA+PSAwKSB7XG4gICAgICAvLyBDb252ZXJ0IGJhc2U2NCB0byByYXcgYmluYXJ5IGRhdGEgaGVsZCBpbiBhIHN0cmluZzpcbiAgICAgIGJ5dGVTdHJpbmcgPSBhdG9iKGRhdGFVUkkuc3BsaXQoJywnKVsxXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENvbnZlcnQgYmFzZTY0L1VSTEVuY29kZWQgZGF0YSBjb21wb25lbnQgdG8gcmF3IGJpbmFyeSBkYXRhOlxuICAgICAgYnl0ZVN0cmluZyA9IGRlY29kZVVSSUNvbXBvbmVudChkYXRhVVJJLnNwbGl0KCcsJylbMV0pO1xuICAgIH1cbiAgICAvLyBXcml0ZSB0aGUgYnl0ZXMgb2YgdGhlIHN0cmluZyB0byBhbiBBcnJheUJ1ZmZlcjpcbiAgICBhcnJheUJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihieXRlU3RyaW5nLmxlbmd0aCk7XG4gICAgaW50QXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcik7XG4gICAgZm9yIChpID0gMDsgaSA8IGJ5dGVTdHJpbmcubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGludEFycmF5W2ldID0gYnl0ZVN0cmluZy5jaGFyQ29kZUF0KGkpO1xuICAgIH1cbiAgICAvLyBTZXBhcmF0ZSBvdXQgdGhlIG1pbWUgY29tcG9uZW50OlxuICAgIG1pbWVTdHJpbmcgPSBkYXRhVVJJLnNwbGl0KCcsJylbMF0uc3BsaXQoJzonKVsxXS5zcGxpdCgnOycpWzBdO1xuICAgIC8vIFdyaXRlIHRoZSBBcnJheUJ1ZmZlciAob3IgQXJyYXlCdWZmZXJWaWV3KSB0byBhIGJsb2I6XG4gICAgaWYgKGhhc0Jsb2JDb25zdHJ1Y3Rvcikge1xuICAgICAgcmV0dXJuIG5ldyBCbG9iKFxuICAgICAgICAgIFtoYXNBcnJheUJ1ZmZlclZpZXdTdXBwb3J0ID8gaW50QXJyYXkgOiBhcnJheUJ1ZmZlcl0sXG4gICAgICAgICAge3R5cGU6IG1pbWVTdHJpbmd9XG4gICAgICAgICAgKTtcbiAgICB9XG4gICAgYmIgPSBuZXcgQmxvYkJ1aWxkZXIoKTtcbiAgICBiYi5hcHBlbmQoYXJyYXlCdWZmZXIpO1xuICAgIHJldHVybiBiYi5nZXRCbG9iKG1pbWVTdHJpbmcpO1xuICB9O1xuaWYgKHdpbmRvdy5IVE1MQ2FudmFzRWxlbWVudCAmJiAhQ2FudmFzUHJvdG90eXBlLnRvQmxvYikge1xuICBpZiAoQ2FudmFzUHJvdG90eXBlLm1vekdldEFzRmlsZSkge1xuICAgIENhbnZhc1Byb3RvdHlwZS50b0Jsb2IgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIHR5cGUsIHF1YWxpdHkpIHtcbiAgICAgIGlmIChxdWFsaXR5ICYmIENhbnZhc1Byb3RvdHlwZS50b0RhdGFVUkwgJiYgZGF0YVVSTHRvQmxvYikge1xuICAgICAgICBjYWxsYmFjayhkYXRhVVJMdG9CbG9iKHRoaXMudG9EYXRhVVJMKHR5cGUsIHF1YWxpdHkpKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayh0aGlzLm1vekdldEFzRmlsZSgnYmxvYicsIHR5cGUpKTtcbiAgICAgIH1cbiAgICB9O1xuICB9IGVsc2UgaWYgKENhbnZhc1Byb3RvdHlwZS50b0RhdGFVUkwgJiYgZGF0YVVSTHRvQmxvYikge1xuICAgIENhbnZhc1Byb3RvdHlwZS50b0Jsb2IgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIHR5cGUsIHF1YWxpdHkpIHtcbiAgICAgIGNhbGxiYWNrKGRhdGFVUkx0b0Jsb2IodGhpcy50b0RhdGFVUkwodHlwZSwgcXVhbGl0eSkpKTtcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGF0YVVSTHRvQmxvYjtcbiIsIi8qIEZpbGVTYXZlci5qc1xuICogIEEgc2F2ZUFzKCkgRmlsZVNhdmVyIGltcGxlbWVudGF0aW9uLlxuICogIDIwMTQtMDUtMjdcbiAqXG4gKiAgQnkgRWxpIEdyZXksIGh0dHA6Ly9lbGlncmV5LmNvbVxuICogIExpY2Vuc2U6IFgxMS9NSVRcbiAqICAgIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZWxpZ3JleS9GaWxlU2F2ZXIuanMvYmxvYi9tYXN0ZXIvTElDRU5TRS5tZFxuICovXG5cbi8qZ2xvYmFsIHNlbGYgKi9cbi8qanNsaW50IGJpdHdpc2U6IHRydWUsIGluZGVudDogNCwgbGF4YnJlYWs6IHRydWUsIGxheGNvbW1hOiB0cnVlLCBzbWFydHRhYnM6IHRydWUsIHBsdXNwbHVzOiB0cnVlICovXG5cbi8qISBAc291cmNlIGh0dHA6Ly9wdXJsLmVsaWdyZXkuY29tL2dpdGh1Yi9GaWxlU2F2ZXIuanMvYmxvYi9tYXN0ZXIvRmlsZVNhdmVyLmpzICovXG5cbnZhciBzYXZlQXMgPSBzYXZlQXNcbiAgLy8gSUUgMTArIChuYXRpdmUgc2F2ZUFzKVxuICB8fCAodHlwZW9mIG5hdmlnYXRvciAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgbmF2aWdhdG9yLm1zU2F2ZU9yT3BlbkJsb2IgJiYgbmF2aWdhdG9yLm1zU2F2ZU9yT3BlbkJsb2IuYmluZChuYXZpZ2F0b3IpKVxuICAvLyBFdmVyeW9uZSBlbHNlXG4gIHx8IChmdW5jdGlvbih2aWV3KSB7XG5cdFwidXNlIHN0cmljdFwiO1xuXHQvLyBJRSA8MTAgaXMgZXhwbGljaXRseSB1bnN1cHBvcnRlZFxuXHRpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHQgICAgL01TSUUgWzEtOV1cXC4vLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpIHtcblx0XHRyZXR1cm47XG5cdH1cblx0dmFyXG5cdFx0ICBkb2MgPSB2aWV3LmRvY3VtZW50XG5cdFx0ICAvLyBvbmx5IGdldCBVUkwgd2hlbiBuZWNlc3NhcnkgaW4gY2FzZSBCbG9iLmpzIGhhc24ndCBvdmVycmlkZGVuIGl0IHlldFxuXHRcdCwgZ2V0X1VSTCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHZpZXcuVVJMIHx8IHZpZXcud2Via2l0VVJMIHx8IHZpZXc7XG5cdFx0fVxuXHRcdCwgc2F2ZV9saW5rID0gZG9jLmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIiwgXCJhXCIpXG5cdFx0LCBjYW5fdXNlX3NhdmVfbGluayA9ICF2aWV3LmV4dGVybmFsSG9zdCAmJiBcImRvd25sb2FkXCIgaW4gc2F2ZV9saW5rXG5cdFx0LCBjbGljayA9IGZ1bmN0aW9uKG5vZGUpIHtcblx0XHRcdHZhciBldmVudCA9IGRvYy5jcmVhdGVFdmVudChcIk1vdXNlRXZlbnRzXCIpO1xuXHRcdFx0ZXZlbnQuaW5pdE1vdXNlRXZlbnQoXG5cdFx0XHRcdFwiY2xpY2tcIiwgdHJ1ZSwgZmFsc2UsIHZpZXcsIDAsIDAsIDAsIDAsIDBcblx0XHRcdFx0LCBmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMCwgbnVsbFxuXHRcdFx0KTtcblx0XHRcdG5vZGUuZGlzcGF0Y2hFdmVudChldmVudCk7XG5cdFx0fVxuXHRcdCwgd2Via2l0X3JlcV9mcyA9IHZpZXcud2Via2l0UmVxdWVzdEZpbGVTeXN0ZW1cblx0XHQsIHJlcV9mcyA9IHZpZXcucmVxdWVzdEZpbGVTeXN0ZW0gfHwgd2Via2l0X3JlcV9mcyB8fCB2aWV3Lm1velJlcXVlc3RGaWxlU3lzdGVtXG5cdFx0LCB0aHJvd19vdXRzaWRlID0gZnVuY3Rpb24oZXgpIHtcblx0XHRcdCh2aWV3LnNldEltbWVkaWF0ZSB8fCB2aWV3LnNldFRpbWVvdXQpKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR0aHJvdyBleDtcblx0XHRcdH0sIDApO1xuXHRcdH1cblx0XHQsIGZvcmNlX3NhdmVhYmxlX3R5cGUgPSBcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiXG5cdFx0LCBmc19taW5fc2l6ZSA9IDBcblx0XHQsIGRlbGV0aW9uX3F1ZXVlID0gW11cblx0XHQsIHByb2Nlc3NfZGVsZXRpb25fcXVldWUgPSBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpID0gZGVsZXRpb25fcXVldWUubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKGktLSkge1xuXHRcdFx0XHR2YXIgZmlsZSA9IGRlbGV0aW9uX3F1ZXVlW2ldO1xuXHRcdFx0XHRpZiAodHlwZW9mIGZpbGUgPT09IFwic3RyaW5nXCIpIHsgLy8gZmlsZSBpcyBhbiBvYmplY3QgVVJMXG5cdFx0XHRcdFx0Z2V0X1VSTCgpLnJldm9rZU9iamVjdFVSTChmaWxlKTtcblx0XHRcdFx0fSBlbHNlIHsgLy8gZmlsZSBpcyBhIEZpbGVcblx0XHRcdFx0XHRmaWxlLnJlbW92ZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRkZWxldGlvbl9xdWV1ZS5sZW5ndGggPSAwOyAvLyBjbGVhciBxdWV1ZVxuXHRcdH1cblx0XHQsIGRpc3BhdGNoID0gZnVuY3Rpb24oZmlsZXNhdmVyLCBldmVudF90eXBlcywgZXZlbnQpIHtcblx0XHRcdGV2ZW50X3R5cGVzID0gW10uY29uY2F0KGV2ZW50X3R5cGVzKTtcblx0XHRcdHZhciBpID0gZXZlbnRfdHlwZXMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKGktLSkge1xuXHRcdFx0XHR2YXIgbGlzdGVuZXIgPSBmaWxlc2F2ZXJbXCJvblwiICsgZXZlbnRfdHlwZXNbaV1dO1xuXHRcdFx0XHRpZiAodHlwZW9mIGxpc3RlbmVyID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0bGlzdGVuZXIuY2FsbChmaWxlc2F2ZXIsIGV2ZW50IHx8IGZpbGVzYXZlcik7XG5cdFx0XHRcdFx0fSBjYXRjaCAoZXgpIHtcblx0XHRcdFx0XHRcdHRocm93X291dHNpZGUoZXgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHQsIEZpbGVTYXZlciA9IGZ1bmN0aW9uKGJsb2IsIG5hbWUpIHtcblx0XHRcdC8vIEZpcnN0IHRyeSBhLmRvd25sb2FkLCB0aGVuIHdlYiBmaWxlc3lzdGVtLCB0aGVuIG9iamVjdCBVUkxzXG5cdFx0XHR2YXJcblx0XHRcdFx0ICBmaWxlc2F2ZXIgPSB0aGlzXG5cdFx0XHRcdCwgdHlwZSA9IGJsb2IudHlwZVxuXHRcdFx0XHQsIGJsb2JfY2hhbmdlZCA9IGZhbHNlXG5cdFx0XHRcdCwgb2JqZWN0X3VybFxuXHRcdFx0XHQsIHRhcmdldF92aWV3XG5cdFx0XHRcdCwgZ2V0X29iamVjdF91cmwgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHR2YXIgb2JqZWN0X3VybCA9IGdldF9VUkwoKS5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cdFx0XHRcdFx0ZGVsZXRpb25fcXVldWUucHVzaChvYmplY3RfdXJsKTtcblx0XHRcdFx0XHRyZXR1cm4gb2JqZWN0X3VybDtcblx0XHRcdFx0fVxuXHRcdFx0XHQsIGRpc3BhdGNoX2FsbCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRpc3BhdGNoKGZpbGVzYXZlciwgXCJ3cml0ZXN0YXJ0IHByb2dyZXNzIHdyaXRlIHdyaXRlZW5kXCIuc3BsaXQoXCIgXCIpKTtcblx0XHRcdFx0fVxuXHRcdFx0XHQvLyBvbiBhbnkgZmlsZXN5cyBlcnJvcnMgcmV2ZXJ0IHRvIHNhdmluZyB3aXRoIG9iamVjdCBVUkxzXG5cdFx0XHRcdCwgZnNfZXJyb3IgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHQvLyBkb24ndCBjcmVhdGUgbW9yZSBvYmplY3QgVVJMcyB0aGFuIG5lZWRlZFxuXHRcdFx0XHRcdGlmIChibG9iX2NoYW5nZWQgfHwgIW9iamVjdF91cmwpIHtcblx0XHRcdFx0XHRcdG9iamVjdF91cmwgPSBnZXRfb2JqZWN0X3VybChibG9iKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHRhcmdldF92aWV3KSB7XG5cdFx0XHRcdFx0XHR0YXJnZXRfdmlldy5sb2NhdGlvbi5ocmVmID0gb2JqZWN0X3VybDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0d2luZG93Lm9wZW4ob2JqZWN0X3VybCwgXCJfYmxhbmtcIik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGZpbGVzYXZlci5yZWFkeVN0YXRlID0gZmlsZXNhdmVyLkRPTkU7XG5cdFx0XHRcdFx0ZGlzcGF0Y2hfYWxsKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0LCBhYm9ydGFibGUgPSBmdW5jdGlvbihmdW5jKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYgKGZpbGVzYXZlci5yZWFkeVN0YXRlICE9PSBmaWxlc2F2ZXIuRE9ORSkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblx0XHRcdFx0LCBjcmVhdGVfaWZfbm90X2ZvdW5kID0ge2NyZWF0ZTogdHJ1ZSwgZXhjbHVzaXZlOiBmYWxzZX1cblx0XHRcdFx0LCBzbGljZVxuXHRcdFx0O1xuXHRcdFx0ZmlsZXNhdmVyLnJlYWR5U3RhdGUgPSBmaWxlc2F2ZXIuSU5JVDtcblx0XHRcdGlmICghbmFtZSkge1xuXHRcdFx0XHRuYW1lID0gXCJkb3dubG9hZFwiO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGNhbl91c2Vfc2F2ZV9saW5rKSB7XG5cdFx0XHRcdG9iamVjdF91cmwgPSBnZXRfb2JqZWN0X3VybChibG9iKTtcblx0XHRcdFx0c2F2ZV9saW5rLmhyZWYgPSBvYmplY3RfdXJsO1xuXHRcdFx0XHRzYXZlX2xpbmsuZG93bmxvYWQgPSBuYW1lO1xuXHRcdFx0XHRjbGljayhzYXZlX2xpbmspO1xuXHRcdFx0XHRmaWxlc2F2ZXIucmVhZHlTdGF0ZSA9IGZpbGVzYXZlci5ET05FO1xuXHRcdFx0XHRkaXNwYXRjaF9hbGwoKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0Ly8gT2JqZWN0IGFuZCB3ZWIgZmlsZXN5c3RlbSBVUkxzIGhhdmUgYSBwcm9ibGVtIHNhdmluZyBpbiBHb29nbGUgQ2hyb21lIHdoZW5cblx0XHRcdC8vIHZpZXdlZCBpbiBhIHRhYiwgc28gSSBmb3JjZSBzYXZlIHdpdGggYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXG5cdFx0XHQvLyBodHRwOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD05MTE1OFxuXHRcdFx0aWYgKHZpZXcuY2hyb21lICYmIHR5cGUgJiYgdHlwZSAhPT0gZm9yY2Vfc2F2ZWFibGVfdHlwZSkge1xuXHRcdFx0XHRzbGljZSA9IGJsb2Iuc2xpY2UgfHwgYmxvYi53ZWJraXRTbGljZTtcblx0XHRcdFx0YmxvYiA9IHNsaWNlLmNhbGwoYmxvYiwgMCwgYmxvYi5zaXplLCBmb3JjZV9zYXZlYWJsZV90eXBlKTtcblx0XHRcdFx0YmxvYl9jaGFuZ2VkID0gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdC8vIFNpbmNlIEkgY2FuJ3QgYmUgc3VyZSB0aGF0IHRoZSBndWVzc2VkIG1lZGlhIHR5cGUgd2lsbCB0cmlnZ2VyIGEgZG93bmxvYWRcblx0XHRcdC8vIGluIFdlYktpdCwgSSBhcHBlbmQgLmRvd25sb2FkIHRvIHRoZSBmaWxlbmFtZS5cblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD02NTQ0MFxuXHRcdFx0aWYgKHdlYmtpdF9yZXFfZnMgJiYgbmFtZSAhPT0gXCJkb3dubG9hZFwiKSB7XG5cdFx0XHRcdG5hbWUgKz0gXCIuZG93bmxvYWRcIjtcblx0XHRcdH1cblx0XHRcdGlmICh0eXBlID09PSBmb3JjZV9zYXZlYWJsZV90eXBlIHx8IHdlYmtpdF9yZXFfZnMpIHtcblx0XHRcdFx0dGFyZ2V0X3ZpZXcgPSB2aWV3O1xuXHRcdFx0fVxuXHRcdFx0aWYgKCFyZXFfZnMpIHtcblx0XHRcdFx0ZnNfZXJyb3IoKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0ZnNfbWluX3NpemUgKz0gYmxvYi5zaXplO1xuXHRcdFx0cmVxX2ZzKHZpZXcuVEVNUE9SQVJZLCBmc19taW5fc2l6ZSwgYWJvcnRhYmxlKGZ1bmN0aW9uKGZzKSB7XG5cdFx0XHRcdGZzLnJvb3QuZ2V0RGlyZWN0b3J5KFwic2F2ZWRcIiwgY3JlYXRlX2lmX25vdF9mb3VuZCwgYWJvcnRhYmxlKGZ1bmN0aW9uKGRpcikge1xuXHRcdFx0XHRcdHZhciBzYXZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRkaXIuZ2V0RmlsZShuYW1lLCBjcmVhdGVfaWZfbm90X2ZvdW5kLCBhYm9ydGFibGUoZnVuY3Rpb24oZmlsZSkge1xuXHRcdFx0XHRcdFx0XHRmaWxlLmNyZWF0ZVdyaXRlcihhYm9ydGFibGUoZnVuY3Rpb24od3JpdGVyKSB7XG5cdFx0XHRcdFx0XHRcdFx0d3JpdGVyLm9ud3JpdGVlbmQgPSBmdW5jdGlvbihldmVudCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dGFyZ2V0X3ZpZXcubG9jYXRpb24uaHJlZiA9IGZpbGUudG9VUkwoKTtcblx0XHRcdFx0XHRcdFx0XHRcdGRlbGV0aW9uX3F1ZXVlLnB1c2goZmlsZSk7XG5cdFx0XHRcdFx0XHRcdFx0XHRmaWxlc2F2ZXIucmVhZHlTdGF0ZSA9IGZpbGVzYXZlci5ET05FO1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGlzcGF0Y2goZmlsZXNhdmVyLCBcIndyaXRlZW5kXCIsIGV2ZW50KTtcblx0XHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0XHRcdHdyaXRlci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgZXJyb3IgPSB3cml0ZXIuZXJyb3I7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoZXJyb3IuY29kZSAhPT0gZXJyb3IuQUJPUlRfRVJSKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZzX2Vycm9yKCk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdFx0XHRcIndyaXRlc3RhcnQgcHJvZ3Jlc3Mgd3JpdGUgYWJvcnRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihldmVudCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0d3JpdGVyW1wib25cIiArIGV2ZW50XSA9IGZpbGVzYXZlcltcIm9uXCIgKyBldmVudF07XG5cdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdFx0d3JpdGVyLndyaXRlKGJsb2IpO1xuXHRcdFx0XHRcdFx0XHRcdGZpbGVzYXZlci5hYm9ydCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0d3JpdGVyLmFib3J0KCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRmaWxlc2F2ZXIucmVhZHlTdGF0ZSA9IGZpbGVzYXZlci5ET05FO1xuXHRcdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHRcdFx0ZmlsZXNhdmVyLnJlYWR5U3RhdGUgPSBmaWxlc2F2ZXIuV1JJVElORztcblx0XHRcdFx0XHRcdFx0fSksIGZzX2Vycm9yKTtcblx0XHRcdFx0XHRcdH0pLCBmc19lcnJvcik7XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRkaXIuZ2V0RmlsZShuYW1lLCB7Y3JlYXRlOiBmYWxzZX0sIGFib3J0YWJsZShmdW5jdGlvbihmaWxlKSB7XG5cdFx0XHRcdFx0XHQvLyBkZWxldGUgZmlsZSBpZiBpdCBhbHJlYWR5IGV4aXN0c1xuXHRcdFx0XHRcdFx0ZmlsZS5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdHNhdmUoKTtcblx0XHRcdFx0XHR9KSwgYWJvcnRhYmxlKGZ1bmN0aW9uKGV4KSB7XG5cdFx0XHRcdFx0XHRpZiAoZXguY29kZSA9PT0gZXguTk9UX0ZPVU5EX0VSUikge1xuXHRcdFx0XHRcdFx0XHRzYXZlKCk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRmc19lcnJvcigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pKTtcblx0XHRcdFx0fSksIGZzX2Vycm9yKTtcblx0XHRcdH0pLCBmc19lcnJvcik7XG5cdFx0fVxuXHRcdCwgRlNfcHJvdG8gPSBGaWxlU2F2ZXIucHJvdG90eXBlXG5cdFx0LCBzYXZlQXMgPSBmdW5jdGlvbihibG9iLCBuYW1lKSB7XG5cdFx0XHRyZXR1cm4gbmV3IEZpbGVTYXZlcihibG9iLCBuYW1lKTtcblx0XHR9XG5cdDtcblx0RlNfcHJvdG8uYWJvcnQgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgZmlsZXNhdmVyID0gdGhpcztcblx0XHRmaWxlc2F2ZXIucmVhZHlTdGF0ZSA9IGZpbGVzYXZlci5ET05FO1xuXHRcdGRpc3BhdGNoKGZpbGVzYXZlciwgXCJhYm9ydFwiKTtcblx0fTtcblx0RlNfcHJvdG8ucmVhZHlTdGF0ZSA9IEZTX3Byb3RvLklOSVQgPSAwO1xuXHRGU19wcm90by5XUklUSU5HID0gMTtcblx0RlNfcHJvdG8uRE9ORSA9IDI7XG5cblx0RlNfcHJvdG8uZXJyb3IgPVxuXHRGU19wcm90by5vbndyaXRlc3RhcnQgPVxuXHRGU19wcm90by5vbnByb2dyZXNzID1cblx0RlNfcHJvdG8ub253cml0ZSA9XG5cdEZTX3Byb3RvLm9uYWJvcnQgPVxuXHRGU19wcm90by5vbmVycm9yID1cblx0RlNfcHJvdG8ub253cml0ZWVuZCA9XG5cdFx0bnVsbDtcblxuXHR2aWV3LmFkZEV2ZW50TGlzdGVuZXIoXCJ1bmxvYWRcIiwgcHJvY2Vzc19kZWxldGlvbl9xdWV1ZSwgZmFsc2UpO1xuXHRzYXZlQXMudW5sb2FkID0gZnVuY3Rpb24oKSB7XG5cdFx0cHJvY2Vzc19kZWxldGlvbl9xdWV1ZSgpO1xuXHRcdHZpZXcucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInVubG9hZFwiLCBwcm9jZXNzX2RlbGV0aW9uX3F1ZXVlLCBmYWxzZSk7XG5cdH07XG5cdHJldHVybiBzYXZlQXM7XG59KFxuXHQgICB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmXG5cdHx8IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93XG5cdHx8IHRoaXMuY29udGVudFxuKSk7XG4vLyBgc2VsZmAgaXMgdW5kZWZpbmVkIGluIEZpcmVmb3ggZm9yIEFuZHJvaWQgY29udGVudCBzY3JpcHQgY29udGV4dFxuLy8gd2hpbGUgYHRoaXNgIGlzIG5zSUNvbnRlbnRGcmFtZU1lc3NhZ2VNYW5hZ2VyXG4vLyB3aXRoIGFuIGF0dHJpYnV0ZSBgY29udGVudGAgdGhhdCBjb3JyZXNwb25kcyB0byB0aGUgd2luZG93XG5cbmFtZERlZmluZSA9IHdpbmRvdy5kZWZpbmU7XG5pZiggdHlwZW9mIGFtZERlZmluZSA9PT0gXCJ1bmRlZmluZWRcIiAmJiAodHlwZW9mIHdpbmRvdy5hbG1vbmQgIT09IFwidW5kZWZpbmVkXCIgXG4gICAgJiYgXCJkZWZpbmVcIiBpbiB3aW5kb3cuYWxtb25kICkpe1xuICBhbWREZWZpbmUgPSB3aW5kb3cuYWxtb25kLmRlZmluZTtcbn1cblxuaWYgKHR5cGVvZiBtb2R1bGUgIT09IFwidW5kZWZpbmVkXCIgJiYgbW9kdWxlICE9PSBudWxsKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gc2F2ZUFzO1xufSBlbHNlIGlmICgodHlwZW9mIGFtZERlZmluZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBhbWREZWZpbmUgIT09IG51bGwpICYmIChhbWREZWZpbmUuYW1kICE9IG51bGwpKSB7XG4gIGFtZERlZmluZShcInNhdmVBc1wiLFtdLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gc2F2ZUFzO1xuICB9KTtcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcywgY3VzdG9tRG9jdW1lbnQpIHtcbiAgdmFyIGRvYyA9IGN1c3RvbURvY3VtZW50IHx8IGRvY3VtZW50O1xuICBpZiAoZG9jLmNyZWF0ZVN0eWxlU2hlZXQpIHtcbiAgICB2YXIgc2hlZXQgPSBkb2MuY3JlYXRlU3R5bGVTaGVldCgpXG4gICAgc2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgICByZXR1cm4gc2hlZXQub3duZXJOb2RlO1xuICB9IGVsc2Uge1xuICAgIHZhciBoZWFkID0gZG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0sXG4gICAgICAgIHN0eWxlID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG5cbiAgICBzdHlsZS50eXBlID0gJ3RleHQvY3NzJztcblxuICAgIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvYy5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgICB9XG5cbiAgICBoZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgICByZXR1cm4gc3R5bGU7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzLmJ5VXJsID0gZnVuY3Rpb24odXJsKSB7XG4gIGlmIChkb2N1bWVudC5jcmVhdGVTdHlsZVNoZWV0KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVN0eWxlU2hlZXQodXJsKS5vd25lck5vZGU7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGhlYWQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdLFxuICAgICAgICBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGluaycpO1xuXG4gICAgbGluay5yZWwgPSAnc3R5bGVzaGVldCc7XG4gICAgbGluay5ocmVmID0gdXJsO1xuXG4gICAgaGVhZC5hcHBlbmRDaGlsZChsaW5rKTtcbiAgICByZXR1cm4gbGluaztcbiAgfVxufTtcbiIsInZhciBVdGlscyA9IHt9O1xuXG5cbi8qXG5SZW1vdmUgYW4gZWxlbWVudCBhbmQgcHJvdmlkZSBhIGZ1bmN0aW9uIHRoYXQgaW5zZXJ0cyBpdCBpbnRvIGl0cyBvcmlnaW5hbCBwb3NpdGlvblxuaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vc3BlZWQvYXJ0aWNsZXMvamF2YXNjcmlwdC1kb21cbkBwYXJhbSBlbGVtZW50IHtFbGVtZW50fSBUaGUgZWxlbWVudCB0byBiZSB0ZW1wb3JhcmlseSByZW1vdmVkXG5AcmV0dXJuIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiB0aGF0IGluc2VydHMgdGhlIGVsZW1lbnQgaW50byBpdHMgb3JpZ2luYWwgcG9zaXRpb25cbiAqL1xuXG5VdGlscy5yZW1vdmVUb0luc2VydExhdGVyID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICB2YXIgbmV4dFNpYmxpbmcsIHBhcmVudE5vZGU7XG4gIHBhcmVudE5vZGUgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gIG5leHRTaWJsaW5nID0gZWxlbWVudC5uZXh0U2libGluZztcbiAgcGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbGVtZW50KTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGlmIChuZXh0U2libGluZykge1xuICAgICAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZWxlbWVudCwgbmV4dFNpYmxpbmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJlbnROb2RlLmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn07XG5cblxuLypcbmZhc3Rlc3QgcG9zc2libGUgd2F5IHRvIGRlc3Ryb3kgYWxsIHN1YiBub2RlcyAoYWthIGNoaWxkcylcbmh0dHA6Ly9qc3BlcmYuY29tL2lubmVyaHRtbC12cy1yZW1vdmVjaGlsZC8xNVxuQHBhcmFtIGVsZW1lbnQge0VsZW1lbnR9IFRoZSBlbGVtZW50IGZvciB3aGljaCBhbGwgY2hpbGRzIHNob3VsZCBiZSByZW1vdmVkXG4gKi9cblxuVXRpbHMucmVtb3ZlQWxsQ2hpbGRzID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICB2YXIgY291bnQ7XG4gIGNvdW50ID0gMDtcbiAgd2hpbGUgKGVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgIGNvdW50Kys7XG4gICAgZWxlbWVudC5yZW1vdmVDaGlsZChlbGVtZW50LmZpcnN0Q2hpbGQpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFV0aWxzO1xuIiwiLyohXG4gKiBqQm9uZSB2MS4wLjIyIC0gMjAxNS0wMi0xMiAtIExpYnJhcnkgZm9yIERPTSBtYW5pcHVsYXRpb25cbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20va3Vwcml5YW5lbmtvL2pib25lXG4gKlxuICogQ29weXJpZ2h0IDIwMTUgQWxleGV5IEt1cHJpeWFuZW5rb1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICovXG5cbihmdW5jdGlvbiAod2luKSB7XG5cbnZhclxuLy8gY2FjaGUgcHJldmlvdXMgdmVyc2lvbnNcbl8kID0gd2luLiQsXG5fakJvbmUgPSB3aW4uakJvbmUsXG5cbi8vIFF1aWNrIG1hdGNoIGEgc3RhbmRhbG9uZSB0YWdcbnJxdWlja1NpbmdsZVRhZyA9IC9ePChcXHcrKVxccypcXC8/PiQvLFxuXG4vLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuLy8gUHJpb3JpdGl6ZSAjaWQgb3ZlciA8dGFnPiB0byBhdm9pZCBYU1MgdmlhIGxvY2F0aW9uLmhhc2hcbnJxdWlja0V4cHIgPSAvXig/OlteIzxdKig8W1xcd1xcV10rPilbXj5dKiR8IyhbXFx3XFwtXSopJCkvLFxuXG4vLyBBbGlhcyBmb3IgZnVuY3Rpb25cbnNsaWNlID0gW10uc2xpY2UsXG5zcGxpY2UgPSBbXS5zcGxpY2UsXG5rZXlzID0gT2JqZWN0LmtleXMsXG5cbi8vIEFsaWFzIGZvciBnbG9iYWwgdmFyaWFibGVzXG5kb2MgPSBkb2N1bWVudCxcblxuaXNTdHJpbmcgPSBmdW5jdGlvbihlbCkge1xuICAgIHJldHVybiB0eXBlb2YgZWwgPT09IFwic3RyaW5nXCI7XG59LFxuaXNPYmplY3QgPSBmdW5jdGlvbihlbCkge1xuICAgIHJldHVybiBlbCBpbnN0YW5jZW9mIE9iamVjdDtcbn0sXG5pc0Z1bmN0aW9uID0gZnVuY3Rpb24oZWwpIHtcbiAgICByZXR1cm4gKHt9KS50b1N0cmluZy5jYWxsKGVsKSA9PT0gXCJbb2JqZWN0IEZ1bmN0aW9uXVwiO1xufSxcbmlzQXJyYXkgPSBmdW5jdGlvbihlbCkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGVsKTtcbn0sXG5qQm9uZSA9IGZ1bmN0aW9uKGVsZW1lbnQsIGRhdGEpIHtcbiAgICByZXR1cm4gbmV3IGZuLmluaXQoZWxlbWVudCwgZGF0YSk7XG59LFxuZm47XG5cbi8vIHNldCBwcmV2aW91cyB2YWx1ZXMgYW5kIHJldHVybiB0aGUgaW5zdGFuY2UgdXBvbiBjYWxsaW5nIHRoZSBuby1jb25mbGljdCBtb2RlXG5qQm9uZS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgd2luLiQgPSBfJDtcbiAgICB3aW4uakJvbmUgPSBfakJvbmU7XG5cbiAgICByZXR1cm4gakJvbmU7XG59O1xuXG5mbiA9IGpCb25lLmZuID0gakJvbmUucHJvdG90eXBlID0ge1xuICAgIGluaXQ6IGZ1bmN0aW9uKGVsZW1lbnQsIGRhdGEpIHtcbiAgICAgICAgdmFyIGVsZW1lbnRzLCB0YWcsIHdyYXBlciwgZnJhZ21lbnQ7XG5cbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNTdHJpbmcoZWxlbWVudCkpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBzaW5nbGUgRE9NIGVsZW1lbnRcbiAgICAgICAgICAgIGlmICh0YWcgPSBycXVpY2tTaW5nbGVUYWcuZXhlYyhlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgIHRoaXNbMF0gPSBkb2MuY3JlYXRlRWxlbWVudCh0YWdbMV0pO1xuICAgICAgICAgICAgICAgIHRoaXMubGVuZ3RoID0gMTtcblxuICAgICAgICAgICAgICAgIGlmIChpc09iamVjdChkYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmF0dHIoZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBDcmVhdGUgRE9NIGNvbGxlY3Rpb25cbiAgICAgICAgICAgIGlmICgodGFnID0gcnF1aWNrRXhwci5leGVjKGVsZW1lbnQpKSAmJiB0YWdbMV0pIHtcbiAgICAgICAgICAgICAgICBmcmFnbWVudCA9IGRvYy5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgICAgICAgICAgICAgd3JhcGVyID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICAgICAgd3JhcGVyLmlubmVySFRNTCA9IGVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHdyYXBlci5sYXN0Q2hpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQod3JhcGVyLmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbGVtZW50cyA9IHNsaWNlLmNhbGwoZnJhZ21lbnQuY2hpbGROb2Rlcyk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gakJvbmUubWVyZ2UodGhpcywgZWxlbWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRmluZCBET00gZWxlbWVudHMgd2l0aCBxdWVyeVNlbGVjdG9yQWxsXG4gICAgICAgICAgICBpZiAoakJvbmUuaXNFbGVtZW50KGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGpCb25lKGRhdGEpLmZpbmQoZWxlbWVudCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudHMgPSBkb2MucXVlcnlTZWxlY3RvckFsbChlbGVtZW50KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBqQm9uZS5tZXJnZSh0aGlzLCBlbGVtZW50cyk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gV3JhcCBET01FbGVtZW50XG4gICAgICAgIGlmIChlbGVtZW50Lm5vZGVUeXBlKSB7XG4gICAgICAgICAgICB0aGlzWzBdID0gZWxlbWVudDtcbiAgICAgICAgICAgIHRoaXMubGVuZ3RoID0gMTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUnVuIGZ1bmN0aW9uXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudCgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJldHVybiBqQm9uZSBlbGVtZW50IGFzIGlzXG4gICAgICAgIGlmIChlbGVtZW50IGluc3RhbmNlb2YgakJvbmUpIHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmV0dXJuIGVsZW1lbnQgd3JhcHBlZCBieSBqQm9uZVxuICAgICAgICByZXR1cm4gakJvbmUubWFrZUFycmF5KGVsZW1lbnQsIHRoaXMpO1xuICAgIH0sXG5cbiAgICBwb3A6IFtdLnBvcCxcbiAgICBwdXNoOiBbXS5wdXNoLFxuICAgIHJldmVyc2U6IFtdLnJldmVyc2UsXG4gICAgc2hpZnQ6IFtdLnNoaWZ0LFxuICAgIHNvcnQ6IFtdLnNvcnQsXG4gICAgc3BsaWNlOiBbXS5zcGxpY2UsXG4gICAgc2xpY2U6IFtdLnNsaWNlLFxuICAgIGluZGV4T2Y6IFtdLmluZGV4T2YsXG4gICAgZm9yRWFjaDogW10uZm9yRWFjaCxcbiAgICB1bnNoaWZ0OiBbXS51bnNoaWZ0LFxuICAgIGNvbmNhdDogW10uY29uY2F0LFxuICAgIGpvaW46IFtdLmpvaW4sXG4gICAgZXZlcnk6IFtdLmV2ZXJ5LFxuICAgIHNvbWU6IFtdLnNvbWUsXG4gICAgZmlsdGVyOiBbXS5maWx0ZXIsXG4gICAgbWFwOiBbXS5tYXAsXG4gICAgcmVkdWNlOiBbXS5yZWR1Y2UsXG4gICAgcmVkdWNlUmlnaHQ6IFtdLnJlZHVjZVJpZ2h0LFxuICAgIGxlbmd0aDogMFxufTtcblxuZm4uY29uc3RydWN0b3IgPSBqQm9uZTtcblxuZm4uaW5pdC5wcm90b3R5cGUgPSBmbjtcblxuakJvbmUuc2V0SWQgPSBmdW5jdGlvbihlbCkge1xuICAgIHZhciBqaWQgPSBlbC5qaWQ7XG5cbiAgICBpZiAoZWwgPT09IHdpbikge1xuICAgICAgICBqaWQgPSBcIndpbmRvd1wiO1xuICAgIH0gZWxzZSBpZiAoZWwuamlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZWwuamlkID0gamlkID0gKytqQm9uZS5fY2FjaGUuamlkO1xuICAgIH1cblxuICAgIGlmICghakJvbmUuX2NhY2hlLmV2ZW50c1tqaWRdKSB7XG4gICAgICAgIGpCb25lLl9jYWNoZS5ldmVudHNbamlkXSA9IHt9O1xuICAgIH1cbn07XG5cbmpCb25lLmdldERhdGEgPSBmdW5jdGlvbihlbCkge1xuICAgIGVsID0gZWwgaW5zdGFuY2VvZiBqQm9uZSA/IGVsWzBdIDogZWw7XG5cbiAgICB2YXIgamlkID0gZWwgPT09IHdpbiA/IFwid2luZG93XCIgOiBlbC5qaWQ7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBqaWQ6IGppZCxcbiAgICAgICAgZXZlbnRzOiBqQm9uZS5fY2FjaGUuZXZlbnRzW2ppZF1cbiAgICB9O1xufTtcblxuakJvbmUuaXNFbGVtZW50ID0gZnVuY3Rpb24oZWwpIHtcbiAgICByZXR1cm4gZWwgJiYgZWwgaW5zdGFuY2VvZiBqQm9uZSB8fCBlbCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50IHx8IGlzU3RyaW5nKGVsKTtcbn07XG5cbmpCb25lLl9jYWNoZSA9IHtcbiAgICBldmVudHM6IHt9LFxuICAgIGppZDogMFxufTtcblxuZnVuY3Rpb24gaXNBcnJheWxpa2Uob2JqKSB7XG4gICAgdmFyIGxlbmd0aCA9IG9iai5sZW5ndGgsXG4gICAgICAgIHR5cGUgPSB0eXBlb2Ygb2JqO1xuXG4gICAgaWYgKGlzRnVuY3Rpb24odHlwZSkgfHwgb2JqID09PSB3aW4pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChvYmoubm9kZVR5cGUgPT09IDEgJiYgbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBpc0FycmF5KHR5cGUpIHx8IGxlbmd0aCA9PT0gMCB8fFxuICAgICAgICB0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiICYmIGxlbmd0aCA+IDAgJiYgKGxlbmd0aCAtIDEpIGluIG9iajtcbn1cblxuakJvbmUubWVyZ2UgPSBmdW5jdGlvbihmaXJzdCwgc2Vjb25kKSB7XG4gICAgdmFyIGwgPSBzZWNvbmQubGVuZ3RoLFxuICAgICAgICBpID0gZmlyc3QubGVuZ3RoLFxuICAgICAgICBqID0gMDtcblxuICAgIHdoaWxlIChqIDwgbCkge1xuICAgICAgICBmaXJzdFtpKytdID0gc2Vjb25kW2orK107XG4gICAgfVxuXG4gICAgZmlyc3QubGVuZ3RoID0gaTtcblxuICAgIHJldHVybiBmaXJzdDtcbn07XG5cbmpCb25lLmNvbnRhaW5zID0gZnVuY3Rpb24oY29udGFpbmVyLCBjb250YWluZWQpIHtcbiAgICB2YXIgcmVzdWx0O1xuXG4gICAgY29udGFpbmVyLnJldmVyc2UoKS5zb21lKGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgIGlmIChlbC5jb250YWlucyhjb250YWluZWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0ID0gZWw7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG5qQm9uZS5leHRlbmQgPSBmdW5jdGlvbih0YXJnZXQpIHtcbiAgICB2YXIgdGc7XG5cbiAgICBzcGxpY2UuY2FsbChhcmd1bWVudHMsIDEpLmZvckVhY2goZnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgIHRnID0gdGFyZ2V0OyAvL2NhY2hpbmcgdGFyZ2V0IGZvciBwZXJmIGltcHJvdmVtZW50XG5cbiAgICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICB0Z1twcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRhcmdldDtcbn07XG5cbmpCb25lLm1ha2VBcnJheSA9IGZ1bmN0aW9uKGFyciwgcmVzdWx0cykge1xuICAgIHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG4gICAgaWYgKGFyciAhPT0gbnVsbCkge1xuICAgICAgICBpZiAoaXNBcnJheWxpa2UoYXJyKSkge1xuICAgICAgICAgICAgakJvbmUubWVyZ2UocmV0LCBpc1N0cmluZyhhcnIpID8gW2Fycl0gOiBhcnIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0LnB1c2goYXJyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXQ7XG59O1xuXG5qQm9uZS51bmlxdWUgPSBmdW5jdGlvbihhcnJheSkge1xuICAgIGlmIChhcnJheSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICB2YXIgcmVzdWx0ID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaV07XG4gICAgICAgIGlmIChyZXN1bHQuaW5kZXhPZih2YWx1ZSkgPCAwKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmZ1bmN0aW9uIEJvbmVFdmVudChlLCBkYXRhKSB7XG4gICAgdmFyIGtleSwgc2V0dGVyO1xuXG4gICAgdGhpcy5vcmlnaW5hbEV2ZW50ID0gZTtcblxuICAgIHNldHRlciA9IGZ1bmN0aW9uKGtleSwgZSkge1xuICAgICAgICBpZiAoa2V5ID09PSBcInByZXZlbnREZWZhdWx0XCIpIHtcbiAgICAgICAgICAgIHRoaXNba2V5XSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVmYXVsdFByZXZlbnRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVba2V5XSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKGVba2V5XSkpIHtcbiAgICAgICAgICAgIHRoaXNba2V5XSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlW2tleV0oKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzW2tleV0gPSBlW2tleV07XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgZm9yIChrZXkgaW4gZSkge1xuICAgICAgICBpZiAoZVtrZXldIHx8IHR5cGVvZiBlW2tleV0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgc2V0dGVyLmNhbGwodGhpcywga2V5LCBlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGpCb25lLmV4dGVuZCh0aGlzLCBkYXRhKTtcbn1cblxuakJvbmUuRXZlbnQgPSBmdW5jdGlvbihldmVudCwgZGF0YSkge1xuICAgIHZhciBuYW1lc3BhY2UsIGV2ZW50VHlwZTtcblxuICAgIGlmIChldmVudC50eXBlICYmICFkYXRhKSB7XG4gICAgICAgIGRhdGEgPSBldmVudDtcbiAgICAgICAgZXZlbnQgPSBldmVudC50eXBlO1xuICAgIH1cblxuICAgIG5hbWVzcGFjZSA9IGV2ZW50LnNwbGl0KFwiLlwiKS5zcGxpY2UoMSkuam9pbihcIi5cIik7XG4gICAgZXZlbnRUeXBlID0gZXZlbnQuc3BsaXQoXCIuXCIpWzBdO1xuXG4gICAgZXZlbnQgPSBkb2MuY3JlYXRlRXZlbnQoXCJFdmVudFwiKTtcbiAgICBldmVudC5pbml0RXZlbnQoZXZlbnRUeXBlLCB0cnVlLCB0cnVlKTtcblxuICAgIHJldHVybiBqQm9uZS5leHRlbmQoZXZlbnQsIHtcbiAgICAgICAgbmFtZXNwYWNlOiBuYW1lc3BhY2UsXG4gICAgICAgIGlzRGVmYXVsdFByZXZlbnRlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZXZlbnQuZGVmYXVsdFByZXZlbnRlZDtcbiAgICAgICAgfVxuICAgIH0sIGRhdGEpO1xufTtcblxuZm4ub24gPSBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICBsZW5ndGggPSB0aGlzLmxlbmd0aCxcbiAgICAgICAgaSA9IDAsXG4gICAgICAgIGNhbGxiYWNrID0gc2xpY2UuY2FsbChhcmdzLCAtMSlbMF0sXG4gICAgICAgIHRhcmdldCwgZGF0YSwgbmFtZXNwYWNlLCBmbiwgZXZlbnRzLCBldmVudFR5cGUsIGV4cGVjdGVkVGFyZ2V0LCBhZGRMaXN0ZW5lcjtcblxuICAgIC8vIC5vbignY2xpY2snLCAnLnNlbGVjdG9yJywgZnVuY3Rpb24oKSB7fSlcbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDMgJiYgaXNTdHJpbmcoYXJnc1sxXSkpIHtcbiAgICAgICAgdGFyZ2V0ID0gYXJnc1sxXTtcbiAgICB9XG4gICAgLy8gLm9uKCdjbGljaycsIHsga2V5OiB2YWx1ZSB9LCBmdW5jdGlvbigpIHt9KVxuICAgIGVsc2UgaWYgKGFyZ3MubGVuZ3RoID09PSAzICYmIGlzT2JqZWN0KGFyZ3NbMV0pKSB7XG4gICAgICAgIGRhdGEgPSBhcmdzWzFdO1xuICAgIH1cbiAgICAvLyAub24oJ2NsaWNrJywgJy5zZWxlY3RvcicsIHsga2V5OiB2YWx1ZSB9LCBmdW5jdGlvbigpIHt9KVxuICAgIGVsc2UgaWYgKGFyZ3MubGVuZ3RoID09PSA0KSB7XG4gICAgICAgIHRhcmdldCA9IGFyZ3NbMV07XG4gICAgICAgIGRhdGEgPSBhcmdzWzJdO1xuICAgIH1cblxuICAgIGFkZExpc3RlbmVyID0gZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgakJvbmUuc2V0SWQoZWwpO1xuICAgICAgICBldmVudHMgPSBqQm9uZS5nZXREYXRhKGVsKS5ldmVudHM7XG4gICAgICAgIGV2ZW50LnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgZXZlbnRPcHRpb25zID0ge307XG5cbiAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgZXZlbnRPcHRpb25zLmRhdGEgPSBkYXRhO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBldmVudFR5cGUgPSBldmVudC5zcGxpdChcIi5cIilbMF07XG4gICAgICAgICAgICBuYW1lc3BhY2UgPSBldmVudC5zcGxpdChcIi5cIikuc3BsaWNlKDEpLmpvaW4oXCIuXCIpO1xuICAgICAgICAgICAgZXZlbnRzW2V2ZW50VHlwZV0gPSBldmVudHNbZXZlbnRUeXBlXSB8fCBbXTtcblxuICAgICAgICAgICAgZm4gPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUubmFtZXNwYWNlICYmIGUubmFtZXNwYWNlICE9PSBuYW1lc3BhY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGV4cGVjdGVkVGFyZ2V0ID0gbnVsbDtcblxuICAgICAgICAgICAgICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoZWwsIG5ldyBCb25lRXZlbnQoZSwgZXZlbnRPcHRpb25zKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh+akJvbmUoZWwpLmZpbmQodGFyZ2V0KS5pbmRleE9mKGUudGFyZ2V0KSB8fCAoZXhwZWN0ZWRUYXJnZXQgPSBqQm9uZS5jb250YWlucyhqQm9uZShlbCkuZmluZCh0YXJnZXQpLCBlLnRhcmdldCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkVGFyZ2V0ID0gZXhwZWN0ZWRUYXJnZXQgfHwgZS50YXJnZXQ7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50T3B0aW9ucy5jdXJyZW50VGFyZ2V0ID0gZXhwZWN0ZWRUYXJnZXQ7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbChleHBlY3RlZFRhcmdldCwgbmV3IEJvbmVFdmVudChlLCBldmVudE9wdGlvbnMpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBldmVudHNbZXZlbnRUeXBlXS5wdXNoKHtcbiAgICAgICAgICAgICAgICBuYW1lc3BhY2U6IG5hbWVzcGFjZSxcbiAgICAgICAgICAgICAgICBmbjogZm4sXG4gICAgICAgICAgICAgICAgb3JpZ2luZm46IGNhbGxiYWNrXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lciAmJiBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgZm4sIGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYWRkTGlzdGVuZXIodGhpc1tpXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5mbi5vbmUgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICBpID0gMCxcbiAgICAgICAgbGVuZ3RoID0gdGhpcy5sZW5ndGgsXG4gICAgICAgIG9uZUFyZ3MgPSBzbGljZS5jYWxsKGFyZ3MsIDEsIGFyZ3MubGVuZ3RoIC0gMSksXG4gICAgICAgIGNhbGxiYWNrID0gc2xpY2UuY2FsbChhcmdzLCAtMSlbMF0sXG4gICAgICAgIGFkZExpc3RlbmVyO1xuXG4gICAgYWRkTGlzdGVuZXIgPSBmdW5jdGlvbihlbCkge1xuICAgICAgICB2YXIgJGVsID0gIGpCb25lKGVsKTtcblxuICAgICAgICBldmVudC5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgdmFyIGZuID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICRlbC5vZmYoZXZlbnQsIGZuKTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKGVsLCBlKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICRlbC5vbi5hcHBseSgkZWwsIFtldmVudF0uY29uY2F0KG9uZUFyZ3MsIGZuKSk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGFkZExpc3RlbmVyKHRoaXNbaV0pO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuZm4udHJpZ2dlciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIGV2ZW50cyA9IFtdLFxuICAgICAgICBpID0gMCxcbiAgICAgICAgbGVuZ3RoID0gdGhpcy5sZW5ndGgsXG4gICAgICAgIGRpc3BhdGNoRXZlbnRzO1xuXG4gICAgaWYgKCFldmVudCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpZiAoaXNTdHJpbmcoZXZlbnQpKSB7XG4gICAgICAgIGV2ZW50cyA9IGV2ZW50LnNwbGl0KFwiIFwiKS5tYXAoZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBqQm9uZS5FdmVudChldmVudCk7XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGV2ZW50ID0gZXZlbnQgaW5zdGFuY2VvZiBFdmVudCA/IGV2ZW50IDogakJvbmUuRXZlbnQoZXZlbnQpO1xuICAgICAgICBldmVudHMgPSBbZXZlbnRdO1xuICAgIH1cblxuICAgIGRpc3BhdGNoRXZlbnRzID0gZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgZXZlbnRzLmZvckVhY2goZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGlmICghZXZlbnQudHlwZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZWwuZGlzcGF0Y2hFdmVudCAmJiBlbC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZGlzcGF0Y2hFdmVudHModGhpc1tpXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5mbi5vZmYgPSBmdW5jdGlvbihldmVudCwgZm4pIHtcbiAgICB2YXIgaSA9IDAsXG4gICAgICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoLFxuICAgICAgICByZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50cywgZXZlbnRUeXBlLCBpbmRleCwgZWwsIGUpIHtcbiAgICAgICAgICAgIHZhciBjYWxsYmFjaztcblxuICAgICAgICAgICAgLy8gZ2V0IGNhbGxiYWNrXG4gICAgICAgICAgICBpZiAoKGZuICYmIGUub3JpZ2luZm4gPT09IGZuKSB8fCAhZm4pIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayA9IGUuZm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChldmVudHNbZXZlbnRUeXBlXVtpbmRleF0uZm4gPT09IGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrKTtcblxuICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBoYW5kbGVyIGZyb20gY2FjaGVcbiAgICAgICAgICAgICAgICBqQm9uZS5fY2FjaGUuZXZlbnRzW2pCb25lLmdldERhdGEoZWwpLmppZF1bZXZlbnRUeXBlXS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBldmVudHMsIG5hbWVzcGFjZSwgcmVtb3ZlTGlzdGVuZXJzLCBldmVudFR5cGU7XG5cbiAgICByZW1vdmVMaXN0ZW5lcnMgPSBmdW5jdGlvbihlbCkge1xuICAgICAgICB2YXIgbCwgZXZlbnRzQnlUeXBlLCBlO1xuXG4gICAgICAgIGV2ZW50cyA9IGpCb25lLmdldERhdGEoZWwpLmV2ZW50cztcblxuICAgICAgICBpZiAoIWV2ZW50cykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmVtb3ZlIGFsbCBldmVudHNcbiAgICAgICAgaWYgKCFldmVudCAmJiBldmVudHMpIHtcbiAgICAgICAgICAgIHJldHVybiBrZXlzKGV2ZW50cykuZm9yRWFjaChmdW5jdGlvbihldmVudFR5cGUpIHtcbiAgICAgICAgICAgICAgICBldmVudHNCeVR5cGUgPSBldmVudHNbZXZlbnRUeXBlXTtcbiAgICAgICAgICAgICAgICBsID0gZXZlbnRzQnlUeXBlLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgIHdoaWxlKGwtLSkge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVMaXN0ZW5lcihldmVudHMsIGV2ZW50VHlwZSwgbCwgZWwsIGV2ZW50c0J5VHlwZVtsXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBldmVudC5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgZXZlbnRUeXBlID0gZXZlbnQuc3BsaXQoXCIuXCIpWzBdO1xuICAgICAgICAgICAgbmFtZXNwYWNlID0gZXZlbnQuc3BsaXQoXCIuXCIpLnNwbGljZSgxKS5qb2luKFwiLlwiKTtcblxuICAgICAgICAgICAgLy8gcmVtb3ZlIG5hbWVkIGV2ZW50c1xuICAgICAgICAgICAgaWYgKGV2ZW50c1tldmVudFR5cGVdKSB7XG4gICAgICAgICAgICAgICAgZXZlbnRzQnlUeXBlID0gZXZlbnRzW2V2ZW50VHlwZV07XG4gICAgICAgICAgICAgICAgbCA9IGV2ZW50c0J5VHlwZS5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICB3aGlsZShsLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgZSA9IGV2ZW50c0J5VHlwZVtsXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFuYW1lc3BhY2UgfHwgKG5hbWVzcGFjZSAmJiBlLm5hbWVzcGFjZSA9PT0gbmFtZXNwYWNlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlTGlzdGVuZXIoZXZlbnRzLCBldmVudFR5cGUsIGwsIGVsLCBlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHJlbW92ZSBhbGwgbmFtZXNwYWNlZCBldmVudHNcbiAgICAgICAgICAgIGVsc2UgaWYgKG5hbWVzcGFjZSkge1xuICAgICAgICAgICAgICAgIGtleXMoZXZlbnRzKS5mb3JFYWNoKGZ1bmN0aW9uKGV2ZW50VHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBldmVudHNCeVR5cGUgPSBldmVudHNbZXZlbnRUeXBlXTtcbiAgICAgICAgICAgICAgICAgICAgbCA9IGV2ZW50c0J5VHlwZS5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAgICAgd2hpbGUobC0tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlID0gZXZlbnRzQnlUeXBlW2xdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUubmFtZXNwYWNlLnNwbGl0KFwiLlwiKVswXSA9PT0gbmFtZXNwYWNlLnNwbGl0KFwiLlwiKVswXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUxpc3RlbmVyKGV2ZW50cywgZXZlbnRUeXBlLCBsLCBlbCwgZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVtb3ZlTGlzdGVuZXJzKHRoaXNbaV0pO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuZm4uZmluZCA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgdmFyIHJlc3VsdHMgPSBbXSxcbiAgICAgICAgaSA9IDAsXG4gICAgICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoLFxuICAgICAgICBmaW5kZXIgPSBmdW5jdGlvbihlbCkge1xuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oZWwucXVlcnlTZWxlY3RvckFsbCkpIHtcbiAgICAgICAgICAgICAgICBbXS5mb3JFYWNoLmNhbGwoZWwucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvciksIGZ1bmN0aW9uKGZvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChmb3VuZCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGZpbmRlcih0aGlzW2ldKTtcbiAgICB9XG5cbiAgICByZXR1cm4gakJvbmUocmVzdWx0cyk7XG59O1xuXG5mbi5nZXQgPSBmdW5jdGlvbihpbmRleCkge1xuICAgIHJldHVybiBpbmRleCAhPSBudWxsID9cblxuICAgICAgICAvLyBSZXR1cm4ganVzdCB0aGUgb25lIGVsZW1lbnQgZnJvbSB0aGUgc2V0XG4gICAgICAgIChpbmRleCA8IDAgPyB0aGlzW2luZGV4ICsgdGhpcy5sZW5ndGhdIDogdGhpc1tpbmRleF0pIDpcblxuICAgICAgICAvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XG4gICAgICAgIHNsaWNlLmNhbGwodGhpcyk7XG59O1xuXG5mbi5lcSA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgcmV0dXJuIGpCb25lKHRoaXNbaW5kZXhdKTtcbn07XG5cbmZuLnBhcmVudCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciByZXN1bHRzID0gW10sXG4gICAgICAgIHBhcmVudCxcbiAgICAgICAgaSA9IDAsXG4gICAgICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuXG4gICAgZm9yICg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoIX5yZXN1bHRzLmluZGV4T2YocGFyZW50ID0gdGhpc1tpXS5wYXJlbnRFbGVtZW50KSAmJiBwYXJlbnQpIHtcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaChwYXJlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGpCb25lKHJlc3VsdHMpO1xufTtcblxuZm4udG9BcnJheSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzbGljZS5jYWxsKHRoaXMpO1xufTtcblxuZm4uaXMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcblxuICAgIHJldHVybiB0aGlzLnNvbWUoZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgcmV0dXJuIGVsLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gYXJnc1swXTtcbiAgICB9KTtcbn07XG5cbmZuLmhhcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuXG4gICAgcmV0dXJuIHRoaXMuc29tZShmdW5jdGlvbihlbCkge1xuICAgICAgICByZXR1cm4gZWwucXVlcnlTZWxlY3RvckFsbChhcmdzWzBdKS5sZW5ndGg7XG4gICAgfSk7XG59O1xuXG5mbi5hZGQgPSBmdW5jdGlvbihzZWxlY3RvciwgY29udGV4dCkge1xuICAgIHJldHVybiBqQm9uZS51bmlxdWUoXG4gICAgICAgIGpCb25lLm1lcmdlKHRoaXMuZ2V0KCksIGpCb25lKHNlbGVjdG9yLCBjb250ZXh0KSlcbiAgICApO1xufTtcblxuZm4uYXR0ciA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgaSA9IDAsXG4gICAgICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoLFxuICAgICAgICBzZXR0ZXI7XG5cbiAgICBpZiAoaXNTdHJpbmcoa2V5KSAmJiBhcmdzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gdGhpc1swXSAmJiB0aGlzWzBdLmdldEF0dHJpYnV0ZShrZXkpO1xuICAgIH1cblxuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICBzZXR0ZXIgPSBmdW5jdGlvbihlbCkge1xuICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgICAgICB9O1xuICAgIH0gZWxzZSBpZiAoaXNPYmplY3Qoa2V5KSkge1xuICAgICAgICBzZXR0ZXIgPSBmdW5jdGlvbihlbCkge1xuICAgICAgICAgICAga2V5cyhrZXkpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgICAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZShuYW1lLCBrZXlbbmFtZV0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZm9yICg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBzZXR0ZXIodGhpc1tpXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5mbi5yZW1vdmVBdHRyID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgdmFyIGkgPSAwLFxuICAgICAgICBsZW5ndGggPSB0aGlzLmxlbmd0aDtcblxuICAgIGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpc1tpXS5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbmZuLnZhbCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIGkgPSAwLFxuICAgICAgICBsZW5ndGggPSB0aGlzLmxlbmd0aDtcblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzWzBdICYmIHRoaXNbMF0udmFsdWU7XG4gICAgfVxuXG4gICAgZm9yICg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzW2ldLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5mbi5jc3MgPSBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgIGkgPSAwLFxuICAgICAgICBsZW5ndGggPSB0aGlzLmxlbmd0aCxcbiAgICAgICAgc2V0dGVyO1xuXG4gICAgLy8gR2V0IGF0dHJpYnV0ZVxuICAgIGlmIChpc1N0cmluZyhrZXkpICYmIGFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiB0aGlzWzBdICYmIHdpbi5nZXRDb21wdXRlZFN0eWxlKHRoaXNbMF0pW2tleV07XG4gICAgfVxuXG4gICAgLy8gU2V0IGF0dHJpYnV0ZXNcbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgc2V0dGVyID0gZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgICAgIGVsLnN0eWxlW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGtleSkpIHtcbiAgICAgICAgc2V0dGVyID0gZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgICAgIGtleXMoa2V5KS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgICAgICAgICBlbC5zdHlsZVtuYW1lXSA9IGtleVtuYW1lXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc2V0dGVyKHRoaXNbaV0pO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuZm4uZGF0YSA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cywgZGF0YSA9IHt9LFxuICAgICAgICBpID0gMCxcbiAgICAgICAgbGVuZ3RoID0gdGhpcy5sZW5ndGgsXG4gICAgICAgIHNldHRlcixcbiAgICAgICAgc2V0VmFsdWUgPSBmdW5jdGlvbihlbCwga2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGVsLmpkYXRhID0gZWwuamRhdGEgfHwge307XG4gICAgICAgICAgICAgICAgZWwuamRhdGFba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbC5kYXRhc2V0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZ2V0VmFsdWUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlID09PSBcInRydWVcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gXCJmYWxzZVwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAvLyBHZXQgYWxsIGRhdGFcbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhpc1swXS5qZGF0YSAmJiAoZGF0YSA9IHRoaXNbMF0uamRhdGEpO1xuXG4gICAgICAgIGtleXModGhpc1swXS5kYXRhc2V0KS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgICAgZGF0YVtrZXldID0gZ2V0VmFsdWUodGhpc1swXS5kYXRhc2V0W2tleV0pO1xuICAgICAgICB9LCB0aGlzKTtcblxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgLy8gR2V0IGRhdGEgYnkgbmFtZVxuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSAmJiBpc1N0cmluZyhrZXkpKSB7XG4gICAgICAgIHJldHVybiB0aGlzWzBdICYmIGdldFZhbHVlKHRoaXNbMF0uZGF0YXNldFtrZXldIHx8IHRoaXNbMF0uamRhdGEgJiYgdGhpc1swXS5qZGF0YVtrZXldKTtcbiAgICB9XG5cbiAgICAvLyBTZXQgZGF0YVxuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSAmJiBpc09iamVjdChrZXkpKSB7XG4gICAgICAgIHNldHRlciA9IGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgICAgICBrZXlzKGtleSkuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgICAgICAgICAgc2V0VmFsdWUoZWwsIG5hbWUsIGtleVtuYW1lXSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGFyZ3MubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIHNldHRlciA9IGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgICAgICBzZXRWYWx1ZShlbCwga2V5LCB2YWx1ZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZm9yICg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBzZXR0ZXIodGhpc1tpXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5mbi5yZW1vdmVEYXRhID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgdmFyIGkgPSAwLFxuICAgICAgICBsZW5ndGggPSB0aGlzLmxlbmd0aCxcbiAgICAgICAgamRhdGEsIGRhdGFzZXQ7XG5cbiAgICBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGpkYXRhID0gdGhpc1tpXS5qZGF0YTtcbiAgICAgICAgZGF0YXNldCA9IHRoaXNbaV0uZGF0YXNldDtcblxuICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICBqZGF0YSAmJiBqZGF0YVtrZXldICYmIGRlbGV0ZSBqZGF0YVtrZXldO1xuICAgICAgICAgICAgZGVsZXRlIGRhdGFzZXRba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAoa2V5IGluIGpkYXRhKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGpkYXRhW2tleV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAoa2V5IGluIGRhdGFzZXQpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgZGF0YXNldFtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5mbi5odG1sID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgZWw7XG5cbiAgICAvLyBhZGQgSFRNTCBpbnRvIGVsZW1lbnRzXG4gICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxICYmIHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW1wdHkoKS5hcHBlbmQodmFsdWUpO1xuICAgIH1cbiAgICAvLyBnZXQgSFRNTCBmcm9tIGVsZW1lbnRcbiAgICBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PT0gMCAmJiAoZWwgPSB0aGlzWzBdKSkge1xuICAgICAgICByZXR1cm4gZWwuaW5uZXJIVE1MO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuZm4uYXBwZW5kID0gZnVuY3Rpb24oYXBwZW5kZWQpIHtcbiAgICB2YXIgaSA9IDAsXG4gICAgICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoLFxuICAgICAgICBzZXR0ZXI7XG5cbiAgICAvLyBjcmVhdGUgakJvbmUgb2JqZWN0IGFuZCB0aGVuIGFwcGVuZFxuICAgIGlmIChpc1N0cmluZyhhcHBlbmRlZCkgJiYgcnF1aWNrRXhwci5leGVjKGFwcGVuZGVkKSkge1xuICAgICAgICBhcHBlbmRlZCA9IGpCb25lKGFwcGVuZGVkKTtcbiAgICB9XG4gICAgLy8gY3JlYXRlIHRleHQgbm9kZSBmb3IgaW5zZXJ0aW5nXG4gICAgZWxzZSBpZiAoIWlzT2JqZWN0KGFwcGVuZGVkKSkge1xuICAgICAgICBhcHBlbmRlZCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGFwcGVuZGVkKTtcbiAgICB9XG5cbiAgICBhcHBlbmRlZCA9IGFwcGVuZGVkIGluc3RhbmNlb2YgakJvbmUgPyBhcHBlbmRlZCA6IGpCb25lKGFwcGVuZGVkKTtcblxuICAgIHNldHRlciA9IGZ1bmN0aW9uKGVsLCBpKSB7XG4gICAgICAgIGFwcGVuZGVkLmZvckVhY2goZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgaWYgKGkpIHtcbiAgICAgICAgICAgICAgICBlbC5hcHBlbmRDaGlsZChub2RlLmNsb25lTm9kZSh0cnVlKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGVsLmFwcGVuZENoaWxkKG5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgZm9yICg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBzZXR0ZXIodGhpc1tpXSwgaSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5mbi5hcHBlbmRUbyA9IGZ1bmN0aW9uKHRvKSB7XG4gICAgakJvbmUodG8pLmFwcGVuZCh0aGlzKTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuZm4uZW1wdHkgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaSA9IDAsXG4gICAgICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoLFxuICAgICAgICBlbDtcblxuICAgIGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZWwgPSB0aGlzW2ldO1xuXG4gICAgICAgIHdoaWxlIChlbC5sYXN0Q2hpbGQpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUNoaWxkKGVsLmxhc3RDaGlsZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbmZuLnJlbW92ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpID0gMCxcbiAgICAgICAgbGVuZ3RoID0gdGhpcy5sZW5ndGgsXG4gICAgICAgIGVsO1xuXG4gICAgLy8gcmVtb3ZlIGFsbCBsaXN0bmVyc1xuICAgIHRoaXMub2ZmKCk7XG5cbiAgICBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGVsID0gdGhpc1tpXTtcblxuICAgICAgICAvLyByZW1vdmUgZGF0YSBhbmQgbm9kZXNcbiAgICAgICAgZGVsZXRlIGVsLmpkYXRhO1xuICAgICAgICBlbC5wYXJlbnROb2RlICYmIGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuaWYgKHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgbW9kdWxlICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuICAgIC8vIEV4cG9zZSBqQm9uZSBhcyBtb2R1bGUuZXhwb3J0cyBpbiBsb2FkZXJzIHRoYXQgaW1wbGVtZW50IHRoZSBOb2RlXG4gICAgLy8gbW9kdWxlIHBhdHRlcm4gKGluY2x1ZGluZyBicm93c2VyaWZ5KS4gRG8gbm90IGNyZWF0ZSB0aGUgZ2xvYmFsLCBzaW5jZVxuICAgIC8vIHRoZSB1c2VyIHdpbGwgYmUgc3RvcmluZyBpdCB0aGVtc2VsdmVzIGxvY2FsbHksIGFuZCBnbG9iYWxzIGFyZSBmcm93bmVkXG4gICAgLy8gdXBvbiBpbiB0aGUgTm9kZSBtb2R1bGUgd29ybGQuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBqQm9uZTtcbn1cbi8vIFJlZ2lzdGVyIGFzIGEgQU1EIG1vZHVsZVxuZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBqQm9uZTtcbiAgICB9KTtcblxuICAgIHdpbi5qQm9uZSA9IHdpbi4kID0gakJvbmU7XG59IGVsc2UgaWYgKHR5cGVvZiB3aW4gPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHdpbi5kb2N1bWVudCA9PT0gXCJvYmplY3RcIikge1xuICAgIHdpbi5qQm9uZSA9IHdpbi4kID0gakJvbmU7XG59XG5cbn0od2luZG93KSk7XG4iLCJ2YXIga29hbGFqcyA9IHt9O1xuXG4vLyBwYXNzIGFuIGFsdGVybmF0aXZlIGRlZmF1bHQgdmFsdWVcbmtvYWxhanMuZCA9IGtvYWxhanMuZGVmYXVsdFZhbHVlID0gZnVuY3Rpb24gZGVmYXVsdFZhbHVlKG9iaiwgZGVmVmFsdWUpIHtcbiAgaWYgKG9iaiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgcmV0dXJuIGRlZlZhbHVlKCk7XG4gICAgfVxuICAgIHJldHVybiBkZWZWYWx1ZTtcbiAgfVxuICByZXR1cm4gb2JqO1xufTtcblxuLy8gYWxpYXMgZm9yIGdldEVsZW1lbnRCeUlkXG5rb2FsYWpzLmlkID0gZnVuY3Rpb24gbWsoZWwpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsKTtcbn07XG5cbi8vIGFsaWFzIGZvciBjcmVhdGVFbGVtZW50XG5rb2FsYWpzLm1rID0gZnVuY3Rpb24gbWsoZWwpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZWwpO1xufTtcblxuaWYgKG1vZHVsZSAhPT0gdW5kZWZpbmVkICYmIG1vZHVsZS5leHBvcnRzICE9PSB1bmRlZmluZWQpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBrb2FsYWpzO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9saWIvbWVudWJ1aWxkZXJcIik7XG4iLCJ2YXIgTWVudUJ1aWxkZXIsIGpib25lLCB2aWV3O1xuXG5qYm9uZSA9IHJlcXVpcmUoXCJqYm9uZVwiKTtcbnZpZXcgPSByZXF1aXJlKFwiYmFja2JvbmUtdmlld2pcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gTWVudUJ1aWxkZXIgPSB2aWV3LmV4dGVuZCh7XG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uKG9wdHMpIHtcbiAgICB0aGlzLl9ub2RlcyA9IFtdO1xuICAgIHRoaXMubmFtZSA9IG9wdHMubmFtZSB8fCBcIlwiO1xuICAgIHRoaXMuZWwuY2xhc3NOYW1lICs9IFwic21lbnViYXJcIjtcbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbigpIHtcblxuICAgIC8vIHJlbW92ZSBhbGwgY2hpbGRzXG4gICAgdmFyIGZjID0gdGhpcy5lbC5maXJzdENoaWxkO1xuICAgIHdoaWxlIChmYykge1xuICAgICAgdGhpcy5lbC5yZW1vdmVDaGlsZChmYyk7XG4gICAgICBmYyA9IHRoaXMuZWwuZmlyc3RDaGlsZDtcbiAgICB9XG5cbiAgICAvLyByZXBsYWNlIGNoaWxkXG4gICAgdGhpcy5lbC5hcHBlbmRDaGlsZCh0aGlzLmJ1aWxkRE9NKCkpO1xuICB9LFxuICBzZXROYW1lOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgfSxcbiAgYWRkTm9kZTogZnVuY3Rpb24obGFiZWwsIGNhbGxiYWNrLCBvcHRzKSB7XG4gICAgdmFyIHN0eWxlO1xuICAgIGlmIChvcHRzICE9IG51bGwpIHtcbiAgICAgIHN0eWxlID0gb3B0cy5zdHlsZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX25vZGVzID09IG51bGwpIHtcbiAgICAgIHRoaXMuX25vZGVzID0gW107XG4gICAgfVxuICAgIHRoaXMuX25vZGVzLnB1c2goe1xuICAgICAgbGFiZWw6IGxhYmVsLFxuICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxuICAgICAgc3R5bGU6IHN0eWxlXG4gICAgfSk7XG4gIH0sXG5cbiAgZ2V0Tm9kZTogZnVuY3Rpb24obGFiZWwpIHtcbiAgICB2YXIgck5vZGUgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fbm9kZXMuZm9yRWFjaChmdW5jdGlvbihlbCkge1xuICAgICAgaWYgKGVsLmxhYmVsID09PSBsYWJlbCkge1xuICAgICAgICByTm9kZSA9IGVsO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByTm9kZTtcbiAgfSxcblxuICBtb2RpZnlOb2RlOiBmdW5jdGlvbihsYWJlbCwgY2FsbGJhY2ssIG9wdHMpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMuZ2V0Tm9kZShsYWJlbCk7XG4gICAgbm9kZS5jYWxsYmFjayA9IGNhbGxiYWNrIHx8IG5vZGUuY2FsbGJhY2s7XG4gICAgb3B0cyA9IG9wdHMgfHwge307XG4gICAgbm9kZS5zdHlsZSA9IG9wdHMuc3R5bGUgfHwgbm9kZS5zdHlsZTtcbiAgfSxcblxuICByZW5hbWVOb2RlOiBmdW5jdGlvbihsYWJlbCwgbmV3TGFiZWwpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMuZ2V0Tm9kZShsYWJlbCk7XG4gICAgbm9kZS5sYWJlbCA9IG5ld0xhYmVsIHx8IG5vZGUubGFiZWw7XG4gIH0sXG5cbiAgcmVtb3ZlTm9kZTogZnVuY3Rpb24obGFiZWwpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMuZ2V0Tm9kZShsYWJlbCk7XG4gICAgdGhpcy5fbm9kZXMuc3BsaWNlKHRoaXMuX25vZGVzLmluZGV4T2Yobm9kZSksIDEpO1xuICB9LFxuXG4gIHJlbW92ZUFsbE5vZGVzOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9ub2RlcyA9IFtdO1xuICB9LFxuXG4gIGJ1aWxkRE9NOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgIHNwYW4uYXBwZW5kQ2hpbGQodGhpcy5fYnVpbGRNKHtcbiAgICAgIG5vZGVzOiB0aGlzLl9ub2RlcyxcbiAgICAgIG5hbWU6IHRoaXMubmFtZVxuICAgIH0pKTtcbiAgICByZXR1cm4gc3BhbjtcbiAgfSxcbiAgX2J1aWxkTTogZnVuY3Rpb24oZGF0YSkge1xuICAgIHZhciBkaXNwbGF5ZWRCdXR0b24sIGZyYWcsIGtleSwgbGksIG5vZGUsIHN0eWxlLCBfcmVmO1xuICAgIHZhciBub2RlcyA9IGRhdGEubm9kZXM7XG4gICAgdmFyIG5hbWUgPSBkYXRhLm5hbWU7XG4gICAgdmFyIG1lbnUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIG1lbnUuY2xhc3NOYW1lID0gXCJzbWVudS1kcm9wZG93biBzbWVudS1kcm9wZG93bi10aXBcIjtcbiAgICBtZW51LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcblxuICAgIHZhciBtZW51VWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidWxcIik7XG4gICAgbWVudVVsLmNsYXNzTmFtZSA9IFwic21lbnUtZHJvcGRvd24tbWVudVwiO1xuXG4gICAgLy8gY3VycmVudGx5IHdlIHN1cHBvcnQgb25lLWxldmVsXG4gICAgZm9yICh2YXIgaSA9IDAsIF9sZW4gPSBub2Rlcy5sZW5ndGg7IGkgPCBfbGVuOyBpKyspIHtcbiAgICAgIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgIGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xuICAgICAgbGkudGV4dENvbnRlbnQgPSBub2RlLmxhYmVsO1xuICAgICAgX3JlZiA9IG5vZGUuc3R5bGU7XG4gICAgICBmb3IgKGtleSBpbiBfcmVmKSB7XG4gICAgICAgIHN0eWxlID0gX3JlZltrZXldO1xuICAgICAgICBsaS5zdHlsZVtrZXldID0gc3R5bGU7XG4gICAgICB9XG4gICAgICBsaS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgbm9kZS5jYWxsYmFjayk7XG4gICAgICB0aGlzLnRyaWdnZXIoXCJuZXc6bm9kZVwiLCBsaSk7XG4gICAgICBtZW51VWwuYXBwZW5kQ2hpbGQobGkpO1xuICAgIH1cbiAgICB0aGlzLnRyaWdnZXIoXCJuZXc6bWVudVwiLCBtZW51VWwpO1xuICAgIG1lbnUuYXBwZW5kQ2hpbGQobWVudVVsKTtcblxuICAgIGRpc3BsYXllZEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xuICAgIGRpc3BsYXllZEJ1dHRvbi50ZXh0Q29udGVudCA9IG5hbWU7XG4gICAgZGlzcGxheWVkQnV0dG9uLmNsYXNzTmFtZSA9IFwic21lbnViYXJfYWxpbmtcIjtcbiAgICB0aGlzLnRyaWdnZXIoXCJuZXc6YnV0dG9uXCIsIGRpc3BsYXllZEJ1dHRvbik7XG5cbiAgICAvLyBIQUNLIHRvIGJlIGFibGUgdG8gaGlkZSB0aGUgc3VibWVudVxuICAgIC8vIGxpc3RlbnMgZ2xvYmFsbHkgZm9yIGNsaWNrIGV2ZW50c1xuICAgIGpib25lKGRpc3BsYXllZEJ1dHRvbikub24oXCJjbGlja1wiLCAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihlKSB7XG4gICAgICAgIF90aGlzLl9zaG93TWVudShlLCBtZW51LCBkaXNwbGF5ZWRCdXR0b24pO1xuICAgICAgICByZXR1cm4gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGpib25lKGRvY3VtZW50LmJvZHkpLm9uZShcImNsaWNrXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBtZW51LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSwgNSk7XG4gICAgICB9O1xuICAgIH0pKHRoaXMpKTtcblxuICAgIGZyYWcgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgZnJhZy5hcHBlbmRDaGlsZChtZW51KTtcbiAgICBmcmFnLmFwcGVuZENoaWxkKGRpc3BsYXllZEJ1dHRvbik7XG4gICAgcmV0dXJuIGZyYWc7XG4gIH0sXG5cbiAgLy8gaW50ZXJuYWwgbWV0aG9kIHRvIGRpc3BsYXkgdGhlIGxvd2VyIG1lbnUgb24gYSBjbGlja1xuICBfc2hvd01lbnU6IGZ1bmN0aW9uKGUsIG1lbnUsIHRhcmdldCkge1xuICAgIHZhciByZWN0O1xuICAgIG1lbnUuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICBtZW51LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgIHJlY3QgPSB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgbWVudS5zdHlsZS5sZWZ0ID0gcmVjdC5sZWZ0ICsgXCJweFwiO1xuICAgIG1lbnUuc3R5bGUudG9wID0gKHJlY3QudG9wICsgdGFyZ2V0Lm9mZnNldEhlaWdodCkgKyBcInB4XCI7XG4gIH1cbn0pO1xuIiwidmFyIE1vdXNlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1vdXNlID0ge1xuICByZWw6IGZ1bmN0aW9uKGUpIHtcbiAgICB2YXIgbW91c2VYLCBtb3VzZVksIHJlY3QsIHRhcmdldDtcbiAgICBtb3VzZVggPSBlLm9mZnNldFg7XG4gICAgbW91c2VZID0gZS5vZmZzZXRZO1xuICAgIGlmIChtb3VzZVggPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZWN0ID0gdGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdGFyZ2V0ID0gZS50YXJnZXQgfHwgZS5zcmNFbGVtZW50O1xuICAgICAgaWYgKG1vdXNlWCA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbW91c2VYID0gZS5jbGllbnRYIC0gcmVjdC5sZWZ0O1xuICAgICAgICBtb3VzZVkgPSBlLmNsaWVudFkgLSByZWN0LnRvcDtcbiAgICAgIH1cbiAgICAgIGlmIChtb3VzZVggPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG1vdXNlWCA9IGUucGFnZVggLSB0YXJnZXQub2Zmc2V0TGVmdDtcbiAgICAgICAgbW91c2VZID0gZS5wYWdlWSAtIHRhcmdldC5vZmZzZXRUb3A7XG4gICAgICB9XG4gICAgICBpZiAobW91c2VYID09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zb2xlLmxvZyhlLCBcIm5vIG1vdXNlIGV2ZW50IGRlZmluZWQuIHlvdXIgYnJvd3NlciBzdWNrc1wiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gW21vdXNlWCwgbW91c2VZXTtcbiAgfSxcbiAgYWJzOiBmdW5jdGlvbihlKSB7XG4gICAgdmFyIG1vdXNlWCwgbW91c2VZO1xuICAgIG1vdXNlWCA9IGUucGFnZVg7XG4gICAgbW91c2VZID0gZS5wYWdlWTtcbiAgICBpZiAobW91c2VYID09IHVuZGVmaW5lZCkge1xuICAgICAgbW91c2VYID0gZS5sYXllclg7XG4gICAgICBtb3VzZVkgPSBlLmxheWVyWTtcbiAgICB9XG4gICAgaWYgKG1vdXNlWCA9PSB1bmRlZmluZWQpIHtcbiAgICAgIG1vdXNlWCA9IGUuY2xpZW50WDtcbiAgICAgIG1vdXNlWSA9IGUuY2xpZW50WTtcbiAgICB9XG4gICAgaWYgKG1vdXNlWCA9PSB1bmRlZmluZWQpIHtcbiAgICAgIG1vdXNlWCA9IGUueDtcbiAgICAgIG1vdXNlWSA9IGUueTtcbiAgICB9XG4gICAgcmV0dXJuIFttb3VzZVgsIG1vdXNlWV07XG4gIH0sXG4gIHdoZWVsRGVsdGE6IGZ1bmN0aW9uKGUpIHtcbiAgICB2YXIgZGVsdGE7XG4gICAgZGVsdGEgPSBbZS5kZWx0YVgsIGUuZGVsdGFZXTtcbiAgICBpZiAoZGVsdGFbMF0gPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBpbiBjYXNlIHRoZXJlIGlzIGEgbW9yZSBkZXRhaWxlZCBzY3JvbGwgc2Vuc29yIC0gdXNlIGl0XG4gICAgICBpZiAoZS5tb3pNb3ZlbWVudFgpIHtcbiAgICAgICAgZGVsdGEgPSBbMCwgZS5tb3pNb3ZlbWVudFhdO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBzYWZldHkgZmlyc3RcbiAgICBpZiAoaXNOYU4oZGVsdGFbMF0pKSB7XG4gICAgICBkZWx0YVswXSA9IDA7XG4gICAgfVxuICAgIGlmIChpc05hTihkZWx0YVsxXSkpIHtcbiAgICAgIGRlbHRhWzFdID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIGRlbHRhO1xuICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIEE6IFwiIzAwYTM1Y1wiLFxuICBSOiBcIiMwMGZjMDNcIixcbiAgTjogXCIjMDBlYjE0XCIsXG4gIEQ6IFwiIzAwZWIxNFwiLFxuICBDOiBcIiMwMDAwZmZcIixcbiAgUTogXCIjMDBmMTBlXCIsXG4gIEU6IFwiIzAwZjEwZVwiLFxuICBHOiBcIiMwMDlkNjJcIixcbiAgSDogXCIjMDBkNTJhXCIsXG4gIEk6IFwiIzAwNTRhYlwiLFxuICBMOiBcIiMwMDdiODRcIixcbiAgSzogXCIjMDBmZjAwXCIsXG4gIE06IFwiIzAwOTc2OFwiLFxuICBGOiBcIiMwMDg3NzhcIixcbiAgUDogXCIjMDBlMDFmXCIsXG4gIFM6IFwiIzAwZDUyYVwiLFxuICBUOiBcIiMwMGRiMjRcIixcbiAgVzogXCIjMDBhODU3XCIsXG4gIFk6IFwiIzAwZTYxOVwiLFxuICBWOiBcIiMwMDVmYTBcIixcbiAgQjogXCIjMDBlYjE0XCIsXG4gIFg6IFwiIzAwYjY0OVwiLFxuICBaOiBcIiMwMGYxMGVcIlxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBBOiBcIiNCQkJCQkJcIixcbiAgQjogXCJncmV5XCIsXG4gIEM6IFwieWVsbG93XCIsXG4gIEQ6IFwicmVkXCIsXG4gIEU6IFwicmVkXCIsXG4gIEY6IFwibWFnZW50YVwiLFxuICBHOiBcImJyb3duXCIsXG4gIEg6IFwiIzAwRkZGRlwiLFxuICBJOiBcIiNCQkJCQkJcIixcbiAgSjogXCIjZmZmXCIsXG4gIEs6IFwiIzAwRkZGRlwiLFxuICBMOiBcIiNCQkJCQkJcIixcbiAgTTogXCIjQkJCQkJCXCIsXG4gIE46IFwiZ3JlZW5cIixcbiAgTzogXCIjZmZmXCIsXG4gIFA6IFwiYnJvd25cIixcbiAgUTogXCJncmVlblwiLFxuICBSOiBcIiMwMEZGRkZcIixcbiAgUzogXCJncmVlblwiLFxuICBUOiBcImdyZWVuXCIsXG4gIFU6IFwiI2ZmZlwiLFxuICBWOiBcIiNCQkJCQkJcIixcbiAgVzogXCJtYWdlbnRhXCIsXG4gIFg6IFwiZ3JleVwiLFxuICBZOiBcIm1hZ2VudGFcIixcbiAgWjogXCJncmV5XCIsXG4gIEdhcDogXCJncmV5XCJcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgQTogXCJvcmFuZ2VcIixcbiAgQjogXCIjZmZmXCIsXG4gIEM6IFwiZ3JlZW5cIixcbiAgRDogXCJyZWRcIixcbiAgRTogXCJyZWRcIixcbiAgRjogXCJibHVlXCIsXG4gIEc6IFwib3JhbmdlXCIsXG4gIEg6IFwicmVkXCIsXG4gIEk6IFwiZ3JlZW5cIixcbiAgSjogXCIjZmZmXCIsXG4gIEs6IFwicmVkXCIsXG4gIEw6IFwiZ3JlZW5cIixcbiAgTTogXCJncmVlblwiLFxuICBOOiBcIiNmZmZcIixcbiAgTzogXCIjZmZmXCIsXG4gIFA6IFwib3JhbmdlXCIsXG4gIFE6IFwiI2ZmZlwiLFxuICBSOiBcInJlZFwiLFxuICBTOiBcIm9yYW5nZVwiLFxuICBUOiBcIm9yYW5nZVwiLFxuICBVOiBcIiNmZmZcIixcbiAgVjogXCJncmVlblwiLFxuICBXOiBcImJsdWVcIixcbiAgWDogXCIjZmZmXCIsXG4gIFk6IFwiYmx1ZVwiLFxuICBaOiBcIiNmZmZcIixcbiAgR2FwOiBcIiNmZmZcIlxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBBOiBcIiM4MGEwZjBcIixcbiAgUjogXCIjZjAxNTA1XCIsXG4gIE46IFwiIzAwZmYwMFwiLFxuICBEOiBcIiNjMDQ4YzBcIixcbiAgQzogXCIjZjA4MDgwXCIsXG4gIFE6IFwiIzAwZmYwMFwiLFxuICBFOiBcIiNjMDQ4YzBcIixcbiAgRzogXCIjZjA5MDQ4XCIsXG4gIEg6IFwiIzE1YTRhNFwiLFxuICBJOiBcIiM4MGEwZjBcIixcbiAgTDogXCIjODBhMGYwXCIsXG4gIEs6IFwiI2YwMTUwNVwiLFxuICBNOiBcIiM4MGEwZjBcIixcbiAgRjogXCIjODBhMGYwXCIsXG4gIFA6IFwiI2ZmZmYwMFwiLFxuICBTOiBcIiMwMGZmMDBcIixcbiAgVDogXCIjMDBmZjAwXCIsXG4gIFc6IFwiIzgwYTBmMFwiLFxuICBZOiBcIiMxNWE0YTRcIixcbiAgVjogXCIjODBhMGYwXCIsXG4gIEI6IFwiI2ZmZlwiLFxuICBYOiBcIiNmZmZcIixcbiAgWjogXCIjZmZmXCJcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgQTogXCIjZTcxOGU3XCIsXG4gIFI6IFwiIzZmOTA2ZlwiLFxuICBOOiBcIiMxYmU0MWJcIixcbiAgRDogXCIjNzc4ODc3XCIsXG4gIEM6IFwiIzIzZGMyM1wiLFxuICBROiBcIiM5MjZkOTJcIixcbiAgRTogXCIjZmYwMGZmXCIsXG4gIEc6IFwiIzAwZmYwMFwiLFxuICBIOiBcIiM3NThhNzVcIixcbiAgSTogXCIjOGE3NThhXCIsXG4gIEw6IFwiI2FlNTFhZVwiLFxuICBLOiBcIiNhMDVmYTBcIixcbiAgTTogXCIjZWYxMGVmXCIsXG4gIEY6IFwiIzk4Njc5OFwiLFxuICBQOiBcIiMwMGZmMDBcIixcbiAgUzogXCIjMzZjOTM2XCIsXG4gIFQ6IFwiIzQ3Yjg0N1wiLFxuICBXOiBcIiM4YTc1OGFcIixcbiAgWTogXCIjMjFkZTIxXCIsXG4gIFY6IFwiIzg1N2E4NVwiLFxuICBCOiBcIiM0OWI2NDlcIixcbiAgWDogXCIjNzU4YTc1XCIsXG4gIFo6IFwiI2M5MzZjOVwiXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIEE6IFwiI2FkMDA1MlwiLFxuICBCOiBcIiMwYzAwZjNcIixcbiAgQzogXCIjYzIwMDNkXCIsXG4gIEQ6IFwiIzBjMDBmM1wiLFxuICBFOiBcIiMwYzAwZjNcIixcbiAgRjogXCIjY2IwMDM0XCIsXG4gIEc6IFwiIzZhMDA5NVwiLFxuICBIOiBcIiMxNTAwZWFcIixcbiAgSTogXCIjZmYwMDAwXCIsXG4gIEo6IFwiI2ZmZlwiLFxuICBLOiBcIiMwMDAwZmZcIixcbiAgTDogXCIjZWEwMDE1XCIsXG4gIE06IFwiI2IwMDA0ZlwiLFxuICBOOiBcIiMwYzAwZjNcIixcbiAgTzogXCIjZmZmXCIsXG4gIFA6IFwiIzQ2MDBiOVwiLFxuICBROiBcIiMwYzAwZjNcIixcbiAgUjogXCIjMDAwMGZmXCIsXG4gIFM6IFwiIzVlMDBhMVwiLFxuICBUOiBcIiM2MTAwOWVcIixcbiAgVTogXCIjZmZmXCIsXG4gIFY6IFwiI2Y2MDAwOVwiLFxuICBXOiBcIiM1YjAwYTRcIixcbiAgWDogXCIjNjgwMDk3XCIsXG4gIFk6IFwiIzRmMDBiMFwiLFxuICBaOiBcIiMwYzAwZjNcIlxufTtcbiIsInZhciBzY2hlbWVzID0gcmVxdWlyZShcIi4vc2NoZW1lY2xhc3NcIik7XG52YXIgU3RhdGljU2NoZW1lQ2xhc3MgPSBzY2hlbWVzLnN0YXQ7XG52YXIgRHluU2NoZW1lQ2xhc3MgPSBzY2hlbWVzLmR5bjtcblxudmFyIEJ1cmllZCA9IHJlcXVpcmUoXCIuL2J1cmllZFwiKTtcbnZhciBDaW5lbWEgPSByZXF1aXJlKFwiLi9jaW5lbWFcIik7XG52YXIgQ2x1c3RhbCA9IHJlcXVpcmUoXCIuL2NsdXN0YWxcIik7XG52YXIgQ2x1c3RhbDIgPSByZXF1aXJlKFwiLi9jbHVzdGFsMlwiKTtcbnZhciBIZWxpeCA9IHJlcXVpcmUoXCIuL2hlbGl4XCIpO1xudmFyIEh5ZHJvID0gcmVxdWlyZShcIi4vaHlkcm9waG9iaWNpdHlcIik7XG52YXIgTGVzayA9IHJlcXVpcmUoXCIuL2xlc2tcIik7XG52YXIgTWFlID0gcmVxdWlyZShcIi4vbWFlXCIpO1xudmFyIE51Y2xlb3RpZGUgPSByZXF1aXJlKFwiLi9udWNsZW90aWRlXCIpO1xudmFyIFB1cmluZSA9IHJlcXVpcmUoXCIuL3B1cmluZVwiKTtcbnZhciBTdHJhbmQgPSByZXF1aXJlKFwiLi9zdHJhbmRcIik7XG52YXIgVGF5bG9yID0gcmVxdWlyZShcIi4vdGF5bG9yXCIpO1xudmFyIFR1cm4gPSByZXF1aXJlKFwiLi90dXJuXCIpO1xudmFyIFphcHBvID0gcmVxdWlyZShcIi4vemFwcG9cIik7XG5cbnZhciBzdGF0aWNTY2hlbWVzID0ge1xuICBidXJpZWQ6IEJ1cmllZCxcbiAgYnVyaWVkX2luZGV4OiBCdXJpZWQsXG4gIGNpbmVtYTogQ2luZW1hLFxuICBjbHVzdGFsMjogQ2x1c3RhbDIsXG4gIGNsdXN0YWw6IENsdXN0YWwsXG4gIGhlbGl4OiBIZWxpeCxcbiAgaGVsaXhfcHJvcGVuc2l0eTogSGVsaXgsXG4gIGh5ZHJvOiBIeWRybyxcbiAgbGVzazogTGVzayxcbiAgbWFlOiBNYWUsXG4gIG51Y2xlb3RpZGU6IE51Y2xlb3RpZGUsXG4gIHB1cmluZTogUHVyaW5lLFxuICBwdXJpbmVfcHlyaW1pZGluZTogUHVyaW5lLFxuICBzdHJhbmQ6IFN0cmFuZCxcbiAgc3RyYW5kX3Byb3BlbnNpdHk6IFN0cmFuZCxcbiAgdGF5bG9yOiBUYXlsb3IsXG4gIHR1cm46IFR1cm4sXG4gIHR1cm5fcHJvcGVuc2l0eTogVHVybixcbiAgemFwcG86IFphcHBvXG59O1xuXG52YXIgcGlkID0gcmVxdWlyZShcIi4vcGlkX2NvbG9ycy5qc1wiKTtcblxudmFyIGR5blNjaGVtZXMgPSB7XG4gIHBpZDogcGlkXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENvbG9ycyA9IGZ1bmN0aW9uKG9wdCl7XG4gIHRoaXMubWFwcyA9IGNsb25lKHN0YXRpY1NjaGVtZXMpOyAgXG4gIHRoaXMuZHluID0gY2xvbmUoZHluU2NoZW1lcyk7XG4gIHRoaXMub3B0ID0gb3B0O1xufVxuQ29sb3JzLmdldFNjaGVtZSA9IGZ1bmN0aW9uKHNjaGVtZSl7XG4gIHJldHVybiBzdGF0aWNTY2hlbWVzW3NjaGVtZV07XG59XG5Db2xvcnMucHJvdG90eXBlLmdldFNjaGVtZSA9IGZ1bmN0aW9uKHNjaGVtZSkge1xuICB2YXIgY29sb3IgPSB0aGlzLm1hcHNbc2NoZW1lXTtcbiAgaWYgKGNvbG9yID09PSB1bmRlZmluZWQpIHtcbiAgICBjb2xvciA9IHt9O1xuICAgIGlmKHRoaXMuZHluW3NjaGVtZV0gIT0gdW5kZWZpbmVkKXtcbiAgICAgIHJldHVybiBuZXcgRHluU2NoZW1lQ2xhc3ModGhpcy5keW5bc2NoZW1lXSx0aGlzLm9wdCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBuZXcgU3RhdGljU2NoZW1lQ2xhc3MoY29sb3IpO1xufTtcblxuQ29sb3JzLnByb3RvdHlwZS5hZGRTdGF0aWNTY2hlbWUgPSBmdW5jdGlvbihuYW1lLHNjaGVtZSkge1xuICB0aGlzLm1hcHNbbmFtZV0gPSBzY2hlbWU7XG59XG5cbkNvbG9ycy5wcm90b3R5cGUuYWRkRHluU2NoZW1lID0gZnVuY3Rpb24obmFtZSxzY2hlbWUpIHtcbiAgdGhpcy5keW5bbmFtZV0gPSBzY2hlbWU7XG59XG5cbi8vIHNtYWxsIGhlbHBlciB0byBjbG9uZSBhbiBvYmplY3RcbmZ1bmN0aW9uIGNsb25lKG9iaikge1xuICBpZiAobnVsbCA9PSBvYmogfHwgXCJvYmplY3RcIiAhPSB0eXBlb2Ygb2JqKSByZXR1cm4gb2JqO1xuICB2YXIgY29weSA9IG9iai5jb25zdHJ1Y3RvcigpO1xuICBmb3IgKHZhciBhdHRyIGluIG9iaikge1xuICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoYXR0cikpIGNvcHlbYXR0cl0gPSBvYmpbYXR0cl07XG4gIH1cbiAgcmV0dXJuIGNvcHk7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgQTogXCIgb3JhbmdlXCIsXG4gIEI6IFwiICNmZmZcIixcbiAgQzogXCIgZ3JlZW5cIixcbiAgRDogXCIgcmVkXCIsXG4gIEU6IFwiIHJlZFwiLFxuICBGOiBcIiBncmVlblwiLFxuICBHOiBcIiBvcmFuZ2VcIixcbiAgSDogXCIgbWFnZW50YVwiLFxuICBJOiBcIiBncmVlblwiLFxuICBKOiBcIiAjZmZmXCIsXG4gIEs6IFwiIHJlZFwiLFxuICBMOiBcIiBncmVlblwiLFxuICBNOiBcIiBncmVlblwiLFxuICBOOiBcIiBtYWdlbnRhXCIsXG4gIE86IFwiICNmZmZcIixcbiAgUDogXCIgZ3JlZW5cIixcbiAgUTogXCIgbWFnZW50YVwiLFxuICBSOiBcIiByZWRcIixcbiAgUzogXCIgb3JhbmdlXCIsXG4gIFQ6IFwiIG9yYW5nZVwiLFxuICBVOiBcIiAjZmZmXCIsXG4gIFY6IFwiIGdyZWVuXCIsXG4gIFc6IFwiIGdyZWVuXCIsXG4gIFg6IFwiICNmZmZcIixcbiAgWTogXCIgZ3JlZW5cIixcbiAgWjogXCIgI2ZmZlwiLFxuICBHYXA6IFwiICNmZmZcIlxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBBOiBcIiAjNzdkZDg4XCIsXG4gIEI6IFwiICNmZmZcIixcbiAgQzogXCIgIzk5ZWU2NlwiLFxuICBEOiBcIiAjNTViYjMzXCIsXG4gIEU6IFwiICM1NWJiMzNcIixcbiAgRjogXCIgIzk5OTlmZlwiLFxuICBHOiBcIiAjNzdkZDg4XCIsXG4gIEg6IFwiICM1NTU1ZmZcIixcbiAgSTogXCIgIzY2YmJmZlwiLFxuICBKOiBcIiAjZmZmXCIsXG4gIEs6IFwiICNmZmNjNzdcIixcbiAgTDogXCIgIzY2YmJmZlwiLFxuICBNOiBcIiAjNjZiYmZmXCIsXG4gIE46IFwiICM1NWJiMzNcIixcbiAgTzogXCIgI2ZmZlwiLFxuICBQOiBcIiAjZWVhYWFhXCIsXG4gIFE6IFwiICM1NWJiMzNcIixcbiAgUjogXCIgI2ZmY2M3N1wiLFxuICBTOiBcIiAjZmY0NDU1XCIsXG4gIFQ6IFwiICNmZjQ0NTVcIixcbiAgVTogXCIgI2ZmZlwiLFxuICBWOiBcIiAjNjZiYmZmXCIsXG4gIFc6IFwiICM5OTk5ZmZcIixcbiAgWDogXCIgI2ZmZlwiLFxuICBZOiBcIiAjOTk5OWZmXCIsXG4gIFo6IFwiICNmZmZcIixcbiAgR2FwOiBcIiAjZmZmXCJcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgQTogXCIgIzY0RjczRlwiLFxuICBDOiBcIiAjRkZCMzQwXCIsXG4gIEc6IFwiICNFQjQxM0NcIixcbiAgVDogXCIgIzNDODhFRVwiLFxuICBVOiBcIiAjM0M4OEVFXCJcbn07XG4iLCJ2YXIgcGlkO1xubW9kdWxlLmV4cG9ydHMgPSBwaWQgPSB7fTtcblxuLy8gY2FsY3VsYXRpbmcgdGhlIGNvbnNlcnZhdGlvbiBpcyBleHBlbnNpdmUgXG4vLyB3ZSBvbmx5IHdhbnQgdG8gZG8gaXQgb25jZVxucGlkLmluaXQgPSBmdW5jdGlvbigpe1xuICB0aGlzLmNvbnMgPSB0aGlzLm9wdC5jb25zZXJ2YXRpb24oKTtcbn1cblxucGlkLnJ1biA9IGZ1bmN0aW9uKGxldHRlcixvcHRzKXtcbiAgdmFyIGNvbnMgPSB0aGlzLmNvbnNbb3B0cy5wb3NdO1xuICBpZihjb25zID4gMC44KXtcbiAgICByZXR1cm4gXCIjNjQ2NGZmXCI7XG4gIH1lbHNlIGlmKGNvbnMgPiAwLjYpe1xuICAgIHJldHVybiBcIiM5ZGE1ZmZcIjtcbiAgfWVsc2UgaWYoY29ucyA+IDAuNCl7XG4gICAgcmV0dXJuIFwiI2NjY2NjY1wiO1xuICB9ZWxzZXtcbiAgICByZXR1cm4gXCIjZmZmZmZmXCI7XG4gIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBBOiBcIiAjRkY4M0ZBXCIsXG4gIEM6IFwiICM0MEUwRDBcIixcbiAgRzogXCIgI0ZGODNGQVwiLFxuICBSOiBcIiAjRkY4M0ZBXCIsXG4gIFQ6IFwiICM0MEUwRDBcIixcbiAgVTogXCIgIzQwRTBEMFwiLFxuICBZOiBcIiAjNDBFMEQwXCJcbn07XG4iLCJ2YXIgU3RhdGljU2NoZW1lQ2xhc3MgPSBmdW5jdGlvbihtYXApe1xuICB0aGlzLmRlZmF1bHRDb2xvciA9IFwiI2ZmZmZmZlwiO1xuICB0aGlzLnR5cGUgPSBcInN0YXRpY1wiO1xuICB0aGlzLm1hcCA9IG1hcDtcbiAgdGhpcy5nZXRDb2xvciA9IGZ1bmN0aW9uKGxldHRlcil7XG4gICAgaWYodGhpcy5tYXBbbGV0dGVyXSAhPT0gdW5kZWZpbmVkKXtcbiAgICAgIHJldHVybiB0aGlzLm1hcFtsZXR0ZXJdOyBcbiAgICB9ZWxzZXtcbiAgICAgIHJldHVybiB0aGlzLmRlZmF1bHRDb2xvcjtcbiAgICB9XG4gIH07XG59O1xuXG52YXIgRHluU2NoZW1lQ2xhc3MgPSBmdW5jdGlvbihmdW4sb3B0KXtcbiAgdGhpcy50eXBlID0gXCJkeW5cIjtcbiAgdGhpcy5vcHQgPSBvcHQ7XG4gIC8vIGluaXRcbiAgaWYoZnVuLmluaXQgIT09IHVuZGVmaW5lZCl7XG4gICAgZnVuLmluaXQuY2FsbCh0aGlzKTtcbiAgICB0aGlzLmdldENvbG9yID0gZnVuLnJ1bjtcbiAgICB0aGlzLnJlc2V0ID0gZnVuLmluaXQ7XG4gIH1lbHNle1xuICAgIHRoaXMuZ2V0Q29sb3IgPSBmdW47XG4gIH1cbn07XG5tb2R1bGUuZXhwb3J0cy5zdGF0ID0gU3RhdGljU2NoZW1lQ2xhc3M7XG5tb2R1bGUuZXhwb3J0cy5keW4gPSBEeW5TY2hlbWVDbGFzcztcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBBOiBcIiM1ODU4YTdcIixcbiAgUjogXCIjNmI2Yjk0XCIsXG4gIE46IFwiIzY0NjQ5YlwiLFxuICBEOiBcIiMyMTIxZGVcIixcbiAgQzogXCIjOWQ5ZDYyXCIsXG4gIFE6IFwiIzhjOGM3M1wiLFxuICBFOiBcIiMwMDAwZmZcIixcbiAgRzogXCIjNDk0OWI2XCIsXG4gIEg6IFwiIzYwNjA5ZlwiLFxuICBJOiBcIiNlY2VjMTNcIixcbiAgTDogXCIjYjJiMjRkXCIsXG4gIEs6IFwiIzQ3NDdiOFwiLFxuICBNOiBcIiM4MjgyN2RcIixcbiAgRjogXCIjYzJjMjNkXCIsXG4gIFA6IFwiIzIzMjNkY1wiLFxuICBTOiBcIiM0OTQ5YjZcIixcbiAgVDogXCIjOWQ5ZDYyXCIsXG4gIFc6IFwiI2MwYzAzZlwiLFxuICBZOiBcIiNkM2QzMmNcIixcbiAgVjogXCIjZmZmZjAwXCIsXG4gIEI6IFwiIzQzNDNiY1wiLFxuICBYOiBcIiM3OTc5ODZcIixcbiAgWjogXCIjNDc0N2I4XCJcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgQTogXCIjY2NmZjAwXCIsXG4gIFI6IFwiIzAwMDBmZlwiLFxuICBOOiBcIiNjYzAwZmZcIixcbiAgRDogXCIjZmYwMDAwXCIsXG4gIEM6IFwiI2ZmZmYwMFwiLFxuICBROiBcIiNmZjAwY2NcIixcbiAgRTogXCIjZmYwMDY2XCIsXG4gIEc6IFwiI2ZmOTkwMFwiLFxuICBIOiBcIiMwMDY2ZmZcIixcbiAgSTogXCIjNjZmZjAwXCIsXG4gIEw6IFwiIzMzZmYwMFwiLFxuICBLOiBcIiM2NjAwZmZcIixcbiAgTTogXCIjMDBmZjAwXCIsXG4gIEY6IFwiIzAwZmY2NlwiLFxuICBQOiBcIiNmZmNjMDBcIixcbiAgUzogXCIjZmYzMzAwXCIsXG4gIFQ6IFwiI2ZmNjYwMFwiLFxuICBXOiBcIiMwMGNjZmZcIixcbiAgWTogXCIjMDBmZmNjXCIsXG4gIFY6IFwiIzk5ZmYwMFwiLFxuICBCOiBcIiNmZmZcIixcbiAgWDogXCIjZmZmXCIsXG4gIFo6IFwiI2ZmZlwiXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIEE6IFwiIzJjZDNkM1wiLFxuICBSOiBcIiM3MDhmOGZcIixcbiAgTjogXCIjZmYwMDAwXCIsXG4gIEQ6IFwiI2U4MTcxN1wiLFxuICBDOiBcIiNhODU3NTdcIixcbiAgUTogXCIjM2ZjMGMwXCIsXG4gIEU6IFwiIzc3ODg4OFwiLFxuICBHOiBcIiNmZjAwMDBcIixcbiAgSDogXCIjNzA4ZjhmXCIsXG4gIEk6IFwiIzAwZmZmZlwiLFxuICBMOiBcIiMxY2UzZTNcIixcbiAgSzogXCIjN2U4MTgxXCIsXG4gIE06IFwiIzFlZTFlMVwiLFxuICBGOiBcIiMxZWUxZTFcIixcbiAgUDogXCIjZjYwOTA5XCIsXG4gIFM6IFwiI2UxMWUxZVwiLFxuICBUOiBcIiM3MzhjOGNcIixcbiAgVzogXCIjNzM4YzhjXCIsXG4gIFk6IFwiIzlkNjI2MlwiLFxuICBWOiBcIiMwN2Y4ZjhcIixcbiAgQjogXCIjZjMwYzBjXCIsXG4gIFg6IFwiIzdjODM4M1wiLFxuICBaOiBcIiM1YmE0YTRcIlxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBBOiBcIiNmZmFmYWZcIixcbiAgUjogXCIjNjQ2NGZmXCIsXG4gIE46IFwiIzAwZmYwMFwiLFxuICBEOiBcIiNmZjAwMDBcIixcbiAgQzogXCIjZmZmZjAwXCIsXG4gIFE6IFwiIzAwZmYwMFwiLFxuICBFOiBcIiNmZjAwMDBcIixcbiAgRzogXCIjZmYwMGZmXCIsXG4gIEg6IFwiIzY0NjRmZlwiLFxuICBJOiBcIiNmZmFmYWZcIixcbiAgTDogXCIjZmZhZmFmXCIsXG4gIEs6IFwiIzY0NjRmZlwiLFxuICBNOiBcIiNmZmFmYWZcIixcbiAgRjogXCIjZmZjODAwXCIsXG4gIFA6IFwiI2ZmMDBmZlwiLFxuICBTOiBcIiMwMGZmMDBcIixcbiAgVDogXCIjMDBmZjAwXCIsXG4gIFc6IFwiI2ZmYzgwMFwiLFxuICBZOiBcIiNmZmM4MDBcIixcbiAgVjogXCIjZmZhZmFmXCIsXG4gIEI6IFwiI2ZmZlwiLFxuICBYOiBcIiNmZmZcIixcbiAgWjogXCIjZmZmXCJcbn07XG4iLCIvKlxuICogbXNhLXNlcXRvb2xzXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZ3JlZW5pZnkvbXNhLXNlcXRvb2xzXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE0IGdyZWVuaWZ5XG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKi9cblxudmFyIHN0ID0ge307XG5tb2R1bGUuZXhwb3J0cyA9IHN0O1xuXG4vLyBleHRyYWN0IElEcyBhbmQgcHVzaCB0aGVtIHRvIHRoZSBtZXRhIGRpY3RcbnN0LmdldE1ldGEgPSBmdW5jdGlvbihsYWJlbCkge1xuICBpZiAoc3QuY29udGFpbnMobGFiZWwsIFwifFwiKSkge1xuICAgIHZhciBpZGVudGlmaWVycyA9IGxhYmVsLnNwbGl0KFwifFwiKTtcbiAgICB2YXIgayA9IDA7XG4gICAgdmFyIGRhdGFiYXNlLCBkYXRhYmFzZUlEO1xuICAgIHZhciBtZXRhID0ge307XG4gICAgd2hpbGUgKGsgPCBpZGVudGlmaWVycy5sZW5ndGggLSAxKSB7XG4gICAgICBkYXRhYmFzZSA9IGlkZW50aWZpZXJzW2tdO1xuICAgICAgZGF0YWJhc2VJRCA9IGlkZW50aWZpZXJzW2sgKyAxXTtcbiAgICAgIG1ldGFbZGF0YWJhc2VdID0gZGF0YWJhc2VJRDtcbiAgICAgIGsgKz0gMjtcbiAgICB9XG4gICAgLy8gYXNzdW1lIHRoZSBsYXN0IGVudHJ5IGlzIHRoZSBsYWJlbFxuICAgIHZhciBuYW1lID0gaWRlbnRpZmllcnNbaWRlbnRpZmllcnMubGVuZ3RoIC0gMV07XG4gICAgLy8gY2hlY2sgd2hldGhlciB0aGVyZSBpcyBhIHVuaXByb3QgaWRcbiAgICBpZiAobmFtZS5pbmRleE9mKFwiPVwiKSA+PSAwICYmIG5hbWUuaW5kZXhPZihcIk9TXCIpID49IDApIHtcbiAgICAgIHZhciBkcyA9IHt9O1xuICAgICAgdmFyIGRldGFpbHMgPSBuYW1lLnNwbGl0KFwiIFwiKTtcbiAgICAgIGRzLmVuID0gZGV0YWlsc1swXTtcbiAgICAgIGRldGFpbHMgPSBkZXRhaWxzLnNwbGljZSgxKTtcbiAgICAgIHZhciBuYW1lTGVuZ3RoID0gZmluZFNlcEluQXJyKGRldGFpbHMsIFwiPVwiKTtcbiAgICAgIHZhciBkZXRhaWxzVG1wID0gZGV0YWlscy5zcGxpY2UobmFtZUxlbmd0aCAtIDEpO1xuICAgICAgbmFtZSA9IGRldGFpbHMuam9pbihcIiBcIik7XG4gICAgICBkZXRhaWxzID0gZGV0YWlsc1RtcDtcbiAgICAgIGsgPSAwO1xuICAgICAgdmFyIGJsb2NrID0gW107XG4gICAgICBkZXRhaWxzLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICBibG9jay5wdXNoKGl0ZW0pO1xuICAgICAgICBpZiAoaXRlbS5pbmRleE9mKFwiPVwiKSA+PSAwKSB7XG4gICAgICAgICAgc3RyVG9EaWN0KGJsb2NrLmpvaW4oXCIgXCIpLCBcIj1cIiwgZHMpO1xuICAgICAgICAgIGJsb2NrID0gW107XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgaWRzOiBtZXRhLFxuICAgICAgICBkZXRhaWxzOiBkc1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBpZHM6IG1ldGFcbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgbmFtZTogbGFiZWxcbiAgfTtcbn07XG5cbnZhciBmaW5kU2VwSW5BcnIgPSBmdW5jdGlvbihhcnIsIHNlcCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5naHQ7IGkrKykge1xuICAgIGlmIChhcnJbaV0uaW5kZXhPZihpKSkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICB9XG4gIHJldHVybiBhcnIubGVuZ3RoIC0gMTtcbn07XG5cbnZhciBzdHJUb0RpY3QgPSBmdW5jdGlvbihzdHIsIHNlcCwgdG9Kb2luKSB7XG4gIHRvSm9pbiA9IHRvSm9pbiB8fCB7fTtcbiAgdmFyIGVudHJpZXMgPSBzdHIuc3BsaXQoc2VwKTtcbiAgdG9Kb2luW2VudHJpZXNbMF0udG9Mb3dlckNhc2UoKV0gPSBlbnRyaWVzWzFdO1xuICByZXR1cm4gdG9Kb2luO1xufTtcblxudmFyIGlkZW50REIgPSB7XG4gIFwic3BcIjoge1xuICAgIGxpbms6IFwiaHR0cDovL3d3dy51bmlwcm90Lm9yZy8lc1wiLFxuICAgIG5hbWU6IFwiVW5pcHJvdFwiXG4gIH0sXG4gIFwidHJcIjoge1xuICAgIGxpbms6IFwiaHR0cDovL3d3dy51bmlwcm90Lm9yZy8lc1wiLFxuICAgIG5hbWU6IFwiVHJlbWJsXCJcbiAgfSxcbiAgXCJnYlwiOiB7XG4gICAgbGluazogXCJodHRwOi8vd3d3Lm5jYmkubmxtLm5paC5nb3YvbnVjY29yZS8lc1wiLFxuICAgIG5hbWU6IFwiR2VuYmFua1wiXG4gIH0sXG4gIFwicGRiXCI6IHtcbiAgICBsaW5rOiBcImh0dHA6Ly93d3cucmNzYi5vcmcvcGRiL2V4cGxvcmUvZXhwbG9yZS5kbz9zdHJ1Y3R1cmVJZD0lc1wiLFxuICAgIG5hbWU6IFwiUERCXCJcbiAgfVxufTtcblxuc3QuYnVpbGRMaW5rcyA9IGZ1bmN0aW9uKG1ldGEpIHtcbiAgdmFyIGxpbmtzID0ge307XG4gIG1ldGEgPSBtZXRhIHx8IHt9O1xuICBPYmplY3Qua2V5cyhtZXRhKS5mb3JFYWNoKGZ1bmN0aW9uKGlkKSB7XG4gICAgaWYgKGlkIGluIGlkZW50REIpIHtcbiAgICAgIHZhciBlbnRyeSA9IGlkZW50REJbaWRdO1xuICAgICAgdmFyIGxpbmsgPSBlbnRyeS5saW5rLnJlcGxhY2UoXCIlc1wiLCBtZXRhW2lkXSk7XG4gICAgICBsaW5rc1tlbnRyeS5uYW1lXSA9IGxpbms7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGxpbmtzO1xufTtcblxuXG4vLyBzZWFyY2ggZm9yIGEgdGV4dFxuc3QuY29udGFpbnMgPSBmdW5jdGlvbih0ZXh0LCBzZWFyY2gpIHtcbiAgcmV0dXJuICcnLmluZGV4T2YuY2FsbCh0ZXh0LCBzZWFyY2gsIDApICE9PSAtMTtcbn07XG5cbi8vIHNwbGl0IGFmdGVyIGUuZy4gODAgY2hhcnNcbnN0LnNwbGl0TkNoYXJzID0gZnVuY3Rpb24odHh0LCBudW0pIHtcbiAgdmFyIGksIF9yZWY7XG4gIG51bSA9IG51bSB8fCA4MDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3IgKGkgPSAwLCBfcmVmID0gdHh0Lmxlbmd0aCAtIDE7IGkgPD0gX3JlZjsgaSArPSBudW0pIHtcbiAgICByZXN1bHQucHVzaCh0eHQuc3Vic3RyKGksIG51bSkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5zdC5tb2RlbCA9IGZ1bmN0aW9uIFNlcShzZXEsIG5hbWUsIGlkKSB7XG4gIHRoaXMuc2VxID0gc2VxO1xuICB0aGlzLm5hbWUgPSBuYW1lO1xuICB0aGlzLmlkID0gaWQ7XG4gIHRoaXMuaWRzID0ge307XG59O1xuIiwidmFyIF8gPSByZXF1aXJlKFwidW5kZXJzY29yZVwiKTtcblxudmFyIHN0YXQgPSBmdW5jdGlvbihzZXFzKSB7XG4gIC8vIGlmIHNvbWVvbmUgZm9yZ2V0cyBuZXdcbiAgaWYgKHRoaXMuY29uc3RydWN0b3IgIT09IHN0YXQpIHtcbiAgICByZXR1cm4gbmV3IHN0YXQoc2Vxcyk7XG4gIH1cbiAgaWYgKHNlcXMgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2Ygc2VxcyA9PT0gXCJzdHJpbmdcIikge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJ5b3UgbmVlZCB0byBnaXZlIHRoZSBzZXEgc3RhdCBhbiBhcnJheVwiKTtcbiAgfVxuICAvL2lmKHNlcXMubGVuZ3RoID09IDApe1xuICAvL3Rocm93IG5ldyBUeXBlRXJyb3IoXCJ5b3UgbmVlZCB0byBnaXZlIHRoZSBzZXEgc3RhdCBhIHJlYWwgYXJyYXlcIik7XG4gIC8vfVxuICB0aGlzLnJlc2V0U2VxcyhzZXFzKTtcbiAgdGhpcy5hbHBoYWJldFNpemUgPSA0O1xuICB0aGlzLl91c2VCYWNrZ3JvdW5kID0gZmFsc2U7XG4gIHRoaXMuaWdub3JlZENoYXJzID0gW1wiLVwiLCBcIipcIl07XG59O1xuXG5zdGF0LnByb3RvdHlwZS5hZGRTZXEgPSBmdW5jdGlvbiBhZGRTZXEoc2VxKSB7XG4gIHRoaXMuc2Vxcy5wdXNoKHNlcSk7XG4gIHRoaXMuX3Jlc2V0KCk7XG59O1xuXG5zdGF0LnByb3RvdHlwZS5yZW1vdmVTZXEgPSBmdW5jdGlvbiBhZGRTZXEoc2VxKSB7XG4gIC8vIGNoZWNrIGZvciBpbnQgb3Igc3RyaW5nXG4gIGlmICh0eXBlb2Ygc2VxID09PSAnbnVtYmVyJykge1xuICAgIHRoaXMuc2Vxcy5zcGxpY2Uoc2VxLCAxKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBpZGVudGlmeSBtYXRjaGVzICh3ZSBjb3VsZCBoYXZlIG11bHRpcGxlKVxuICAgIF8uZWFjaCh0aGlzLnNlcXMsIGZ1bmN0aW9uKHMsIGkpIHtcbiAgICAgIGlmIChzZXEgPT09IHMpIHtcbiAgICAgICAgdGhpcy5zZXFzLnNwbGljZShpLCAxKTtcbiAgICAgIH1cbiAgICB9LmJpbmQodGhpcykpO1xuICB9XG4gIHRoaXMuX3Jlc2V0KCk7XG59O1xuXG5zdGF0LnByb3RvdHlwZS5hZGRTZXFzID0gZnVuY3Rpb24gYWRkU2VxcyhzZXFzKSB7XG4gIHNlcXMuZm9yRWFjaChmdW5jdGlvbihzZXEpIHtcbiAgICB0aGlzLmFkZFNlcShzZXEpO1xuICB9LmJpbmQodGhpcykpO1xufTtcblxuc3RhdC5wcm90b3R5cGUucmVzZXRTZXFzID0gZnVuY3Rpb24gcmVzZXQoc2Vxcykge1xuICB0aGlzLnNlcXMgPSBbXTtcblxuICAvLyBzdXBwb3J0IHNlcXVlbmNlIG1vZGVsc1xuICBpZiAoIShzZXFzIGluc3RhbmNlb2YgQXJyYXkpKXtcbiAgICB0aGlzLm1zZXFzID0gc2VxcztcbiAgICB2YXIgbVNlcXNQbHVjayA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNlcUFyciA9IHRoaXMubXNlcXMucGx1Y2soXCJzZXFcIik7XG4gICAgICB0aGlzLnJlc2V0U2VxcyhzZXFBcnIpO1xuICAgIH07XG4gICAgc2Vxcy5vbihcImFkZCBjaGFuZ2UgcmVzZXQgXCIsIG1TZXFzUGx1Y2ssIHRoaXMpO1xuICAgIG1TZXFzUGx1Y2suY2FsbCh0aGlzKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmFkZFNlcXMoc2Vxcyk7XG4gICAgdGhpcy5fcmVzZXQoKTtcbiAgICB0aGlzLnRyaWdnZXIoXCJyZXNldFwiKTtcbiAgfVxufTtcblxudmFyIGNhbGNWYWx1ZXMgPSBbXCJjb25zZW5zdXNcIiwgXCJmcmVxdWVuY3lcIiwgXCJtYXhMZW5ndGhcIiwgXCJpY1wiLCBcImdhcHNcIl07XG5cbnN0YXQucHJvdG90eXBlLl9yZXNldCA9IGZ1bmN0aW9uIF9yZXNldCgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYWxjVmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdGhpc1tcIl9cIiArIGNhbGNWYWx1ZXNbaV1dID0gdW5kZWZpbmVkO1xuICB9XG4gIHRoaXMuX2lkZW50aXR5ID0gdW5kZWZpbmVkO1xuICB0aGlzLl9iYWNrZ3JvdW5kID0gdW5kZWZpbmVkO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEJFR0lOOiBzZXR0ZXIvZ2V0dGVyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5zdGF0LnByb3RvdHlwZS5zZXRCYWNrZ3JvdW5kID0gZnVuY3Rpb24gc2V0QmFja2dyb3VuZChiKSB7XG4gIHRoaXMuX3VzZUJhY2tncm91bmQgPSBiO1xuICB0aGlzLl9yZXNldCgpO1xufTtcblxuc3RhdC5wcm90b3R5cGUudXNlQmFja2dyb3VuZCA9IGZ1bmN0aW9uIHVzZUJhY2tncm91bmQoKSB7XG4gIHRoaXMuc2V0QmFja2dyb3VuZCh0cnVlKTtcbn07XG5cbnN0YXQucHJvdG90eXBlLnNldEROQSA9IGZ1bmN0aW9uIHNldE51Y2xlb3RpZGUoKSB7XG4gIHRoaXMuYWxwaGFiZXRTaXplID0gNDtcbn07XG5cbnN0YXQucHJvdG90eXBlLnNldFByb3RlaW4gPSBmdW5jdGlvbiBzZXRETkEoKSB7XG4gIHRoaXMuYWxwaGFiZXRTaXplID0gMjA7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gQkVHSU46IGF1dG8gd3JhcHBlcnNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vIG5lYXQgYXV0by13cmFwcGVyc1xuY2FsY1ZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICBzdGF0LnByb3RvdHlwZVtrZXldID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXNbXCJfXCIgKyBrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXNba2V5ICsgXCJDYWxjXCJdKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzW1wiX1wiICsga2V5XTtcbiAgfTtcbn0pO1xuXG5zdGF0LnByb3RvdHlwZS5pZGVudGl0eSA9IGZ1bmN0aW9uIGlkZW50aXRpeShzZXEpIHtcbiAgLy8gZG8gbm90IGNhY2hlIGlmIGl0cyBjYWxsZWQgd2l0aCBhIHNwZWNpYWwgY29tcGFyZSBzZXFcbiAgdmFyIGlkZW50O1xuICBpZiAodGhpcy5faWRlbnRpdHkgPT09IHVuZGVmaW5lZCB8fCBzZXEpIHtcbiAgICBpZGVudCA9IHRoaXMuaWRlbnRpdHlDYWxjKHNlcSk7XG4gICAgdGhpcy5faWRlbnRpdHkgPSB1bmRlZmluZWQ7XG4gIH1cbiAgcmV0dXJuIHRoaXMuX2lkZW50aXR5IHx8IGlkZW50O1xufTtcblxuLy8gc2V0IHlvdXIgb3duIGJhY2tncm91bmQgd2l0aCBvYmouYmdcbnN0YXQucHJvdG90eXBlLmJhY2tncm91bmQgPSBmdW5jdGlvbiBiYWNrZ3JvdW5kKCkge1xuICBpZiAodGhpcy5iZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHRoaXMuYmc7XG4gIH1cbiAgaWYgKHRoaXMuX2JhY2tncm91bmQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXMuYmFja2dyb3VuZENhbGMoKTtcbiAgfVxuICByZXR1cm4gdGhpcy5fYmFja2dyb3VuZDtcbn07XG5cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEJFR0lOOiBjYWxjIHRvb2xzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vLyBjYWxjdWxhdGVzIHRoZSByZWxhdGl2ZSBmcmVxdWVuY3kgb2YgYSBiYXNlIGF0IGEgZ2l2ZW4gcG9zaXRpb25cbi8vIHRoaXMgaXMgbmVlZGVkIGUuZy4gZm9yIHRoZSBlbnRyb3B5IGNhbGN1bGF0aW9uXG4vLyBzZXFzOiBhcnJheSBvZiBzZXF1ZW5jZXMgKHN0cmluZ3MpXG4vLyBvcHRzOlxuLy8gICAgYWxsOiBib29sZWFuICh1c2UgdG8gc2hvdyB0aGUgZnJlcXVlbmNpZXMgZm9yIGFsbCBsZXR0ZXJzIFtpbmNsdWRpbmcgdGhlIGlnbm9yZWQgb25lc11cbi8vICAgIChkZWZhdWx0IGZhbHNlKVxuLy8gQHJldHVybnMgYXJyYXkgb2YgYWxsIHBvc2l0aW9ucyB3aXRoIGEgZGljdGlvbmFyeSBvZiBhbGwgYmFzZXMgd2l0aCB0aGVpciByZWxhdGl2ZSBmcmVxdWVuY3lcbnN0YXQucHJvdG90eXBlLmZyZXF1ZW5jeUNhbGMgPSBmdW5jdGlvbiBmcmVxdWVuY3lDYWxjKG9wdHMpIHtcbiAgdmFyIG9jY3MsIHRvdGFsUGVyUG9zO1xuICBvY2NzID0gbmV3IEFycmF5KHRoaXMubWF4TGVuZ3RoKCkpO1xuICB0b3RhbFBlclBvcyA9IG5ldyBBcnJheSh0aGlzLnNlcXMubGVuZ3RoKTtcbiAgdmFyIGlnbm9yZWRDaGFycyA9IHRoaXMuaWdub3JlZENoYXJzO1xuICBpZihvcHRzICE9PSB1bmRlZmluZWQgJiYgb3B0cy5hbGwpe1xuICAgIGlnbm9yZWRDaGFycyA9IFtdOyBcbiAgfVxuXG4gIC8vIGNvdW50IHRoZSBvY2N1cnJlbmNlcyBvZiB0aGUgY2hhcnMgYXQgYSBwb3NpdGlvblxuICBfLmVhY2godGhpcy5zZXFzLCBmdW5jdGlvbihlbCkge1xuICAgIF8uZWFjaChlbCwgZnVuY3Rpb24oYywgcG9zKSB7XG4gICAgICBpZiAoaWdub3JlZENoYXJzLmluZGV4T2YoYykgPj0gMCkgcmV0dXJuO1xuICAgICAgaWYgKG9jY3NbcG9zXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG9jY3NbcG9zXSA9IHt9O1xuICAgICAgfVxuICAgICAgaWYgKG9jY3NbcG9zXVtjXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG9jY3NbcG9zXVtjXSA9IDA7XG4gICAgICB9XG4gICAgICBvY2NzW3Bvc11bY10gKys7XG4gICAgICBpZiAodG90YWxQZXJQb3NbcG9zXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRvdGFsUGVyUG9zW3Bvc10gPSAwO1xuICAgICAgfVxuICAgICAgdG90YWxQZXJQb3NbcG9zXSArKztcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gbm9ybWFsaXplIHRvIDFcbiAgXy5lYWNoKG9jY3MsIGZ1bmN0aW9uKGVsLCBwb3MpIHtcbiAgICByZXR1cm4gXy5lYWNoKGVsLCBmdW5jdGlvbih2YWwsIGMpIHtcbiAgICAgIHJldHVybiAob2Njc1twb3NdW2NdID0gdmFsIC8gdG90YWxQZXJQb3NbcG9zXSk7XG4gICAgfSk7XG4gIH0pO1xuICB0aGlzLl9mcmVxdWVuY3kgPSBvY2NzO1xuICByZXR1cm4gb2Njcztcbn07XG5cbi8vIHNlcXM6IGFycmF5IG9mIHNlcXVlbmNlcyAoc3RyaW5ncylcbnN0YXQucHJvdG90eXBlLmJhY2tncm91bmRDYWxjID0gZnVuY3Rpb24gYmFja2dyb3VuZENhbGMoKSB7XG4gIHZhciBvY2MgPSB7fTtcbiAgdmFyIHRvdGFsID0gMDtcblxuICAvLyBjb3VudCB0aGUgb2NjdXJlbmNlcyBvZiB0aGUgY2hhcnMgb2YgYSBwb3NpdGlvblxuICBfLmVhY2godGhpcy5zZXFzLCBmdW5jdGlvbihlbCkge1xuICAgIF8uZWFjaChlbCwgZnVuY3Rpb24oYykge1xuICAgICAgaWYgKG9jY1tjXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG9jY1tjXSA9IDA7XG4gICAgICB9XG4gICAgICBvY2NbY10gKys7XG4gICAgICByZXR1cm4gdG90YWwrKztcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gbm9ybWFsaXplIHRvIDFcbiAgb2NjID0gXy5tYXBWYWx1ZXMob2NjLCBmdW5jdGlvbih2YWwpIHtcbiAgICByZXR1cm4gdmFsIC8gdG90YWw7XG4gIH0pO1xuICB0aGlzLl9iYWNrZ3JvdW5kID0gb2NjO1xuICByZXR1cm4gb2NjO1xufTtcblxuXG4vLyBpbmZvcm1hdGlvbiBjb250ZW50IGFmdGVyIFNoYW5ub25cbi8vICogZ2FwcyBhcmUgZXhjbHVkZWRcbnN0YXQucHJvdG90eXBlLmljQ2FsYyA9IGZ1bmN0aW9uIGljQ2FsYygpIHtcbiAgdmFyIGYgPSB0aGlzLmZyZXF1ZW5jeSgpO1xuICBpZiAodGhpcy5fdXNlQmFja2dyb3VuZCkge1xuICAgIHZhciBiID0gdGhpcy5iYWNrZ3JvdW5kKCk7XG4gIH1cbiAgdmFyIGlnbm9yZWRDaGFycyA9IHRoaXMuaWdub3JlZENoYXJzO1xuICB2YXIgdXNlQmFja2dyb3VuZCA9IHRoaXMuX3VzZUJhY2tncm91bmQ7XG4gIHZhciBpYyA9IF8ubWFwKGYsIGZ1bmN0aW9uKGVsKSB7XG4gICAgcmV0dXJuIF8ucmVkdWNlKGVsLCBmdW5jdGlvbihtZW1vLCB2YWwsIGMpIHtcbiAgICAgIGlmIChpZ25vcmVkQ2hhcnMuaW5kZXhPZihjKSA+PSAwKSByZXR1cm4gbWVtbztcbiAgICAgIGlmICh1c2VCYWNrZ3JvdW5kKSB7XG4gICAgICAgIHZhbCA9IHZhbCAvIGJbY107XG4gICAgICB9XG4gICAgICByZXR1cm4gbWVtbyAtIHZhbCAqIChNYXRoLmxvZyh2YWwpIC8gTWF0aC5sb2coMikpO1xuICAgIH0sIDApO1xuICB9KTtcbiAgdGhpcy5faWMgPSBpYztcbiAgcmV0dXJuIGljO1xufTtcblxuLy8gc2VxdWVuY2UgY29uc2VydmF0aW9uIGFmdGVyIFNjaG5laWRlciBhbmQgU3RlcGhlbnMgKDE5OTApXG4vLyBAY2l0ZSBTY2huZWlkZXIsIFQuRC4gYW5kIFN0ZXBoZW5zLCBSLk0uIDE5OTAuIFNlcXVlbmNlIGxvZ29zOiBBIG5ldyB3YXkgdG9cbi8vIGRpc3BsYXkgY29uc2Vuc3VzIHNlcXVlbmNlcy4gTnVjbGVpYyBBY2lkcyBSZXMuIDE4OiA2MDk34oCTNjEwMC5cbnN0YXQucHJvdG90eXBlLmNvbnNlcnZhdGlvbiA9IGZ1bmN0aW9uIGNvbnNlcnZhdGlvbihhbHBoYWJldFNpemUpIHtcbiAgdmFyIGljID0gdGhpcy5pYygpO1xuICBhbHBoYWJldFNpemUgPSBhbHBoYWJldFNpemUgfHwgdGhpcy5hbHBoYWJldFNpemU7XG4gIHZhciBpY01heCA9IE1hdGgubG9nKGFscGhhYmV0U2l6ZSkgLyBNYXRoLmxvZygyKTtcbiAgdmFyIGNvbnNlcnYgPSBfLm1hcChpYywgZnVuY3Rpb24oZWwpIHtcbiAgICByZXR1cm4gaWNNYXggLSBlbDtcbiAgfSk7XG4gIHJldHVybiBjb25zZXJ2O1xufTtcblxuLy8gc2VxdWVuY2UgY29uc2VydmF0aW9uIGFmdGVyIFNjaG5laWRlciBhbmQgU3RlcGhlbnMgKDE5OTApXG4vLyBjb25zZXJ2YXRpb24gZm9yIGVhY2ggYW1pbm8gYWNpZFxuLy8gKiBnYXBzIGFyZSBleGNsdWRlZFxuc3RhdC5wcm90b3R5cGUuY29uc2VydlJlc2lkdWUgPSBmdW5jdGlvbiBjb25zZXJ2YXRpb24oaW5wdXQpIHtcbiAgdmFyIGFscGhhYmV0U2l6ZSA9IGlucHV0ID8gaW5wdXQuYWxwaGFiZXRTaXplIDogdW5kZWZpbmVkO1xuICB2YXIgaWM7XG4gIHZhciBpZ25vcmVkQ2hhcnMgPSB0aGlzLmlnbm9yZWRDaGFycztcbiAgaWYgKGlucHV0ICE9PSB1bmRlZmluZWQgJiYgaW5wdXQuc2NhbGVkKSB7XG4gICAgaWMgPSB0aGlzLnNjYWxlKHRoaXMuY29uc2VydmF0aW9uKGFscGhhYmV0U2l6ZSkpO1xuICB9IGVsc2Uge1xuICAgIGljID0gdGhpcy5jb25zZXJ2YXRpb24oYWxwaGFiZXRTaXplKTtcbiAgfVxuICB2YXIgZiA9IHRoaXMuZnJlcXVlbmN5KCk7XG4gIHZhciBrZXlzO1xuICB2YXIgY29uc2VydiA9IF8ubWFwKGYsIGZ1bmN0aW9uKGVsLCBpKSB7XG4gICAga2V5cyA9IF8ucmVqZWN0KF8ua2V5cyhlbCksIGZ1bmN0aW9uKGMpIHtcbiAgICAgIHJldHVybiBpZ25vcmVkQ2hhcnMuaW5kZXhPZihjKSA+PSAwO1xuICAgIH0pO1xuICAgIHZhciBvYmogPSB7fTtcbiAgICBfLmVhY2goa2V5cywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICBvYmpba2V5XSA9IGVsW2tleV0gKiBpY1tpXTtcbiAgICB9KTtcbiAgICByZXR1cm4gb2JqO1xuICB9KTtcbiAgcmV0dXJuIGNvbnNlcnY7XG59O1xuXG4vLyB0eXBlIDIgc2VxdWVuY2UgbG9nbyBtZXRob2Rcbi8vIHNjYWxlcyByZWxhdGl2ZSB0byBiYWNrZ3JvdW5kXG5zdGF0LnByb3RvdHlwZS5jb25zZXJ2UmVzaWR1ZTIgPSBmdW5jdGlvbiBjb25zZXJ2YXRpb24oYWxwaGFiZXRTaXplKSB7XG4gIHZhciBmID0gdGhpcy5mcmVxdWVuY3koKTtcbiAgdmFyIGljID0gdGhpcy5jb25zZXJ2YXRpb24oYWxwaGFiZXRTaXplKTtcbiAgdmFyIGIgPSB0aGlzLmJhY2tncm91bmQoKTtcbiAgdmFyIGNvbnNlcnYgPSBfLm1hcChmLCBmdW5jdGlvbihlbCwgaSkge1xuICAgIHJldHVybiBfLm1hcChlbCwgZnVuY3Rpb24odmFsKSB7XG4gICAgICB2YXIgc3VtID0gXy5yZWR1Y2UoZltpXSwgZnVuY3Rpb24obWVtbywgZSkge1xuICAgICAgICByZXR1cm4gbWVtbyArIGUgLyBiW2ldO1xuICAgICAgfSwgMCk7XG4gICAgICByZXR1cm4gKCh2YWwgLyBiW2ldKSAvIHN1bSkgKiBpY1tpXTtcbiAgICB9LCAwKTtcbiAgfSk7XG4gIHJldHVybiBjb25zZXJ2O1xufTtcblxuLy8gc2NhbGUgaW5mb3JtYXRpb24gY29udGVudCBvciBjb25zZXJ2YXRpb24gdG8gMVxuc3RhdC5wcm90b3R5cGUuc2NhbGUgPSBmdW5jdGlvbiBjb25zZXJ2YXRpb24oaWMsIGFscGhhYmV0U2l6ZSkge1xuICBhbHBoYWJldFNpemUgPSBhbHBoYWJldFNpemUgfHwgdGhpcy5hbHBoYWJldFNpemU7XG4gIHZhciBpY01heCA9IE1hdGgubG9nKGFscGhhYmV0U2l6ZSkgLyBNYXRoLmxvZygyKTtcbiAgdmFyIGNvbnNlcnYgPSBfLm1hcChpYywgZnVuY3Rpb24oZWwpIHtcbiAgICByZXR1cm4gZWwgLyBpY01heDtcbiAgfSk7XG4gIHJldHVybiBjb25zZXJ2O1xufTtcblxuc3RhdC5wcm90b3R5cGUubWF4TGVuZ3RoQ2FsYyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9tYXhMZW5ndGggPSBfLm1heCh0aGlzLnNlcXMsIGZ1bmN0aW9uKHNlcSkge1xuICAgIHJldHVybiBzZXEubGVuZ3RoO1xuICB9KS5sZW5ndGg7XG59O1xuXG4vLyBzZXFzOiBhcnJheSBvZiBzZXF1ZW5jZXMgKHN0cmluZ3MpXG4vLyBAcmV0dXJucyBjb25zZW51cyBzZXF1ZW5jZVxuc3RhdC5wcm90b3R5cGUuY29uc2Vuc3VzQ2FsYyA9IGZ1bmN0aW9uIGNvbnNlbnN1c0NhbCgpIHtcbiAgdmFyIG9jY3MgPSBuZXcgQXJyYXkodGhpcy5tYXhMZW5ndGgoKSk7XG5cbiAgLy8gY291bnQgdGhlIG9jY3VycmVuY2VzIG9mIHRoZSBjaGFycyBvZiBhIHBvc2l0aW9uXG4gIF8uZWFjaCh0aGlzLnNlcXMsIGZ1bmN0aW9uKGVsKSB7XG4gICAgXy5lYWNoKGVsLCBmdW5jdGlvbihjLCBwb3MpIHtcbiAgICAgIGlmIChvY2NzW3Bvc10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBvY2NzW3Bvc10gPSB7fTtcbiAgICAgIH1cbiAgICAgIGlmIChvY2NzW3Bvc11bY10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBvY2NzW3Bvc11bY10gPSAwO1xuICAgICAgfVxuICAgICAgb2Njc1twb3NdW2NdICsrO1xuICAgIH0pO1xuICB9KTtcblxuICAvLyBub3cgcGljayB0aGUgY2hhciB3aXRoIG1vc3Qgb2NjdXJyZW5jZXNcbiAgdGhpcy5fY29uc2Vuc3VzID0gXy5yZWR1Y2Uob2NjcywgZnVuY3Rpb24obWVtbywgb2NjKSB7XG4gICAgdmFyIGtleXM7XG4gICAga2V5cyA9IF8ua2V5cyhvY2MpO1xuICAgIHJldHVybiBtZW1vICs9IF8ubWF4KGtleXMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIG9jY1trZXldO1xuICAgIH0pO1xuICB9LCBcIlwiKTtcblxuICByZXR1cm4gdGhpcy5fY29uc2Vuc3VzO1xufTtcblxuLy8gc2VxczogYXJyYXkgb2Ygc2VxdWVuY2VzIChzdHJpbmdzKVxuLy8gY29uc2Vuc3VzOiBjYWxjdWxhdGVkIGNvbnNlbnN1cyBzZXFcbi8vIGNhbGN1bGF0ZXMgZm9yIGVhY2ggc2VxdWVuY2Vcbi8vICogbWF0Y2hlcyB3aXRoIHRoZSBjb25zZW5zdXMgc2VxXG4vLyAqIGlkZW50aXR5ID0gbWF0Y2hlZENoYXJzIC8gdG90YWxDaGFycyAoZXhjbHVkaW5nIGdhcHMpXG4vLyBAcmV0dXJuczogYXJyYXkgb2YgbGVuZ3RoIG9mIHRoZSBzZXFzIHdpdGggdGhlIGlkZW50aXR5IHRvIHRoZSBjb25zZW5zdXMgKGRvdWJsZSlcbnN0YXQucHJvdG90eXBlLmlkZW50aXR5Q2FsYyA9IGZ1bmN0aW9uIGlkZW50aXRpeUNhbGMoY29tcGFyZVNlcSkge1xuICB2YXIgY29uc2Vuc3VzID0gY29tcGFyZVNlcSB8fCB0aGlzLmNvbnNlbnN1cygpO1xuICB0aGlzLl9pZGVudGl0eSA9IHRoaXMuc2Vxcy5tYXAoZnVuY3Rpb24oc2VxKSB7XG4gICAgdmFyIG1hdGNoZXMgPSAwO1xuICAgIHZhciB0b3RhbCA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZXEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChzZXFbaV0gIT09IFwiLVwiICYmIGNvbnNlbnN1c1tpXSAhPT0gXCItXCIpIHtcbiAgICAgICAgdG90YWwrKztcbiAgICAgICAgaWYgKHNlcVtpXSA9PT0gY29uc2Vuc3VzW2ldKSB7XG4gICAgICAgICAgbWF0Y2hlcysrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXRjaGVzIC8gdG90YWw7XG4gIH0pO1xuICByZXR1cm4gdGhpcy5faWRlbnRpdHk7XG59O1xuXG4vLyBwZXJjZW50YWdlIG9mIGdhcHMgcGVyIGNvbHVtblxuc3RhdC5wcm90b3R5cGUuZ2Fwc0NhbGMgPSBmdW5jdGlvbiBnYXBzQ291bnQoKSB7XG4gIHZhciBvY2NzID0gbmV3IEFycmF5KHRoaXMubWF4TGVuZ3RoKCkpO1xuICAvLyBjb3VudCB0aGUgb2NjdXJyZW5jZXMgb2YgdGhlIGNoYXJzIG9mIGEgcG9zaXRpb25cbiAgXy5lYWNoKHRoaXMuc2VxcywgZnVuY3Rpb24oZWwpIHtcbiAgICBfLmVhY2goZWwsIGZ1bmN0aW9uKGMsIHBvcykge1xuICAgICAgaWYgKG9jY3NbcG9zXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG9jY3NbcG9zXSA9IHtcbiAgICAgICAgICBnOiAwLFxuICAgICAgICAgIHQ6IDBcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGMgPSBjID09PSBcIi1cIiA/IFwiZ1wiIDogXCJ0XCI7XG4gICAgICBvY2NzW3Bvc11bY10gKys7XG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIG5vdyBwaWNrIHRoZSBjaGFyIHdpdGggbW9zdCBvY2N1cnJlbmNlc1xuICB0aGlzLl9nYXBzID0gXy5tYXAob2NjcywgZnVuY3Rpb24oZWwpIHtcbiAgICByZXR1cm4gZWwuZyAvIChlbC5nICsgZWwudCk7XG4gIH0pO1xuICByZXR1cm4gdGhpcy5fZ2Fwcztcbn07XG5cbl8ubWl4aW4oe1xuICBtYXBWYWx1ZXM6IGZ1bmN0aW9uKG9iaiwgZl92YWwpIHtcbiAgICByZXR1cm4gXy5vYmplY3QoXy5rZXlzKG9iaiksIF8ubWFwKG9iaiwgZl92YWwpKTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoXCJiaW9qcy1ldmVudHNcIikubWl4aW4oc3RhdC5wcm90b3R5cGUpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YXQ7XG4iLCIvLyAgICAgVW5kZXJzY29yZS5qcyAxLjguMVxuLy8gICAgIGh0dHA6Ly91bmRlcnNjb3JlanMub3JnXG4vLyAgICAgKGMpIDIwMDktMjAxNSBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuLy8gICAgIFVuZGVyc2NvcmUgbWF5IGJlIGZyZWVseSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5cbihmdW5jdGlvbigpIHtcblxuICAvLyBCYXNlbGluZSBzZXR1cFxuICAvLyAtLS0tLS0tLS0tLS0tLVxuXG4gIC8vIEVzdGFibGlzaCB0aGUgcm9vdCBvYmplY3QsIGB3aW5kb3dgIGluIHRoZSBicm93c2VyLCBvciBgZXhwb3J0c2Agb24gdGhlIHNlcnZlci5cbiAgdmFyIHJvb3QgPSB0aGlzO1xuXG4gIC8vIFNhdmUgdGhlIHByZXZpb3VzIHZhbHVlIG9mIHRoZSBgX2AgdmFyaWFibGUuXG4gIHZhciBwcmV2aW91c1VuZGVyc2NvcmUgPSByb290Ll87XG5cbiAgLy8gU2F2ZSBieXRlcyBpbiB0aGUgbWluaWZpZWQgKGJ1dCBub3QgZ3ppcHBlZCkgdmVyc2lvbjpcbiAgdmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGUsIE9ialByb3RvID0gT2JqZWN0LnByb3RvdHlwZSwgRnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuXG4gIC8vIENyZWF0ZSBxdWljayByZWZlcmVuY2UgdmFyaWFibGVzIGZvciBzcGVlZCBhY2Nlc3MgdG8gY29yZSBwcm90b3R5cGVzLlxuICB2YXJcbiAgICBwdXNoICAgICAgICAgICAgID0gQXJyYXlQcm90by5wdXNoLFxuICAgIHNsaWNlICAgICAgICAgICAgPSBBcnJheVByb3RvLnNsaWNlLFxuICAgIHRvU3RyaW5nICAgICAgICAgPSBPYmpQcm90by50b1N0cmluZyxcbiAgICBoYXNPd25Qcm9wZXJ0eSAgID0gT2JqUHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbiAgLy8gQWxsICoqRUNNQVNjcmlwdCA1KiogbmF0aXZlIGZ1bmN0aW9uIGltcGxlbWVudGF0aW9ucyB0aGF0IHdlIGhvcGUgdG8gdXNlXG4gIC8vIGFyZSBkZWNsYXJlZCBoZXJlLlxuICB2YXJcbiAgICBuYXRpdmVJc0FycmF5ICAgICAgPSBBcnJheS5pc0FycmF5LFxuICAgIG5hdGl2ZUtleXMgICAgICAgICA9IE9iamVjdC5rZXlzLFxuICAgIG5hdGl2ZUJpbmQgICAgICAgICA9IEZ1bmNQcm90by5iaW5kLFxuICAgIG5hdGl2ZUNyZWF0ZSAgICAgICA9IE9iamVjdC5jcmVhdGU7XG5cbiAgLy8gTmFrZWQgZnVuY3Rpb24gcmVmZXJlbmNlIGZvciBzdXJyb2dhdGUtcHJvdG90eXBlLXN3YXBwaW5nLlxuICB2YXIgQ3RvciA9IGZ1bmN0aW9uKCl7fTtcblxuICAvLyBDcmVhdGUgYSBzYWZlIHJlZmVyZW5jZSB0byB0aGUgVW5kZXJzY29yZSBvYmplY3QgZm9yIHVzZSBiZWxvdy5cbiAgdmFyIF8gPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAob2JqIGluc3RhbmNlb2YgXykgcmV0dXJuIG9iajtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgXykpIHJldHVybiBuZXcgXyhvYmopO1xuICAgIHRoaXMuX3dyYXBwZWQgPSBvYmo7XG4gIH07XG5cbiAgLy8gRXhwb3J0IHRoZSBVbmRlcnNjb3JlIG9iamVjdCBmb3IgKipOb2RlLmpzKiosIHdpdGhcbiAgLy8gYmFja3dhcmRzLWNvbXBhdGliaWxpdHkgZm9yIHRoZSBvbGQgYHJlcXVpcmUoKWAgQVBJLiBJZiB3ZSdyZSBpblxuICAvLyB0aGUgYnJvd3NlciwgYWRkIGBfYCBhcyBhIGdsb2JhbCBvYmplY3QuXG4gIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IF87XG4gICAgfVxuICAgIGV4cG9ydHMuXyA9IF87XG4gIH0gZWxzZSB7XG4gICAgcm9vdC5fID0gXztcbiAgfVxuXG4gIC8vIEN1cnJlbnQgdmVyc2lvbi5cbiAgXy5WRVJTSU9OID0gJzEuOC4xJztcblxuICAvLyBJbnRlcm5hbCBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gZWZmaWNpZW50IChmb3IgY3VycmVudCBlbmdpbmVzKSB2ZXJzaW9uXG4gIC8vIG9mIHRoZSBwYXNzZWQtaW4gY2FsbGJhY2ssIHRvIGJlIHJlcGVhdGVkbHkgYXBwbGllZCBpbiBvdGhlciBVbmRlcnNjb3JlXG4gIC8vIGZ1bmN0aW9ucy5cbiAgdmFyIG9wdGltaXplQ2IgPSBmdW5jdGlvbihmdW5jLCBjb250ZXh0LCBhcmdDb3VudCkge1xuICAgIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHJldHVybiBmdW5jO1xuICAgIHN3aXRjaCAoYXJnQ291bnQgPT0gbnVsbCA/IDMgOiBhcmdDb3VudCkge1xuICAgICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCB2YWx1ZSk7XG4gICAgICB9O1xuICAgICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICAgIHJldHVybiBmdW5jLmNhbGwoY29udGV4dCwgdmFsdWUsIG90aGVyKTtcbiAgICAgIH07XG4gICAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgICAgfTtcbiAgICAgIGNhc2UgNDogcmV0dXJuIGZ1bmN0aW9uKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCBhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfTtcblxuICAvLyBBIG1vc3RseS1pbnRlcm5hbCBmdW5jdGlvbiB0byBnZW5lcmF0ZSBjYWxsYmFja3MgdGhhdCBjYW4gYmUgYXBwbGllZFxuICAvLyB0byBlYWNoIGVsZW1lbnQgaW4gYSBjb2xsZWN0aW9uLCByZXR1cm5pbmcgdGhlIGRlc2lyZWQgcmVzdWx0IOKAlCBlaXRoZXJcbiAgLy8gaWRlbnRpdHksIGFuIGFyYml0cmFyeSBjYWxsYmFjaywgYSBwcm9wZXJ0eSBtYXRjaGVyLCBvciBhIHByb3BlcnR5IGFjY2Vzc29yLlxuICB2YXIgY2IgPSBmdW5jdGlvbih2YWx1ZSwgY29udGV4dCwgYXJnQ291bnQpIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIF8uaWRlbnRpdHk7XG4gICAgaWYgKF8uaXNGdW5jdGlvbih2YWx1ZSkpIHJldHVybiBvcHRpbWl6ZUNiKHZhbHVlLCBjb250ZXh0LCBhcmdDb3VudCk7XG4gICAgaWYgKF8uaXNPYmplY3QodmFsdWUpKSByZXR1cm4gXy5tYXRjaGVyKHZhbHVlKTtcbiAgICByZXR1cm4gXy5wcm9wZXJ0eSh2YWx1ZSk7XG4gIH07XG4gIF8uaXRlcmF0ZWUgPSBmdW5jdGlvbih2YWx1ZSwgY29udGV4dCkge1xuICAgIHJldHVybiBjYih2YWx1ZSwgY29udGV4dCwgSW5maW5pdHkpO1xuICB9O1xuXG4gIC8vIEFuIGludGVybmFsIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhc3NpZ25lciBmdW5jdGlvbnMuXG4gIHZhciBjcmVhdGVBc3NpZ25lciA9IGZ1bmN0aW9uKGtleXNGdW5jLCB1bmRlZmluZWRPbmx5KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iaikge1xuICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoIDwgMiB8fCBvYmogPT0gbnVsbCkgcmV0dXJuIG9iajtcbiAgICAgIGZvciAodmFyIGluZGV4ID0gMTsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpbmRleF0sXG4gICAgICAgICAgICBrZXlzID0ga2V5c0Z1bmMoc291cmNlKSxcbiAgICAgICAgICAgIGwgPSBrZXlzLmxlbmd0aDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICBpZiAoIXVuZGVmaW5lZE9ubHkgfHwgb2JqW2tleV0gPT09IHZvaWQgMCkgb2JqW2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG9iajtcbiAgICB9O1xuICB9O1xuXG4gIC8vIEFuIGludGVybmFsIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIG5ldyBvYmplY3QgdGhhdCBpbmhlcml0cyBmcm9tIGFub3RoZXIuXG4gIHZhciBiYXNlQ3JlYXRlID0gZnVuY3Rpb24ocHJvdG90eXBlKSB7XG4gICAgaWYgKCFfLmlzT2JqZWN0KHByb3RvdHlwZSkpIHJldHVybiB7fTtcbiAgICBpZiAobmF0aXZlQ3JlYXRlKSByZXR1cm4gbmF0aXZlQ3JlYXRlKHByb3RvdHlwZSk7XG4gICAgQ3Rvci5wcm90b3R5cGUgPSBwcm90b3R5cGU7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyBDdG9yO1xuICAgIEN0b3IucHJvdG90eXBlID0gbnVsbDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIEhlbHBlciBmb3IgY29sbGVjdGlvbiBtZXRob2RzIHRvIGRldGVybWluZSB3aGV0aGVyIGEgY29sbGVjdGlvblxuICAvLyBzaG91bGQgYmUgaXRlcmF0ZWQgYXMgYW4gYXJyYXkgb3IgYXMgYW4gb2JqZWN0XG4gIC8vIFJlbGF0ZWQ6IGh0dHA6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLXRvbGVuZ3RoXG4gIHZhciBNQVhfQVJSQVlfSU5ERVggPSBNYXRoLnBvdygyLCA1MykgLSAxO1xuICB2YXIgaXNBcnJheUxpa2UgPSBmdW5jdGlvbihjb2xsZWN0aW9uKSB7XG4gICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24gJiYgY29sbGVjdGlvbi5sZW5ndGg7XG4gICAgcmV0dXJuIHR5cGVvZiBsZW5ndGggPT0gJ251bWJlcicgJiYgbGVuZ3RoID49IDAgJiYgbGVuZ3RoIDw9IE1BWF9BUlJBWV9JTkRFWDtcbiAgfTtcblxuICAvLyBDb2xsZWN0aW9uIEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIFRoZSBjb3JuZXJzdG9uZSwgYW4gYGVhY2hgIGltcGxlbWVudGF0aW9uLCBha2EgYGZvckVhY2hgLlxuICAvLyBIYW5kbGVzIHJhdyBvYmplY3RzIGluIGFkZGl0aW9uIHRvIGFycmF5LWxpa2VzLiBUcmVhdHMgYWxsXG4gIC8vIHNwYXJzZSBhcnJheS1saWtlcyBhcyBpZiB0aGV5IHdlcmUgZGVuc2UuXG4gIF8uZWFjaCA9IF8uZm9yRWFjaCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICBpdGVyYXRlZSA9IG9wdGltaXplQ2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgIHZhciBpLCBsZW5ndGg7XG4gICAgaWYgKGlzQXJyYXlMaWtlKG9iaikpIHtcbiAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IG9iai5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpdGVyYXRlZShvYmpbaV0sIGksIG9iaik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaik7XG4gICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBrZXlzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGl0ZXJhdGVlKG9ialtrZXlzW2ldXSwga2V5c1tpXSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfTtcblxuICAvLyBSZXR1cm4gdGhlIHJlc3VsdHMgb2YgYXBwbHlpbmcgdGhlIGl0ZXJhdGVlIHRvIGVhY2ggZWxlbWVudC5cbiAgXy5tYXAgPSBfLmNvbGxlY3QgPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgdmFyIGtleXMgPSAhaXNBcnJheUxpa2Uob2JqKSAmJiBfLmtleXMob2JqKSxcbiAgICAgICAgbGVuZ3RoID0gKGtleXMgfHwgb2JqKS5sZW5ndGgsXG4gICAgICAgIHJlc3VsdHMgPSBBcnJheShsZW5ndGgpO1xuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBjdXJyZW50S2V5ID0ga2V5cyA/IGtleXNbaW5kZXhdIDogaW5kZXg7XG4gICAgICByZXN1bHRzW2luZGV4XSA9IGl0ZXJhdGVlKG9ialtjdXJyZW50S2V5XSwgY3VycmVudEtleSwgb2JqKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgLy8gQ3JlYXRlIGEgcmVkdWNpbmcgZnVuY3Rpb24gaXRlcmF0aW5nIGxlZnQgb3IgcmlnaHQuXG4gIGZ1bmN0aW9uIGNyZWF0ZVJlZHVjZShkaXIpIHtcbiAgICAvLyBPcHRpbWl6ZWQgaXRlcmF0b3IgZnVuY3Rpb24gYXMgdXNpbmcgYXJndW1lbnRzLmxlbmd0aFxuICAgIC8vIGluIHRoZSBtYWluIGZ1bmN0aW9uIHdpbGwgZGVvcHRpbWl6ZSB0aGUsIHNlZSAjMTk5MS5cbiAgICBmdW5jdGlvbiBpdGVyYXRvcihvYmosIGl0ZXJhdGVlLCBtZW1vLCBrZXlzLCBpbmRleCwgbGVuZ3RoKSB7XG4gICAgICBmb3IgKDsgaW5kZXggPj0gMCAmJiBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gZGlyKSB7XG4gICAgICAgIHZhciBjdXJyZW50S2V5ID0ga2V5cyA/IGtleXNbaW5kZXhdIDogaW5kZXg7XG4gICAgICAgIG1lbW8gPSBpdGVyYXRlZShtZW1vLCBvYmpbY3VycmVudEtleV0sIGN1cnJlbnRLZXksIG9iaik7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWVtbztcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgbWVtbywgY29udGV4dCkge1xuICAgICAgaXRlcmF0ZWUgPSBvcHRpbWl6ZUNiKGl0ZXJhdGVlLCBjb250ZXh0LCA0KTtcbiAgICAgIHZhciBrZXlzID0gIWlzQXJyYXlMaWtlKG9iaikgJiYgXy5rZXlzKG9iaiksXG4gICAgICAgICAgbGVuZ3RoID0gKGtleXMgfHwgb2JqKS5sZW5ndGgsXG4gICAgICAgICAgaW5kZXggPSBkaXIgPiAwID8gMCA6IGxlbmd0aCAtIDE7XG4gICAgICAvLyBEZXRlcm1pbmUgdGhlIGluaXRpYWwgdmFsdWUgaWYgbm9uZSBpcyBwcm92aWRlZC5cbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMykge1xuICAgICAgICBtZW1vID0gb2JqW2tleXMgPyBrZXlzW2luZGV4XSA6IGluZGV4XTtcbiAgICAgICAgaW5kZXggKz0gZGlyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGl0ZXJhdG9yKG9iaiwgaXRlcmF0ZWUsIG1lbW8sIGtleXMsIGluZGV4LCBsZW5ndGgpO1xuICAgIH07XG4gIH1cblxuICAvLyAqKlJlZHVjZSoqIGJ1aWxkcyB1cCBhIHNpbmdsZSByZXN1bHQgZnJvbSBhIGxpc3Qgb2YgdmFsdWVzLCBha2EgYGluamVjdGAsXG4gIC8vIG9yIGBmb2xkbGAuXG4gIF8ucmVkdWNlID0gXy5mb2xkbCA9IF8uaW5qZWN0ID0gY3JlYXRlUmVkdWNlKDEpO1xuXG4gIC8vIFRoZSByaWdodC1hc3NvY2lhdGl2ZSB2ZXJzaW9uIG9mIHJlZHVjZSwgYWxzbyBrbm93biBhcyBgZm9sZHJgLlxuICBfLnJlZHVjZVJpZ2h0ID0gXy5mb2xkciA9IGNyZWF0ZVJlZHVjZSgtMSk7XG5cbiAgLy8gUmV0dXJuIHRoZSBmaXJzdCB2YWx1ZSB3aGljaCBwYXNzZXMgYSB0cnV0aCB0ZXN0LiBBbGlhc2VkIGFzIGBkZXRlY3RgLlxuICBfLmZpbmQgPSBfLmRldGVjdCA9IGZ1bmN0aW9uKG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIGtleTtcbiAgICBpZiAoaXNBcnJheUxpa2Uob2JqKSkge1xuICAgICAga2V5ID0gXy5maW5kSW5kZXgob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBrZXkgPSBfLmZpbmRLZXkob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAoa2V5ICE9PSB2b2lkIDAgJiYga2V5ICE9PSAtMSkgcmV0dXJuIG9ialtrZXldO1xuICB9O1xuXG4gIC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIHRoYXQgcGFzcyBhIHRydXRoIHRlc3QuXG4gIC8vIEFsaWFzZWQgYXMgYHNlbGVjdGAuXG4gIF8uZmlsdGVyID0gXy5zZWxlY3QgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHZhciByZXN1bHRzID0gW107XG4gICAgcHJlZGljYXRlID0gY2IocHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICBfLmVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBsaXN0KSkgcmVzdWx0cy5wdXNoKHZhbHVlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfTtcblxuICAvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBmb3Igd2hpY2ggYSB0cnV0aCB0ZXN0IGZhaWxzLlxuICBfLnJlamVjdCA9IGZ1bmN0aW9uKG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIF8uZmlsdGVyKG9iaiwgXy5uZWdhdGUoY2IocHJlZGljYXRlKSksIGNvbnRleHQpO1xuICB9O1xuXG4gIC8vIERldGVybWluZSB3aGV0aGVyIGFsbCBvZiB0aGUgZWxlbWVudHMgbWF0Y2ggYSB0cnV0aCB0ZXN0LlxuICAvLyBBbGlhc2VkIGFzIGBhbGxgLlxuICBfLmV2ZXJ5ID0gXy5hbGwgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHByZWRpY2F0ZSA9IGNiKHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgdmFyIGtleXMgPSAhaXNBcnJheUxpa2Uob2JqKSAmJiBfLmtleXMob2JqKSxcbiAgICAgICAgbGVuZ3RoID0gKGtleXMgfHwgb2JqKS5sZW5ndGg7XG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgdmFyIGN1cnJlbnRLZXkgPSBrZXlzID8ga2V5c1tpbmRleF0gOiBpbmRleDtcbiAgICAgIGlmICghcHJlZGljYXRlKG9ialtjdXJyZW50S2V5XSwgY3VycmVudEtleSwgb2JqKSkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICAvLyBEZXRlcm1pbmUgaWYgYXQgbGVhc3Qgb25lIGVsZW1lbnQgaW4gdGhlIG9iamVjdCBtYXRjaGVzIGEgdHJ1dGggdGVzdC5cbiAgLy8gQWxpYXNlZCBhcyBgYW55YC5cbiAgXy5zb21lID0gXy5hbnkgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHByZWRpY2F0ZSA9IGNiKHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgdmFyIGtleXMgPSAhaXNBcnJheUxpa2Uob2JqKSAmJiBfLmtleXMob2JqKSxcbiAgICAgICAgbGVuZ3RoID0gKGtleXMgfHwgb2JqKS5sZW5ndGg7XG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgdmFyIGN1cnJlbnRLZXkgPSBrZXlzID8ga2V5c1tpbmRleF0gOiBpbmRleDtcbiAgICAgIGlmIChwcmVkaWNhdGUob2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopKSByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIC8vIERldGVybWluZSBpZiB0aGUgYXJyYXkgb3Igb2JqZWN0IGNvbnRhaW5zIGEgZ2l2ZW4gdmFsdWUgKHVzaW5nIGA9PT1gKS5cbiAgLy8gQWxpYXNlZCBhcyBgaW5jbHVkZXNgIGFuZCBgaW5jbHVkZWAuXG4gIF8uY29udGFpbnMgPSBfLmluY2x1ZGVzID0gXy5pbmNsdWRlID0gZnVuY3Rpb24ob2JqLCB0YXJnZXQpIHtcbiAgICBpZiAoIWlzQXJyYXlMaWtlKG9iaikpIG9iaiA9IF8udmFsdWVzKG9iaik7XG4gICAgcmV0dXJuIF8uaW5kZXhPZihvYmosIHRhcmdldCkgPj0gMDtcbiAgfTtcblxuICAvLyBJbnZva2UgYSBtZXRob2QgKHdpdGggYXJndW1lbnRzKSBvbiBldmVyeSBpdGVtIGluIGEgY29sbGVjdGlvbi5cbiAgXy5pbnZva2UgPSBmdW5jdGlvbihvYmosIG1ldGhvZCkge1xuICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuICAgIHZhciBpc0Z1bmMgPSBfLmlzRnVuY3Rpb24obWV0aG9kKTtcbiAgICByZXR1cm4gXy5tYXAob2JqLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0Z1bmMgPyBtZXRob2QgOiB2YWx1ZVttZXRob2RdO1xuICAgICAgcmV0dXJuIGZ1bmMgPT0gbnVsbCA/IGZ1bmMgOiBmdW5jLmFwcGx5KHZhbHVlLCBhcmdzKTtcbiAgICB9KTtcbiAgfTtcblxuICAvLyBDb252ZW5pZW5jZSB2ZXJzaW9uIG9mIGEgY29tbW9uIHVzZSBjYXNlIG9mIGBtYXBgOiBmZXRjaGluZyBhIHByb3BlcnR5LlxuICBfLnBsdWNrID0gZnVuY3Rpb24ob2JqLCBrZXkpIHtcbiAgICByZXR1cm4gXy5tYXAob2JqLCBfLnByb3BlcnR5KGtleSkpO1xuICB9O1xuXG4gIC8vIENvbnZlbmllbmNlIHZlcnNpb24gb2YgYSBjb21tb24gdXNlIGNhc2Ugb2YgYGZpbHRlcmA6IHNlbGVjdGluZyBvbmx5IG9iamVjdHNcbiAgLy8gY29udGFpbmluZyBzcGVjaWZpYyBga2V5OnZhbHVlYCBwYWlycy5cbiAgXy53aGVyZSA9IGZ1bmN0aW9uKG9iaiwgYXR0cnMpIHtcbiAgICByZXR1cm4gXy5maWx0ZXIob2JqLCBfLm1hdGNoZXIoYXR0cnMpKTtcbiAgfTtcblxuICAvLyBDb252ZW5pZW5jZSB2ZXJzaW9uIG9mIGEgY29tbW9uIHVzZSBjYXNlIG9mIGBmaW5kYDogZ2V0dGluZyB0aGUgZmlyc3Qgb2JqZWN0XG4gIC8vIGNvbnRhaW5pbmcgc3BlY2lmaWMgYGtleTp2YWx1ZWAgcGFpcnMuXG4gIF8uZmluZFdoZXJlID0gZnVuY3Rpb24ob2JqLCBhdHRycykge1xuICAgIHJldHVybiBfLmZpbmQob2JqLCBfLm1hdGNoZXIoYXR0cnMpKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gdGhlIG1heGltdW0gZWxlbWVudCAob3IgZWxlbWVudC1iYXNlZCBjb21wdXRhdGlvbikuXG4gIF8ubWF4ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIHZhciByZXN1bHQgPSAtSW5maW5pdHksIGxhc3RDb21wdXRlZCA9IC1JbmZpbml0eSxcbiAgICAgICAgdmFsdWUsIGNvbXB1dGVkO1xuICAgIGlmIChpdGVyYXRlZSA9PSBudWxsICYmIG9iaiAhPSBudWxsKSB7XG4gICAgICBvYmogPSBpc0FycmF5TGlrZShvYmopID8gb2JqIDogXy52YWx1ZXMob2JqKTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBvYmoubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFsdWUgPSBvYmpbaV07XG4gICAgICAgIGlmICh2YWx1ZSA+IHJlc3VsdCkge1xuICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgICAgXy5lYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUodmFsdWUsIGluZGV4LCBsaXN0KTtcbiAgICAgICAgaWYgKGNvbXB1dGVkID4gbGFzdENvbXB1dGVkIHx8IGNvbXB1dGVkID09PSAtSW5maW5pdHkgJiYgcmVzdWx0ID09PSAtSW5maW5pdHkpIHtcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICBsYXN0Q29tcHV0ZWQgPSBjb21wdXRlZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gUmV0dXJuIHRoZSBtaW5pbXVtIGVsZW1lbnQgKG9yIGVsZW1lbnQtYmFzZWQgY29tcHV0YXRpb24pLlxuICBfLm1pbiA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICB2YXIgcmVzdWx0ID0gSW5maW5pdHksIGxhc3RDb21wdXRlZCA9IEluZmluaXR5LFxuICAgICAgICB2YWx1ZSwgY29tcHV0ZWQ7XG4gICAgaWYgKGl0ZXJhdGVlID09IG51bGwgJiYgb2JqICE9IG51bGwpIHtcbiAgICAgIG9iaiA9IGlzQXJyYXlMaWtlKG9iaikgPyBvYmogOiBfLnZhbHVlcyhvYmopO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IG9iai5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICB2YWx1ZSA9IG9ialtpXTtcbiAgICAgICAgaWYgKHZhbHVlIDwgcmVzdWx0KSB7XG4gICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgICBfLmVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHtcbiAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSh2YWx1ZSwgaW5kZXgsIGxpc3QpO1xuICAgICAgICBpZiAoY29tcHV0ZWQgPCBsYXN0Q29tcHV0ZWQgfHwgY29tcHV0ZWQgPT09IEluZmluaXR5ICYmIHJlc3VsdCA9PT0gSW5maW5pdHkpIHtcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICBsYXN0Q29tcHV0ZWQgPSBjb21wdXRlZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gU2h1ZmZsZSBhIGNvbGxlY3Rpb24sIHVzaW5nIHRoZSBtb2Rlcm4gdmVyc2lvbiBvZiB0aGVcbiAgLy8gW0Zpc2hlci1ZYXRlcyBzaHVmZmxlXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Zpc2hlcuKAk1lhdGVzX3NodWZmbGUpLlxuICBfLnNodWZmbGUgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgc2V0ID0gaXNBcnJheUxpa2Uob2JqKSA/IG9iaiA6IF8udmFsdWVzKG9iaik7XG4gICAgdmFyIGxlbmd0aCA9IHNldC5sZW5ndGg7XG4gICAgdmFyIHNodWZmbGVkID0gQXJyYXkobGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpbmRleCA9IDAsIHJhbmQ7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICByYW5kID0gXy5yYW5kb20oMCwgaW5kZXgpO1xuICAgICAgaWYgKHJhbmQgIT09IGluZGV4KSBzaHVmZmxlZFtpbmRleF0gPSBzaHVmZmxlZFtyYW5kXTtcbiAgICAgIHNodWZmbGVkW3JhbmRdID0gc2V0W2luZGV4XTtcbiAgICB9XG4gICAgcmV0dXJuIHNodWZmbGVkO1xuICB9O1xuXG4gIC8vIFNhbXBsZSAqKm4qKiByYW5kb20gdmFsdWVzIGZyb20gYSBjb2xsZWN0aW9uLlxuICAvLyBJZiAqKm4qKiBpcyBub3Qgc3BlY2lmaWVkLCByZXR1cm5zIGEgc2luZ2xlIHJhbmRvbSBlbGVtZW50LlxuICAvLyBUaGUgaW50ZXJuYWwgYGd1YXJkYCBhcmd1bWVudCBhbGxvd3MgaXQgdG8gd29yayB3aXRoIGBtYXBgLlxuICBfLnNhbXBsZSA9IGZ1bmN0aW9uKG9iaiwgbiwgZ3VhcmQpIHtcbiAgICBpZiAobiA9PSBudWxsIHx8IGd1YXJkKSB7XG4gICAgICBpZiAoIWlzQXJyYXlMaWtlKG9iaikpIG9iaiA9IF8udmFsdWVzKG9iaik7XG4gICAgICByZXR1cm4gb2JqW18ucmFuZG9tKG9iai5sZW5ndGggLSAxKV07XG4gICAgfVxuICAgIHJldHVybiBfLnNodWZmbGUob2JqKS5zbGljZSgwLCBNYXRoLm1heCgwLCBuKSk7XG4gIH07XG5cbiAgLy8gU29ydCB0aGUgb2JqZWN0J3MgdmFsdWVzIGJ5IGEgY3JpdGVyaW9uIHByb2R1Y2VkIGJ5IGFuIGl0ZXJhdGVlLlxuICBfLnNvcnRCeSA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICByZXR1cm4gXy5wbHVjayhfLm1hcChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBpbmRleDogaW5kZXgsXG4gICAgICAgIGNyaXRlcmlhOiBpdGVyYXRlZSh2YWx1ZSwgaW5kZXgsIGxpc3QpXG4gICAgICB9O1xuICAgIH0pLnNvcnQoZnVuY3Rpb24obGVmdCwgcmlnaHQpIHtcbiAgICAgIHZhciBhID0gbGVmdC5jcml0ZXJpYTtcbiAgICAgIHZhciBiID0gcmlnaHQuY3JpdGVyaWE7XG4gICAgICBpZiAoYSAhPT0gYikge1xuICAgICAgICBpZiAoYSA+IGIgfHwgYSA9PT0gdm9pZCAwKSByZXR1cm4gMTtcbiAgICAgICAgaWYgKGEgPCBiIHx8IGIgPT09IHZvaWQgMCkgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxlZnQuaW5kZXggLSByaWdodC5pbmRleDtcbiAgICB9KSwgJ3ZhbHVlJyk7XG4gIH07XG5cbiAgLy8gQW4gaW50ZXJuYWwgZnVuY3Rpb24gdXNlZCBmb3IgYWdncmVnYXRlIFwiZ3JvdXAgYnlcIiBvcGVyYXRpb25zLlxuICB2YXIgZ3JvdXAgPSBmdW5jdGlvbihiZWhhdmlvcikge1xuICAgIHJldHVybiBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICAgIF8uZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCkge1xuICAgICAgICB2YXIga2V5ID0gaXRlcmF0ZWUodmFsdWUsIGluZGV4LCBvYmopO1xuICAgICAgICBiZWhhdmlvcihyZXN1bHQsIHZhbHVlLCBrZXkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gIH07XG5cbiAgLy8gR3JvdXBzIHRoZSBvYmplY3QncyB2YWx1ZXMgYnkgYSBjcml0ZXJpb24uIFBhc3MgZWl0aGVyIGEgc3RyaW5nIGF0dHJpYnV0ZVxuICAvLyB0byBncm91cCBieSwgb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIGNyaXRlcmlvbi5cbiAgXy5ncm91cEJ5ID0gZ3JvdXAoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgaWYgKF8uaGFzKHJlc3VsdCwga2V5KSkgcmVzdWx0W2tleV0ucHVzaCh2YWx1ZSk7IGVsc2UgcmVzdWx0W2tleV0gPSBbdmFsdWVdO1xuICB9KTtcblxuICAvLyBJbmRleGVzIHRoZSBvYmplY3QncyB2YWx1ZXMgYnkgYSBjcml0ZXJpb24sIHNpbWlsYXIgdG8gYGdyb3VwQnlgLCBidXQgZm9yXG4gIC8vIHdoZW4geW91IGtub3cgdGhhdCB5b3VyIGluZGV4IHZhbHVlcyB3aWxsIGJlIHVuaXF1ZS5cbiAgXy5pbmRleEJ5ID0gZ3JvdXAoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgcmVzdWx0W2tleV0gPSB2YWx1ZTtcbiAgfSk7XG5cbiAgLy8gQ291bnRzIGluc3RhbmNlcyBvZiBhbiBvYmplY3QgdGhhdCBncm91cCBieSBhIGNlcnRhaW4gY3JpdGVyaW9uLiBQYXNzXG4gIC8vIGVpdGhlciBhIHN0cmluZyBhdHRyaWJ1dGUgdG8gY291bnQgYnksIG9yIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZVxuICAvLyBjcml0ZXJpb24uXG4gIF8uY291bnRCeSA9IGdyb3VwKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgIGlmIChfLmhhcyhyZXN1bHQsIGtleSkpIHJlc3VsdFtrZXldKys7IGVsc2UgcmVzdWx0W2tleV0gPSAxO1xuICB9KTtcblxuICAvLyBTYWZlbHkgY3JlYXRlIGEgcmVhbCwgbGl2ZSBhcnJheSBmcm9tIGFueXRoaW5nIGl0ZXJhYmxlLlxuICBfLnRvQXJyYXkgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAoIW9iaikgcmV0dXJuIFtdO1xuICAgIGlmIChfLmlzQXJyYXkob2JqKSkgcmV0dXJuIHNsaWNlLmNhbGwob2JqKTtcbiAgICBpZiAoaXNBcnJheUxpa2Uob2JqKSkgcmV0dXJuIF8ubWFwKG9iaiwgXy5pZGVudGl0eSk7XG4gICAgcmV0dXJuIF8udmFsdWVzKG9iaik7XG4gIH07XG5cbiAgLy8gUmV0dXJuIHRoZSBudW1iZXIgb2YgZWxlbWVudHMgaW4gYW4gb2JqZWN0LlxuICBfLnNpemUgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiAwO1xuICAgIHJldHVybiBpc0FycmF5TGlrZShvYmopID8gb2JqLmxlbmd0aCA6IF8ua2V5cyhvYmopLmxlbmd0aDtcbiAgfTtcblxuICAvLyBTcGxpdCBhIGNvbGxlY3Rpb24gaW50byB0d28gYXJyYXlzOiBvbmUgd2hvc2UgZWxlbWVudHMgYWxsIHNhdGlzZnkgdGhlIGdpdmVuXG4gIC8vIHByZWRpY2F0ZSwgYW5kIG9uZSB3aG9zZSBlbGVtZW50cyBhbGwgZG8gbm90IHNhdGlzZnkgdGhlIHByZWRpY2F0ZS5cbiAgXy5wYXJ0aXRpb24gPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHByZWRpY2F0ZSA9IGNiKHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgdmFyIHBhc3MgPSBbXSwgZmFpbCA9IFtdO1xuICAgIF8uZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iaikge1xuICAgICAgKHByZWRpY2F0ZSh2YWx1ZSwga2V5LCBvYmopID8gcGFzcyA6IGZhaWwpLnB1c2godmFsdWUpO1xuICAgIH0pO1xuICAgIHJldHVybiBbcGFzcywgZmFpbF07XG4gIH07XG5cbiAgLy8gQXJyYXkgRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIEdldCB0aGUgZmlyc3QgZWxlbWVudCBvZiBhbiBhcnJheS4gUGFzc2luZyAqKm4qKiB3aWxsIHJldHVybiB0aGUgZmlyc3QgTlxuICAvLyB2YWx1ZXMgaW4gdGhlIGFycmF5LiBBbGlhc2VkIGFzIGBoZWFkYCBhbmQgYHRha2VgLiBUaGUgKipndWFyZCoqIGNoZWNrXG4gIC8vIGFsbG93cyBpdCB0byB3b3JrIHdpdGggYF8ubWFwYC5cbiAgXy5maXJzdCA9IF8uaGVhZCA9IF8udGFrZSA9IGZ1bmN0aW9uKGFycmF5LCBuLCBndWFyZCkge1xuICAgIGlmIChhcnJheSA9PSBudWxsKSByZXR1cm4gdm9pZCAwO1xuICAgIGlmIChuID09IG51bGwgfHwgZ3VhcmQpIHJldHVybiBhcnJheVswXTtcbiAgICByZXR1cm4gXy5pbml0aWFsKGFycmF5LCBhcnJheS5sZW5ndGggLSBuKTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGV2ZXJ5dGhpbmcgYnV0IHRoZSBsYXN0IGVudHJ5IG9mIHRoZSBhcnJheS4gRXNwZWNpYWxseSB1c2VmdWwgb25cbiAgLy8gdGhlIGFyZ3VtZW50cyBvYmplY3QuIFBhc3NpbmcgKipuKiogd2lsbCByZXR1cm4gYWxsIHRoZSB2YWx1ZXMgaW5cbiAgLy8gdGhlIGFycmF5LCBleGNsdWRpbmcgdGhlIGxhc3QgTi5cbiAgXy5pbml0aWFsID0gZnVuY3Rpb24oYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgcmV0dXJuIHNsaWNlLmNhbGwoYXJyYXksIDAsIE1hdGgubWF4KDAsIGFycmF5Lmxlbmd0aCAtIChuID09IG51bGwgfHwgZ3VhcmQgPyAxIDogbikpKTtcbiAgfTtcblxuICAvLyBHZXQgdGhlIGxhc3QgZWxlbWVudCBvZiBhbiBhcnJheS4gUGFzc2luZyAqKm4qKiB3aWxsIHJldHVybiB0aGUgbGFzdCBOXG4gIC8vIHZhbHVlcyBpbiB0aGUgYXJyYXkuXG4gIF8ubGFzdCA9IGZ1bmN0aW9uKGFycmF5LCBuLCBndWFyZCkge1xuICAgIGlmIChhcnJheSA9PSBudWxsKSByZXR1cm4gdm9pZCAwO1xuICAgIGlmIChuID09IG51bGwgfHwgZ3VhcmQpIHJldHVybiBhcnJheVthcnJheS5sZW5ndGggLSAxXTtcbiAgICByZXR1cm4gXy5yZXN0KGFycmF5LCBNYXRoLm1heCgwLCBhcnJheS5sZW5ndGggLSBuKSk7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBldmVyeXRoaW5nIGJ1dCB0aGUgZmlyc3QgZW50cnkgb2YgdGhlIGFycmF5LiBBbGlhc2VkIGFzIGB0YWlsYCBhbmQgYGRyb3BgLlxuICAvLyBFc3BlY2lhbGx5IHVzZWZ1bCBvbiB0aGUgYXJndW1lbnRzIG9iamVjdC4gUGFzc2luZyBhbiAqKm4qKiB3aWxsIHJldHVyblxuICAvLyB0aGUgcmVzdCBOIHZhbHVlcyBpbiB0aGUgYXJyYXkuXG4gIF8ucmVzdCA9IF8udGFpbCA9IF8uZHJvcCA9IGZ1bmN0aW9uKGFycmF5LCBuLCBndWFyZCkge1xuICAgIHJldHVybiBzbGljZS5jYWxsKGFycmF5LCBuID09IG51bGwgfHwgZ3VhcmQgPyAxIDogbik7XG4gIH07XG5cbiAgLy8gVHJpbSBvdXQgYWxsIGZhbHN5IHZhbHVlcyBmcm9tIGFuIGFycmF5LlxuICBfLmNvbXBhY3QgPSBmdW5jdGlvbihhcnJheSkge1xuICAgIHJldHVybiBfLmZpbHRlcihhcnJheSwgXy5pZGVudGl0eSk7XG4gIH07XG5cbiAgLy8gSW50ZXJuYWwgaW1wbGVtZW50YXRpb24gb2YgYSByZWN1cnNpdmUgYGZsYXR0ZW5gIGZ1bmN0aW9uLlxuICB2YXIgZmxhdHRlbiA9IGZ1bmN0aW9uKGlucHV0LCBzaGFsbG93LCBzdHJpY3QsIHN0YXJ0SW5kZXgpIHtcbiAgICB2YXIgb3V0cHV0ID0gW10sIGlkeCA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0SW5kZXggfHwgMCwgbGVuZ3RoID0gaW5wdXQgJiYgaW5wdXQubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB2YWx1ZSA9IGlucHV0W2ldO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSAmJiAoXy5pc0FycmF5KHZhbHVlKSB8fCBfLmlzQXJndW1lbnRzKHZhbHVlKSkpIHtcbiAgICAgICAgLy9mbGF0dGVuIGN1cnJlbnQgbGV2ZWwgb2YgYXJyYXkgb3IgYXJndW1lbnRzIG9iamVjdFxuICAgICAgICBpZiAoIXNoYWxsb3cpIHZhbHVlID0gZmxhdHRlbih2YWx1ZSwgc2hhbGxvdywgc3RyaWN0KTtcbiAgICAgICAgdmFyIGogPSAwLCBsZW4gPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgIG91dHB1dC5sZW5ndGggKz0gbGVuO1xuICAgICAgICB3aGlsZSAoaiA8IGxlbikge1xuICAgICAgICAgIG91dHB1dFtpZHgrK10gPSB2YWx1ZVtqKytdO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCFzdHJpY3QpIHtcbiAgICAgICAgb3V0cHV0W2lkeCsrXSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xuICB9O1xuXG4gIC8vIEZsYXR0ZW4gb3V0IGFuIGFycmF5LCBlaXRoZXIgcmVjdXJzaXZlbHkgKGJ5IGRlZmF1bHQpLCBvciBqdXN0IG9uZSBsZXZlbC5cbiAgXy5mbGF0dGVuID0gZnVuY3Rpb24oYXJyYXksIHNoYWxsb3cpIHtcbiAgICByZXR1cm4gZmxhdHRlbihhcnJheSwgc2hhbGxvdywgZmFsc2UpO1xuICB9O1xuXG4gIC8vIFJldHVybiBhIHZlcnNpb24gb2YgdGhlIGFycmF5IHRoYXQgZG9lcyBub3QgY29udGFpbiB0aGUgc3BlY2lmaWVkIHZhbHVlKHMpLlxuICBfLndpdGhvdXQgPSBmdW5jdGlvbihhcnJheSkge1xuICAgIHJldHVybiBfLmRpZmZlcmVuY2UoYXJyYXksIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gIH07XG5cbiAgLy8gUHJvZHVjZSBhIGR1cGxpY2F0ZS1mcmVlIHZlcnNpb24gb2YgdGhlIGFycmF5LiBJZiB0aGUgYXJyYXkgaGFzIGFscmVhZHlcbiAgLy8gYmVlbiBzb3J0ZWQsIHlvdSBoYXZlIHRoZSBvcHRpb24gb2YgdXNpbmcgYSBmYXN0ZXIgYWxnb3JpdGhtLlxuICAvLyBBbGlhc2VkIGFzIGB1bmlxdWVgLlxuICBfLnVuaXEgPSBfLnVuaXF1ZSA9IGZ1bmN0aW9uKGFycmF5LCBpc1NvcnRlZCwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICBpZiAoYXJyYXkgPT0gbnVsbCkgcmV0dXJuIFtdO1xuICAgIGlmICghXy5pc0Jvb2xlYW4oaXNTb3J0ZWQpKSB7XG4gICAgICBjb250ZXh0ID0gaXRlcmF0ZWU7XG4gICAgICBpdGVyYXRlZSA9IGlzU29ydGVkO1xuICAgICAgaXNTb3J0ZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGl0ZXJhdGVlICE9IG51bGwpIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIgc2VlbiA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBhcnJheS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaV0sXG4gICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlLCBpLCBhcnJheSkgOiB2YWx1ZTtcbiAgICAgIGlmIChpc1NvcnRlZCkge1xuICAgICAgICBpZiAoIWkgfHwgc2VlbiAhPT0gY29tcHV0ZWQpIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgc2VlbiA9IGNvbXB1dGVkO1xuICAgICAgfSBlbHNlIGlmIChpdGVyYXRlZSkge1xuICAgICAgICBpZiAoIV8uY29udGFpbnMoc2VlbiwgY29tcHV0ZWQpKSB7XG4gICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoIV8uY29udGFpbnMocmVzdWx0LCB2YWx1ZSkpIHtcbiAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIFByb2R1Y2UgYW4gYXJyYXkgdGhhdCBjb250YWlucyB0aGUgdW5pb246IGVhY2ggZGlzdGluY3QgZWxlbWVudCBmcm9tIGFsbCBvZlxuICAvLyB0aGUgcGFzc2VkLWluIGFycmF5cy5cbiAgXy51bmlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfLnVuaXEoZmxhdHRlbihhcmd1bWVudHMsIHRydWUsIHRydWUpKTtcbiAgfTtcblxuICAvLyBQcm9kdWNlIGFuIGFycmF5IHRoYXQgY29udGFpbnMgZXZlcnkgaXRlbSBzaGFyZWQgYmV0d2VlbiBhbGwgdGhlXG4gIC8vIHBhc3NlZC1pbiBhcnJheXMuXG4gIF8uaW50ZXJzZWN0aW9uID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICBpZiAoYXJyYXkgPT0gbnVsbCkgcmV0dXJuIFtdO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIgYXJnc0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IGFycmF5W2ldO1xuICAgICAgaWYgKF8uY29udGFpbnMocmVzdWx0LCBpdGVtKSkgY29udGludWU7XG4gICAgICBmb3IgKHZhciBqID0gMTsgaiA8IGFyZ3NMZW5ndGg7IGorKykge1xuICAgICAgICBpZiAoIV8uY29udGFpbnMoYXJndW1lbnRzW2pdLCBpdGVtKSkgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAoaiA9PT0gYXJnc0xlbmd0aCkgcmVzdWx0LnB1c2goaXRlbSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gVGFrZSB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIG9uZSBhcnJheSBhbmQgYSBudW1iZXIgb2Ygb3RoZXIgYXJyYXlzLlxuICAvLyBPbmx5IHRoZSBlbGVtZW50cyBwcmVzZW50IGluIGp1c3QgdGhlIGZpcnN0IGFycmF5IHdpbGwgcmVtYWluLlxuICBfLmRpZmZlcmVuY2UgPSBmdW5jdGlvbihhcnJheSkge1xuICAgIHZhciByZXN0ID0gZmxhdHRlbihhcmd1bWVudHMsIHRydWUsIHRydWUsIDEpO1xuICAgIHJldHVybiBfLmZpbHRlcihhcnJheSwgZnVuY3Rpb24odmFsdWUpe1xuICAgICAgcmV0dXJuICFfLmNvbnRhaW5zKHJlc3QsIHZhbHVlKTtcbiAgICB9KTtcbiAgfTtcblxuICAvLyBaaXAgdG9nZXRoZXIgbXVsdGlwbGUgbGlzdHMgaW50byBhIHNpbmdsZSBhcnJheSAtLSBlbGVtZW50cyB0aGF0IHNoYXJlXG4gIC8vIGFuIGluZGV4IGdvIHRvZ2V0aGVyLlxuICBfLnppcCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfLnVuemlwKGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgLy8gQ29tcGxlbWVudCBvZiBfLnppcC4gVW56aXAgYWNjZXB0cyBhbiBhcnJheSBvZiBhcnJheXMgYW5kIGdyb3Vwc1xuICAvLyBlYWNoIGFycmF5J3MgZWxlbWVudHMgb24gc2hhcmVkIGluZGljZXNcbiAgXy51bnppcCA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5ICYmIF8ubWF4KGFycmF5LCAnbGVuZ3RoJykubGVuZ3RoIHx8IDA7XG4gICAgdmFyIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICByZXN1bHRbaW5kZXhdID0gXy5wbHVjayhhcnJheSwgaW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIENvbnZlcnRzIGxpc3RzIGludG8gb2JqZWN0cy4gUGFzcyBlaXRoZXIgYSBzaW5nbGUgYXJyYXkgb2YgYFtrZXksIHZhbHVlXWBcbiAgLy8gcGFpcnMsIG9yIHR3byBwYXJhbGxlbCBhcnJheXMgb2YgdGhlIHNhbWUgbGVuZ3RoIC0tIG9uZSBvZiBrZXlzLCBhbmQgb25lIG9mXG4gIC8vIHRoZSBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgXy5vYmplY3QgPSBmdW5jdGlvbihsaXN0LCB2YWx1ZXMpIHtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGxpc3QgJiYgbGlzdC5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHZhbHVlcykge1xuICAgICAgICByZXN1bHRbbGlzdFtpXV0gPSB2YWx1ZXNbaV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRbbGlzdFtpXVswXV0gPSBsaXN0W2ldWzFdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIFJldHVybiB0aGUgcG9zaXRpb24gb2YgdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYW4gaXRlbSBpbiBhbiBhcnJheSxcbiAgLy8gb3IgLTEgaWYgdGhlIGl0ZW0gaXMgbm90IGluY2x1ZGVkIGluIHRoZSBhcnJheS5cbiAgLy8gSWYgdGhlIGFycmF5IGlzIGxhcmdlIGFuZCBhbHJlYWR5IGluIHNvcnQgb3JkZXIsIHBhc3MgYHRydWVgXG4gIC8vIGZvciAqKmlzU29ydGVkKiogdG8gdXNlIGJpbmFyeSBzZWFyY2guXG4gIF8uaW5kZXhPZiA9IGZ1bmN0aW9uKGFycmF5LCBpdGVtLCBpc1NvcnRlZCkge1xuICAgIHZhciBpID0gMCwgbGVuZ3RoID0gYXJyYXkgJiYgYXJyYXkubGVuZ3RoO1xuICAgIGlmICh0eXBlb2YgaXNTb3J0ZWQgPT0gJ251bWJlcicpIHtcbiAgICAgIGkgPSBpc1NvcnRlZCA8IDAgPyBNYXRoLm1heCgwLCBsZW5ndGggKyBpc1NvcnRlZCkgOiBpc1NvcnRlZDtcbiAgICB9IGVsc2UgaWYgKGlzU29ydGVkICYmIGxlbmd0aCkge1xuICAgICAgaSA9IF8uc29ydGVkSW5kZXgoYXJyYXksIGl0ZW0pO1xuICAgICAgcmV0dXJuIGFycmF5W2ldID09PSBpdGVtID8gaSA6IC0xO1xuICAgIH1cbiAgICBpZiAoaXRlbSAhPT0gaXRlbSkge1xuICAgICAgcmV0dXJuIF8uZmluZEluZGV4KHNsaWNlLmNhbGwoYXJyYXksIGkpLCBfLmlzTmFOKTtcbiAgICB9XG4gICAgZm9yICg7IGkgPCBsZW5ndGg7IGkrKykgaWYgKGFycmF5W2ldID09PSBpdGVtKSByZXR1cm4gaTtcbiAgICByZXR1cm4gLTE7XG4gIH07XG5cbiAgXy5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uKGFycmF5LCBpdGVtLCBmcm9tKSB7XG4gICAgdmFyIGlkeCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDtcbiAgICBpZiAodHlwZW9mIGZyb20gPT0gJ251bWJlcicpIHtcbiAgICAgIGlkeCA9IGZyb20gPCAwID8gaWR4ICsgZnJvbSArIDEgOiBNYXRoLm1pbihpZHgsIGZyb20gKyAxKTtcbiAgICB9XG4gICAgaWYgKGl0ZW0gIT09IGl0ZW0pIHtcbiAgICAgIHJldHVybiBfLmZpbmRMYXN0SW5kZXgoc2xpY2UuY2FsbChhcnJheSwgMCwgaWR4KSwgXy5pc05hTik7XG4gICAgfVxuICAgIHdoaWxlICgtLWlkeCA+PSAwKSBpZiAoYXJyYXlbaWR4XSA9PT0gaXRlbSkgcmV0dXJuIGlkeDtcbiAgICByZXR1cm4gLTE7XG4gIH07XG5cbiAgLy8gR2VuZXJhdG9yIGZ1bmN0aW9uIHRvIGNyZWF0ZSB0aGUgZmluZEluZGV4IGFuZCBmaW5kTGFzdEluZGV4IGZ1bmN0aW9uc1xuICBmdW5jdGlvbiBjcmVhdGVJbmRleEZpbmRlcihkaXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oYXJyYXksIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgICAgcHJlZGljYXRlID0gY2IocHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSAhPSBudWxsICYmIGFycmF5Lmxlbmd0aDtcbiAgICAgIHZhciBpbmRleCA9IGRpciA+IDAgPyAwIDogbGVuZ3RoIC0gMTtcbiAgICAgIGZvciAoOyBpbmRleCA+PSAwICYmIGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSBkaXIpIHtcbiAgICAgICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuICB9XG5cbiAgLy8gUmV0dXJucyB0aGUgZmlyc3QgaW5kZXggb24gYW4gYXJyYXktbGlrZSB0aGF0IHBhc3NlcyBhIHByZWRpY2F0ZSB0ZXN0XG4gIF8uZmluZEluZGV4ID0gY3JlYXRlSW5kZXhGaW5kZXIoMSk7XG5cbiAgXy5maW5kTGFzdEluZGV4ID0gY3JlYXRlSW5kZXhGaW5kZXIoLTEpO1xuXG4gIC8vIFVzZSBhIGNvbXBhcmF0b3IgZnVuY3Rpb24gdG8gZmlndXJlIG91dCB0aGUgc21hbGxlc3QgaW5kZXggYXQgd2hpY2hcbiAgLy8gYW4gb2JqZWN0IHNob3VsZCBiZSBpbnNlcnRlZCBzbyBhcyB0byBtYWludGFpbiBvcmRlci4gVXNlcyBiaW5hcnkgc2VhcmNoLlxuICBfLnNvcnRlZEluZGV4ID0gZnVuY3Rpb24oYXJyYXksIG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0LCAxKTtcbiAgICB2YXIgdmFsdWUgPSBpdGVyYXRlZShvYmopO1xuICAgIHZhciBsb3cgPSAwLCBoaWdoID0gYXJyYXkubGVuZ3RoO1xuICAgIHdoaWxlIChsb3cgPCBoaWdoKSB7XG4gICAgICB2YXIgbWlkID0gTWF0aC5mbG9vcigobG93ICsgaGlnaCkgLyAyKTtcbiAgICAgIGlmIChpdGVyYXRlZShhcnJheVttaWRdKSA8IHZhbHVlKSBsb3cgPSBtaWQgKyAxOyBlbHNlIGhpZ2ggPSBtaWQ7XG4gICAgfVxuICAgIHJldHVybiBsb3c7XG4gIH07XG5cbiAgLy8gR2VuZXJhdGUgYW4gaW50ZWdlciBBcnJheSBjb250YWluaW5nIGFuIGFyaXRobWV0aWMgcHJvZ3Jlc3Npb24uIEEgcG9ydCBvZlxuICAvLyB0aGUgbmF0aXZlIFB5dGhvbiBgcmFuZ2UoKWAgZnVuY3Rpb24uIFNlZVxuICAvLyBbdGhlIFB5dGhvbiBkb2N1bWVudGF0aW9uXShodHRwOi8vZG9jcy5weXRob24ub3JnL2xpYnJhcnkvZnVuY3Rpb25zLmh0bWwjcmFuZ2UpLlxuICBfLnJhbmdlID0gZnVuY3Rpb24oc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8PSAxKSB7XG4gICAgICBzdG9wID0gc3RhcnQgfHwgMDtcbiAgICAgIHN0YXJ0ID0gMDtcbiAgICB9XG4gICAgc3RlcCA9IHN0ZXAgfHwgMTtcblxuICAgIHZhciBsZW5ndGggPSBNYXRoLm1heChNYXRoLmNlaWwoKHN0b3AgLSBzdGFydCkgLyBzdGVwKSwgMCk7XG4gICAgdmFyIHJhbmdlID0gQXJyYXkobGVuZ3RoKTtcblxuICAgIGZvciAodmFyIGlkeCA9IDA7IGlkeCA8IGxlbmd0aDsgaWR4KyssIHN0YXJ0ICs9IHN0ZXApIHtcbiAgICAgIHJhbmdlW2lkeF0gPSBzdGFydDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmFuZ2U7XG4gIH07XG5cbiAgLy8gRnVuY3Rpb24gKGFoZW0pIEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBEZXRlcm1pbmVzIHdoZXRoZXIgdG8gZXhlY3V0ZSBhIGZ1bmN0aW9uIGFzIGEgY29uc3RydWN0b3JcbiAgLy8gb3IgYSBub3JtYWwgZnVuY3Rpb24gd2l0aCB0aGUgcHJvdmlkZWQgYXJndW1lbnRzXG4gIHZhciBleGVjdXRlQm91bmQgPSBmdW5jdGlvbihzb3VyY2VGdW5jLCBib3VuZEZ1bmMsIGNvbnRleHQsIGNhbGxpbmdDb250ZXh0LCBhcmdzKSB7XG4gICAgaWYgKCEoY2FsbGluZ0NvbnRleHQgaW5zdGFuY2VvZiBib3VuZEZ1bmMpKSByZXR1cm4gc291cmNlRnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICB2YXIgc2VsZiA9IGJhc2VDcmVhdGUoc291cmNlRnVuYy5wcm90b3R5cGUpO1xuICAgIHZhciByZXN1bHQgPSBzb3VyY2VGdW5jLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgIGlmIChfLmlzT2JqZWN0KHJlc3VsdCkpIHJldHVybiByZXN1bHQ7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH07XG5cbiAgLy8gQ3JlYXRlIGEgZnVuY3Rpb24gYm91bmQgdG8gYSBnaXZlbiBvYmplY3QgKGFzc2lnbmluZyBgdGhpc2AsIGFuZCBhcmd1bWVudHMsXG4gIC8vIG9wdGlvbmFsbHkpLiBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgRnVuY3Rpb24uYmluZGAgaWZcbiAgLy8gYXZhaWxhYmxlLlxuICBfLmJpbmQgPSBmdW5jdGlvbihmdW5jLCBjb250ZXh0KSB7XG4gICAgaWYgKG5hdGl2ZUJpbmQgJiYgZnVuYy5iaW5kID09PSBuYXRpdmVCaW5kKSByZXR1cm4gbmF0aXZlQmluZC5hcHBseShmdW5jLCBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xuICAgIGlmICghXy5pc0Z1bmN0aW9uKGZ1bmMpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdCaW5kIG11c3QgYmUgY2FsbGVkIG9uIGEgZnVuY3Rpb24nKTtcbiAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTtcbiAgICB2YXIgYm91bmQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBleGVjdXRlQm91bmQoZnVuYywgYm91bmQsIGNvbnRleHQsIHRoaXMsIGFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xuICAgIH07XG4gICAgcmV0dXJuIGJvdW5kO1xuICB9O1xuXG4gIC8vIFBhcnRpYWxseSBhcHBseSBhIGZ1bmN0aW9uIGJ5IGNyZWF0aW5nIGEgdmVyc2lvbiB0aGF0IGhhcyBoYWQgc29tZSBvZiBpdHNcbiAgLy8gYXJndW1lbnRzIHByZS1maWxsZWQsIHdpdGhvdXQgY2hhbmdpbmcgaXRzIGR5bmFtaWMgYHRoaXNgIGNvbnRleHQuIF8gYWN0c1xuICAvLyBhcyBhIHBsYWNlaG9sZGVyLCBhbGxvd2luZyBhbnkgY29tYmluYXRpb24gb2YgYXJndW1lbnRzIHRvIGJlIHByZS1maWxsZWQuXG4gIF8ucGFydGlhbCA9IGZ1bmN0aW9uKGZ1bmMpIHtcbiAgICB2YXIgYm91bmRBcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgIHZhciBib3VuZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHBvc2l0aW9uID0gMCwgbGVuZ3RoID0gYm91bmRBcmdzLmxlbmd0aDtcbiAgICAgIHZhciBhcmdzID0gQXJyYXkobGVuZ3RoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYXJnc1tpXSA9IGJvdW5kQXJnc1tpXSA9PT0gXyA/IGFyZ3VtZW50c1twb3NpdGlvbisrXSA6IGJvdW5kQXJnc1tpXTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChwb3NpdGlvbiA8IGFyZ3VtZW50cy5sZW5ndGgpIGFyZ3MucHVzaChhcmd1bWVudHNbcG9zaXRpb24rK10pO1xuICAgICAgcmV0dXJuIGV4ZWN1dGVCb3VuZChmdW5jLCBib3VuZCwgdGhpcywgdGhpcywgYXJncyk7XG4gICAgfTtcbiAgICByZXR1cm4gYm91bmQ7XG4gIH07XG5cbiAgLy8gQmluZCBhIG51bWJlciBvZiBhbiBvYmplY3QncyBtZXRob2RzIHRvIHRoYXQgb2JqZWN0LiBSZW1haW5pbmcgYXJndW1lbnRzXG4gIC8vIGFyZSB0aGUgbWV0aG9kIG5hbWVzIHRvIGJlIGJvdW5kLiBVc2VmdWwgZm9yIGVuc3VyaW5nIHRoYXQgYWxsIGNhbGxiYWNrc1xuICAvLyBkZWZpbmVkIG9uIGFuIG9iamVjdCBiZWxvbmcgdG8gaXQuXG4gIF8uYmluZEFsbCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBpLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLCBrZXk7XG4gICAgaWYgKGxlbmd0aCA8PSAxKSB0aHJvdyBuZXcgRXJyb3IoJ2JpbmRBbGwgbXVzdCBiZSBwYXNzZWQgZnVuY3Rpb24gbmFtZXMnKTtcbiAgICBmb3IgKGkgPSAxOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIG9ialtrZXldID0gXy5iaW5kKG9ialtrZXldLCBvYmopO1xuICAgIH1cbiAgICByZXR1cm4gb2JqO1xuICB9O1xuXG4gIC8vIE1lbW9pemUgYW4gZXhwZW5zaXZlIGZ1bmN0aW9uIGJ5IHN0b3JpbmcgaXRzIHJlc3VsdHMuXG4gIF8ubWVtb2l6ZSA9IGZ1bmN0aW9uKGZ1bmMsIGhhc2hlcikge1xuICAgIHZhciBtZW1vaXplID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgICB2YXIgY2FjaGUgPSBtZW1vaXplLmNhY2hlO1xuICAgICAgdmFyIGFkZHJlc3MgPSAnJyArIChoYXNoZXIgPyBoYXNoZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IGtleSk7XG4gICAgICBpZiAoIV8uaGFzKGNhY2hlLCBhZGRyZXNzKSkgY2FjaGVbYWRkcmVzc10gPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gY2FjaGVbYWRkcmVzc107XG4gICAgfTtcbiAgICBtZW1vaXplLmNhY2hlID0ge307XG4gICAgcmV0dXJuIG1lbW9pemU7XG4gIH07XG5cbiAgLy8gRGVsYXlzIGEgZnVuY3Rpb24gZm9yIHRoZSBnaXZlbiBudW1iZXIgb2YgbWlsbGlzZWNvbmRzLCBhbmQgdGhlbiBjYWxsc1xuICAvLyBpdCB3aXRoIHRoZSBhcmd1bWVudHMgc3VwcGxpZWQuXG4gIF8uZGVsYXkgPSBmdW5jdGlvbihmdW5jLCB3YWl0KSB7XG4gICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMik7XG4gICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIHJldHVybiBmdW5jLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH0sIHdhaXQpO1xuICB9O1xuXG4gIC8vIERlZmVycyBhIGZ1bmN0aW9uLCBzY2hlZHVsaW5nIGl0IHRvIHJ1biBhZnRlciB0aGUgY3VycmVudCBjYWxsIHN0YWNrIGhhc1xuICAvLyBjbGVhcmVkLlxuICBfLmRlZmVyID0gXy5wYXJ0aWFsKF8uZGVsYXksIF8sIDEpO1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiwgdGhhdCwgd2hlbiBpbnZva2VkLCB3aWxsIG9ubHkgYmUgdHJpZ2dlcmVkIGF0IG1vc3Qgb25jZVxuICAvLyBkdXJpbmcgYSBnaXZlbiB3aW5kb3cgb2YgdGltZS4gTm9ybWFsbHksIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gd2lsbCBydW5cbiAgLy8gYXMgbXVjaCBhcyBpdCBjYW4sIHdpdGhvdXQgZXZlciBnb2luZyBtb3JlIHRoYW4gb25jZSBwZXIgYHdhaXRgIGR1cmF0aW9uO1xuICAvLyBidXQgaWYgeW91J2QgbGlrZSB0byBkaXNhYmxlIHRoZSBleGVjdXRpb24gb24gdGhlIGxlYWRpbmcgZWRnZSwgcGFzc1xuICAvLyBge2xlYWRpbmc6IGZhbHNlfWAuIFRvIGRpc2FibGUgZXhlY3V0aW9uIG9uIHRoZSB0cmFpbGluZyBlZGdlLCBkaXR0by5cbiAgXy50aHJvdHRsZSA9IGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgICB2YXIgY29udGV4dCwgYXJncywgcmVzdWx0O1xuICAgIHZhciB0aW1lb3V0ID0gbnVsbDtcbiAgICB2YXIgcHJldmlvdXMgPSAwO1xuICAgIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9O1xuICAgIHZhciBsYXRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgcHJldmlvdXMgPSBvcHRpb25zLmxlYWRpbmcgPT09IGZhbHNlID8gMCA6IF8ubm93KCk7XG4gICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICBpZiAoIXRpbWVvdXQpIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBub3cgPSBfLm5vdygpO1xuICAgICAgaWYgKCFwcmV2aW91cyAmJiBvcHRpb25zLmxlYWRpbmcgPT09IGZhbHNlKSBwcmV2aW91cyA9IG5vdztcbiAgICAgIHZhciByZW1haW5pbmcgPSB3YWl0IC0gKG5vdyAtIHByZXZpb3VzKTtcbiAgICAgIGNvbnRleHQgPSB0aGlzO1xuICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgIGlmIChyZW1haW5pbmcgPD0gMCB8fCByZW1haW5pbmcgPiB3YWl0KSB7XG4gICAgICAgIGlmICh0aW1lb3V0KSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHByZXZpb3VzID0gbm93O1xuICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICBpZiAoIXRpbWVvdXQpIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICAgIH0gZWxzZSBpZiAoIXRpbWVvdXQgJiYgb3B0aW9ucy50cmFpbGluZyAhPT0gZmFsc2UpIHtcbiAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHJlbWFpbmluZyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uLCB0aGF0LCBhcyBsb25nIGFzIGl0IGNvbnRpbnVlcyB0byBiZSBpbnZva2VkLCB3aWxsIG5vdFxuICAvLyBiZSB0cmlnZ2VyZWQuIFRoZSBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCBhZnRlciBpdCBzdG9wcyBiZWluZyBjYWxsZWQgZm9yXG4gIC8vIE4gbWlsbGlzZWNvbmRzLiBJZiBgaW1tZWRpYXRlYCBpcyBwYXNzZWQsIHRyaWdnZXIgdGhlIGZ1bmN0aW9uIG9uIHRoZVxuICAvLyBsZWFkaW5nIGVkZ2UsIGluc3RlYWQgb2YgdGhlIHRyYWlsaW5nLlxuICBfLmRlYm91bmNlID0gZnVuY3Rpb24oZnVuYywgd2FpdCwgaW1tZWRpYXRlKSB7XG4gICAgdmFyIHRpbWVvdXQsIGFyZ3MsIGNvbnRleHQsIHRpbWVzdGFtcCwgcmVzdWx0O1xuXG4gICAgdmFyIGxhdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbGFzdCA9IF8ubm93KCkgLSB0aW1lc3RhbXA7XG5cbiAgICAgIGlmIChsYXN0IDwgd2FpdCAmJiBsYXN0ID49IDApIHtcbiAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQgLSBsYXN0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgICBpZiAoIWltbWVkaWF0ZSkge1xuICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgICAgaWYgKCF0aW1lb3V0KSBjb250ZXh0ID0gYXJncyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgY29udGV4dCA9IHRoaXM7XG4gICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgdGltZXN0YW1wID0gXy5ub3coKTtcbiAgICAgIHZhciBjYWxsTm93ID0gaW1tZWRpYXRlICYmICF0aW1lb3V0O1xuICAgICAgaWYgKCF0aW1lb3V0KSB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7XG4gICAgICBpZiAoY2FsbE5vdykge1xuICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICBjb250ZXh0ID0gYXJncyA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIHRoZSBmaXJzdCBmdW5jdGlvbiBwYXNzZWQgYXMgYW4gYXJndW1lbnQgdG8gdGhlIHNlY29uZCxcbiAgLy8gYWxsb3dpbmcgeW91IHRvIGFkanVzdCBhcmd1bWVudHMsIHJ1biBjb2RlIGJlZm9yZSBhbmQgYWZ0ZXIsIGFuZFxuICAvLyBjb25kaXRpb25hbGx5IGV4ZWN1dGUgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uLlxuICBfLndyYXAgPSBmdW5jdGlvbihmdW5jLCB3cmFwcGVyKSB7XG4gICAgcmV0dXJuIF8ucGFydGlhbCh3cmFwcGVyLCBmdW5jKTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgbmVnYXRlZCB2ZXJzaW9uIG9mIHRoZSBwYXNzZWQtaW4gcHJlZGljYXRlLlxuICBfLm5lZ2F0ZSA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAhcHJlZGljYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBpcyB0aGUgY29tcG9zaXRpb24gb2YgYSBsaXN0IG9mIGZ1bmN0aW9ucywgZWFjaFxuICAvLyBjb25zdW1pbmcgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgZnVuY3Rpb24gdGhhdCBmb2xsb3dzLlxuICBfLmNvbXBvc2UgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICB2YXIgc3RhcnQgPSBhcmdzLmxlbmd0aCAtIDE7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGkgPSBzdGFydDtcbiAgICAgIHZhciByZXN1bHQgPSBhcmdzW3N0YXJ0XS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgd2hpbGUgKGktLSkgcmVzdWx0ID0gYXJnc1tpXS5jYWxsKHRoaXMsIHJlc3VsdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBvbmx5IGJlIGV4ZWN1dGVkIG9uIGFuZCBhZnRlciB0aGUgTnRoIGNhbGwuXG4gIF8uYWZ0ZXIgPSBmdW5jdGlvbih0aW1lcywgZnVuYykge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgtLXRpbWVzIDwgMSkge1xuICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBvbmx5IGJlIGV4ZWN1dGVkIHVwIHRvIChidXQgbm90IGluY2x1ZGluZykgdGhlIE50aCBjYWxsLlxuICBfLmJlZm9yZSA9IGZ1bmN0aW9uKHRpbWVzLCBmdW5jKSB7XG4gICAgdmFyIG1lbW87XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKC0tdGltZXMgPiAwKSB7XG4gICAgICAgIG1lbW8gPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgICBpZiAodGltZXMgPD0gMSkgZnVuYyA9IG51bGw7XG4gICAgICByZXR1cm4gbWVtbztcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgZXhlY3V0ZWQgYXQgbW9zdCBvbmUgdGltZSwgbm8gbWF0dGVyIGhvd1xuICAvLyBvZnRlbiB5b3UgY2FsbCBpdC4gVXNlZnVsIGZvciBsYXp5IGluaXRpYWxpemF0aW9uLlxuICBfLm9uY2UgPSBfLnBhcnRpYWwoXy5iZWZvcmUsIDIpO1xuXG4gIC8vIE9iamVjdCBGdW5jdGlvbnNcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIFJldHJpZXZlIHRoZSBuYW1lcyBvZiBhbiBvYmplY3QncyBvd24gcHJvcGVydGllcy5cbiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYE9iamVjdC5rZXlzYFxuICBfLmtleXMgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAoIV8uaXNPYmplY3Qob2JqKSkgcmV0dXJuIFtdO1xuICAgIGlmIChuYXRpdmVLZXlzKSByZXR1cm4gbmF0aXZlS2V5cyhvYmopO1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iaikgaWYgKF8uaGFzKG9iaiwga2V5KSkga2V5cy5wdXNoKGtleSk7XG4gICAgcmV0dXJuIGtleXM7XG4gIH07XG5cbiAgLy8gUmV0cmlldmUgYWxsIHRoZSBwcm9wZXJ0eSBuYW1lcyBvZiBhbiBvYmplY3QuXG4gIF8uYWxsS2V5cyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIGlmICghXy5pc09iamVjdChvYmopKSByZXR1cm4gW107XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSBrZXlzLnB1c2goa2V5KTtcbiAgICByZXR1cm4ga2V5cztcbiAgfTtcblxuICAvLyBSZXRyaWV2ZSB0aGUgdmFsdWVzIG9mIGFuIG9iamVjdCdzIHByb3BlcnRpZXMuXG4gIF8udmFsdWVzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIGtleXMgPSBfLmtleXMob2JqKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIHZhbHVlcyA9IEFycmF5KGxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFsdWVzW2ldID0gb2JqW2tleXNbaV1dO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWVzO1xuICB9O1xuXG4gIC8vIFJldHVybnMgdGhlIHJlc3VsdHMgb2YgYXBwbHlpbmcgdGhlIGl0ZXJhdGVlIHRvIGVhY2ggZWxlbWVudCBvZiB0aGUgb2JqZWN0XG4gIC8vIEluIGNvbnRyYXN0IHRvIF8ubWFwIGl0IHJldHVybnMgYW4gb2JqZWN0XG4gIF8ubWFwT2JqZWN0ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgIHZhciBrZXlzID0gIF8ua2V5cyhvYmopLFxuICAgICAgICAgIGxlbmd0aCA9IGtleXMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdHMgPSB7fSxcbiAgICAgICAgICBjdXJyZW50S2V5O1xuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBjdXJyZW50S2V5ID0ga2V5c1tpbmRleF07XG4gICAgICAgIHJlc3VsdHNbY3VycmVudEtleV0gPSBpdGVyYXRlZShvYmpbY3VycmVudEtleV0sIGN1cnJlbnRLZXksIG9iaik7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0cztcbiAgfTtcblxuICAvLyBDb252ZXJ0IGFuIG9iamVjdCBpbnRvIGEgbGlzdCBvZiBgW2tleSwgdmFsdWVdYCBwYWlycy5cbiAgXy5wYWlycyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaik7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBwYWlycyA9IEFycmF5KGxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgcGFpcnNbaV0gPSBba2V5c1tpXSwgb2JqW2tleXNbaV1dXTtcbiAgICB9XG4gICAgcmV0dXJuIHBhaXJzO1xuICB9O1xuXG4gIC8vIEludmVydCB0aGUga2V5cyBhbmQgdmFsdWVzIG9mIGFuIG9iamVjdC4gVGhlIHZhbHVlcyBtdXN0IGJlIHNlcmlhbGl6YWJsZS5cbiAgXy5pbnZlcnQgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgdmFyIGtleXMgPSBfLmtleXMob2JqKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgcmVzdWx0W29ialtrZXlzW2ldXV0gPSBrZXlzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIFJldHVybiBhIHNvcnRlZCBsaXN0IG9mIHRoZSBmdW5jdGlvbiBuYW1lcyBhdmFpbGFibGUgb24gdGhlIG9iamVjdC5cbiAgLy8gQWxpYXNlZCBhcyBgbWV0aG9kc2BcbiAgXy5mdW5jdGlvbnMgPSBfLm1ldGhvZHMgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgbmFtZXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoXy5pc0Z1bmN0aW9uKG9ialtrZXldKSkgbmFtZXMucHVzaChrZXkpO1xuICAgIH1cbiAgICByZXR1cm4gbmFtZXMuc29ydCgpO1xuICB9O1xuXG4gIC8vIEV4dGVuZCBhIGdpdmVuIG9iamVjdCB3aXRoIGFsbCB0aGUgcHJvcGVydGllcyBpbiBwYXNzZWQtaW4gb2JqZWN0KHMpLlxuICBfLmV4dGVuZCA9IGNyZWF0ZUFzc2lnbmVyKF8uYWxsS2V5cyk7XG5cbiAgLy8gQXNzaWducyBhIGdpdmVuIG9iamVjdCB3aXRoIGFsbCB0aGUgb3duIHByb3BlcnRpZXMgaW4gdGhlIHBhc3NlZC1pbiBvYmplY3QocylcbiAgLy8gKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9hc3NpZ24pXG4gIF8uZXh0ZW5kT3duID0gY3JlYXRlQXNzaWduZXIoXy5rZXlzKTtcblxuICAvLyBSZXR1cm5zIHRoZSBmaXJzdCBrZXkgb24gYW4gb2JqZWN0IHRoYXQgcGFzc2VzIGEgcHJlZGljYXRlIHRlc3RcbiAgXy5maW5kS2V5ID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICBwcmVkaWNhdGUgPSBjYihwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaiksIGtleTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgIGlmIChwcmVkaWNhdGUob2JqW2tleV0sIGtleSwgb2JqKSkgcmV0dXJuIGtleTtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmV0dXJuIGEgY29weSBvZiB0aGUgb2JqZWN0IG9ubHkgY29udGFpbmluZyB0aGUgd2hpdGVsaXN0ZWQgcHJvcGVydGllcy5cbiAgXy5waWNrID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIHZhciByZXN1bHQgPSB7fSwga2V5O1xuICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIHJlc3VsdDtcbiAgICBpZiAoXy5pc0Z1bmN0aW9uKGl0ZXJhdGVlKSkge1xuICAgICAgaXRlcmF0ZWUgPSBvcHRpbWl6ZUNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICAgIHZhciBrZXlzID0gXy5hbGxLZXlzKG9iaik7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgIHZhciB2YWx1ZSA9IG9ialtrZXldO1xuICAgICAgICBpZiAoaXRlcmF0ZWUodmFsdWUsIGtleSwgb2JqKSkgcmVzdWx0W2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGtleXMgPSBmbGF0dGVuKGFyZ3VtZW50cywgZmFsc2UsIGZhbHNlLCAxKTtcbiAgICAgIG9iaiA9IG5ldyBPYmplY3Qob2JqKTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBrZXlzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgIGlmIChrZXkgaW4gb2JqKSByZXN1bHRba2V5XSA9IG9ialtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gICAvLyBSZXR1cm4gYSBjb3B5IG9mIHRoZSBvYmplY3Qgd2l0aG91dCB0aGUgYmxhY2tsaXN0ZWQgcHJvcGVydGllcy5cbiAgXy5vbWl0ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIGlmIChfLmlzRnVuY3Rpb24oaXRlcmF0ZWUpKSB7XG4gICAgICBpdGVyYXRlZSA9IF8ubmVnYXRlKGl0ZXJhdGVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGtleXMgPSBfLm1hcChmbGF0dGVuKGFyZ3VtZW50cywgZmFsc2UsIGZhbHNlLCAxKSwgU3RyaW5nKTtcbiAgICAgIGl0ZXJhdGVlID0gZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICByZXR1cm4gIV8uY29udGFpbnMoa2V5cywga2V5KTtcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBfLnBpY2sob2JqLCBpdGVyYXRlZSwgY29udGV4dCk7XG4gIH07XG5cbiAgLy8gRmlsbCBpbiBhIGdpdmVuIG9iamVjdCB3aXRoIGRlZmF1bHQgcHJvcGVydGllcy5cbiAgXy5kZWZhdWx0cyA9IGNyZWF0ZUFzc2lnbmVyKF8uYWxsS2V5cywgdHJ1ZSk7XG5cbiAgLy8gQ3JlYXRlIGEgKHNoYWxsb3ctY2xvbmVkKSBkdXBsaWNhdGUgb2YgYW4gb2JqZWN0LlxuICBfLmNsb25lID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKCFfLmlzT2JqZWN0KG9iaikpIHJldHVybiBvYmo7XG4gICAgcmV0dXJuIF8uaXNBcnJheShvYmopID8gb2JqLnNsaWNlKCkgOiBfLmV4dGVuZCh7fSwgb2JqKTtcbiAgfTtcblxuICAvLyBJbnZva2VzIGludGVyY2VwdG9yIHdpdGggdGhlIG9iaiwgYW5kIHRoZW4gcmV0dXJucyBvYmouXG4gIC8vIFRoZSBwcmltYXJ5IHB1cnBvc2Ugb2YgdGhpcyBtZXRob2QgaXMgdG8gXCJ0YXAgaW50b1wiIGEgbWV0aG9kIGNoYWluLCBpblxuICAvLyBvcmRlciB0byBwZXJmb3JtIG9wZXJhdGlvbnMgb24gaW50ZXJtZWRpYXRlIHJlc3VsdHMgd2l0aGluIHRoZSBjaGFpbi5cbiAgXy50YXAgPSBmdW5jdGlvbihvYmosIGludGVyY2VwdG9yKSB7XG4gICAgaW50ZXJjZXB0b3Iob2JqKTtcbiAgICByZXR1cm4gb2JqO1xuICB9O1xuXG4gIC8vIFJldHVybnMgd2hldGhlciBhbiBvYmplY3QgaGFzIGEgZ2l2ZW4gc2V0IG9mIGBrZXk6dmFsdWVgIHBhaXJzLlxuICBfLmlzTWF0Y2ggPSBmdW5jdGlvbihvYmplY3QsIGF0dHJzKSB7XG4gICAgdmFyIGtleXMgPSBfLmtleXMoYXR0cnMpLCBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICBpZiAob2JqZWN0ID09IG51bGwpIHJldHVybiAhbGVuZ3RoO1xuICAgIHZhciBvYmogPSBPYmplY3Qob2JqZWN0KTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgIGlmIChhdHRyc1trZXldICE9PSBvYmpba2V5XSB8fCAhKGtleSBpbiBvYmopKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG5cbiAgLy8gSW50ZXJuYWwgcmVjdXJzaXZlIGNvbXBhcmlzb24gZnVuY3Rpb24gZm9yIGBpc0VxdWFsYC5cbiAgdmFyIGVxID0gZnVuY3Rpb24oYSwgYiwgYVN0YWNrLCBiU3RhY2spIHtcbiAgICAvLyBJZGVudGljYWwgb2JqZWN0cyBhcmUgZXF1YWwuIGAwID09PSAtMGAsIGJ1dCB0aGV5IGFyZW4ndCBpZGVudGljYWwuXG4gICAgLy8gU2VlIHRoZSBbSGFybW9ueSBgZWdhbGAgcHJvcG9zYWxdKGh0dHA6Ly93aWtpLmVjbWFzY3JpcHQub3JnL2Rva3UucGhwP2lkPWhhcm1vbnk6ZWdhbCkuXG4gICAgaWYgKGEgPT09IGIpIHJldHVybiBhICE9PSAwIHx8IDEgLyBhID09PSAxIC8gYjtcbiAgICAvLyBBIHN0cmljdCBjb21wYXJpc29uIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIGBudWxsID09IHVuZGVmaW5lZGAuXG4gICAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpIHJldHVybiBhID09PSBiO1xuICAgIC8vIFVud3JhcCBhbnkgd3JhcHBlZCBvYmplY3RzLlxuICAgIGlmIChhIGluc3RhbmNlb2YgXykgYSA9IGEuX3dyYXBwZWQ7XG4gICAgaWYgKGIgaW5zdGFuY2VvZiBfKSBiID0gYi5fd3JhcHBlZDtcbiAgICAvLyBDb21wYXJlIGBbW0NsYXNzXV1gIG5hbWVzLlxuICAgIHZhciBjbGFzc05hbWUgPSB0b1N0cmluZy5jYWxsKGEpO1xuICAgIGlmIChjbGFzc05hbWUgIT09IHRvU3RyaW5nLmNhbGwoYikpIHJldHVybiBmYWxzZTtcbiAgICBzd2l0Y2ggKGNsYXNzTmFtZSkge1xuICAgICAgLy8gU3RyaW5ncywgbnVtYmVycywgcmVndWxhciBleHByZXNzaW9ucywgZGF0ZXMsIGFuZCBib29sZWFucyBhcmUgY29tcGFyZWQgYnkgdmFsdWUuXG4gICAgICBjYXNlICdbb2JqZWN0IFJlZ0V4cF0nOlxuICAgICAgLy8gUmVnRXhwcyBhcmUgY29lcmNlZCB0byBzdHJpbmdzIGZvciBjb21wYXJpc29uIChOb3RlOiAnJyArIC9hL2kgPT09ICcvYS9pJylcbiAgICAgIGNhc2UgJ1tvYmplY3QgU3RyaW5nXSc6XG4gICAgICAgIC8vIFByaW1pdGl2ZXMgYW5kIHRoZWlyIGNvcnJlc3BvbmRpbmcgb2JqZWN0IHdyYXBwZXJzIGFyZSBlcXVpdmFsZW50OyB0aHVzLCBgXCI1XCJgIGlzXG4gICAgICAgIC8vIGVxdWl2YWxlbnQgdG8gYG5ldyBTdHJpbmcoXCI1XCIpYC5cbiAgICAgICAgcmV0dXJuICcnICsgYSA9PT0gJycgKyBiO1xuICAgICAgY2FzZSAnW29iamVjdCBOdW1iZXJdJzpcbiAgICAgICAgLy8gYE5hTmBzIGFyZSBlcXVpdmFsZW50LCBidXQgbm9uLXJlZmxleGl2ZS5cbiAgICAgICAgLy8gT2JqZWN0KE5hTikgaXMgZXF1aXZhbGVudCB0byBOYU5cbiAgICAgICAgaWYgKCthICE9PSArYSkgcmV0dXJuICtiICE9PSArYjtcbiAgICAgICAgLy8gQW4gYGVnYWxgIGNvbXBhcmlzb24gaXMgcGVyZm9ybWVkIGZvciBvdGhlciBudW1lcmljIHZhbHVlcy5cbiAgICAgICAgcmV0dXJuICthID09PSAwID8gMSAvICthID09PSAxIC8gYiA6ICthID09PSArYjtcbiAgICAgIGNhc2UgJ1tvYmplY3QgRGF0ZV0nOlxuICAgICAgY2FzZSAnW29iamVjdCBCb29sZWFuXSc6XG4gICAgICAgIC8vIENvZXJjZSBkYXRlcyBhbmQgYm9vbGVhbnMgdG8gbnVtZXJpYyBwcmltaXRpdmUgdmFsdWVzLiBEYXRlcyBhcmUgY29tcGFyZWQgYnkgdGhlaXJcbiAgICAgICAgLy8gbWlsbGlzZWNvbmQgcmVwcmVzZW50YXRpb25zLiBOb3RlIHRoYXQgaW52YWxpZCBkYXRlcyB3aXRoIG1pbGxpc2Vjb25kIHJlcHJlc2VudGF0aW9uc1xuICAgICAgICAvLyBvZiBgTmFOYCBhcmUgbm90IGVxdWl2YWxlbnQuXG4gICAgICAgIHJldHVybiArYSA9PT0gK2I7XG4gICAgfVxuXG4gICAgdmFyIGFyZUFycmF5cyA9IGNsYXNzTmFtZSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgICBpZiAoIWFyZUFycmF5cykge1xuICAgICAgaWYgKHR5cGVvZiBhICE9ICdvYmplY3QnIHx8IHR5cGVvZiBiICE9ICdvYmplY3QnKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgIC8vIE9iamVjdHMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1aXZhbGVudCwgYnV0IGBPYmplY3RgcyBvciBgQXJyYXlgc1xuICAgICAgLy8gZnJvbSBkaWZmZXJlbnQgZnJhbWVzIGFyZS5cbiAgICAgIHZhciBhQ3RvciA9IGEuY29uc3RydWN0b3IsIGJDdG9yID0gYi5jb25zdHJ1Y3RvcjtcbiAgICAgIGlmIChhQ3RvciAhPT0gYkN0b3IgJiYgIShfLmlzRnVuY3Rpb24oYUN0b3IpICYmIGFDdG9yIGluc3RhbmNlb2YgYUN0b3IgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmlzRnVuY3Rpb24oYkN0b3IpICYmIGJDdG9yIGluc3RhbmNlb2YgYkN0b3IpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICYmICgnY29uc3RydWN0b3InIGluIGEgJiYgJ2NvbnN0cnVjdG9yJyBpbiBiKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIEFzc3VtZSBlcXVhbGl0eSBmb3IgY3ljbGljIHN0cnVjdHVyZXMuIFRoZSBhbGdvcml0aG0gZm9yIGRldGVjdGluZyBjeWNsaWNcbiAgICAvLyBzdHJ1Y3R1cmVzIGlzIGFkYXB0ZWQgZnJvbSBFUyA1LjEgc2VjdGlvbiAxNS4xMi4zLCBhYnN0cmFjdCBvcGVyYXRpb24gYEpPYC5cbiAgICBcbiAgICAvLyBJbml0aWFsaXppbmcgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgLy8gSXQncyBkb25lIGhlcmUgc2luY2Ugd2Ugb25seSBuZWVkIHRoZW0gZm9yIG9iamVjdHMgYW5kIGFycmF5cyBjb21wYXJpc29uLlxuICAgIGFTdGFjayA9IGFTdGFjayB8fCBbXTtcbiAgICBiU3RhY2sgPSBiU3RhY2sgfHwgW107XG4gICAgdmFyIGxlbmd0aCA9IGFTdGFjay5sZW5ndGg7XG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAvLyBMaW5lYXIgc2VhcmNoLiBQZXJmb3JtYW5jZSBpcyBpbnZlcnNlbHkgcHJvcG9ydGlvbmFsIHRvIHRoZSBudW1iZXIgb2ZcbiAgICAgIC8vIHVuaXF1ZSBuZXN0ZWQgc3RydWN0dXJlcy5cbiAgICAgIGlmIChhU3RhY2tbbGVuZ3RoXSA9PT0gYSkgcmV0dXJuIGJTdGFja1tsZW5ndGhdID09PSBiO1xuICAgIH1cblxuICAgIC8vIEFkZCB0aGUgZmlyc3Qgb2JqZWN0IHRvIHRoZSBzdGFjayBvZiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICBhU3RhY2sucHVzaChhKTtcbiAgICBiU3RhY2sucHVzaChiKTtcblxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyBhbmQgYXJyYXlzLlxuICAgIGlmIChhcmVBcnJheXMpIHtcbiAgICAgIC8vIENvbXBhcmUgYXJyYXkgbGVuZ3RocyB0byBkZXRlcm1pbmUgaWYgYSBkZWVwIGNvbXBhcmlzb24gaXMgbmVjZXNzYXJ5LlxuICAgICAgbGVuZ3RoID0gYS5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoICE9PSBiLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgICAgLy8gRGVlcCBjb21wYXJlIHRoZSBjb250ZW50cywgaWdub3Jpbmcgbm9uLW51bWVyaWMgcHJvcGVydGllcy5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICBpZiAoIWVxKGFbbGVuZ3RoXSwgYltsZW5ndGhdLCBhU3RhY2ssIGJTdGFjaykpIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRGVlcCBjb21wYXJlIG9iamVjdHMuXG4gICAgICB2YXIga2V5cyA9IF8ua2V5cyhhKSwga2V5O1xuICAgICAgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgICAvLyBFbnN1cmUgdGhhdCBib3RoIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBudW1iZXIgb2YgcHJvcGVydGllcyBiZWZvcmUgY29tcGFyaW5nIGRlZXAgZXF1YWxpdHkuXG4gICAgICBpZiAoXy5rZXlzKGIpLmxlbmd0aCAhPT0gbGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgLy8gRGVlcCBjb21wYXJlIGVhY2ggbWVtYmVyXG4gICAgICAgIGtleSA9IGtleXNbbGVuZ3RoXTtcbiAgICAgICAgaWYgKCEoXy5oYXMoYiwga2V5KSAmJiBlcShhW2tleV0sIGJba2V5XSwgYVN0YWNrLCBiU3RhY2spKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBSZW1vdmUgdGhlIGZpcnN0IG9iamVjdCBmcm9tIHRoZSBzdGFjayBvZiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICBhU3RhY2sucG9wKCk7XG4gICAgYlN0YWNrLnBvcCgpO1xuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIC8vIFBlcmZvcm0gYSBkZWVwIGNvbXBhcmlzb24gdG8gY2hlY2sgaWYgdHdvIG9iamVjdHMgYXJlIGVxdWFsLlxuICBfLmlzRXF1YWwgPSBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGVxKGEsIGIpO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gYXJyYXksIHN0cmluZywgb3Igb2JqZWN0IGVtcHR5P1xuICAvLyBBbiBcImVtcHR5XCIgb2JqZWN0IGhhcyBubyBlbnVtZXJhYmxlIG93bi1wcm9wZXJ0aWVzLlxuICBfLmlzRW1wdHkgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiB0cnVlO1xuICAgIGlmIChpc0FycmF5TGlrZShvYmopICYmIChfLmlzQXJyYXkob2JqKSB8fCBfLmlzU3RyaW5nKG9iaikgfHwgXy5pc0FyZ3VtZW50cyhvYmopKSkgcmV0dXJuIG9iai5sZW5ndGggPT09IDA7XG4gICAgcmV0dXJuIF8ua2V5cyhvYmopLmxlbmd0aCA9PT0gMDtcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhbHVlIGEgRE9NIGVsZW1lbnQ/XG4gIF8uaXNFbGVtZW50ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuICEhKG9iaiAmJiBvYmoubm9kZVR5cGUgPT09IDEpO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gdmFsdWUgYW4gYXJyYXk/XG4gIC8vIERlbGVnYXRlcyB0byBFQ01BNSdzIG5hdGl2ZSBBcnJheS5pc0FycmF5XG4gIF8uaXNBcnJheSA9IG5hdGl2ZUlzQXJyYXkgfHwgZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhcmlhYmxlIGFuIG9iamVjdD9cbiAgXy5pc09iamVjdCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciB0eXBlID0gdHlwZW9mIG9iajtcbiAgICByZXR1cm4gdHlwZSA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlID09PSAnb2JqZWN0JyAmJiAhIW9iajtcbiAgfTtcblxuICAvLyBBZGQgc29tZSBpc1R5cGUgbWV0aG9kczogaXNBcmd1bWVudHMsIGlzRnVuY3Rpb24sIGlzU3RyaW5nLCBpc051bWJlciwgaXNEYXRlLCBpc1JlZ0V4cCwgaXNFcnJvci5cbiAgXy5lYWNoKFsnQXJndW1lbnRzJywgJ0Z1bmN0aW9uJywgJ1N0cmluZycsICdOdW1iZXInLCAnRGF0ZScsICdSZWdFeHAnLCAnRXJyb3InXSwgZnVuY3Rpb24obmFtZSkge1xuICAgIF9bJ2lzJyArIG5hbWVdID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCAnICsgbmFtZSArICddJztcbiAgICB9O1xuICB9KTtcblxuICAvLyBEZWZpbmUgYSBmYWxsYmFjayB2ZXJzaW9uIG9mIHRoZSBtZXRob2QgaW4gYnJvd3NlcnMgKGFoZW0sIElFIDwgOSksIHdoZXJlXG4gIC8vIHRoZXJlIGlzbid0IGFueSBpbnNwZWN0YWJsZSBcIkFyZ3VtZW50c1wiIHR5cGUuXG4gIGlmICghXy5pc0FyZ3VtZW50cyhhcmd1bWVudHMpKSB7XG4gICAgXy5pc0FyZ3VtZW50cyA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIF8uaGFzKG9iaiwgJ2NhbGxlZScpO1xuICAgIH07XG4gIH1cblxuICAvLyBPcHRpbWl6ZSBgaXNGdW5jdGlvbmAgaWYgYXBwcm9wcmlhdGUuIFdvcmsgYXJvdW5kIHNvbWUgdHlwZW9mIGJ1Z3MgaW4gb2xkIHY4LFxuICAvLyBJRSAxMSAoIzE2MjEpLCBhbmQgaW4gU2FmYXJpIDggKCMxOTI5KS5cbiAgaWYgKHR5cGVvZiAvLi8gIT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgSW50OEFycmF5ICE9ICdvYmplY3QnKSB7XG4gICAgXy5pc0Z1bmN0aW9uID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PSAnZnVuY3Rpb24nIHx8IGZhbHNlO1xuICAgIH07XG4gIH1cblxuICAvLyBJcyBhIGdpdmVuIG9iamVjdCBhIGZpbml0ZSBudW1iZXI/XG4gIF8uaXNGaW5pdGUgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gaXNGaW5pdGUob2JqKSAmJiAhaXNOYU4ocGFyc2VGbG9hdChvYmopKTtcbiAgfTtcblxuICAvLyBJcyB0aGUgZ2l2ZW4gdmFsdWUgYE5hTmA/IChOYU4gaXMgdGhlIG9ubHkgbnVtYmVyIHdoaWNoIGRvZXMgbm90IGVxdWFsIGl0c2VsZikuXG4gIF8uaXNOYU4gPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gXy5pc051bWJlcihvYmopICYmIG9iaiAhPT0gK29iajtcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhbHVlIGEgYm9vbGVhbj9cbiAgXy5pc0Jvb2xlYW4gPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gb2JqID09PSB0cnVlIHx8IG9iaiA9PT0gZmFsc2UgfHwgdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBCb29sZWFuXSc7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBlcXVhbCB0byBudWxsP1xuICBfLmlzTnVsbCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBvYmogPT09IG51bGw7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YXJpYWJsZSB1bmRlZmluZWQ/XG4gIF8uaXNVbmRlZmluZWQgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gb2JqID09PSB2b2lkIDA7XG4gIH07XG5cbiAgLy8gU2hvcnRjdXQgZnVuY3Rpb24gZm9yIGNoZWNraW5nIGlmIGFuIG9iamVjdCBoYXMgYSBnaXZlbiBwcm9wZXJ0eSBkaXJlY3RseVxuICAvLyBvbiBpdHNlbGYgKGluIG90aGVyIHdvcmRzLCBub3Qgb24gYSBwcm90b3R5cGUpLlxuICBfLmhhcyA9IGZ1bmN0aW9uKG9iaiwga2V5KSB7XG4gICAgcmV0dXJuIG9iaiAhPSBudWxsICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpO1xuICB9O1xuXG4gIC8vIFV0aWxpdHkgRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gUnVuIFVuZGVyc2NvcmUuanMgaW4gKm5vQ29uZmxpY3QqIG1vZGUsIHJldHVybmluZyB0aGUgYF9gIHZhcmlhYmxlIHRvIGl0c1xuICAvLyBwcmV2aW91cyBvd25lci4gUmV0dXJucyBhIHJlZmVyZW5jZSB0byB0aGUgVW5kZXJzY29yZSBvYmplY3QuXG4gIF8ubm9Db25mbGljdCA9IGZ1bmN0aW9uKCkge1xuICAgIHJvb3QuXyA9IHByZXZpb3VzVW5kZXJzY29yZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBLZWVwIHRoZSBpZGVudGl0eSBmdW5jdGlvbiBhcm91bmQgZm9yIGRlZmF1bHQgaXRlcmF0ZWVzLlxuICBfLmlkZW50aXR5ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG5cbiAgLy8gUHJlZGljYXRlLWdlbmVyYXRpbmcgZnVuY3Rpb25zLiBPZnRlbiB1c2VmdWwgb3V0c2lkZSBvZiBVbmRlcnNjb3JlLlxuICBfLmNvbnN0YW50ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgfTtcblxuICBfLm5vb3AgPSBmdW5jdGlvbigpe307XG5cbiAgXy5wcm9wZXJ0eSA9IGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBvYmogPT0gbnVsbCA/IHZvaWQgMCA6IG9ialtrZXldO1xuICAgIH07XG4gIH07XG5cbiAgLy8gR2VuZXJhdGVzIGEgZnVuY3Rpb24gZm9yIGEgZ2l2ZW4gb2JqZWN0IHRoYXQgcmV0dXJucyBhIGdpdmVuIHByb3BlcnR5LlxuICBfLnByb3BlcnR5T2YgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gb2JqID09IG51bGwgPyBmdW5jdGlvbigpe30gOiBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBvYmpba2V5XTtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBwcmVkaWNhdGUgZm9yIGNoZWNraW5nIHdoZXRoZXIgYW4gb2JqZWN0IGhhcyBhIGdpdmVuIHNldCBvZiBcbiAgLy8gYGtleTp2YWx1ZWAgcGFpcnMuXG4gIF8ubWF0Y2hlciA9IF8ubWF0Y2hlcyA9IGZ1bmN0aW9uKGF0dHJzKSB7XG4gICAgYXR0cnMgPSBfLmV4dGVuZE93bih7fSwgYXR0cnMpO1xuICAgIHJldHVybiBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBfLmlzTWF0Y2gob2JqLCBhdHRycyk7XG4gICAgfTtcbiAgfTtcblxuICAvLyBSdW4gYSBmdW5jdGlvbiAqKm4qKiB0aW1lcy5cbiAgXy50aW1lcyA9IGZ1bmN0aW9uKG4sIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgdmFyIGFjY3VtID0gQXJyYXkoTWF0aC5tYXgoMCwgbikpO1xuICAgIGl0ZXJhdGVlID0gb3B0aW1pemVDYihpdGVyYXRlZSwgY29udGV4dCwgMSk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIGFjY3VtW2ldID0gaXRlcmF0ZWUoaSk7XG4gICAgcmV0dXJuIGFjY3VtO1xuICB9O1xuXG4gIC8vIFJldHVybiBhIHJhbmRvbSBpbnRlZ2VyIGJldHdlZW4gbWluIGFuZCBtYXggKGluY2x1c2l2ZSkuXG4gIF8ucmFuZG9tID0gZnVuY3Rpb24obWluLCBtYXgpIHtcbiAgICBpZiAobWF4ID09IG51bGwpIHtcbiAgICAgIG1heCA9IG1pbjtcbiAgICAgIG1pbiA9IDA7XG4gICAgfVxuICAgIHJldHVybiBtaW4gKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpO1xuICB9O1xuXG4gIC8vIEEgKHBvc3NpYmx5IGZhc3Rlcikgd2F5IHRvIGdldCB0aGUgY3VycmVudCB0aW1lc3RhbXAgYXMgYW4gaW50ZWdlci5cbiAgXy5ub3cgPSBEYXRlLm5vdyB8fCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gIH07XG5cbiAgIC8vIExpc3Qgb2YgSFRNTCBlbnRpdGllcyBmb3IgZXNjYXBpbmcuXG4gIHZhciBlc2NhcGVNYXAgPSB7XG4gICAgJyYnOiAnJmFtcDsnLFxuICAgICc8JzogJyZsdDsnLFxuICAgICc+JzogJyZndDsnLFxuICAgICdcIic6ICcmcXVvdDsnLFxuICAgIFwiJ1wiOiAnJiN4Mjc7JyxcbiAgICAnYCc6ICcmI3g2MDsnXG4gIH07XG4gIHZhciB1bmVzY2FwZU1hcCA9IF8uaW52ZXJ0KGVzY2FwZU1hcCk7XG5cbiAgLy8gRnVuY3Rpb25zIGZvciBlc2NhcGluZyBhbmQgdW5lc2NhcGluZyBzdHJpbmdzIHRvL2Zyb20gSFRNTCBpbnRlcnBvbGF0aW9uLlxuICB2YXIgY3JlYXRlRXNjYXBlciA9IGZ1bmN0aW9uKG1hcCkge1xuICAgIHZhciBlc2NhcGVyID0gZnVuY3Rpb24obWF0Y2gpIHtcbiAgICAgIHJldHVybiBtYXBbbWF0Y2hdO1xuICAgIH07XG4gICAgLy8gUmVnZXhlcyBmb3IgaWRlbnRpZnlpbmcgYSBrZXkgdGhhdCBuZWVkcyB0byBiZSBlc2NhcGVkXG4gICAgdmFyIHNvdXJjZSA9ICcoPzonICsgXy5rZXlzKG1hcCkuam9pbignfCcpICsgJyknO1xuICAgIHZhciB0ZXN0UmVnZXhwID0gUmVnRXhwKHNvdXJjZSk7XG4gICAgdmFyIHJlcGxhY2VSZWdleHAgPSBSZWdFeHAoc291cmNlLCAnZycpO1xuICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHN0cmluZyA9PSBudWxsID8gJycgOiAnJyArIHN0cmluZztcbiAgICAgIHJldHVybiB0ZXN0UmVnZXhwLnRlc3Qoc3RyaW5nKSA/IHN0cmluZy5yZXBsYWNlKHJlcGxhY2VSZWdleHAsIGVzY2FwZXIpIDogc3RyaW5nO1xuICAgIH07XG4gIH07XG4gIF8uZXNjYXBlID0gY3JlYXRlRXNjYXBlcihlc2NhcGVNYXApO1xuICBfLnVuZXNjYXBlID0gY3JlYXRlRXNjYXBlcih1bmVzY2FwZU1hcCk7XG5cbiAgLy8gSWYgdGhlIHZhbHVlIG9mIHRoZSBuYW1lZCBgcHJvcGVydHlgIGlzIGEgZnVuY3Rpb24gdGhlbiBpbnZva2UgaXQgd2l0aCB0aGVcbiAgLy8gYG9iamVjdGAgYXMgY29udGV4dDsgb3RoZXJ3aXNlLCByZXR1cm4gaXQuXG4gIF8ucmVzdWx0ID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSwgZmFsbGJhY2spIHtcbiAgICB2YXIgdmFsdWUgPSBvYmplY3QgPT0gbnVsbCA/IHZvaWQgMCA6IG9iamVjdFtwcm9wZXJ0eV07XG4gICAgaWYgKHZhbHVlID09PSB2b2lkIDApIHtcbiAgICAgIHZhbHVlID0gZmFsbGJhY2s7XG4gICAgfVxuICAgIHJldHVybiBfLmlzRnVuY3Rpb24odmFsdWUpID8gdmFsdWUuY2FsbChvYmplY3QpIDogdmFsdWU7XG4gIH07XG5cbiAgLy8gR2VuZXJhdGUgYSB1bmlxdWUgaW50ZWdlciBpZCAodW5pcXVlIHdpdGhpbiB0aGUgZW50aXJlIGNsaWVudCBzZXNzaW9uKS5cbiAgLy8gVXNlZnVsIGZvciB0ZW1wb3JhcnkgRE9NIGlkcy5cbiAgdmFyIGlkQ291bnRlciA9IDA7XG4gIF8udW5pcXVlSWQgPSBmdW5jdGlvbihwcmVmaXgpIHtcbiAgICB2YXIgaWQgPSArK2lkQ291bnRlciArICcnO1xuICAgIHJldHVybiBwcmVmaXggPyBwcmVmaXggKyBpZCA6IGlkO1xuICB9O1xuXG4gIC8vIEJ5IGRlZmF1bHQsIFVuZGVyc2NvcmUgdXNlcyBFUkItc3R5bGUgdGVtcGxhdGUgZGVsaW1pdGVycywgY2hhbmdlIHRoZVxuICAvLyBmb2xsb3dpbmcgdGVtcGxhdGUgc2V0dGluZ3MgdG8gdXNlIGFsdGVybmF0aXZlIGRlbGltaXRlcnMuXG4gIF8udGVtcGxhdGVTZXR0aW5ncyA9IHtcbiAgICBldmFsdWF0ZSAgICA6IC88JShbXFxzXFxTXSs/KSU+L2csXG4gICAgaW50ZXJwb2xhdGUgOiAvPCU9KFtcXHNcXFNdKz8pJT4vZyxcbiAgICBlc2NhcGUgICAgICA6IC88JS0oW1xcc1xcU10rPyklPi9nXG4gIH07XG5cbiAgLy8gV2hlbiBjdXN0b21pemluZyBgdGVtcGxhdGVTZXR0aW5nc2AsIGlmIHlvdSBkb24ndCB3YW50IHRvIGRlZmluZSBhblxuICAvLyBpbnRlcnBvbGF0aW9uLCBldmFsdWF0aW9uIG9yIGVzY2FwaW5nIHJlZ2V4LCB3ZSBuZWVkIG9uZSB0aGF0IGlzXG4gIC8vIGd1YXJhbnRlZWQgbm90IHRvIG1hdGNoLlxuICB2YXIgbm9NYXRjaCA9IC8oLileLztcblxuICAvLyBDZXJ0YWluIGNoYXJhY3RlcnMgbmVlZCB0byBiZSBlc2NhcGVkIHNvIHRoYXQgdGhleSBjYW4gYmUgcHV0IGludG8gYVxuICAvLyBzdHJpbmcgbGl0ZXJhbC5cbiAgdmFyIGVzY2FwZXMgPSB7XG4gICAgXCInXCI6ICAgICAgXCInXCIsXG4gICAgJ1xcXFwnOiAgICAgJ1xcXFwnLFxuICAgICdcXHInOiAgICAgJ3InLFxuICAgICdcXG4nOiAgICAgJ24nLFxuICAgICdcXHUyMDI4JzogJ3UyMDI4JyxcbiAgICAnXFx1MjAyOSc6ICd1MjAyOSdcbiAgfTtcblxuICB2YXIgZXNjYXBlciA9IC9cXFxcfCd8XFxyfFxcbnxcXHUyMDI4fFxcdTIwMjkvZztcblxuICB2YXIgZXNjYXBlQ2hhciA9IGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgcmV0dXJuICdcXFxcJyArIGVzY2FwZXNbbWF0Y2hdO1xuICB9O1xuXG4gIC8vIEphdmFTY3JpcHQgbWljcm8tdGVtcGxhdGluZywgc2ltaWxhciB0byBKb2huIFJlc2lnJ3MgaW1wbGVtZW50YXRpb24uXG4gIC8vIFVuZGVyc2NvcmUgdGVtcGxhdGluZyBoYW5kbGVzIGFyYml0cmFyeSBkZWxpbWl0ZXJzLCBwcmVzZXJ2ZXMgd2hpdGVzcGFjZSxcbiAgLy8gYW5kIGNvcnJlY3RseSBlc2NhcGVzIHF1b3RlcyB3aXRoaW4gaW50ZXJwb2xhdGVkIGNvZGUuXG4gIC8vIE5COiBgb2xkU2V0dGluZ3NgIG9ubHkgZXhpc3RzIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cbiAgXy50ZW1wbGF0ZSA9IGZ1bmN0aW9uKHRleHQsIHNldHRpbmdzLCBvbGRTZXR0aW5ncykge1xuICAgIGlmICghc2V0dGluZ3MgJiYgb2xkU2V0dGluZ3MpIHNldHRpbmdzID0gb2xkU2V0dGluZ3M7XG4gICAgc2V0dGluZ3MgPSBfLmRlZmF1bHRzKHt9LCBzZXR0aW5ncywgXy50ZW1wbGF0ZVNldHRpbmdzKTtcblxuICAgIC8vIENvbWJpbmUgZGVsaW1pdGVycyBpbnRvIG9uZSByZWd1bGFyIGV4cHJlc3Npb24gdmlhIGFsdGVybmF0aW9uLlxuICAgIHZhciBtYXRjaGVyID0gUmVnRXhwKFtcbiAgICAgIChzZXR0aW5ncy5lc2NhcGUgfHwgbm9NYXRjaCkuc291cmNlLFxuICAgICAgKHNldHRpbmdzLmludGVycG9sYXRlIHx8IG5vTWF0Y2gpLnNvdXJjZSxcbiAgICAgIChzZXR0aW5ncy5ldmFsdWF0ZSB8fCBub01hdGNoKS5zb3VyY2VcbiAgICBdLmpvaW4oJ3wnKSArICd8JCcsICdnJyk7XG5cbiAgICAvLyBDb21waWxlIHRoZSB0ZW1wbGF0ZSBzb3VyY2UsIGVzY2FwaW5nIHN0cmluZyBsaXRlcmFscyBhcHByb3ByaWF0ZWx5LlxuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIHNvdXJjZSA9IFwiX19wKz0nXCI7XG4gICAgdGV4dC5yZXBsYWNlKG1hdGNoZXIsIGZ1bmN0aW9uKG1hdGNoLCBlc2NhcGUsIGludGVycG9sYXRlLCBldmFsdWF0ZSwgb2Zmc2V0KSB7XG4gICAgICBzb3VyY2UgKz0gdGV4dC5zbGljZShpbmRleCwgb2Zmc2V0KS5yZXBsYWNlKGVzY2FwZXIsIGVzY2FwZUNoYXIpO1xuICAgICAgaW5kZXggPSBvZmZzZXQgKyBtYXRjaC5sZW5ndGg7XG5cbiAgICAgIGlmIChlc2NhcGUpIHtcbiAgICAgICAgc291cmNlICs9IFwiJytcXG4oKF9fdD0oXCIgKyBlc2NhcGUgKyBcIikpPT1udWxsPycnOl8uZXNjYXBlKF9fdCkpK1xcbidcIjtcbiAgICAgIH0gZWxzZSBpZiAoaW50ZXJwb2xhdGUpIHtcbiAgICAgICAgc291cmNlICs9IFwiJytcXG4oKF9fdD0oXCIgKyBpbnRlcnBvbGF0ZSArIFwiKSk9PW51bGw/Jyc6X190KStcXG4nXCI7XG4gICAgICB9IGVsc2UgaWYgKGV2YWx1YXRlKSB7XG4gICAgICAgIHNvdXJjZSArPSBcIic7XFxuXCIgKyBldmFsdWF0ZSArIFwiXFxuX19wKz0nXCI7XG4gICAgICB9XG5cbiAgICAgIC8vIEFkb2JlIFZNcyBuZWVkIHRoZSBtYXRjaCByZXR1cm5lZCB0byBwcm9kdWNlIHRoZSBjb3JyZWN0IG9mZmVzdC5cbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9KTtcbiAgICBzb3VyY2UgKz0gXCInO1xcblwiO1xuXG4gICAgLy8gSWYgYSB2YXJpYWJsZSBpcyBub3Qgc3BlY2lmaWVkLCBwbGFjZSBkYXRhIHZhbHVlcyBpbiBsb2NhbCBzY29wZS5cbiAgICBpZiAoIXNldHRpbmdzLnZhcmlhYmxlKSBzb3VyY2UgPSAnd2l0aChvYmp8fHt9KXtcXG4nICsgc291cmNlICsgJ31cXG4nO1xuXG4gICAgc291cmNlID0gXCJ2YXIgX190LF9fcD0nJyxfX2o9QXJyYXkucHJvdG90eXBlLmpvaW4sXCIgK1xuICAgICAgXCJwcmludD1mdW5jdGlvbigpe19fcCs9X19qLmNhbGwoYXJndW1lbnRzLCcnKTt9O1xcblwiICtcbiAgICAgIHNvdXJjZSArICdyZXR1cm4gX19wO1xcbic7XG5cbiAgICB0cnkge1xuICAgICAgdmFyIHJlbmRlciA9IG5ldyBGdW5jdGlvbihzZXR0aW5ncy52YXJpYWJsZSB8fCAnb2JqJywgJ18nLCBzb3VyY2UpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGUuc291cmNlID0gc291cmNlO1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG5cbiAgICB2YXIgdGVtcGxhdGUgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICByZXR1cm4gcmVuZGVyLmNhbGwodGhpcywgZGF0YSwgXyk7XG4gICAgfTtcblxuICAgIC8vIFByb3ZpZGUgdGhlIGNvbXBpbGVkIHNvdXJjZSBhcyBhIGNvbnZlbmllbmNlIGZvciBwcmVjb21waWxhdGlvbi5cbiAgICB2YXIgYXJndW1lbnQgPSBzZXR0aW5ncy52YXJpYWJsZSB8fCAnb2JqJztcbiAgICB0ZW1wbGF0ZS5zb3VyY2UgPSAnZnVuY3Rpb24oJyArIGFyZ3VtZW50ICsgJyl7XFxuJyArIHNvdXJjZSArICd9JztcblxuICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgfTtcblxuICAvLyBBZGQgYSBcImNoYWluXCIgZnVuY3Rpb24uIFN0YXJ0IGNoYWluaW5nIGEgd3JhcHBlZCBVbmRlcnNjb3JlIG9iamVjdC5cbiAgXy5jaGFpbiA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBpbnN0YW5jZSA9IF8ob2JqKTtcbiAgICBpbnN0YW5jZS5fY2hhaW4gPSB0cnVlO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfTtcblxuICAvLyBPT1BcbiAgLy8gLS0tLS0tLS0tLS0tLS0tXG4gIC8vIElmIFVuZGVyc2NvcmUgaXMgY2FsbGVkIGFzIGEgZnVuY3Rpb24sIGl0IHJldHVybnMgYSB3cmFwcGVkIG9iamVjdCB0aGF0XG4gIC8vIGNhbiBiZSB1c2VkIE9PLXN0eWxlLiBUaGlzIHdyYXBwZXIgaG9sZHMgYWx0ZXJlZCB2ZXJzaW9ucyBvZiBhbGwgdGhlXG4gIC8vIHVuZGVyc2NvcmUgZnVuY3Rpb25zLiBXcmFwcGVkIG9iamVjdHMgbWF5IGJlIGNoYWluZWQuXG5cbiAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGNvbnRpbnVlIGNoYWluaW5nIGludGVybWVkaWF0ZSByZXN1bHRzLlxuICB2YXIgcmVzdWx0ID0gZnVuY3Rpb24oaW5zdGFuY2UsIG9iaikge1xuICAgIHJldHVybiBpbnN0YW5jZS5fY2hhaW4gPyBfKG9iaikuY2hhaW4oKSA6IG9iajtcbiAgfTtcblxuICAvLyBBZGQgeW91ciBvd24gY3VzdG9tIGZ1bmN0aW9ucyB0byB0aGUgVW5kZXJzY29yZSBvYmplY3QuXG4gIF8ubWl4aW4gPSBmdW5jdGlvbihvYmopIHtcbiAgICBfLmVhY2goXy5mdW5jdGlvbnMob2JqKSwgZnVuY3Rpb24obmFtZSkge1xuICAgICAgdmFyIGZ1bmMgPSBfW25hbWVdID0gb2JqW25hbWVdO1xuICAgICAgXy5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbdGhpcy5fd3JhcHBlZF07XG4gICAgICAgIHB1c2guYXBwbHkoYXJncywgYXJndW1lbnRzKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCh0aGlzLCBmdW5jLmFwcGx5KF8sIGFyZ3MpKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gQWRkIGFsbCBvZiB0aGUgVW5kZXJzY29yZSBmdW5jdGlvbnMgdG8gdGhlIHdyYXBwZXIgb2JqZWN0LlxuICBfLm1peGluKF8pO1xuXG4gIC8vIEFkZCBhbGwgbXV0YXRvciBBcnJheSBmdW5jdGlvbnMgdG8gdGhlIHdyYXBwZXIuXG4gIF8uZWFjaChbJ3BvcCcsICdwdXNoJywgJ3JldmVyc2UnLCAnc2hpZnQnLCAnc29ydCcsICdzcGxpY2UnLCAndW5zaGlmdCddLCBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIG1ldGhvZCA9IEFycmF5UHJvdG9bbmFtZV07XG4gICAgXy5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvYmogPSB0aGlzLl93cmFwcGVkO1xuICAgICAgbWV0aG9kLmFwcGx5KG9iaiwgYXJndW1lbnRzKTtcbiAgICAgIGlmICgobmFtZSA9PT0gJ3NoaWZ0JyB8fCBuYW1lID09PSAnc3BsaWNlJykgJiYgb2JqLmxlbmd0aCA9PT0gMCkgZGVsZXRlIG9ialswXTtcbiAgICAgIHJldHVybiByZXN1bHQodGhpcywgb2JqKTtcbiAgICB9O1xuICB9KTtcblxuICAvLyBBZGQgYWxsIGFjY2Vzc29yIEFycmF5IGZ1bmN0aW9ucyB0byB0aGUgd3JhcHBlci5cbiAgXy5lYWNoKFsnY29uY2F0JywgJ2pvaW4nLCAnc2xpY2UnXSwgZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBtZXRob2QgPSBBcnJheVByb3RvW25hbWVdO1xuICAgIF8ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcmVzdWx0KHRoaXMsIG1ldGhvZC5hcHBseSh0aGlzLl93cmFwcGVkLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcblxuICAvLyBFeHRyYWN0cyB0aGUgcmVzdWx0IGZyb20gYSB3cmFwcGVkIGFuZCBjaGFpbmVkIG9iamVjdC5cbiAgXy5wcm90b3R5cGUudmFsdWUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fd3JhcHBlZDtcbiAgfTtcblxuICAvLyBQcm92aWRlIHVud3JhcHBpbmcgcHJveHkgZm9yIHNvbWUgbWV0aG9kcyB1c2VkIGluIGVuZ2luZSBvcGVyYXRpb25zXG4gIC8vIHN1Y2ggYXMgYXJpdGhtZXRpYyBhbmQgSlNPTiBzdHJpbmdpZmljYXRpb24uXG4gIF8ucHJvdG90eXBlLnZhbHVlT2YgPSBfLnByb3RvdHlwZS50b0pTT04gPSBfLnByb3RvdHlwZS52YWx1ZTtcbiAgXG4gIF8ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICcnICsgdGhpcy5fd3JhcHBlZDtcbiAgfTtcblxuICAvLyBBTUQgcmVnaXN0cmF0aW9uIGhhcHBlbnMgYXQgdGhlIGVuZCBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIEFNRCBsb2FkZXJzXG4gIC8vIHRoYXQgbWF5IG5vdCBlbmZvcmNlIG5leHQtdHVybiBzZW1hbnRpY3Mgb24gbW9kdWxlcy4gRXZlbiB0aG91Z2ggZ2VuZXJhbFxuICAvLyBwcmFjdGljZSBmb3IgQU1EIHJlZ2lzdHJhdGlvbiBpcyB0byBiZSBhbm9ueW1vdXMsIHVuZGVyc2NvcmUgcmVnaXN0ZXJzXG4gIC8vIGFzIGEgbmFtZWQgbW9kdWxlIGJlY2F1c2UsIGxpa2UgalF1ZXJ5LCBpdCBpcyBhIGJhc2UgbGlicmFyeSB0aGF0IGlzXG4gIC8vIHBvcHVsYXIgZW5vdWdoIHRvIGJlIGJ1bmRsZWQgaW4gYSB0aGlyZCBwYXJ0eSBsaWIsIGJ1dCBub3QgYmUgcGFydCBvZlxuICAvLyBhbiBBTUQgbG9hZCByZXF1ZXN0LiBUaG9zZSBjYXNlcyBjb3VsZCBnZW5lcmF0ZSBhbiBlcnJvciB3aGVuIGFuXG4gIC8vIGFub255bW91cyBkZWZpbmUoKSBpcyBjYWxsZWQgb3V0c2lkZSBvZiBhIGxvYWRlciByZXF1ZXN0LlxuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKCd1bmRlcnNjb3JlJywgW10sIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIF87XG4gICAgfSk7XG4gIH1cbn0uY2FsbCh0aGlzKSk7XG4iLCJpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIG1vZHVsZS5leHBvcnRzID0gd2luZG93O1xufSBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBnbG9iYWw7XG59IGVsc2UgaWYgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiKXtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHNlbGY7XG59IGVsc2Uge1xuICAgIG1vZHVsZS5leHBvcnRzID0ge307XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IG9uY2Vcblxub25jZS5wcm90byA9IG9uY2UoZnVuY3Rpb24gKCkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRnVuY3Rpb24ucHJvdG90eXBlLCAnb25jZScsIHtcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG9uY2UodGhpcylcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KVxufSlcblxuZnVuY3Rpb24gb25jZSAoZm4pIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNhbGxlZCkgcmV0dXJuXG4gICAgY2FsbGVkID0gdHJ1ZVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gIH1cbn1cbiIsInZhciBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnaXMtZnVuY3Rpb24nKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZvckVhY2hcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eVxuXG5mdW5jdGlvbiBmb3JFYWNoKGxpc3QsIGl0ZXJhdG9yLCBjb250ZXh0KSB7XG4gICAgaWYgKCFpc0Z1bmN0aW9uKGl0ZXJhdG9yKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpdGVyYXRvciBtdXN0IGJlIGEgZnVuY3Rpb24nKVxuICAgIH1cblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMykge1xuICAgICAgICBjb250ZXh0ID0gdGhpc1xuICAgIH1cbiAgICBcbiAgICBpZiAodG9TdHJpbmcuY2FsbChsaXN0KSA9PT0gJ1tvYmplY3QgQXJyYXldJylcbiAgICAgICAgZm9yRWFjaEFycmF5KGxpc3QsIGl0ZXJhdG9yLCBjb250ZXh0KVxuICAgIGVsc2UgaWYgKHR5cGVvZiBsaXN0ID09PSAnc3RyaW5nJylcbiAgICAgICAgZm9yRWFjaFN0cmluZyhsaXN0LCBpdGVyYXRvciwgY29udGV4dClcbiAgICBlbHNlXG4gICAgICAgIGZvckVhY2hPYmplY3QobGlzdCwgaXRlcmF0b3IsIGNvbnRleHQpXG59XG5cbmZ1bmN0aW9uIGZvckVhY2hBcnJheShhcnJheSwgaXRlcmF0b3IsIGNvbnRleHQpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoYXJyYXksIGkpKSB7XG4gICAgICAgICAgICBpdGVyYXRvci5jYWxsKGNvbnRleHQsIGFycmF5W2ldLCBpLCBhcnJheSlcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gZm9yRWFjaFN0cmluZyhzdHJpbmcsIGl0ZXJhdG9yLCBjb250ZXh0KSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHN0cmluZy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAvLyBubyBzdWNoIHRoaW5nIGFzIGEgc3BhcnNlIHN0cmluZy5cbiAgICAgICAgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBzdHJpbmcuY2hhckF0KGkpLCBpLCBzdHJpbmcpXG4gICAgfVxufVxuXG5mdW5jdGlvbiBmb3JFYWNoT2JqZWN0KG9iamVjdCwgaXRlcmF0b3IsIGNvbnRleHQpIHtcbiAgICBmb3IgKHZhciBrIGluIG9iamVjdCkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGspKSB7XG4gICAgICAgICAgICBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9iamVjdFtrXSwgaywgb2JqZWN0KVxuICAgICAgICB9XG4gICAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBpc0Z1bmN0aW9uXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdcblxuZnVuY3Rpb24gaXNGdW5jdGlvbiAoZm4pIHtcbiAgdmFyIHN0cmluZyA9IHRvU3RyaW5nLmNhbGwoZm4pXG4gIHJldHVybiBzdHJpbmcgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXScgfHxcbiAgICAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nICYmIHN0cmluZyAhPT0gJ1tvYmplY3QgUmVnRXhwXScpIHx8XG4gICAgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgIC8vIElFOCBhbmQgYmVsb3dcbiAgICAgKGZuID09PSB3aW5kb3cuc2V0VGltZW91dCB8fFxuICAgICAgZm4gPT09IHdpbmRvdy5hbGVydCB8fFxuICAgICAgZm4gPT09IHdpbmRvdy5jb25maXJtIHx8XG4gICAgICBmbiA9PT0gd2luZG93LnByb21wdCkpXG59O1xuIiwiXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSB0cmltO1xuXG5mdW5jdGlvbiB0cmltKHN0cil7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyp8XFxzKiQvZywgJycpO1xufVxuXG5leHBvcnRzLmxlZnQgPSBmdW5jdGlvbihzdHIpe1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMqLywgJycpO1xufTtcblxuZXhwb3J0cy5yaWdodCA9IGZ1bmN0aW9uKHN0cil7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXFxzKiQvLCAnJyk7XG59O1xuIiwidmFyIHRyaW0gPSByZXF1aXJlKCd0cmltJylcbiAgLCBmb3JFYWNoID0gcmVxdWlyZSgnZm9yLWVhY2gnKVxuICAsIGlzQXJyYXkgPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJnKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgICB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGhlYWRlcnMpIHtcbiAgaWYgKCFoZWFkZXJzKVxuICAgIHJldHVybiB7fVxuXG4gIHZhciByZXN1bHQgPSB7fVxuXG4gIGZvckVhY2goXG4gICAgICB0cmltKGhlYWRlcnMpLnNwbGl0KCdcXG4nKVxuICAgICwgZnVuY3Rpb24gKHJvdykge1xuICAgICAgICB2YXIgaW5kZXggPSByb3cuaW5kZXhPZignOicpXG4gICAgICAgICAgLCBrZXkgPSB0cmltKHJvdy5zbGljZSgwLCBpbmRleCkpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICAsIHZhbHVlID0gdHJpbShyb3cuc2xpY2UoaW5kZXggKyAxKSlcblxuICAgICAgICBpZiAodHlwZW9mKHJlc3VsdFtrZXldKSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IHZhbHVlXG4gICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShyZXN1bHRba2V5XSkpIHtcbiAgICAgICAgICByZXN1bHRba2V5XS5wdXNoKHZhbHVlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gWyByZXN1bHRba2V5XSwgdmFsdWUgXVxuICAgICAgICB9XG4gICAgICB9XG4gIClcblxuICByZXR1cm4gcmVzdWx0XG59IiwiQ29sb3JzID0gcmVxdWlyZShcIm1zYS1jb2xvcnNjaGVtZXNcIilcblxuTW9kZWwgPSByZXF1aXJlKFwiYmFja2JvbmUtdGhpblwiKS5Nb2RlbFxuXG4jIHRoaXMgaXMgYW4gZXhhbXBsZSBvZiBob3cgb25lIGNvdWxkIGNvbG9yIHRoZSBNU0FcbiMgZmVlbCBmcmVlIHRvIGNyZWF0ZSB5b3VyIG93biBjb2xvciBzY2hlbWUgaW4gdGhlIC9jc3Mvc2NoZW1lcyBmb2xkZXJcbm1vZHVsZS5leHBvcnRzID0gQ29sb3JzY2hlbWUgPSBNb2RlbC5leHRlbmRcblxuICBkZWZhdWx0czpcbiAgICBzY2hlbWU6IFwidGF5bG9yXCIgIyBuYW1lIG9mIHlvdXIgY29sb3Igc2NoZW1lXG4gICAgY29sb3JCYWNrZ3JvdW5kOiB0cnVlICMgb3RoZXJ3aXNlIG9ubHkgdGhlIHRleHQgd2lsbCBiZSBjb2xvcmVkXG4gICAgc2hvd0xvd2VyQ2FzZTogdHJ1ZSAjIHVzZWQgdG8gaGlkZSBhbmQgc2hvdyBsb3dlcmNhc2UgY2hhcnMgaW4gdGhlIG92ZXJ2aWV3Ym94XG4gICAgb3BhY2l0eTogMC42ICMgb3BhY2l0eSBmb3IgdGhlIHJlc2lkdWVzXG5cbiAgaW5pdGlhbGl6ZTogKGRhdGEsc2Vxcywgc3RhdCkgLT5cbiAgICBAY29sb3JzID0gbmV3IENvbG9ycyhcbiAgICAgIHNlcXM6IHNlcXNcbiAgICAgIGNvbnNlcnZhdGlvbjogLT5cbiAgICAgICAgc3RhdC5zY2FsZShzdGF0LmNvbnNlcnZhdGlvbigpKVxuICAgIClcbiAgICAjIHRoZSBzdGF0cyBtb2R1bGUgc2VuZHMgYW4gZXZlbnQgZXZlcnkgdGltZSBpdCBpcyByZWZyZXNoZWRcbiAgICBzdGF0Lm9uIFwicmVzZXRcIiwgLT5cbiAgICAgIGlmIEBnZXRTZWxlY3RlZFNjaGVtZSgpLnR5cGUgaXMgXCJkeW5cIlxuICAgICAgICBAZ2V0U2VsZWN0ZWRTY2hlbWUoKS5yZXNldCgpXG4gICAgLEBcblxuICAjIFlvdSBjYW4gZW50ZXIgeW91ciBvd24gY29sb3Igc2NoZW1lIGhlcmVcbiAgYWRkU3RhdGljU2NoZW1lOiAobmFtZSwgZGljdCkgLT5cbiAgICBAY29sb3JzLmFkZFN0YXRpY1NjaGVtZSBuYW1lLGRpY3RcblxuICBhZGREeW5TY2hlbWU6IChuYW1lLCBmdW4pIC0+XG4gICAgQGNvbG9ycy5hZGREeW5TY2hlbWUgbmFtZSxmdW5cblxuICBnZXRTY2hlbWU6IChuYW1lKSAtPlxuICAgIEBjb2xvcnMuZ2V0U2NoZW1lIG5hbWVcblxuICBnZXRTZWxlY3RlZFNjaGVtZTogLT5cbiAgICBAY29sb3JzLmdldFNjaGVtZSBAZ2V0KFwic2NoZW1lXCIpXG4iLCJNb2RlbCA9IHJlcXVpcmUoXCJiYWNrYm9uZS10aGluXCIpLk1vZGVsXG5fID0gcmVxdWlyZSBcInVuZGVyc2NvcmVcIlxuXG4jIG1vZGVsIGZvciBjb2x1bW4gcHJvcGVydGllcyAobGlrZSB0aGVpciBoaWRkZW4gc3RhdGUpXG5tb2R1bGUuZXhwb3J0cyA9IENvbHVtbnMgPSBNb2RlbC5leHRlbmRcblxuICBpbml0aWFsaXplOiAobyxzdGF0KSAtPlxuICAgICMgaGlkZGVuIGNvbHVtbnNcbiAgICBALnNldCBcImhpZGRlblwiLCBbXSB1bmxlc3MgQC5nZXQoXCJoaWRkZW5cIik/XG4gICAgQHN0YXRzID0gc3RhdFxuXG4gICMgYXNzdW1lcyBoaWRkZW4gY29sdW1ucyBhcmUgc29ydGVkXG4gICMgQHJldHVybnMgbiBbaW50XSBudW1iZXIgb2YgaGlkZGVuIGNvbHVtbnMgdW50aWwgblxuICBjYWxjSGlkZGVuQ29sdW1uczogKG4pIC0+XG4gICAgaGlkZGVuID0gQGdldCBcImhpZGRlblwiXG4gICAgbmV3WCA9IG5cbiAgICBmb3IgaSBpbiBoaWRkZW5cbiAgICAgIGlmIGkgPD0gbmV3WFxuICAgICAgICBuZXdYKytcbiAgICBuZXdYIC0gblxuIiwiTW9kZWwgPSByZXF1aXJlKFwiYmFja2JvbmUtdGhpblwiKS5Nb2RlbFxuXG4jIHNpbXBsZSB1c2VyIGNvbmZpZ1xubW9kdWxlLmV4cG9ydHMgPSBDb25maWcgPSBNb2RlbC5leHRlbmRcblxuICBkZWZhdWx0czpcbiAgICByZWdpc3Rlck1vdXNlSG92ZXI6IGZhbHNlLFxuICAgIHJlZ2lzdGVyTW91c2VDbGlja3M6IHRydWUsXG4gICAgaW1wb3J0UHJveHk6IFwiaHR0cHM6Ly9jb3JzLWFueXdoZXJlLmhlcm9rdWFwcC5jb20vXCJcbiAgICBldmVudEJ1czogdHJ1ZVxuICAgIGFscGhhYmV0U2l6ZTogMjBcbiAgICBkcm9wSW1wb3J0OiBmYWxzZVxuICAgIGRlYnVnOiBmYWxzZVxuICAgIGhhc1JlZjogZmFsc2UgIyBoYXNSZWZlcmVuY2VcbiIsIkxvYWRlciA9IHJlcXVpcmUgXCIuLi91dGlscy9sb2FkZXJcIlxuTW9kZWwgPSByZXF1aXJlKFwiYmFja2JvbmUtdGhpblwiKS5Nb2RlbFxuXG5tb2R1bGUuZXhwb3J0cyA9IFBhY2thZ2UgPSBNb2RlbC5leHRlbmRcblxuICBpbml0aWFsaXplOiAoZykgLT5cbiAgICBAZyA9IGdcblxuICBkZXZlbG9wbWVudDpcbiAgICBcIm1zYS10bnRcIjogXCIvbm9kZV9tb2R1bGVzL21zYS10bnQvYnVpbGQvYnVuZGxlLmpzXCJcbiAgICBcImJpb2pzLWlvLW5ld2lja1wiOiBcIi9ub2RlX21vZHVsZXMvYmlvanMtaW8tbmV3aWNrL2J1aWxkL2Jpb2pzLWlvLW5ld2ljay5taW4uanNcIlxuXG4gICMgbG9hZHMgYSBwYWNrYWdlIGludG8gdGhlIE1TQSBjb21wb25lbnQgKGlmIGl0IGlzIG5vdCBhdmFpbGFibGUgeWV0KVxuICBsb2FkUGFja2FnZTogKHBrZywgY2IpIC0+XG4gICAgdHJ5XG4gICAgICBwID0gcmVxdWlyZSBwa2dcbiAgICAgIGNiIHBcbiAgICBjYXRjaFxuICAgICAgTG9hZGVyLmxvYWRTY3JpcHQgQF9wa2dVUkwocGtnKSwgY2JcblxuICAjIGxvYWRzIG11bHRpcGxlIHBhY2thZ2VzIGFuZCBjYWxscyB0aGUgY2IgaWYgYWxsIHBhY2thZ2VzIGFyZSBsb2FkZWRcbiAgbG9hZFBhY2thZ2VzOiAocGtncywgY2IpIC0+XG4gICAgICBjYnMgPSBMb2FkZXIuam9pbkNiIC0+XG4gICAgICAgIGNiKClcbiAgICAgICwgcGtncy5sZW5ndGhcbiAgICAgIHBrZ3MuZm9yRWFjaCAocGtnKSA9PlxuICAgICAgICBAbG9hZFBhY2thZ2UgcGtnLCBjYnNcblxuICAjIGludGVybmFsIG1ldGhvZCB0byBnZXQgdGhlIFVSTCBmb3IgYSBwYWNrYWdlXG4gIF9wa2dVUkw6IChwa2cpIC0+XG5cbiAgICBpZiBAZy5jb25maWcuZ2V0KFwiZGVidWdcIilcbiAgICAgIHVybCA9IEBkZXZlbG9wbWVudFtwa2ddXG4gICAgZWxzZVxuICAgICAgdXJsID0gXCJodHRwOi8vd3pyZC5pbi9idW5kbGUvI3twa2d9QGxhdGVzdFwiXG5cbiAgICB1cmxcbiIsIl8gPSByZXF1aXJlIFwidW5kZXJzY29yZVwiXG5Nb2RlbCA9IHJlcXVpcmUoXCJiYWNrYm9uZS10aGluXCIpLk1vZGVsXG5cbiMgaG9sZHMgdGhlIGN1cnJlbnQgdXNlciBzZWxlY3Rpb25cblNlbGVjdGlvbiA9IE1vZGVsLmV4dGVuZFxuICBkZWZhdWx0czpcbiAgICB0eXBlOiBcInN1cGVyXCJcblxuUm93U2VsZWN0aW9uID0gU2VsZWN0aW9uLmV4dGVuZFxuICBkZWZhdWx0czogXy5leHRlbmQge30sIFNlbGVjdGlvbjo6LmRlZmF1bHRzLFxuICAgIHR5cGU6IFwicm93XCJcbiAgICBzZXFJZDogXCJcIlxuXG4gIGluUm93OiAoc2VxSWQpIC0+XG4gICAgc2VxSWQgaXMgQC5nZXQgXCJzZXFJZFwiXG5cbiAgaW5Db2x1bW46IChyb3dQb3MpIC0+XG4gICAgdHJ1ZVxuXG4gIGdldExlbmd0aDogLT5cbiAgICAxXG5cbkNvbHVtblNlbGVjdGlvbiA9IFNlbGVjdGlvbi5leHRlbmRcbiAgZGVmYXVsdHM6IF8uZXh0ZW5kIHt9LCBTZWxlY3Rpb246Oi5kZWZhdWx0cyxcbiAgICB0eXBlOiBcImNvbHVtblwiXG4gICAgeFN0YXJ0OiAtMVxuICAgIHhFbmQ6IC0xXG5cbiAgaW5Sb3c6ICgpIC0+XG4gICAgdHJ1ZVxuXG4gIGluQ29sdW1uOiAocm93UG9zKSAtPlxuICAgIHhTdGFydCA8PSByb3dQb3MgJiYgcm93UG9zIDw9IHhFbmRcblxuICBnZXRMZW5ndGg6IC0+XG4gICAgeEVuZCAtIHhTdGFydFxuXG4jIHBvcyBpcyBhIG1peGluIG9mIGNvbHVtbiBhbmQgcm93XG4jIHN0YXJ0IHdpdGggUm93IGFuZCBvbmx5IG92ZXJ3cml0ZSBcImluQ29sdW1uXCIgZnJvbSBDb2x1bW5cblBvc1NlbGVjdGlvbiA9IFJvd1NlbGVjdGlvbi5leHRlbmQgXy5leHRlbmQge30sXy5waWNrKENvbHVtblNlbGVjdGlvbixcImluQ29sdW1uXCIpLFxuICBfLnBpY2soQ29sdW1uU2VsZWN0aW9uLFwiZ2V0TGVuZ3RoXCIpXG5cbiAgIyBtZXJnZSBib3RoIGRlZmF1bHRzXG4gIGRlZmF1bHRzOiBfLmV4dGVuZCB7fSwgQ29sdW1uU2VsZWN0aW9uOjouZGVmYXVsdHMsIFJvd1NlbGVjdGlvbjo6LmRlZmF1bHRzLFxuICAgIHR5cGU6IFwicG9zXCJcblxubW9kdWxlLmV4cG9ydHMuc2VsID0gU2VsZWN0aW9uXG5tb2R1bGUuZXhwb3J0cy5wb3NzZWwgPSBQb3NTZWxlY3Rpb25cbm1vZHVsZS5leHBvcnRzLnJvd3NlbCA9IFJvd1NlbGVjdGlvblxubW9kdWxlLmV4cG9ydHMuY29sdW1uc2VsID0gQ29sdW1uU2VsZWN0aW9uXG4iLCJzZWwgPSByZXF1aXJlIFwiLi9TZWxlY3Rpb25cIlxuXyA9IHJlcXVpcmUgXCJ1bmRlcnNjb3JlXCJcbkNvbGxlY3Rpb24gPSByZXF1aXJlKFwiYmFja2JvbmUtdGhpblwiKS5Db2xsZWN0aW9uXG5cbiMgaG9sZHMgdGhlIGN1cnJlbnQgdXNlciBzZWxlY3Rpb25cbm1vZHVsZS5leHBvcnRzID0gU2VsZWN0aW9uTWFuYWdlciA9IENvbGxlY3Rpb24uZXh0ZW5kXG5cbiAgbW9kZWw6IHNlbC5zZWxcblxuICBpbml0aWFsaXplOiAoZGF0YSwgb3B0cykgLT5cbiAgICBpZiBvcHRzP1xuICAgICAgQGcgPSBvcHRzLmdcblxuICAgICAgQGxpc3RlblRvIEBnLCBcInJlc2lkdWU6Y2xpY2tcIiwgKGUpIC0+XG4gICAgICAgIEBfaGFuZGxlRSBlLmV2dCwgbmV3IHNlbC5wb3NzZWxcbiAgICAgICAgICB4U3RhcnQ6IGUucm93UG9zXG4gICAgICAgICAgeEVuZDogZS5yb3dQb3NcbiAgICAgICAgICBzZXFJZDogZS5zZXFJZFxuXG4gICAgICBAbGlzdGVuVG8gQGcsIFwicm93OmNsaWNrXCIsIChlKSAtPlxuICAgICAgICBAX2hhbmRsZUUgZS5ldnQsIG5ldyBzZWwucm93c2VsXG4gICAgICAgICAgc2VxSWQ6IGUuc2VxSWRcblxuICAgICAgQGxpc3RlblRvIEBnLCBcImNvbHVtbjpjbGlja1wiLCAoZSkgLT5cbiAgICAgICAgQF9oYW5kbGVFIGUuZXZ0LCBuZXcgc2VsLmNvbHVtbnNlbFxuICAgICAgICAgIHhTdGFydDogZS5yb3dQb3NcbiAgICAgICAgICB4RW5kOiBlLnJvd1BvcyArIGUuc3RlcFNpemUgLSAxXG5cbiAgICAjQGxpc3RlblRvIEAsIFwiYWRkIHJlc2V0XCIsIChlKSAtPlxuICAgICAgI0BfcmVkdWNlQ29sdW1ucygpXG5cbiAgZ2V0U2VsRm9yUm93OiAoc2VxSWQpIC0+XG4gICAgQGZpbHRlciAoZWwpIC0+IGVsLmluUm93IHNlcUlkXG5cbiAgZ2V0U2VsRm9yQ29sdW1uczogKHJvd1BvcykgLT5cbiAgICBAZmlsdGVyIChlbCkgLT4gZWwuaW5Db2x1bW4gcm93UG9zXG5cbiAgYWRkSlNPTjogKG1vZGVsKSAtPlxuICAgIEBhZGQgQF9mcm9tSlNPTiBtb2RlbFxuXG4gIF9mcm9tSlNPTjogKG1vZGVsKSAtPlxuICAgc3dpdGNoIG1vZGVsLnR5cGVcbiAgICAgd2hlbiBcImNvbHVtblwiIHRoZW4gIG5ldyBzZWwuY29sdW1uc2VsIG1vZGVsXG4gICAgIHdoZW4gXCJyb3dcIiB0aGVuICBuZXcgc2VsLnJvd3NlbCBtb2RlbFxuICAgICB3aGVuIFwicG9zXCIgdGhlbiAgbmV3IHNlbC5wb3NzZWwgbW9kZWxcblxuICAjIGFsbG93cyBub3JtYWwgSlNPTiBpbnB1dFxuICByZXNldEpTT046IChhcnIpIC0+XG4gICAgYXJyID0gXy5tYXAgYXJyLCBAX2Zyb21KU09OXG4gICAgQHJlc2V0IGFyclxuXG4gICMgQHJldHVybnMgYXJyYXkgb2YgYWxsIHNlbGVjdGVkIHJlc2lkdWVzIGZvciBhIHJvd1xuICBnZXRCbG9ja3NGb3JSb3c6IChzZXFJZCwgbWF4TGVuKSAtPlxuICAgIHNlbGlzID0gQGZpbHRlciAoZWwpIC0+IGVsLmluUm93IHNlcUlkXG4gICAgYmxvY2tzID0gW11cbiAgICBmb3Igc2VsaSBpbiBzZWxpc1xuICAgICAgaWYgc2VsaS5hdHRyaWJ1dGVzLnR5cGUgaXMgXCJyb3dcIlxuICAgICAgICBibG9ja3MgPSBbMC4ubWF4TGVuXVxuICAgICAgICBicmVha1xuICAgICAgZWxzZVxuICAgICAgICBibG9ja3MgPSBibG9ja3MuY29uY2F0IFtzZWxpLmF0dHJpYnV0ZXMueFN0YXJ0IC4uIHNlbGkuYXR0cmlidXRlcy54RW5kXVxuICAgIGJsb2Nrc1xuXG4gICMgQHJldHVybnMgYXJyYXkgd2l0aCBhbGwgY29sdW1ucyBiZWluZyBzZWxlY3RlZFxuICAjIGV4YW1wbGU6IDAtNC4uLiAxMi0xNCBzZWxlY3RlZCAtPiBbMCwxLDIsMyw0LDEyLDEzLDE0XVxuICBnZXRBbGxDb2x1bW5CbG9ja3M6IChjb25mKSAtPlxuICAgIG1heExlbiA9IGNvbmYubWF4TGVuXG4gICAgd2l0aFBvcyA9IGNvbmYud2l0aFBvc1xuICAgIGJsb2NrcyA9IFtdXG4gICAgaWYgY29uZi53aXRoUG9zXG4gICAgICBmaWx0ZXJlZCA9IChAZmlsdGVyIChlbCkgLT4gZWwuZ2V0KCd4U3RhcnQnKT8gKVxuICAgIGVsc2VcbiAgICAgIGZpbHRlcmVkID0gKEBmaWx0ZXIgKGVsKSAtPiBlbC5nZXQoJ3R5cGUnKSBpcyBcImNvbHVtblwiKVxuICAgIGZvciBzZWxpIGluIGZpbHRlcmVkXG4gICAgICBibG9ja3MgPSBibG9ja3MuY29uY2F0IFtzZWxpLmF0dHJpYnV0ZXMueFN0YXJ0Li5zZWxpLmF0dHJpYnV0ZXMueEVuZF1cbiAgICBibG9ja3MgPSBfLnVuaXEgYmxvY2tzXG4gICAgcmV0dXJuIGJsb2Nrc1xuXG4gICMgaW52ZXJ0cyB0aGUgY3VycmVudCBzZWxlY3Rpb24gZm9yIGNvbHVtbnNcbiAgIyBAcGFyYW0gcm93cyBbQXJyYXldIGFsbCBhdmFpbGFibGUgc2VxSWRcbiAgaW52ZXJ0Um93OiAocm93cykgLT5cbiAgICBzZWxSb3dzID0gQHdoZXJlKHR5cGU6XCJyb3dcIilcbiAgICBzZWxSb3dzID0gXy5tYXAgc2VsUm93cywgKGVsKSAtPiBlbC5hdHRyaWJ1dGVzLnNlcUlkXG4gICAgaW52ZXJ0ZWQgPSBfLmZpbHRlciByb3dzLCAoZWwpIC0+XG4gICAgICByZXR1cm4gZmFsc2UgaWYgc2VsUm93cy5pbmRleE9mKGVsKSA+PSAwICMgZXhpc3Rpbmcgc2VsZWN0aW9uXG4gICAgICB0cnVlXG4gICAgIyBtYXNzIGluc2VydFxuICAgIHMgPSBbXVxuICAgIGZvciBlbCBpbiBpbnZlcnRlZFxuICAgICAgcy5wdXNoIG5ldyBzZWwucm93c2VsKHNlcUlkOmVsKVxuICAgIEByZXNldCBzXG5cbiAgIyBpbnZlcnRzIHRoZSBjdXJyZW50IHNlbGVjdGlvbiBmb3Igcm93c1xuICAjIEBwYXJhbSByb3dzIFtBcnJheV0gYWxsIGF2YWlsYWJsZSByb3dzICgwLi5tYXgubGVuZ3RoKVxuICBpbnZlcnRDb2w6IChjb2x1bW5zKSAtPlxuICAgIHNlbENvbHVtbnMgPSBAd2hlcmUodHlwZTpcImNvbHVtblwiKVxuICAgIHNlbENvbHVtbnMgPSBfLnJlZHVjZSBzZWxDb2x1bW5zLCAobWVtbyxlbCkgLT5cbiAgICAgIG1lbW8uY29uY2F0IFtlbC5hdHRyaWJ1dGVzLnhTdGFydCAuLiBlbC5hdHRyaWJ1dGVzLnhFbmRdXG4gICAgLCBbXVxuICAgIGludmVydGVkID0gXy5maWx0ZXIgY29sdW1ucywgKGVsKSAtPlxuICAgICAgaWYgc2VsQ29sdW1ucy5pbmRleE9mKGVsKSA+PSAwXG4gICAgICAgICMgZXhpc3Rpbmcgc2VsZWN0aW9uXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgdHJ1ZVxuICAgICMgbWFzcyBpbnNlcnRcbiAgICByZXR1cm4gaWYgaW52ZXJ0ZWQubGVuZ3RoID09IDBcbiAgICBzID0gW11cbiAgICB4U3RhcnQgPSB4RW5kID0gaW52ZXJ0ZWRbMF1cbiAgICBmb3IgZWwgaW4gaW52ZXJ0ZWRcbiAgICAgIGlmIHhFbmQgKyAxIGlzIGVsXG4gICAgICAgICMgY29udGlndW91c1xuICAgICAgICB4RW5kID0gZWxcbiAgICAgIGVsc2VcbiAgICAgICAgIyBnYXAgYmV0d2VlblxuICAgICAgICBzLnB1c2ggbmV3IHNlbC5jb2x1bW5zZWwoeFN0YXJ0OnhTdGFydCwgeEVuZDogeEVuZClcbiAgICAgICAgeFN0YXJ0ID0geEVuZCA9IGVsXG4gICAgIyBjaGVjayBmb3IgbGFzdCBnYXBcbiAgICBzLnB1c2ggbmV3IHNlbC5jb2x1bW5zZWwoeFN0YXJ0OnhTdGFydCwgeEVuZDogaW52ZXJ0ZWRbaW52ZXJ0ZWQubGVuZ3RoIC0gMV0pIGlmIHhTdGFydCBpc250IHhFbmRcbiAgICBAcmVzZXQgc1xuXG4gICMgbWV0aG9kIHRvIGRlY2lkZSB3aGV0aGVyIHRvIHN0YXJ0IGEgbmV3IHNlbGVjdGlvblxuICAjIG9yIGFwcGVuZCB0byB0aGUgb2xkIG9uZSAoZGVwZW5kaW5nIHdoZXRoZXIgQ1RSTCB3YXMgcHJlc3NlZClcbiAgX2hhbmRsZUU6IChlLCBzZWxlY3Rpb24pIC0+XG4gICAgaWYgZS5jdHJsS2V5IG9yIGUubWV0YUtleVxuICAgICAgQGFkZCBzZWxlY3Rpb25cbiAgICBlbHNlXG4gICAgICBAcmVzZXQgW3NlbGVjdGlvbl1cblxuICAjIGV4cGVyaW1lbnRhbCByZWR1Y2UgbWV0aG9kIGZvciBjb2x1bW5zXG4gIF9yZWR1Y2VDb2x1bW5zOiAtPlxuICAgIEBlYWNoIChlbCwgaW5kZXgsIGFycikgLT5cbiAgICAgIGNvbHMgPSBfLmZpbHRlciBhcnIsIChlbCkgLT4gZWwuZ2V0KCd0eXBlJykgaXMgJ2NvbHVtbidcbiAgICAgIHhTdGFydCA9IGVsLmdldCgneFN0YXJ0JylcbiAgICAgIHhFbmQgPSBlbC5nZXQoJ3hFbmQnKVxuXG4gICAgICBsZWZ0cyA9IF8uZmlsdGVyIGNvbHMsIChlbCkgLT4gZWwuZ2V0KCd4RW5kJykgaXMgKHhTdGFydCAtIDEpXG4gICAgICBmb3IgbGVmdCBpbiBsZWZ0c1xuICAgICAgICBsZWZ0LnNldCAneEVuZCcsIHhTdGFydFxuXG4gICAgICByaWdodHMgPSBfLmZpbHRlciBjb2xzLCAoZWwpIC0+IGVsLmdldCgneFN0YXJ0JykgaXMgKHhFbmQgKyAxKVxuICAgICAgZm9yIHJpZ2h0IGluIHJpZ2h0c1xuICAgICAgICByaWdodC5zZXQgJ3hTdGFydCcsIHhFbmRcblxuICAgICAgaWYgbGVmdHMubGVuZ3RoID4gMCBvciByaWdodHMubGVuZ3RoID4gMFxuICAgICAgICBjb25zb2xlLmxvZyBcInJlbW92ZWQgZWxcIlxuICAgICAgICBlbC5jb2xsZWN0aW9uLnJlbW92ZSBlbFxuIiwiTW9kZWwgPSByZXF1aXJlKFwiYmFja2JvbmUtdGhpblwiKS5Nb2RlbFxuXG4jIHNpbXBsZSB1c2VyIGNvbmZpZ1xubW9kdWxlLmV4cG9ydHMgPSBDb25maWcgPSBNb2RlbC5leHRlbmRcblxuICBkZWZhdWx0czpcbiAgICBzZWFyY2hUZXh0OiBcIlwiXG4iLCJNb2RlbCA9IHJlcXVpcmUoXCJiYWNrYm9uZS10aGluXCIpLk1vZGVsXG5cbiMgdmlzaWJsZSBhcmVhc1xubW9kdWxlLmV4cG9ydHMgPSBWaXNpYmlsaXR5ID0gTW9kZWwuZXh0ZW5kXG5cbiAgZGVmYXVsdHM6XG5cbiAgICAjIGZvciB0aGUgU3RhZ2VcbiAgICBzZWFyY2hCb3g6IC0xMFxuICAgIG92ZXJ2aWV3Qm94OiAzMFxuICAgIGhlYWRlckJveDogLTFcbiAgICBhbGlnbm1lbnRCb2R5OiAwXG4iLCJNb2RlbCA9IHJlcXVpcmUoXCJiYWNrYm9uZS10aGluXCIpLk1vZGVsXG5cbiMgdmlzaWJsZSBhcmVhc1xubW9kdWxlLmV4cG9ydHMgPSBWaXNpYmlsaXR5ID0gTW9kZWwuZXh0ZW5kXG5cbiAgZGVmYXVsdHM6XG4gICAgc2VxdWVuY2VzOiB0cnVlXG4gICAgbWFya2VyczogdHJ1ZVxuICAgIG1ldGFjZWxsOiBmYWxzZVxuICAgIGNvbnNlcnY6IGZhbHNlXG4gICAgb3ZlcnZpZXdib3g6IGZhbHNlXG4gICAgc2VxbG9nbzogZmFsc2VcbiAgICBnYXBIZWFkZXI6IGZhbHNlXG4gICAgbGVmdEhlYWRlcjogdHJ1ZVxuXG4gICAgIyBhYm91dCB0aGUgbGFiZWxzXG4gICAgbGFiZWxzOiB0cnVlXG4gICAgbGFiZWxOYW1lOiB0cnVlXG4gICAgbGFiZWxJZDogdHJ1ZVxuICAgIGxhYmVsUGFydGl0aW9uOiBmYWxzZVxuICAgIGxhYmVsQ2hlY2tib3g6IGZhbHNlXG5cbiAgICAjIG1ldGEgc3R1ZmZcbiAgICBtZXRhR2FwczogdHJ1ZVxuICAgIG1ldGFJZGVudGl0eTogdHJ1ZVxuICAgIG1ldGFMaW5rczogdHJ1ZVxuXG4gIGNvbnN0cnVjdG9yOiAoYXR0cmlidXRlcyxvcHRpb25zKSAtPlxuICAgIEBjYWxjRGVmYXVsdHMgb3B0aW9ucy5tb2RlbFxuICAgIE1vZGVsLmFwcGx5IEAsIGFyZ3VtZW50c1xuXG4gIGluaXRpYWxpemU6IC0+XG5cbiAgICBAbGlzdGVuVG8gQCwgXCJjaGFuZ2U6bWV0YUxpbmtzIGNoYW5nZTptZXRhSWRlbnRpdHkgY2hhbmdlOm1ldGFHYXBzXCIsIC0+XG4gICAgICBAdHJpZ2dlciBcImNoYW5nZTptZXRhY2VsbFwiXG4gICAgLCBAXG5cbiAgICBAbGlzdGVuVG8gQCwgXCJjaGFuZ2U6bGFiZWxOYW1lIGNoYW5nZTpsYWJlbElkIGNoYW5nZTpsYWJlbFBhcnRpdGlvbiBjaGFuZ2U6bGFiZWxDaGVja2JveFwiLCAtPlxuICAgICAgQHRyaWdnZXIgXCJjaGFuZ2U6bGFiZWxzXCJcbiAgICAsIEBcblxuICAgIEBsaXN0ZW5UbyBALFwiY2hhbmdlOm1hcmtlcnMgY2hhbmdlOmNvbnNlcnYgY2hhbmdlOnNlcWxvZ28gY2hhbmdlOmdhcEhlYWRlclwiLCAtPlxuICAgICAgQHRyaWdnZXIgXCJjaGFuZ2U6aGVhZGVyXCJcbiAgICAsIEBcblxuICBjYWxjRGVmYXVsdHM6IChzZXFzKSAtPlxuICAgIGNvbnNvbGUubG9nIHNlcXNcbiAgICBpZiBzZXFzLmxlbmd0aCA+IDBcbiAgICAgIHNlcSA9IHNlcXMuYXQoMClcbiAgICAgIGlkcyA9IHNlcS5nZXQgXCJpZHNcIlxuICAgICAgaWYgaWRzIGlzbnQgdW5kZWZpbmVkIGFuZCBPYmplY3Qua2V5cyhpZHMpLmxlbmd0aCBpcyAwXG4gICAgICAgIEBkZWZhdWx0cy5tZXRhTGlua3MgPSBmYWxzZVxuIiwiTW9kZWwgPSByZXF1aXJlKFwiYmFja2JvbmUtdGhpblwiKS5Nb2RlbFxuIyBwaXhlbCBwcm9wZXJ0aWVzIGZvciBzb21lIGNvbXBvbmVudHNcbm1vZHVsZS5leHBvcnRzID0gWm9vbWVyID0gTW9kZWwuZXh0ZW5kXG5cbiAgY29uc3RydWN0b3I6IChhdHRyaWJ1dGVzLG9wdGlvbnMpIC0+XG4gICAgQGNhbGNEZWZhdWx0cyBvcHRpb25zLm1vZGVsXG4gICAgTW9kZWwuYXBwbHkgQCwgYXJndW1lbnRzXG4gICAgQGcgPSBvcHRpb25zLmdcblxuICAgICMgZXZlbnRzXG4gICAgQGxpc3RlblRvIEAsIFwiY2hhbmdlOmxhYmVsSWRMZW5ndGggY2hhbmdlOmxhYmVsTmFtZUxlbmd0aCBjaGFuZ2U6bGFiZWxQYXJ0TGVuZ3RoIGNoYW5nZTpsYWJlbENoZWNrTGVuZ3RoXCIsIC0+XG4gICAgICBAdHJpZ2dlciBcImNoYW5nZTpsYWJlbFdpZHRoXCIsIEBnZXRMYWJlbFdpZHRoKClcbiAgICAsIEBcbiAgICBAbGlzdGVuVG8gQCwgXCJjaGFuZ2U6bWV0YUxpbmtzV2lkdGggY2hhbmdlOm1ldGFJZGVudFdpZHRoIGNoYW5nZTptZXRhR2FwV2lkdGhcIiwgLT5cbiAgICAgIEB0cmlnZ2VyIFwiY2hhbmdlOm1ldGFXaWR0aFwiLCBAZ2V0TWV0YVdpZHRoKClcbiAgICAsIEBcblxuICAgIEBcblxuICBkZWZhdWx0czpcblxuICAgICMgZ2VuZXJhbFxuICAgIGFsaWdubWVudFdpZHRoOiBcImF1dG9cIlxuICAgIGFsaWdubWVudEhlaWdodDogMjI1XG4gICAgY29sdW1uV2lkdGg6IDE1XG4gICAgcm93SGVpZ2h0OiAxNVxuICAgIGF1dG9SZXNpemU6IHRydWUgIyBvbmx5IGZvciB0aGUgd2lkdGhcblxuICAgICMgbGFiZWxzXG4gICAgdGV4dFZpc2libGU6IHRydWVcbiAgICBsYWJlbElkTGVuZ3RoOiAzMFxuICAgIGxhYmVsTmFtZUxlbmd0aDogMTAwXG4gICAgbGFiZWxQYXJ0TGVuZ3RoOiAxNVxuICAgIGxhYmVsQ2hlY2tMZW5ndGg6IDE1XG4gICAgbGFiZWxGb250c2l6ZTogMTNcbiAgICBsYWJlbExpbmVIZWlnaHQ6IFwiMTNweFwiXG5cbiAgICAjIG1hcmtlclxuICAgIG1hcmtlckZvbnRzaXplOiBcIjEwcHhcIlxuICAgIHN0ZXBTaXplOiAxXG4gICAgbWFya2VyU3RlcFNpemU6IDJcbiAgICBtYXJrZXJIZWlnaHQ6IDIwXG5cbiAgICAjIGNhbnZhc1xuICAgIHJlc2lkdWVGb250OiBcIjEzXCIgIyBpbiBweFxuICAgIGNhbnZhc0V2ZW50U2NhbGU6IDFcblxuICAgICMgb3ZlcnZpZXcgYm94XG4gICAgYm94UmVjdEhlaWdodDogMlxuICAgIGJveFJlY3RXaWR0aDogMlxuICAgIG92ZXJ2aWV3Ym94UGFkZGluZ1RvcDogMTBcblxuICAgICMgbWVudVxuICAgIG1lbnVGb250c2l6ZTogXCIxNHB4XCJcbiAgICBtZW51SXRlbUZvbnRzaXplOiBcIjE0cHhcIlxuICAgIG1lbnVJdGVtTGluZUhlaWdodDogXCIxNHB4XCJcbiAgICBtZW51TWFyZ2luTGVmdDogXCIzcHhcIlxuICAgIG1lbnVQYWRkaW5nOiBcIjNweCA0cHggM3B4IDRweFwiXG5cbiAgICAjIG1ldGEgY2VsbFxuICAgIG1ldGFHYXBXaWR0aDogMzVcbiAgICBtZXRhSWRlbnRXaWR0aDogNDBcbiAgICBtZXRhTGlua3NXaWR0aDogMjVcblxuICAgICMgaW50ZXJuYWwgcHJvcHNcbiAgICBfYWxpZ25tZW50U2Nyb2xsTGVmdDogMFxuICAgIF9hbGlnbm1lbnRTY3JvbGxUb3A6IDBcblxuICAjIHNldHMgc29tZSBkZWZhdWx0cywgZGVwZW5kaW5nIG9uIHRoZSBtb2RlbFxuICBjYWxjRGVmYXVsdHM6IChtb2RlbCkgLT5cbiAgICBtYXhMZW4gPSBtb2RlbC5nZXRNYXhMZW5ndGgoKVxuICAgIGlmIG1heExlbiA8IDIwMCBhbmQgbW9kZWwubGVuZ3RoIDwgMzBcbiAgICAgIEBkZWZhdWx0cy5ib3hSZWN0V2lkdGggPSBAZGVmYXVsdHMuYm94UmVjdEhlaWdodCA9IDVcblxuICAjIEBwYXJhbSBuIFtpbnRdIG1heExlbmd0aCBvZiBhbGwgc2Vxc1xuICBnZXRBbGlnbm1lbnRXaWR0aDogKG4pIC0+XG4gICAgaWYgQGdldChcImF1dG9SZXNpemVcIikgYW5kIG4gaXNudCB1bmRlZmluZWRcbiAgICAgIHJldHVybiBAZ2V0KFwiY29sdW1uV2lkdGhcIikgKiBuXG4gICAgaWYgQGdldChcImFsaWdubWVudFdpZHRoXCIpIGlzIHVuZGVmaW5lZCBvciBAZ2V0KFwiYWxpZ25tZW50V2lkdGhcIikgaXMgXCJhdXRvXCIgb3IgQGdldChcImFsaWdubWVudFdpZHRoXCIpIGlzIDBcbiAgICAgIEBfYWRqdXN0V2lkdGgoKVxuICAgIGVsc2VcbiAgICAgIEBnZXQgXCJhbGlnbm1lbnRXaWR0aFwiXG5cbiAgIyBAcGFyYW0gbiBbaW50XSBudW1iZXIgb2YgcmVzaWR1ZXMgdG8gc2Nyb2xsIHRvIHRoZSByaWdodFxuICBzZXRMZWZ0T2Zmc2V0OiAobikgLT5cbiAgICB2YWwgPSAobilcbiAgICB2YWwgPSBNYXRoLm1heCAwLCB2YWxcbiAgICB2YWwgLT0gQGcuY29sdW1ucy5jYWxjSGlkZGVuQ29sdW1ucyB2YWxcbiAgICBAc2V0IFwiX2FsaWdubWVudFNjcm9sbExlZnRcIiwgdmFsICogQGdldCgnY29sdW1uV2lkdGgnKVxuXG4gICMgQHBhcmFtIG4gW2ludF0gcm93IHRoYXQgc2hvdWxkIGJlIG9uIHRvcFxuICBzZXRUb3BPZmZzZXQ6IChuKSAtPlxuICAgIHZhbCA9IE1hdGgubWF4IDAsIChuIC0gMSlcbiAgICBoZWlnaHQgPSAwXG4gICAgZm9yIGkgaW4gWzAuLnZhbF0gYnkgMVxuICAgICAgc2VxID0gQG1vZGVsLmF0IGlcbiAgICAgIGhlaWdodCArPSBzZXEuYXR0cmlidXRlcy5oZWlnaHQgfHwgMVxuICAgIEBzZXQgXCJfYWxpZ25tZW50U2Nyb2xsVG9wXCIsaGVpZ2h0ICogQGdldChcInJvd0hlaWdodFwiKVxuXG4gICMgbGVuZ3RoIG9mIGFsbCBlbGVtZW50cyBsZWZ0IHRvIHRoZSBtYWluIHNlcXVlbmNlIGJvZHk6IGxhYmVscywgbWV0YWNlbGwsIC4uXG4gIGdldExlZnRCbG9ja1dpZHRoOiAtPlxuICAgICBwYWRkaW5nTGVmdCA9IDBcbiAgICAgcGFkZGluZ0xlZnQgKz0gQGdldExhYmVsV2lkdGgoKSBpZiBAZy52aXMuZ2V0IFwibGFiZWxzXCJcbiAgICAgcGFkZGluZ0xlZnQgKz0gQGdldE1ldGFXaWR0aCgpIGlmIEBnLnZpcy5nZXQgXCJtZXRhY2VsbFwiXG4gICAgICNwYWRkaW5nTGVmdCArPSAxNSAjIHNjcm9sbCBiYXJcbiAgICAgcmV0dXJuIHBhZGRpbmdMZWZ0XG5cbiAgZ2V0TWV0YVdpZHRoOiAtPlxuICAgICB2YWwgPSAwXG4gICAgIHZhbCArPSBAZ2V0IFwibWV0YUdhcFdpZHRoXCIgaWYgQGcudmlzLmdldCBcIm1ldGFHYXBzXCJcbiAgICAgdmFsICs9IEBnZXQgXCJtZXRhSWRlbnRXaWR0aFwiIGlmIEBnLnZpcy5nZXQgXCJtZXRhSWRlbnRpdHlcIlxuICAgICB2YWwgKz0gQGdldCBcIm1ldGFMaW5rc1dpZHRoXCIgaWYgQGcudmlzLmdldCBcIm1ldGFMaW5rc1wiXG4gICAgIHZhbFxuXG4gIGdldExhYmVsV2lkdGg6IC0+XG4gICAgIHZhbCA9IDBcbiAgICAgdmFsICs9IEBnZXQgXCJsYWJlbE5hbWVMZW5ndGhcIiBpZiBAZy52aXMuZ2V0IFwibGFiZWxOYW1lXCJcbiAgICAgdmFsICs9IEBnZXQgXCJsYWJlbElkTGVuZ3RoXCIgaWYgQGcudmlzLmdldCBcImxhYmVsSWRcIlxuICAgICB2YWwgKz0gQGdldCBcImxhYmVsUGFydExlbmd0aFwiIGlmIEBnLnZpcy5nZXQgXCJsYWJlbFBhcnRpdGlvblwiXG4gICAgIHZhbCArPSBAZ2V0IFwibGFiZWxDaGVja0xlbmd0aFwiIGlmIEBnLnZpcy5nZXQgXCJsYWJlbENoZWNrYm94XCJcbiAgICAgdmFsXG5cbiAgX2FkanVzdFdpZHRoOiAtPlxuICAgIHJldHVybiB1bmxlc3MgQGVsIGlzbnQgdW5kZWZpbmVkIGFuZCBAbW9kZWwgaXNudCB1bmRlZmluZWRcbiAgICBpZiBAZWwucGFyZW50Tm9kZT8gYW5kIEBlbC5wYXJlbnROb2RlLm9mZnNldFdpZHRoIGlzbnQgMFxuICAgICAgcGFyZW50V2lkdGggPSBAZWwucGFyZW50Tm9kZS5vZmZzZXRXaWR0aFxuICAgIGVsc2VcbiAgICAgIHBhcmVudFdpZHRoID0gZG9jdW1lbnQuYm9keS5jbGllbnRXaWR0aCAtIDM1XG5cbiAgICAjIFRPRE86IGRpcnR5IGhhY2tcbiAgICBtYXhXaWR0aCA9IHBhcmVudFdpZHRoIC0gQGdldExlZnRCbG9ja1dpZHRoKClcbiAgICBjYWxjV2lkdGggPSBAZ2V0QWxpZ25tZW50V2lkdGgoIEBtb2RlbC5nZXRNYXhMZW5ndGgoKSAtIEBnLmNvbHVtbnMuZ2V0KCdoaWRkZW4nKS5sZW5ndGgpXG4gICAgdmFsID0gTWF0aC5taW4obWF4V2lkdGgsY2FsY1dpZHRoKVxuICAgICMgcm91bmQgdG8gYSB2YWxpZCBBQSBib3hcbiAgICB2YWwgPSBNYXRoLmZsb29yKCB2YWwgLyBAZ2V0KFwiY29sdW1uV2lkdGhcIikpICogQGdldChcImNvbHVtbldpZHRoXCIpXG5cbiAgICAjQHNldCBcImFsaWdubWVudFdpZHRoXCIsIHZhbFxuICAgIEAuYXR0cmlidXRlcy5hbGlnbm1lbnRXaWR0aCA9IHZhbFxuXG4gIGF1dG9SZXNpemU6ICAtPlxuICAgIGlmIEBnZXQgXCJhdXRvUmVzaXplXCJcbiAgICAgIEBfYWRqdXN0V2lkdGggQGVsLCBAbW9kZWxcblxuICAjIG1heCBpcyB0aGUgbWF4aW1hbCBhbGxvd2VkIGhlaWdodFxuICBhdXRvSGVpZ2h0OiAobWF4KSAtPlxuICAgICMgVE9ETyFcbiAgICAjIG1ha2Ugc2VxbG9nbyBoZWlnaHQgY29uZmlndXJhYmxlXG4gICAgdmFsID0gQGdldE1heEFsaWdubWVudEhlaWdodCgpXG4gICAgaWYgbWF4ICE9IHVuZGVmaW5lZCBhbmQgbWF4ID4gMFxuICAgICAgdmFsID0gTWF0aC5taW4gdmFsLCBtYXhcblxuICAgIEBzZXQgXCJhbGlnbm1lbnRIZWlnaHRcIiwgdmFsXG5cbiAgc2V0RWw6IChlbCwgbW9kZWwpIC0+XG4gICAgQGVsID0gZWxcbiAgICBAbW9kZWwgPSBtb2RlbFxuXG4gICMgdXBkYXRlcyBib3RoIHNjcm9sbCBwcm9wZXJ0aWVzIChpZiBuZWVkZWQpXG4gIF9jaGVja1Njcm9sbGluZzogKHNjcm9sbE9iaiwgb3B0cykgLT5cbiAgICB4U2Nyb2xsID0gc2Nyb2xsT2JqWzBdXG4gICAgeVNjcm9sbCA9IHNjcm9sbE9ialsxXVxuXG4gICAgQHNldCBcIl9hbGlnbm1lbnRTY3JvbGxMZWZ0XCIsIHhTY3JvbGwsIG9wdHNcbiAgICBAc2V0IFwiX2FsaWdubWVudFNjcm9sbFRvcFwiLCB5U2Nyb2xsLCBvcHRzXG5cbiAgZ2V0TWF4QWxpZ25tZW50SGVpZ2h0OiAtPlxuICAgIGhlaWdodCA9IDBcbiAgICBAbW9kZWwuZWFjaCAoc2VxKSAtPlxuICAgICAgaGVpZ2h0ICs9IHNlcS5hdHRyaWJ1dGVzLmhlaWdodCB8fCAxXG5cbiAgICByZXR1cm4gKGhlaWdodCAqIEBnZXQoXCJyb3dIZWlnaHRcIikpXG5cbiAgZ2V0TWF4QWxpZ25tZW50V2lkdGg6IC0+XG4gICAgcmV0dXJuIEBtb2RlbC5nZXRNYXhMZW5ndGgoKSAqIEBnZXQoXCJjb2x1bW5XaWR0aFwiKVxuXG4iLCJNU0EgPSByZXF1aXJlKFwiLi9tc2FcIilcblxubW9kdWxlLmV4cG9ydHMgPSAtPlxuICBtc2EgPSAoYXJncykgLT5cbiAgICBNU0EuYXBwbHkgQCwgYXJnc1xuICBtc2E6OiA9IE1TQTo6XG4gIG5ldyBtc2EgYXJndW1lbnRzXG5cbm1vZHVsZS5leHBvcnRzLm1zYSA9IE1TQVxuXG4jIG1vZGVsc1xubW9kdWxlLmV4cG9ydHMubW9kZWwgPSByZXF1aXJlKFwiLi9tb2RlbFwiKVxuXG4jIGV4dHJhIHBsdWdpbnMsIGV4dGVuc2lvbnNcbm1vZHVsZS5leHBvcnRzLm1lbnUgPSByZXF1aXJlKFwiLi9tZW51XCIpXG5tb2R1bGUuZXhwb3J0cy51dGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpXG5cbiMgcHJvYmFibHkgbmVlZGVkIG1vcmUgb2Z0ZW5cbm1vZHVsZS5leHBvcnRzLnNlbGVjdGlvbiA9IHJlcXVpcmUoXCIuL2cvc2VsZWN0aW9uL1NlbGVjdGlvblwiKVxubW9kdWxlLmV4cG9ydHMuc2VsY29sID0gcmVxdWlyZShcIi4vZy9zZWxlY3Rpb24vU2VsZWN0aW9uQ29sXCIpXG5tb2R1bGUuZXhwb3J0cy52aWV3ID0gcmVxdWlyZShcImJhY2tib25lLXZpZXdqXCIpXG5tb2R1bGUuZXhwb3J0cy5ib25lVmlldyA9IHJlcXVpcmUoXCJiYWNrYm9uZS1jaGlsZHNcIilcblxuIyBjb252ZW5pZW5jZVxubW9kdWxlLmV4cG9ydHMuXyA9IHJlcXVpcmUgJ3VuZGVyc2NvcmUnXG5tb2R1bGUuZXhwb3J0cy4kID0gcmVxdWlyZSAnamJvbmUnXG5cbiMgcGFyc2VyIChhcmUgY3VycmVudGx5IGJ1bmRsZWQgLSBzbyB3ZSBjYW4gYWxzbyBleHBvc2UgdGhlbSlcbm1vZHVsZS5leHBvcnRzLmlvID0ge31cbm1vZHVsZS5leHBvcnRzLmlvLnhociA9IHJlcXVpcmUgJ3hocidcbm1vZHVsZS5leHBvcnRzLmlvLmZhc3RhID0gcmVxdWlyZSAnYmlvanMtaW8tZmFzdGEnXG5tb2R1bGUuZXhwb3J0cy5pby5jbHVzdGFsID0gcmVxdWlyZSAnYmlvanMtaW8tY2x1c3RhbCdcbm1vZHVsZS5leHBvcnRzLmlvLmdmZiA9IHJlcXVpcmUgJ2Jpb2pzLWlvLWdmZidcblxubW9kdWxlLmV4cG9ydHMudmVyc2lvbiA9IFwiMC4yLjBcIlxuIiwiYm9uZVZpZXcgPSByZXF1aXJlKFwiYmFja2JvbmUtY2hpbGRzXCIpXG5cbiMgbWVudSB2aWV3c1xuSW1wb3J0TWVudSA9IHJlcXVpcmUgXCIuL3ZpZXdzL0ltcG9ydE1lbnVcIlxuRmlsdGVyTWVudSA9IHJlcXVpcmUgXCIuL3ZpZXdzL0ZpbHRlck1lbnVcIlxuU2VsZWN0aW9uTWVudSA9IHJlcXVpcmUgXCIuL3ZpZXdzL1NlbGVjdGlvbk1lbnVcIlxuVmlzTWVudSA9IHJlcXVpcmUgXCIuL3ZpZXdzL1Zpc01lbnVcIlxuQ29sb3JNZW51ID0gcmVxdWlyZSBcIi4vdmlld3MvQ29sb3JNZW51XCJcbk9yZGVyaW5nTWVudSA9IHJlcXVpcmUgXCIuL3ZpZXdzL09yZGVyaW5nTWVudVwiXG5FeHRyYU1lbnUgPSByZXF1aXJlIFwiLi92aWV3cy9FeHRyYU1lbnVcIlxuRXhwb3J0TWVudSA9IHJlcXVpcmUgXCIuL3ZpZXdzL0V4cG9ydE1lbnVcIlxuSGVscE1lbnUgPSByZXF1aXJlIFwiLi92aWV3cy9IZWxwTWVudVwiXG5EZWJ1Z01lbnUgPSByZXF1aXJlIFwiLi92aWV3cy9EZWJ1Z01lbnVcIlxuXG4jIHRoaXMgdmVyeSBiYXNpYyBtZW51IGRlbW9uc3RyYXRlcyBjYWxscyB0byB0aGUgTVNBIGNvbXBvbmVudFxubW9kdWxlLmV4cG9ydHMgPSBNZW51VmlldyA9IGJvbmVWaWV3LmV4dGVuZFxuXG4gIGluaXRpYWxpemU6IChkYXRhKSAtPlxuICAgIEBtc2EgPSBkYXRhLm1zYVxuXG4gICAgQGFkZFZpZXcgIFwiMTBfaW1wb3J0XCIsIG5ldyBJbXBvcnRNZW51IG1vZGVsOiBAbXNhLnNlcXMsIGc6QG1zYS5nLCBtc2E6IEBtc2FcbiAgICBAYWRkVmlldyAgXCIyMF9maWx0ZXJcIiwgbmV3IEZpbHRlck1lbnUgbW9kZWw6IEBtc2Euc2VxcywgZzpAbXNhLmdcbiAgICBAYWRkVmlldyAgXCIzMF9zZWxlY3Rpb25cIiwgbmV3IFNlbGVjdGlvbk1lbnUgbW9kZWw6IEBtc2Euc2VxcywgZzpAbXNhLmdcbiAgICBAYWRkVmlldyAgXCI0MF92aXNcIiwgbmV3IFZpc01lbnUgbW9kZWw6IEBtc2Euc2VxcywgZzpAbXNhLmdcbiAgICBAYWRkVmlldyAgXCI1MF9jb2xvclwiLCBuZXcgQ29sb3JNZW51IG1vZGVsOiBAbXNhLnNlcXMsIGc6QG1zYS5nXG4gICAgQGFkZFZpZXcgIFwiNjBfb3JkZXJpbmdcIiwgbmV3IE9yZGVyaW5nTWVudSBtb2RlbDogQG1zYS5zZXFzLCBnOkBtc2EuZ1xuICAgIEBhZGRWaWV3ICBcIjcwX2V4dHJhXCIsIG5ldyBFeHRyYU1lbnUgbW9kZWw6IEBtc2Euc2VxcywgZzpAbXNhLmcsIG1zYTogQG1zYVxuICAgIEBhZGRWaWV3ICBcIjgwX2V4cG9ydFwiLCBuZXcgRXhwb3J0TWVudSBtb2RlbDogQG1zYS5zZXFzLCBnOkBtc2EuZywgbXNhOkBtc2FcbiAgICBAYWRkVmlldyAgXCI5MF9oZWxwXCIsIG5ldyBIZWxwTWVudSAgZzpAbXNhLmdcbiAgICBpZiBAbXNhLmcuY29uZmlnLmdldChcImRlYnVnXCIpXG4gICAgICBAYWRkVmlldyAgXCI5NV9kZWJ1Z1wiLCBuZXcgRGVidWdNZW51ICBnOkBtc2EuZ1xuXG4gIHJlbmRlcjogLT5cbiAgICBAcmVuZGVyU3Vidmlld3MoKVxuICAgICMgb3RoZXJcbiAgICBAZWwuc2V0QXR0cmlidXRlIFwiY2xhc3NcIiwgXCJzbWVudWJhclwiXG4gICAgQGVsLmFwcGVuZENoaWxkIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpXG4iLCJtb2R1bGUuZXhwb3J0cy5kZWZhdWx0bWVudSA9IHJlcXVpcmUoXCIuL2RlZmF1bHRtZW51XCIpXG5tb2R1bGUuZXhwb3J0cy5tZW51YnVpbGRlciA9IHJlcXVpcmUoXCIuL21lbnVidWlsZGVyXCIpXG4iLCJidWlsZGVyID0gcmVxdWlyZSBcIm1lbnUtYnVpbGRlclwiXG5cbm1vZHVsZS5leHBvcnRzID0gTWVudUJ1aWxkZXIgPSBidWlsZGVyLmV4dGVuZFxuXG4gICAgYnVpbGRET006IC0+XG4gICAgICBALm9uIFwibmV3Om5vZGVcIiwgQGJ1aWxkTm9kZVxuICAgICAgQC5vbiBcIm5ldzpidXR0b25cIiwgQGJ1aWxkQnV0dG9uXG4gICAgICBALm9uIFwibmV3Om1lbnVcIiwgQGJ1aWxkTWVudVxuICAgICAgcmV0dXJuIGJ1aWxkZXI6OmJ1aWxkRE9NLmNhbGwgQFxuXG4gICAgYnVpbGROb2RlOiAobGkpIC0+XG4gICAgICBpZiBAZz9cbiAgICAgICAgbGkuc3R5bGUubGluZUhlaWdodCA9IEBnLnpvb21lci5nZXQgXCJtZW51SXRlbUxpbmVIZWlnaHRcIlxuXG4gICAgYnVpbGRCdXR0b246IChidG4pIC0+XG4gICAgICBpZiBAZz9cbiAgICAgICAgYnRuLnN0eWxlLmZvbnRTaXplID0gQGcuem9vbWVyLmdldCBcIm1lbnVGb250c2l6ZVwiXG4gICAgICAgIGJ0bi5zdHlsZS5tYXJnaW5MZWZ0ID0gQGcuem9vbWVyLmdldCBcIm1lbnVNYXJnaW5MZWZ0XCJcbiAgICAgICAgYnRuLnN0eWxlLnBhZGRpbmcgPSBAZy56b29tZXIuZ2V0IFwibWVudVBhZGRpbmdcIlxuXG4gICAgYnVpbGRNZW51OiAobWVudSkgLT5cbiAgICAgIGlmIEBnP1xuICAgICAgICBtZW51LnN0eWxlLmZvbnRTaXplID0gQGcuem9vbWVyLmdldCBcIm1lbnVJdGVtRm9udHNpemVcIlxuIiwiTWVudUJ1aWxkZXIgPSByZXF1aXJlIFwiLi4vbWVudWJ1aWxkZXJcIlxuXyA9IHJlcXVpcmUgXCJ1bmRlcnNjb3JlXCJcbmRvbSA9IHJlcXVpcmUgXCJkb20taGVscGVyXCJcblxubW9kdWxlLmV4cG9ydHMgPSBDb2xvck1lbnUgPSBNZW51QnVpbGRlci5leHRlbmRcblxuICBpbml0aWFsaXplOiAoZGF0YSkgLT5cbiAgICBAZyA9IGRhdGEuZ1xuICAgIEBlbC5zdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIlxuICAgIEBsaXN0ZW5UbyBAZy5jb2xvcnNjaGVtZSwgXCJjaGFuZ2VcIiwgLT5cbiAgICAgIEByZW5kZXIoKVxuXG4gIHJlbmRlcjogLT5cbiAgICBtZW51Q29sb3IgPSBAc2V0TmFtZShcIkNvbG9yIHNjaGVtZVwiKVxuICAgIEByZW1vdmVBbGxOb2RlcygpXG5cbiAgICBjb2xvcnNjaGVtZXMgPSBAZ2V0Q29sb3JzY2hlbWVzKClcbiAgICBmb3Igc2NoZW1lIGluIGNvbG9yc2NoZW1lc1xuICAgICAgQGFkZFNjaGVtZSBtZW51Q29sb3IsIHNjaGVtZVxuXG4gICAgdGV4dCA9IFwiQmFja2dyb3VuZFwiXG4gICAgaWYgQGcuY29sb3JzY2hlbWUuZ2V0KFwiY29sb3JCYWNrZ3JvdW5kXCIpXG4gICAgICB0ZXh0ID0gXCJIaWRlIFwiICsgdGV4dFxuICAgIGVsc2VcbiAgICAgIHRleHQgPSBcIlNob3cgXCIgKyB0ZXh0XG5cbiAgICBAYWRkTm9kZSB0ZXh0LCA9PlxuICAgICAgQGcuY29sb3JzY2hlbWUuc2V0IFwiY29sb3JCYWNrZ3JvdW5kXCIsICFAZy5jb2xvcnNjaGVtZS5nZXQoXCJjb2xvckJhY2tncm91bmRcIilcblxuICAgIEBncmV5IG1lbnVDb2xvclxuXG4gICAgIyBUT0RPOiBtYWtlIG1vcmUgZWZmaWNpZW50XG4gICAgZG9tLnJlbW92ZUFsbENoaWxkcyBAZWxcbiAgICBAZWwuYXBwZW5kQ2hpbGQgQGJ1aWxkRE9NKClcbiAgICBAXG5cbiAgYWRkU2NoZW1lOiAobWVudUNvbG9yLHNjaGVtZSkgLT5cbiAgICBzdHlsZSA9IHt9XG4gICAgY3VycmVudCA9IEBnLmNvbG9yc2NoZW1lLmdldChcInNjaGVtZVwiKVxuICAgIGlmIGN1cnJlbnQgaXMgc2NoZW1lLmlkXG4gICAgICBzdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcIiM3N0VEODBcIlxuXG4gICAgQGFkZE5vZGUgc2NoZW1lLm5hbWUsID0+XG4gICAgICBAZy5jb2xvcnNjaGVtZS5zZXQgXCJzY2hlbWVcIiwgc2NoZW1lLmlkXG4gICAgLFxuICAgICAgc3R5bGU6IHN0eWxlXG5cbiAgZ2V0Q29sb3JzY2hlbWVzOiAtPlxuICAgIHNjaGVtZXMgID0gW11cbiAgICBzY2hlbWVzLnB1c2ggbmFtZTogXCJaYXBwb1wiLCBpZDogXCJ6YXBwb1wiXG4gICAgc2NoZW1lcy5wdXNoIG5hbWU6IFwiVGF5bG9yXCIsIGlkOiBcInRheWxvclwiXG4gICAgc2NoZW1lcy5wdXNoIG5hbWU6IFwiSHlkcm9waG9iaWNpdHlcIiwgaWQ6IFwiaHlkcm9cIlxuICAgIHNjaGVtZXMucHVzaCBuYW1lOiBcIkxlc2tcIiwgaWQ6IFwibGVza1wiXG4gICAgc2NoZW1lcy5wdXNoIG5hbWU6IFwiQ2luZW1hXCIsIGlkOiBcImNpbmVtYVwiXG4gICAgc2NoZW1lcy5wdXNoIG5hbWU6IFwiTUFFXCIsIGlkOiBcIm1hZVwiXG4gICAgc2NoZW1lcy5wdXNoIG5hbWU6IFwiQ2x1c3RhbFwiLCBpZDogXCJjbHVzdGFsXCJcbiAgICBzY2hlbWVzLnB1c2ggbmFtZTogXCJDbHVzdGFsMlwiLCBpZDogXCJjbHVzdGFsMlwiXG4gICAgc2NoZW1lcy5wdXNoIG5hbWU6IFwiVHVyblwiLCBpZDogXCJ0dXJuXCJcbiAgICBzY2hlbWVzLnB1c2ggbmFtZTogXCJTdHJhbmRcIiwgaWQ6IFwic3RyYW5kXCJcbiAgICBzY2hlbWVzLnB1c2ggbmFtZTogXCJCdXJpZWRcIiwgaWQ6IFwiYnVyaWVkXCJcbiAgICBzY2hlbWVzLnB1c2ggbmFtZTogXCJIZWxpeFwiLCBpZDogXCJoZWxpeFwiXG4gICAgc2NoZW1lcy5wdXNoIG5hbWU6IFwiTnVjbGVvdGlkZVwiLCBpZDogXCJudWNsZW90aWRlXCJcbiAgICBzY2hlbWVzLnB1c2ggbmFtZTogXCJQdXJpbmVcIiwgaWQ6IFwicHVyaW5lXCJcbiAgICBzY2hlbWVzLnB1c2ggbmFtZTogXCJQSURcIiwgaWQ6IFwicGlkXCJcbiAgICBzY2hlbWVzLnB1c2ggbmFtZTogXCJObyBjb2xvclwiLCBpZDogXCJmb29cIlxuICAgIHNjaGVtZXNcblxuICBncmV5OiAobWVudUNvbG9yKSAtPlxuICAgICMgZ3JleXMgYWxsIGxvd2VyY2FzZSBsZXR0ZXJzXG4gICAgQGFkZE5vZGUgXCJTaGFkZVwiLCA9PlxuICAgICAgQGcuY29sb3JzY2hlbWUuc2V0IFwic2hvd0xvd2VyQ2FzZVwiLCBmYWxzZVxuICAgICAgQG1vZGVsLmVhY2ggKHNlcSkgLT5cbiAgICAgICAgcmVzaWR1ZXMgPSBzZXEuZ2V0IFwic2VxXCJcbiAgICAgICAgZ3JleSA9IFtdXG4gICAgICAgIF8uZWFjaCByZXNpZHVlcywgKGVsLCBpbmRleCkgLT5cbiAgICAgICAgICBpZiBlbCBpcyBlbC50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgICBncmV5LnB1c2ggaW5kZXhcbiAgICAgICAgc2VxLnNldCBcImdyZXlcIiwgZ3JleVxuXG4gICAgQGFkZE5vZGUgXCJTaGFkZSBieSB0aHJlc2hvbGRcIiwgPT5cbiAgICAgIHRocmVzaG9sZCA9IHByb21wdCBcIkVudGVyIHRocmVzaG9sZCAoaW4gcGVyY2VudClcIiwgMjBcbiAgICAgIHRocmVzaG9sZCA9IHRocmVzaG9sZCAvIDEwMFxuICAgICAgbWF4TGVuID0gQG1vZGVsLmdldE1heExlbmd0aCgpXG4gICAgICAjIFRPRE86IGNhY2hlXG4gICAgICBjb25zZXJ2ID0gQGcuc3RhdHMuc2NhbGUgQGcuc3RhdHMuY29uc2VydmF0aW9uKClcbiAgICAgIGdyZXkgPSBbXVxuICAgICAgZm9yIGkgaW4gWzAuLiBtYXhMZW4gLSAxXVxuICAgICAgICBpZiBjb25zZXJ2W2ldIDwgdGhyZXNob2xkXG4gICAgICAgICAgZ3JleS5wdXNoIGlcbiAgICAgIEBtb2RlbC5lYWNoIChzZXEpIC0+XG4gICAgICAgIHNlcS5zZXQgXCJncmV5XCIsIGdyZXlcblxuICAgIEBhZGROb2RlIFwiU2hhZGUgc2VsZWN0aW9uXCIsID0+XG4gICAgICBtYXhMZW4gPSBAbW9kZWwuZ2V0TWF4TGVuZ3RoKClcbiAgICAgIEBtb2RlbC5lYWNoIChzZXEpID0+XG4gICAgICAgIGJsb2NrcyA9IEBnLnNlbGNvbC5nZXRCbG9ja3NGb3JSb3coc2VxLmdldChcImlkXCIpLG1heExlbilcbiAgICAgICAgc2VxLnNldCBcImdyZXlcIiwgYmxvY2tzXG5cbiAgICBAYWRkTm9kZSBcIlJlc2V0IHNoYWRlXCIsID0+XG4gICAgICBAZy5jb2xvcnNjaGVtZS5zZXQgXCJzaG93TG93ZXJDYXNlXCIsIHRydWVcbiAgICAgIEBtb2RlbC5lYWNoIChzZXEpIC0+XG4gICAgICAgIHNlcS5zZXQgXCJncmV5XCIsIFtdXG4iLCJNZW51QnVpbGRlciA9IHJlcXVpcmUgXCIuLi9tZW51YnVpbGRlclwiXG5cbm1vZHVsZS5leHBvcnRzID0gRGVidWdNZW51ID0gTWVudUJ1aWxkZXIuZXh0ZW5kXG5cbiAgaW5pdGlhbGl6ZTogKGRhdGEpIC0+XG4gICAgQGcgPSBkYXRhLmdcbiAgICBAZWwuc3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCJcblxuICByZW5kZXI6IC0+XG4gICAgQHNldE5hbWUoXCJEZWJ1Z1wiKVxuXG4gICAgQGFkZE5vZGUgXCJHZXQgdGhlIGNvZGVcIiwgPT5cbiAgICAgIHdpbmRvdy5vcGVuIFwiaHR0cHM6Ly9naXRodWIuY29tL2dyZWVuaWZ5L21zYVwiXG5cbiAgICBAYWRkTm9kZSBcIlRvZ2dsZSBtb3VzZW92ZXIgZXZlbnRzXCIsID0+XG4gICAgICBAZy5jb25maWcuc2V0IFwicmVnaXN0ZXJNb3VzZUhvdmVyXCIsICFAZy5jb25maWcuZ2V0IFwicmVnaXN0ZXJNb3VzZUhvdmVyXCJcbiAgICAgIEBnLm9uQWxsIC0+XG4gICAgICAgIGNvbnNvbGUubG9nIGFyZ3VtZW50c1xuXG4gICAgQGVsLmFwcGVuZENoaWxkIEBidWlsZERPTSgpXG4gICAgQFxuIiwiTWVudUJ1aWxkZXIgPSByZXF1aXJlIFwiLi4vbWVudWJ1aWxkZXJcIlxuRmFzdGFFeHBvcnRlciA9IHJlcXVpcmUoXCJiaW9qcy1pby1mYXN0YVwiKS53cml0ZXJcbl8gPSByZXF1aXJlIFwidW5kZXJzY29yZVwiXG5FeHBvcnRlciA9IHJlcXVpcmUgXCIuLi8uLi91dGlscy9leHBvcnRcIlxuXG5tb2R1bGUuZXhwb3J0cyA9IEV4cG9ydE1lbnUgPSBNZW51QnVpbGRlci5leHRlbmRcblxuICBpbml0aWFsaXplOiAoZGF0YSkgLT5cbiAgICBAZyA9IGRhdGEuZ1xuICAgIEBtc2EgPSBkYXRhLm1zYVxuICAgIEBlbC5zdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIlxuXG4gIHJlbmRlcjogLT5cbiAgICBAc2V0TmFtZShcIkV4cG9ydFwiKVxuXG4gICAgQGFkZE5vZGUgXCJWaWV3IGluIEphbHZpZXdcIiwgPT5cbiAgICAgIHVybCA9IEBnLmNvbmZpZy5nZXQoJ3VybCcpXG4gICAgICB1bmxlc3MgdXJsP1xuICAgICAgICBhbGVydCBcIlNlcXVlbmNlIHdlcmVuJ3QgaW1wb3J0ZWQgdmlhIGFuIFVSTFwiXG4gICAgICBlbHNlXG4gICAgICAgIGlmIHVybC5pbmRleE9mIFwibG9jYWxob3N0XCIgb3IgdXJsIGlzIFwiZHJhZ2ltcG9ydFwiXG4gICAgICAgICAgRXhwb3J0ZXIucHVibGlzaFdlYiBAbXNhLCAobGluaykgPT5cbiAgICAgICAgICAgIEV4cG9ydGVyLm9wZW5JbkphbHZpZXcgbGluaywgQGcuY29sb3JzY2hlbWUuZ2V0IFwic2NoZW1lXCJcbiAgICAgICAgZWxzZVxuICAgICAgICAgIEV4cG9ydGVyLm9wZW5JbkphbHZpZXcgdXJsLCBAZy5jb2xvcnNjaGVtZS5nZXQgXCJzY2hlbWVcIlxuXG4gICAgQGFkZE5vZGUgXCJQdWJsaXNoIHRvIHRoZSB3ZWJcIiwgPT5cbiAgICAgIEV4cG9ydGVyLnB1Ymxpc2hXZWIgQG1zYSwgKGxpbmspIC0+XG4gICAgICAgIHdpbmRvdy5vcGVuIGxpbmssICdfYmxhbmsnXG5cbiAgICBAYWRkTm9kZSBcIlNoYXJlIGxpbmtcIiwgPT5cbiAgICAgIEV4cG9ydGVyLnNoYXJlTGluayBAbXNhLCAobGluaykgLT5cbiAgICAgICAgd2luZG93Lm9wZW4gbGluaywgJ19ibGFuaydcblxuICAgIEBhZGROb2RlIFwiRXhwb3J0IHNlcXVlbmNlc1wiLCA9PlxuICAgICAgRXhwb3J0ZXIuc2F2ZUFzRmlsZSBAbXNhLCBcImFsbC5mYXN0YVwiXG5cbiAgICBAYWRkTm9kZSBcIkV4cG9ydCBzZWxlY3Rpb25cIiwgPT5cbiAgICAgIEV4cG9ydGVyLnNhdmVTZWxlY3Rpb24gQG1zYSwgXCJzZWxlY3Rpb24uZmFzdGFcIlxuXG4gICAgQGFkZE5vZGUgXCJFeHBvcnQgZmVhdHVyZXNcIiwgPT5cbiAgICAgIEV4cG9ydGVyLnNhdmVBbm5vdHMgQG1zYSwgXCJmZWF0dXJlcy5nZmYzXCJcblxuICAgIEBhZGROb2RlIFwiRXhwb3J0IGltYWdlXCIsID0+XG4gICAgICBFeHBvcnRlci5zYXZlQXNJbWcgQG1zYSwgXCJiaW9qcy1tc2EucG5nXCJcblxuICAgIEBlbC5hcHBlbmRDaGlsZCBAYnVpbGRET00oKVxuICAgIEBcbiIsIk1lbnVCdWlsZGVyID0gcmVxdWlyZSBcIi4uL21lbnVidWlsZGVyXCJcblNlcSA9IHJlcXVpcmUgXCIuLi8uLi9tb2RlbC9TZXF1ZW5jZVwiXG5Mb2FkZXIgPSByZXF1aXJlIFwiLi4vLi4vdXRpbHMvbG9hZGVyXCJcbnhociA9IHJlcXVpcmUgXCJ4aHJcIlxuXG5tb2R1bGUuZXhwb3J0cyA9IEV4dHJhTWVudSA9IE1lbnVCdWlsZGVyLmV4dGVuZFxuXG4gIGluaXRpYWxpemU6IChkYXRhKSAtPlxuICAgIEBnID0gZGF0YS5nXG4gICAgQGVsLnN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiXG4gICAgQG1zYSA9IGRhdGEubXNhXG5cbiAgcmVuZGVyOiAtPlxuICAgIEBzZXROYW1lKFwiRXh0cmFzXCIpXG4gICAgc3RhdHMgPSBAZy5zdGF0c1xuICAgIG1zYSA9IEBtc2FcbiAgICBAYWRkTm9kZSBcIkFkZCBjb25zZW5zdXMgc2VxXCIsID0+XG4gICAgICBjb24gPSBzdGF0cy5jb25zZW5zdXMoKVxuICAgICAgc2VxID0gbmV3IFNlcVxuICAgICAgICBzZXE6IGNvblxuICAgICAgICBpZDogXCIwY1wiXG4gICAgICAgIG5hbWU6IFwiY29uc2VudXNcIlxuICAgICAgQG1vZGVsLmFkZCBzZXFcbiAgICAgIEBtb2RlbC5zZXRSZWYgc2VxXG4gICAgICBAbW9kZWwuY29tcGFyYXRvciA9IChzZXEpIC0+XG4gICAgICAgIG5vdCBzZXEuZ2V0IFwicmVmXCJcbiAgICAgIEBtb2RlbC5zb3J0KClcblxuICAgIEBhZGROb2RlIFwiQ2FsYyBUcmVlXCIsIC0+XG4gICAgICAjIHRoaXMgaXMgYSB2ZXJ5IGV4cGVyaW1lbnRhbCBmZWF0dXJlXG4gICAgICAjIFRPRE86IGV4Y2x1ZGUgbXNhICYgdG50IGluIHRoZSBhZGFwdGVyIHBhY2thZ2VcbiAgICAgIG5ld2lja1N0ciA9IFwiXCJcblxuICAgICAgY2JzID0gTG9hZGVyLmpvaW5DYiAtPlxuICAgICAgICBtc2EudS50cmVlLnNob3dUcmVlIG53a0RhdGFcbiAgICAgICwgMiwgQFxuXG4gICAgICBtc2EudS50cmVlLmxvYWRUcmVlIGNic1xuICAgICAgIyBsb2FkIGZha2UgdHJlZVxuICAgICAgbndrRGF0YSA9XG4gICAgICAgIG5hbWU6IFwicm9vdFwiLFxuICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgIG5hbWU6IFwiYzFcIixcbiAgICAgICAgICBicmFuY2hfbGVuZ3RoOiA0XG4gICAgICAgICAgY2hpbGRyZW46IG1zYS5zZXFzLmZpbHRlciAoZixpKSAtPiAgaSAlIDIgaXMgMFxuICAgICAgICAsXG4gICAgICAgICAgbmFtZTogXCJjMlwiLFxuICAgICAgICAgIGNoaWxkcmVuOiBtc2Euc2Vxcy5maWx0ZXIgKGYsaSkgLT4gIGkgJSAyIGlzIDFcbiAgICAgICAgICBicmFuY2hfbGVuZ3RoOiA0XG4gICAgICAgIF1cbiAgICAgIG1zYS5zZXFzLmVhY2ggKHMpIC0+XG4gICAgICAgIHMuc2V0IFwiYnJhbmNoX2xlbmd0aFwiLCAyXG4gICAgICBjYnMoKVxuXG4gICAgQGFkZE5vZGUgXCJJbmNyZWFzZSBmb250IHNpemVcIiwgPT5cbiAgICAgIGNvbHVtbldpZHRoID0gIEBnLnpvb21lci5nZXQoXCJjb2x1bW5XaWR0aFwiKVxuICAgICAgbkNvbHVtbldpZHRoID0gY29sdW1uV2lkdGggKyA1XG4gICAgICBAZy56b29tZXIuc2V0IFwiY29sdW1uV2lkdGhcIiwgIG5Db2x1bW5XaWR0aFxuICAgICAgQGcuem9vbWVyLnNldCBcInJvd0hlaWdodFwiLCBuQ29sdW1uV2lkdGhcbiAgICAgIG5Gb250U2l6ZSA9IG5Db2x1bW5XaWR0aCAqIDAuN1xuICAgICAgQGcuem9vbWVyLnNldCBcInJlc2lkdWVGb250XCIsIG5Gb250U2l6ZVxuICAgICAgQGcuem9vbWVyLnNldCBcImxhYmVsRm9udFNpemVcIiwgIG5Gb250U2l6ZVxuICAgIEBhZGROb2RlIFwiRGVjcmVhc2UgZm9udCBzaXplXCIsID0+XG4gICAgICBjb2x1bW5XaWR0aCA9ICBAZy56b29tZXIuZ2V0KFwiY29sdW1uV2lkdGhcIilcbiAgICAgIG5Db2x1bW5XaWR0aCA9IGNvbHVtbldpZHRoIC0gMlxuICAgICAgQGcuem9vbWVyLnNldCBcImNvbHVtbldpZHRoXCIsICBuQ29sdW1uV2lkdGhcbiAgICAgIEBnLnpvb21lci5zZXQgXCJyb3dIZWlnaHRcIiwgbkNvbHVtbldpZHRoXG4gICAgICBuRm9udFNpemUgPSBuQ29sdW1uV2lkdGggKiAwLjZcbiAgICAgIEBnLnpvb21lci5zZXQgXCJyZXNpZHVlRm9udFwiLCBuRm9udFNpemVcbiAgICAgIEBnLnpvb21lci5zZXQgXCJsYWJlbEZvbnRTaXplXCIsICBuRm9udFNpemVcblxuICAgICAgaWYgQGcuem9vbWVyLmdldChcImNvbHVtbldpZHRoXCIpIDwgOFxuICAgICAgICBAZy56b29tZXIuc2V0IFwidGV4dFZpc2libGVcIiwgZmFsc2VcblxuICAgIEBhZGROb2RlIFwiTWluaW1pemVkIHdpZHRoXCIsID0+XG4gICAgICBAZy56b29tZXIuc2V0IFwiYWxpZ25tZW50V2lkdGhcIiwgNjAwXG4gICAgQGFkZE5vZGUgXCJNaW5pbWl6ZWQgaGVpZ2h0XCIsID0+XG4gICAgICBAZy56b29tZXIuc2V0IFwiYWxpZ25tZW50SGVpZ2h0XCIsIDEyMFxuXG4gICAgQGFkZE5vZGUgXCJKdW1wIHRvIGEgY29sdW1uXCIsID0+XG4gICAgICBvZmZzZXQgPSBwcm9tcHQgXCJDb2x1bW5cIiwgXCIyMFwiXG4gICAgICBpZiBvZmZzZXQgPCAwIG9yIG9mZnNldCA+IEBtb2RlbC5nZXRNYXhMZW5ndGgoKSBvciBpc05hTihvZmZzZXQpXG4gICAgICAgIGFsZXJ0IFwiaW52YWxpZCBjb2x1bW5cIlxuICAgICAgICByZXR1cm5cbiAgICAgIEBnLnpvb21lci5zZXRMZWZ0T2Zmc2V0KG9mZnNldClcblxuICAgIEBlbC5hcHBlbmRDaGlsZCBAYnVpbGRET00oKVxuICAgIEBcbiIsIk1lbnVCdWlsZGVyID0gcmVxdWlyZSBcIi4uL21lbnVidWlsZGVyXCJcbl8gPSByZXF1aXJlIFwidW5kZXJzY29yZVwiXG5cbm1vZHVsZS5leHBvcnRzID0gRmlsdGVyTWVudSA9IE1lbnVCdWlsZGVyLmV4dGVuZFxuXG4gIGluaXRpYWxpemU6IChkYXRhKSAtPlxuICAgIEBnID0gZGF0YS5nXG4gICAgQGVsLnN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiXG5cbiAgcmVuZGVyOiAtPlxuICAgIEBzZXROYW1lKFwiRmlsdGVyXCIpXG4gICAgQGFkZE5vZGUgXCJIaWRlIGNvbHVtbnMgYnkgdGhyZXNob2xkXCIsKGUpID0+XG4gICAgICB0aHJlc2hvbGQgPSBwcm9tcHQgXCJFbnRlciB0aHJlc2hvbGQgKGluIHBlcmNlbnQpXCIsIDIwXG4gICAgICB0aHJlc2hvbGQgPSB0aHJlc2hvbGQgLyAxMDBcbiAgICAgIG1heExlbiA9IEBtb2RlbC5nZXRNYXhMZW5ndGgoKVxuICAgICAgaGlkZGVuID0gW11cbiAgICAgICMgVE9ETzogY2FjaGUgdGhpcyB2YWx1ZVxuICAgICAgY29uc2VydiA9IEBnLnN0YXRzLnNjYWxlKEBnLnN0YXRzLmNvbnNlcnZhdGlvbigpKVxuICAgICAgZm9yIGkgaW4gWzAuLiBtYXhMZW4gLSAxXVxuICAgICAgICBpZiBjb25zZXJ2W2ldIDwgdGhyZXNob2xkXG4gICAgICAgICAgaGlkZGVuLnB1c2ggaVxuICAgICAgQGcuY29sdW1ucy5zZXQgXCJoaWRkZW5cIiwgaGlkZGVuXG5cbiAgICBAYWRkTm9kZSBcIkhpZGUgY29sdW1ucyBieSBzZWxlY3Rpb25cIiwgPT5cbiAgICAgIGhpZGRlbk9sZCA9IEBnLmNvbHVtbnMuZ2V0IFwiaGlkZGVuXCJcbiAgICAgIGhpZGRlbiA9IGhpZGRlbk9sZC5jb25jYXQgQGcuc2VsY29sLmdldEFsbENvbHVtbkJsb2NrcyBtYXhMZW46IEBtb2RlbC5nZXRNYXhMZW5ndGgoKSwgd2l0aFBvczogdHJ1ZVxuICAgICAgQGcuc2VsY29sLnJlc2V0IFtdXG4gICAgICBAZy5jb2x1bW5zLnNldCBcImhpZGRlblwiLCBoaWRkZW5cblxuICAgIEBhZGROb2RlIFwiSGlkZSBjb2x1bW5zIGJ5IGdhcHNcIiwgPT5cbiAgICAgIHRocmVzaG9sZCA9IHByb21wdCBcIkVudGVyIHRocmVzaG9sZCAoaW4gcGVyY2VudClcIiwgMjBcbiAgICAgIHRocmVzaG9sZCA9IHRocmVzaG9sZCAvIDEwMFxuICAgICAgbWF4TGVuID0gQG1vZGVsLmdldE1heExlbmd0aCgpXG4gICAgICBoaWRkZW4gPSBbXVxuICAgICAgZm9yIGkgaW4gWzAuLiBtYXhMZW4gLSAxXVxuICAgICAgICBnYXBzID0gMFxuICAgICAgICB0b3RhbCA9IDBcbiAgICAgICAgQG1vZGVsLmVhY2ggKGVsKSAtPlxuICAgICAgICAgIGdhcHMrKyBpZiBlbC5nZXQoJ3NlcScpW2ldIGlzIFwiLVwiXG4gICAgICAgICAgdG90YWwrK1xuICAgICAgICBnYXBDb250ZW50ID0gZ2FwcyAvIHRvdGFsXG4gICAgICAgIGlmIGdhcENvbnRlbnQgPiB0aHJlc2hvbGRcbiAgICAgICAgICBoaWRkZW4ucHVzaCBpXG4gICAgICBAZy5jb2x1bW5zLnNldCBcImhpZGRlblwiLCBoaWRkZW5cblxuICAgIEBhZGROb2RlIFwiSGlkZSBzZXFzIGJ5IGlkZW50aXR5XCIsID0+XG4gICAgICB0aHJlc2hvbGQgPSBwcm9tcHQgXCJFbnRlciB0aHJlc2hvbGQgKGluIHBlcmNlbnQpXCIsIDIwXG4gICAgICB0aHJlc2hvbGQgPSB0aHJlc2hvbGQgLyAxMDBcbiAgICAgIEBtb2RlbC5lYWNoIChlbCkgLT5cbiAgICAgICAgaWYgZWwuZ2V0KCdpZGVudGl0eScpIDwgdGhyZXNob2xkXG4gICAgICAgICAgZWwuc2V0KCdoaWRkZW4nLCB0cnVlKVxuXG4gICAgQGFkZE5vZGUgXCJIaWRlIHNlcXMgYnkgc2VsZWN0aW9uXCIsID0+XG4gICAgICBoaWRkZW4gPSBAZy5zZWxjb2wud2hlcmUgdHlwZTogXCJyb3dcIlxuICAgICAgaWRzID0gXy5tYXAgaGlkZGVuLCAoZWwpIC0+IGVsLmdldCgnc2VxSWQnKVxuICAgICAgQGcuc2VsY29sLnJlc2V0IFtdXG4gICAgICBAbW9kZWwuZWFjaCAoZWwpIC0+XG4gICAgICAgIGlmIGlkcy5pbmRleE9mKGVsLmdldCgnaWQnKSkgPj0gMFxuICAgICAgICAgIGVsLnNldCgnaGlkZGVuJywgdHJ1ZSlcblxuICAgIEBhZGROb2RlIFwiSGlkZSBzZXFzIGJ5IGdhcHNcIiwgPT5cbiAgICAgIHRocmVzaG9sZCA9IHByb21wdCBcIkVudGVyIHRocmVzaG9sZCAoaW4gcGVyY2VudClcIiwgNDBcbiAgICAgIEBtb2RlbC5lYWNoIChlbCxpKSAtPlxuICAgICAgICBzZXEgPSBlbC5nZXQoJ3NlcScpXG4gICAgICAgIGdhcHMgPSBfLnJlZHVjZSBzZXEsICgobWVtbywgYykgLT4gbWVtbysrIGlmIGMgaXMgJy0nO21lbW8pLDBcbiAgICAgICAgaWYgZ2FwcyA+ICB0aHJlc2hvbGRcbiAgICAgICAgICBlbC5zZXQoJ2hpZGRlbicsIHRydWUpXG5cbiAgICBAYWRkTm9kZSBcIlJlc2V0XCIsID0+XG4gICAgICBAZy5jb2x1bW5zLnNldCBcImhpZGRlblwiLCBbXVxuICAgICAgQG1vZGVsLmVhY2ggKGVsKSAtPlxuICAgICAgICBpZiBlbC5nZXQoJ2hpZGRlbicpXG4gICAgICAgICAgZWwuc2V0KCdoaWRkZW4nLCBmYWxzZSlcblxuICAgIEBlbC5hcHBlbmRDaGlsZCBAYnVpbGRET00oKVxuICAgIEBcbiIsIk1lbnVCdWlsZGVyID0gcmVxdWlyZSBcIi4uL21lbnVidWlsZGVyXCJcblxubW9kdWxlLmV4cG9ydHMgPSBIZWxwTWVudSA9IE1lbnVCdWlsZGVyLmV4dGVuZFxuXG4gIGluaXRpYWxpemU6IChkYXRhKSAtPlxuICAgIEBnID0gZGF0YS5nXG5cbiAgcmVuZGVyOiAtPlxuICAgIEBzZXROYW1lKFwiSGVscFwiKVxuICAgIEBhZGROb2RlIFwiQWJvdXQgdGhlIHByb2plY3RcIiwgPT5cbiAgICAgIHdpbmRvdy5vcGVuIFwiaHR0cHM6Ly9naXRodWIuY29tL2dyZWVuaWZ5L21zYVwiXG4gICAgQGFkZE5vZGUgXCJSZXBvcnQgaXNzdWVzXCIsID0+XG4gICAgICB3aW5kb3cub3BlbiBcImh0dHBzOi8vZ2l0aHViLmNvbS9ncmVlbmlmeS9tc2EvaXNzdWVzXCJcbiAgICBAYWRkTm9kZSBcIlVzZXIgbWFudWFsXCIsID0+XG4gICAgICB3aW5kb3cub3BlbiBcImh0dHBzOi8vZ2l0aHViLmNvbS9ncmVlbmlmeS9tc2Evd2lraVwiXG4gICAgQGVsLnN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiXG4gICAgQGVsLmFwcGVuZENoaWxkIEBidWlsZERPTSgpXG4gICAgQFxuIiwiTWVudUJ1aWxkZXIgPSByZXF1aXJlIFwiLi4vbWVudWJ1aWxkZXJcIlxuayA9IHJlcXVpcmUoXCJrb2FsYS1qc1wiKVxuXG5tb2R1bGUuZXhwb3J0cyA9IEltcG9ydE1lbnUgPSBNZW51QnVpbGRlci5leHRlbmRcblxuICBpbml0aWFsaXplOiAoZGF0YSkgLT5cbiAgICBAZyA9IGRhdGEuZ1xuICAgIEBlbC5zdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIlxuICAgIEBtc2EgPSBkYXRhLm1zYVxuXG4gIHJlbmRlcjogLT5cbiAgICBtc2EgPSBAbXNhXG4gICAgdXBsb2FkZXIgPSBrLm1rIFwiaW5wdXRcIlxuICAgIHVwbG9hZGVyLnR5cGUgPSBcImZpbGVcIlxuICAgIHVwbG9hZGVyLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIlxuICAgICN1cGxvYWRlci5hY2NlcHRcbiAgICAjIGh0dHA6Ly93d3cudzNzY2hvb2xzLmNvbS9qc3JlZi9wcm9wX2ZpbGV1cGxvYWRfYWNjZXB0LmFzcFxuICAgICMgZm9yIG5vdyB3ZSBhbGxvdyBtdWx0aXBsZSBmaWxlc1xuICAgIHVwbG9hZGVyLm11bHRpcGxlID0gdHJ1ZVxuICAgIHVwbG9hZGVyLmFkZEV2ZW50TGlzdGVuZXIgXCJjaGFuZ2VcIiwgLT5cbiAgICAgIGZpbGVzID0gdXBsb2FkZXIuZmlsZXMgfHwgW11cbiAgICAgIG1zYS51LmZpbGUuaW1wb3J0RmlsZXMgZmlsZXNcblxuICAgIEBlbC5hcHBlbmRDaGlsZCB1cGxvYWRlclxuXG4gICAgQHNldE5hbWUoXCJJbXBvcnRcIilcbiAgICBAYWRkTm9kZSBcIlVSTFwiLChlKSA9PlxuICAgICAgdXJsID0gcHJvbXB0IFwiVVJMXCIsXG4gICAgICBcImh0dHA6Ly9yb3N0bGFiLm9yZy9+Z29sZGJlcmcvY2x1c3RhbHcyLUkyMDE0MDgxOC0yMTUyNDktMDU1Ni01MzY5OTg3OC1wZy5jbHVzdGFsd1wiXG4gICAgICBAbXNhLnUuZmlsZS5pbXBvcnRVUkwgdXJsLCAtPlxuICAgICAgICAjIG1hc3MgdXBkYXRlIG9uIHpvb21lclxuICAgICAgICAjem9vbWVyID0gQGcuem9vbWVyLnRvSlNPTigpXG4gICAgICAgICMjem9vbWVyLnRleHRWaXNpYmxlID0gZmFsc2VcbiAgICAgICAgIyN6b29tZXIuY29sdW1uV2lkdGggPSA0XG4gICAgICAgICN6b29tZXIuYm94UmVjdEhlaWdodCA9IDJcbiAgICAgICAgI3pvb21lci5ib3hSZWN0V2lkdGggPSAyXG4gICAgICAgICNAZy56b29tZXIuc2V0IHpvb21lclxuXG4gICAgQGFkZE5vZGUgXCJGcm9tIGZpbGVcIiwgPT5cbiAgICAgIHVwbG9hZGVyLmNsaWNrKClcblxuICAgIEBhZGROb2RlIFwiRHJhZyAmIERyb3BcIiwgPT5cbiAgICAgIGFsZXJ0IFwiWWVwLiBKdXN0IGRyYWcgJiBkcm9wIHlvdXIgZmlsZVwiXG5cbiAgICBAZWwuYXBwZW5kQ2hpbGQgQGJ1aWxkRE9NKClcbiAgICBAXG4iLCJNZW51QnVpbGRlciA9IHJlcXVpcmUgXCIuLi9tZW51YnVpbGRlclwiXG5kb20gPSByZXF1aXJlIFwiZG9tLWhlbHBlclwiXG5fID0gcmVxdWlyZSgndW5kZXJzY29yZScpXG5cbm1vZHVsZS5leHBvcnRzID0gT3JkZXJpbmdNZW51ID0gTWVudUJ1aWxkZXIuZXh0ZW5kXG5cbiAgaW5pdGlhbGl6ZTogKGRhdGEpIC0+XG4gICAgQGcgPSBkYXRhLmdcbiAgICBAb3JkZXIgPSBcIklEXCJcbiAgICBAZWwuc3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCJcblxuICBzZXRPcmRlcjogKG9yZGVyKSAtPlxuICAgIEBvcmRlciA9IG9yZGVyXG4gICAgQHJlbmRlcigpXG5cbiAgIyBUT0RPOiBtYWtlIG1vcmUgZ2VuZXJpY1xuICByZW5kZXI6IC0+XG4gICAgQHNldE5hbWUoXCJPcmRlcmluZ1wiKVxuICAgIEByZW1vdmVBbGxOb2RlcygpXG5cbiAgICBjb21wcyA9IEBnZXRDb21wYXJhdG9ycygpXG4gICAgZm9yIG0gaW4gY29tcHNcbiAgICAgIEBfYWRkTm9kZSBtXG5cbiAgICBlbCA9IEBidWlsZERPTSgpXG5cbiAgICAjIFRPRE86IG1ha2UgbW9yZSBlZmZpY2llbnRcbiAgICBkb20ucmVtb3ZlQWxsQ2hpbGRzIEBlbFxuICAgIEBlbC5hcHBlbmRDaGlsZCBlbFxuICAgIEBcblxuICBfYWRkTm9kZTogKG0pIC0+XG4gICAgdGV4dCA9IG0udGV4dFxuICAgIHN0eWxlID0ge31cbiAgICBpZiB0ZXh0IGlzIEBvcmRlclxuICAgICAgc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCIjNzdFRDgwXCJcbiAgICBAYWRkTm9kZSB0ZXh0LCA9PlxuICAgICAgbS5wcmVjb2RlKCkgaWYgbS5wcmVjb2RlP1xuICAgICAgQG1vZGVsLmNvbXBhcmF0b3IgPSBtLmNvbXBhcmF0b3JcbiAgICAgIEBtb2RlbC5zb3J0KClcbiAgICAgIEBzZXRPcmRlciBtLnRleHRcbiAgICAsXG4gICAgICBzdHlsZTogc3R5bGVcblxuICBnZXRDb21wYXJhdG9yczogLT5cbiAgICBtb2RlbHMgPSBbXVxuXG5cbiAgICBtb2RlbHMucHVzaCB0ZXh0OiBcIklEXCIsIGNvbXBhcmF0b3I6IFwiaWRcIlxuXG4gICAgbW9kZWxzLnB1c2ggdGV4dDogXCJJRCBEZXNjXCIsIGNvbXBhcmF0b3I6IChhLCBiKSAtPlxuICAgICAgIyBhdXRvIGNvbnZlcnRzIHRvIHN0cmluZyBmb3IgbG9jYWxlQ29tcGFyZVxuICAgICAgICAtIChcIlwiICsgYS5nZXQoXCJpZFwiKSkubG9jYWxlQ29tcGFyZShcIlwiICsgYi5nZXQoXCJpZFwiKSwgW10sIG51bWVyaWM6IHRydWUgKVxuXG4gICAgbW9kZWxzLnB1c2ggdGV4dDogXCJMYWJlbFwiLCBjb21wYXJhdG9yOiBcIm5hbWVcIlxuXG4gICAgbW9kZWxzLnB1c2ggdGV4dDogXCJMYWJlbCBEZXNjXCIsIGNvbXBhcmF0b3I6IChhLCBiKSAtPlxuICAgICAgICAtIGEuZ2V0KFwibmFtZVwiKS5sb2NhbGVDb21wYXJlKGIuZ2V0KFwibmFtZVwiKSlcblxuICAgIG1vZGVscy5wdXNoIHRleHQ6IFwiU2VxXCIsIGNvbXBhcmF0b3I6IFwic2VxXCJcblxuICAgIG1vZGVscy5wdXNoIHRleHQ6IFwiU2VxIERlc2NcIiwgY29tcGFyYXRvcjogKGEsYikgLT5cbiAgICAgICAgLSBhLmdldChcInNlcVwiKS5sb2NhbGVDb21wYXJlKGIuZ2V0KFwic2VxXCIpKVxuXG4gICAgc2V0SWRlbnQgPSA9PlxuICAgICAgQGlkZW50ID0gQGcuc3RhdHMuaWRlbnRpdHkoKVxuXG4gICAgbW9kZWxzLnB1c2ggdGV4dDogXCJJZGVudGl0eVwiLCBjb21wYXJhdG9yOiAoYSxiKSA9PlxuICAgICAgdmFsID0gQGlkZW50W2EuaWRdIC0gQGlkZW50W2IuaWRdXG4gICAgICByZXR1cm4gMSBpZiB2YWwgPiAwXG4gICAgICByZXR1cm4gLTEgaWYgdmFsIDwgMFxuICAgICAgMFxuICAgICwgcHJlY29kZTogc2V0SWRlbnRcblxuICAgIG1vZGVscy5wdXNoIHRleHQ6IFwiSWRlbnRpdHkgRGVzY1wiLCBjb21wYXJhdG9yOiAoYSxiKSA9PlxuICAgICAgdmFsID0gQGlkZW50W2EuaWRdIC0gQGlkZW50W2IuaWRdXG4gICAgICByZXR1cm4gLTEgaWYgdmFsID4gMFxuICAgICAgcmV0dXJuIDEgaWYgdmFsIDwgMFxuICAgICAgMFxuICAgICwgcHJlY29kZTogc2V0SWRlbnRcblxuICAgIG1vZGVscy5wdXNoIHRleHQ6IFwiUmVmZXJlbmNlXCIsIGNvbXBhcmF0b3I6IChzZXEpIC0+XG4gICAgICAgIG5vdCBzZXEuZ2V0IFwicmVmXCJcblxuICAgIG1vZGVscy5wdXNoIHRleHQ6IFwiUGFydGl0aW9uIGNvZGVzXCIsIGNvbXBhcmF0b3I6IFwicGFydGl0aW9uXCIsIHByZWNvZGU6ID0+XG4gICAgICAjIHNldCBwYXJ0aXRpb25zIHJhbmRvbVxuICAgICAgQGcudmlzLnNldCgnbGFiZWxQYXJ0aXRpb24nLCB0cnVlKVxuICAgICAgQG1vZGVsLmVhY2ggKGVsKSAtPlxuICAgICAgICBlbC5zZXQoJ3BhcnRpdGlvbicsIF8ucmFuZG9tKDEsMykpXG5cblxuICAgIHJldHVybiBtb2RlbHNcbiIsIk1lbnVCdWlsZGVyID0gcmVxdWlyZSBcIi4uL21lbnVidWlsZGVyXCJcblxubW9kdWxlLmV4cG9ydHMgPSBTZWxlY3Rpb25NZW51ID0gTWVudUJ1aWxkZXIuZXh0ZW5kXG5cbiAgaW5pdGlhbGl6ZTogKGRhdGEpIC0+XG4gICAgQGcgPSBkYXRhLmdcbiAgICBAZWwuc3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCJcblxuICByZW5kZXI6IC0+XG4gICAgQHNldE5hbWUoXCJTZWxlY3Rpb25cIilcbiAgICBAYWRkTm9kZSBcIkZpbmQgTW90aWYgKHN1cHBvcnRzIFJlZ0V4KVwiLCA9PlxuICAgICAgc2VhcmNoID0gcHJvbXB0IFwieW91ciBzZWFyY2hcIiwgXCJEXCJcbiAgICAgIEBnLnVzZXIuc2V0IFwic2VhcmNoVGV4dFwiLCBzZWFyY2hcblxuICAgIEBhZGROb2RlIFwiSW52ZXJ0IGNvbHVtbnNcIiwgPT5cbiAgICAgIEBnLnNlbGNvbC5pbnZlcnRDb2wgWzAuLkBtb2RlbC5nZXRNYXhMZW5ndGgoKV1cbiAgICBAYWRkTm9kZSBcIkludmVydCByb3dzXCIsID0+XG4gICAgICBAZy5zZWxjb2wuaW52ZXJ0Um93IEBtb2RlbC5wbHVjayBcImlkXCJcbiAgICBAYWRkTm9kZSBcIlJlc2V0XCIsID0+XG4gICAgICBAZy5zZWxjb2wucmVzZXQoKVxuICAgIEBlbC5hcHBlbmRDaGlsZCBAYnVpbGRET00oKVxuICAgIEBcbiIsIk1lbnVCdWlsZGVyID0gcmVxdWlyZSBcIi4uL21lbnVidWlsZGVyXCJcbmRvbSA9IHJlcXVpcmUgXCJkb20taGVscGVyXCJcblxubW9kdWxlLmV4cG9ydHMgPSBWaXNNZW51ID0gTWVudUJ1aWxkZXIuZXh0ZW5kXG5cbiAgaW5pdGlhbGl6ZTogKGRhdGEpIC0+XG4gICAgQGcgPSBkYXRhLmdcbiAgICBAZWwuc3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCJcbiAgICBAbGlzdGVuVG8gQGcudmlzLCBcImNoYW5nZVwiLCBAcmVuZGVyXG5cbiAgcmVuZGVyOiAtPlxuICAgIEByZW1vdmVBbGxOb2RlcygpXG4gICAgQHNldE5hbWUoXCJWaXMuZWxlbWVudHNcIilcblxuICAgIHZpc0VsZW1lbnRzID0gQGdldFZpc0VsZW1lbnRzKClcbiAgICBmb3IgdmlzRWwgaW4gdmlzRWxlbWVudHNcbiAgICAgIEBfYWRkVmlzRWwgdmlzRWxcblxuICAgICMgb3RoZXJcbiAgICBAYWRkTm9kZSBcIlJlc2V0XCIsID0+XG4gICAgICBAZy52aXMuc2V0IFwibGFiZWxzXCIsIHRydWVcbiAgICAgIEBnLnZpcy5zZXQgXCJzZXF1ZW5jZXNcIiwgdHJ1ZVxuICAgICAgQGcudmlzLnNldCBcIm1ldGFjZWxsXCIsIHRydWVcbiAgICAgIEBnLnZpcy5zZXQgXCJjb25zZXJ2XCIsIHRydWVcbiAgICAgIEBnLnZpcy5zZXQgXCJsYWJlbElkXCIsIHRydWVcbiAgICAgIEBnLnZpcy5zZXQgXCJsYWJlbE5hbWVcIiwgdHJ1ZVxuICAgICAgQGcudmlzLnNldCBcImxhYmVsQ2hlY2tib3hcIiwgZmFsc2VcbiAgICAgIEBnLnZpcy5zZXQgXCJzZXFsb2dvXCIsIGZhbHNlXG4gICAgICBAZy52aXMuc2V0IFwiZ2FwSGVhZGVyXCIsIGZhbHNlXG4gICAgICBAZy52aXMuc2V0IFwibGVmdEhlYWRlclwiLCB0cnVlXG4gICAgICBAZy52aXMuc2V0IFwibWV0YUdhcHNcIiwgdHJ1ZVxuICAgICAgQGcudmlzLnNldCBcIm1ldGFJZGVudGl0eVwiLCB0cnVlXG4gICAgICBAZy52aXMuc2V0IFwibWV0YUxpbmtzXCIsIHRydWVcblxuICAgICMgVE9ETzogbWFrZSBtb3JlIGVmZmljaWVudFxuICAgIGRvbS5yZW1vdmVBbGxDaGlsZHMgQGVsXG4gICAgQGVsLmFwcGVuZENoaWxkIEBidWlsZERPTSgpXG4gICAgQFxuXG4gIF9hZGRWaXNFbDogKHZpc0VsKSAtPlxuICAgIHN0eWxlID0ge31cblxuICAgIGlmIEBnLnZpcy5nZXQgdmlzRWwuaWRcbiAgICAgIHByZSA9IFwiSGlkZSBcIlxuICAgICAgc3R5bGUuY29sb3IgPSBcInJlZFwiXG4gICAgZWxzZVxuICAgICAgcHJlID0gXCJTaG93IFwiXG4gICAgICBzdHlsZS5jb2xvciA9IFwiZ3JlZW5cIlxuXG4gICAgQGFkZE5vZGUgKHByZSArIHZpc0VsLm5hbWUpLCA9PlxuICAgICAgQGcudmlzLnNldCB2aXNFbC5pZCwgISBAZy52aXMuZ2V0IHZpc0VsLmlkXG4gICAgLFxuICAgICAgc3R5bGU6IHN0eWxlXG5cbiAgZ2V0VmlzRWxlbWVudHM6IC0+XG4gICAgdmlzID0gW11cbiAgICB2aXMucHVzaCBuYW1lOiBcIk1hcmtlcnNcIiwgaWQ6IFwibWFya2Vyc1wiXG4gICAgdmlzLnB1c2ggbmFtZTogXCJMYWJlbHNcIiwgaWQ6IFwibGFiZWxzXCJcbiAgICAjdmlzLnB1c2ggbmFtZTogXCJTZXF1ZW5jZXNcIiwgaWQ6IFwic2VxdWVuY2VzXCJcbiAgICB2aXMucHVzaCBuYW1lOiBcIk1ldGEgaW5mb1wiLCBpZDogXCJtZXRhY2VsbFwiXG4gICAgdmlzLnB1c2ggbmFtZTogXCJPdmVydmlld2JveFwiLCBpZDogXCJvdmVydmlld2JveFwiXG4gICAgdmlzLnB1c2ggbmFtZTogXCJDb25zZXJ2XCIsIGlkOiBcImNvbnNlcnZcIlxuICAgIHZpcy5wdXNoIG5hbWU6IFwiU2VxLiBsb2dvXCIsIGlkOiBcInNlcWxvZ29cIlxuICAgIHZpcy5wdXNoIG5hbWU6IFwiR2FwIEhlYWRlclwiLCBpZDogXCJnYXBIZWFkZXJcIlxuICAgIHZpcy5wdXNoIG5hbWU6IFwiTGVmdCBoZWFkZXJcIiwgaWQ6IFwibGVmdEhlYWRlclwiXG4gICAgdmlzLnB1c2ggbmFtZTogXCJMYWJlbCBuYW1lXCIsIGlkOiBcImxhYmVsTmFtZVwiXG4gICAgdmlzLnB1c2ggbmFtZTogXCJMYWJlbCBpZFwiLCBpZDogXCJsYWJlbElkXCJcbiAgICB2aXMucHVzaCBuYW1lOiBcIkxhYmVsIGNoZWNrYm94XCIsIGlkOiBcImxhYmVsQ2hlY2tib3hcIlxuICAgIHZpcy5wdXNoIG5hbWU6IFwiTWV0YSBnYXBzXCIsIGlkOiBcIm1ldGFHYXBzXCJcbiAgICB2aXMucHVzaCBuYW1lOiBcIk1ldGEgaWRlbnRpdHlcIiwgaWQ6IFwibWV0YUlkZW50aXR5XCJcbiAgICB2aXMucHVzaCBuYW1lOiBcIk1ldGEgbGlua3NcIiwgaWQ6IFwibWV0YUxpbmtzXCJcbiAgICByZXR1cm4gdmlzXG4iLCJGZWF0dXJlID0gcmVxdWlyZSBcIi4vRmVhdHVyZVwiXG5Nb2RlbCA9IHJlcXVpcmUoXCJiYWNrYm9uZS10aGluXCIpLk1vZGVsXG5cbm1vZHVsZS5leHBvcnRzID0gRmVhdHVyZSA9IE1vZGVsLmV4dGVuZFxuXG4gIGRlZmF1bHRzOlxuICAgIHhTdGFydDogLTFcbiAgICB4RW5kOiAtMVxuICAgIGhlaWdodDogLTFcbiAgICB0ZXh0OiBcIlwiXG4gICAgZmlsbENvbG9yOiBcInJlZFwiXG4gICAgZmlsbE9wYWNpdHk6IDAuNVxuICAgIHR5cGU6IFwicmVjdGFuZ2xlXCJcbiAgICBib3JkZXJTaXplOiAxXG4gICAgYm9yZGVyQ29sb3I6IFwiYmxhY2tcIlxuICAgIGJvcmRlck9wYWNpdHk6IDAuNVxuICAgIHZhbGlkYXRlOiB0cnVlXG4gICAgcm93OiAwXG5cbiAgaW5pdGlhbGl6ZTogKG9iaikgLT5cbiAgICBpZiBvYmouc3RhcnQ/XG4gICAgICBAc2V0IFwieFN0YXJ0XCIsIG9iai5zdGFydFxuICAgIGlmIG9iai5lbmQ/XG4gICAgICBAc2V0IFwieEVuZFwiLCBvYmouZW5kXG4gICAgIyBuYW1lIGhhcyBhIHByZWRlZmluZWQgbWVhbmluZ1xuICAgIGlmIG9iai5hdHRyaWJ1dGVzP1xuICAgICAgaWYgb2JqLmF0dHJpYnV0ZXMuTmFtZT9cbiAgICAgICAgQHNldCBcInRleHRcIiwgb2JqLmF0dHJpYnV0ZXMuTmFtZVxuICAgICAgaWYgb2JqLmF0dHJpYnV0ZXMuQ29sb3I/XG4gICAgICAgIEBzZXQgXCJmaWxsQ29sb3JcIiwgb2JqLmF0dHJpYnV0ZXMuQ29sb3JcblxuICAgIGlmIEBhdHRyaWJ1dGVzLnhFbmQgPCBAYXR0cmlidXRlcy54U3RhcnRcbiAgICAgIGNvbnNvbGUud2FybiBcImludmFsaWQgZmVhdHVyZSByYW5nZSBmb3JcIiwgQGF0dHJpYnV0ZXNcblxuICAgIGlmIG5vdCBfLmlzTnVtYmVyKEBhdHRyaWJ1dGVzLnhTdGFydCkgb3Igbm90IF8uaXNOdW1iZXIoQGF0dHJpYnV0ZXMueEVuZClcbiAgICAgIGNvbnNvbGUud2FybiBcInBsZWFzZSBwcm92aWRlIG51bWVyaWMgZmVhdHVyZSByYW5nZXNcIiwgb2JqXG4gICAgICAjIHRyeWluZyBhdXRvLWNhc3RpbmdcbiAgICAgIEBzZXQgXCJ4U3RhcnRcIiwgcGFyc2VJbnQoQGF0dHJpYnV0ZXMueFN0YXJ0KVxuICAgICAgQHNldCBcInhFbmRcIiwgcGFyc2VJbnQoQGF0dHJpYnV0ZXMueEVuZClcblxuICB2YWxpZGF0ZTogLT5cbiAgICBpZiBpc05hTiBAYXR0cmlidXRlcy54U3RhcnQgb3IgaXNOYU4gQGF0dHJpYnV0ZXMueEVuZFxuICAgICAgXCJmZWF0dXJlcyBuZWVkIGludGVnZXIgc3RhcnQgYW5kIGVuZC5cIlxuXG4gIGNvbnRhaW5zOiAoaW5kZXgpIC0+XG4gICAgcmV0dXJuICBAYXR0cmlidXRlcy54U3RhcnQgPD0gaW5kZXggJiYgaW5kZXggPD0gQGF0dHJpYnV0ZXMueEVuZFxuXG4iLCJGZWF0dXJlID0gcmVxdWlyZSBcIi4vRmVhdHVyZVwiXG5Db2xsZWN0aW9uID0gcmVxdWlyZShcImJhY2tib25lLXRoaW5cIikuQ29sbGVjdGlvblxuXyA9IHJlcXVpcmUgXCJ1bmRlcnNjb3JlXCJcblxubW9kdWxlLmV4cG9ydHMgPSBGZWF0dXJlQ29sID0gQ29sbGVjdGlvbi5leHRlbmRcbiAgbW9kZWw6IEZlYXR1cmVcblxuICBjb25zdHJ1Y3RvcjogLT5cbiAgICBAc3RhcnRPbkNhY2hlID0gW11cbiAgICAjIGludmFsaWRhdGUgY2FjaGVcbiAgICBAb24gXCJhbGxcIiwgLT5cbiAgICAgIEBzdGFydE9uQ2FjaGUgPSBbXVxuICAgICwgQFxuICAgIENvbGxlY3Rpb24uYXBwbHkgQCwgYXJndW1lbnRzXG5cbiAgIyByZXR1cm5zIGFsbCBmZWF0dXJlcyBzdGFydGluZyBvbiBpbmRleFxuICBzdGFydE9uOiAoaW5kZXgpIC0+XG4gICAgdW5sZXNzIEBzdGFydE9uQ2FjaGVbaW5kZXhdP1xuICAgICAgQHN0YXJ0T25DYWNoZVtpbmRleF0gPSBAd2hlcmUoe3hTdGFydDogaW5kZXh9KVxuICAgIHJldHVybiBAc3RhcnRPbkNhY2hlW2luZGV4XVxuXG4gIGNvbnRhaW5zOiAoaW5kZXgpIC0+XG4gICAgQHJlZHVjZSAoZWwsbWVtbykgLT5cbiAgICAgIG1lbW8gfHwgZWwuY29udGFpbnMgaW5kZXhcbiAgICAsIGZhbHNlXG5cbiAgZ2V0RmVhdHVyZU9uUm93OiAocm93LHgpIC0+XG4gICAgQGZpbHRlciAoZWwpIC0+XG4gICAgICBlbC5nZXQoXCJyb3dcIikgaXMgcm93IGFuZCBlbC5nZXQoXCJ4U3RhcnRcIikgPD0geCBhbmQgeCA8PSBlbC5nZXQoXCJ4RW5kXCIpXG5cbiAgIyB0cmllcyB0byBhdXRvLWZpdCB0aGUgcm93c1xuICAjIG5vdCBhIHZlcnkgZWZmaWNpZW50IGFsZ29yaXRobVxuICBhc3NpZ25Sb3dzOiAtPlxuXG4gICAgbGVuID0gKEBtYXggKGVsKSAtPiBlbC5nZXQoXCJ4RW5kXCIpKS5hdHRyaWJ1dGVzLnhFbmRcbiAgICByb3dzID0gKDAgZm9yIHggaW4gWzAuLiBsZW5dKVxuXG4gICAgQGVhY2ggKGVsKSAtPlxuICAgICAgbWF4ID0gMFxuICAgICAgZm9yIHggaW4gW2VsLmdldChcInhTdGFydFwiKSAuLiBlbC5nZXQoXCJ4RW5kXCIpXSBieSAxXG4gICAgICAgIGlmIHJvd3NbeF0gPiBtYXhcbiAgICAgICAgICBtYXggPSByb3dzW3hdXG4gICAgICAgIHJvd3NbeF0rK1xuICAgICAgZWwuc2V0KFwicm93XCIsIG1heClcblxuICAgIF8ubWF4IHJvd3NcblxuICBnZXRDdXJyZW50SGVpZ2h0OiAtPlxuICAgIChAbWF4IChlbCkgLT4gZWwuZ2V0KFwicm93XCIpKS5hdHRyaWJ1dGVzLnJvdyArIDFcblxuICAjIGdpdmVzIHRoZSBtaW5pbWFsIG5lZWRlZCBudW1iZXIgb2Ygcm93c1xuICAjIG5vdCBhIHZlcnkgZWZmaWNpZW50IGFsZ29yaXRobVxuICAjICh0aGVyZSBpcyBvbmUgaW4gTyhuKSApXG4gIGdldE1pblJvd3M6IC0+XG5cbiAgICBsZW4gPSAoQG1heCAoZWwpIC0+IGVsLmdldChcInhFbmRcIikpLmF0dHJpYnV0ZXMueEVuZFxuICAgIHJvd3MgPSAoMCBmb3IgeCBpbiBbMC4uIGxlbl0pXG5cbiAgICBAZWFjaCAoZWwpIC0+XG4gICAgICBmb3IgeCBpbiBbZWwuZ2V0KFwieFN0YXJ0XCIpIC4uIGVsLmdldChcInhFbmRcIildIGJ5IDFcbiAgICAgICAgcm93c1t4XSsrXG5cbiAgICBfLm1heCByb3dzXG4iLCJTZXF1ZW5jZSA9IHJlcXVpcmUgXCIuL1NlcXVlbmNlXCJcbkZlYXR1cmVDb2wgPSByZXF1aXJlIFwiLi9GZWF0dXJlQ29sXCJcbkNvbGxlY3Rpb24gPSByZXF1aXJlKFwiYmFja2JvbmUtdGhpblwiKS5Db2xsZWN0aW9uXG5cbm1vZHVsZS5leHBvcnRzID0gU2VxTWFuYWdlciA9IENvbGxlY3Rpb24uZXh0ZW5kXG4gIG1vZGVsOiBTZXF1ZW5jZVxuXG4gIGNvbnN0cnVjdG9yOiAoc2VxcywgZykgLT5cbiAgICBDb2xsZWN0aW9uLmFwcGx5IEAsIGFyZ3VtZW50c1xuICAgIEBnID0gZ1xuXG4gICAgQG9uIFwiYWRkIHJlc2V0IHJlbW92ZVwiLCA9PlxuICAgICAgIyBpbnZhbGlkYXRlIGNhY2hlXG4gICAgICBAbGVuZ3RoQ2FjaGUgPSBudWxsXG4gICAgICBAX2JpbmRTZXFzV2l0aEZlYXR1cmVzKClcbiAgICAsIEBcblxuICAgICMgdXNlIHRoZSBmaXJzdCBzZXEgYXMgcmVmZXJlbmNlIGFzIGRlZmF1bHRcbiAgICBAb24gXCJyZXNldFwiLCA9PlxuICAgICAgQF9hdXRvU2V0UmVmU2VxKClcbiAgICBAX2F1dG9TZXRSZWZTZXEoKVxuXG4gICAgQGxlbmd0aENhY2hlID0gbnVsbFxuXG4gICAgQGZlYXR1cmVzID0ge31cbiAgICBAXG5cbiAgIyBnaXZlcyB0aGUgbWF4IGxlbmd0aCBvZiBhbGwgc2VxdWVuY2VzXG4gICMgKGNhY2hlZClcbiAgZ2V0TWF4TGVuZ3RoOiAoKSAtPlxuICAgIHJldHVybiAwIGlmIEBtb2RlbHMubGVuZ3RoIGlzIDBcbiAgICBpZiBAbGVuZ3RoQ2FjaGUgaXMgbnVsbFxuICAgICAgQGxlbmd0aENhY2hlID0gQG1heCgoc2VxKSAtPiBzZXEuZ2V0KFwic2VxXCIpLmxlbmd0aCkuZ2V0KFwic2VxXCIpLmxlbmd0aFxuICAgIHJldHVybiBAbGVuZ3RoQ2FjaGVcblxuICAjIGdldHMgdGhlIHByZXZpb3VzIG1vZGVsXG4gICMgQHBhcmFtIGVuZGxlc3MgW2Jvb2xlYW5dIGZvciB0aGUgZmlyc3QgZWxlbWVudFxuICAjIHRydWU6IHJldHVybnMgdGhlIGxhc3QgZWxlbWVudCwgZmFsc2U6IHJldHVybnMgdW5kZWZpbmVkXG4gIHByZXY6IChtb2RlbCwgZW5kbGVzcykgLT5cbiAgICBpbmRleCA9IEBpbmRleE9mKG1vZGVsKSAtIDFcbiAgICBpbmRleCA9IEAubGVuZ3RoIC0gMSBpZiBpbmRleCA8IDAgYW5kIGVuZGxlc3NcbiAgICBAYXQoaW5kZXgpXG5cbiAgIyBnZXRzIHRoZSBuZXh0IG1vZGVsXG4gICMgQHBhcmFtIGVuZGxlc3MgW2Jvb2xlYW5dIGZvciB0aGUgbGFzdCBlbGVtZW50XG4gICMgdHJ1ZTogcmV0dXJucyB0aGUgZmlyc3QgZWxlbWVudCwgZmFsc2U6IHJldHVybnMgdW5kZWZpbmVkXG4gIG5leHQ6IChtb2RlbCwgZW5kbGVzcykgLT5cbiAgICBpbmRleCA9IEBpbmRleE9mKG1vZGVsKSArIDFcbiAgICBpbmRleCA9IDAgaWYgaW5kZXggPT0gQC5sZW5ndGggYW5kIGVuZGxlc3NcbiAgICBAYXQoaW5kZXgpXG5cbiAgIyBAcmV0dXJucyBuIFtpbnRdIG51bWJlciBvZiBoaWRkZW4gY29sdW1ucyB1bnRpbCBuXG4gIGNhbGNIaWRkZW5TZXFzOiAobikgLT5cbiAgICBuTmV3ID0gblxuICAgIGZvciBpIGluIFswLi5uTmV3XVxuICAgICAgaWYgQGF0KGkpLmdldChcImhpZGRlblwiKVxuICAgICAgICBuTmV3KytcbiAgICBuTmV3IC0gblxuXG4gICMgeW91IGNhbiBhZGQgZmVhdHVyZXMgaW5kZXBlbmRlbnQgdG8gdGhlIGN1cnJlbnQgc2VxcyBhcyB0aGV5IG1heSBiZSBhZGRlZFxuICAjIGxhdGVyIChsYWdnaW5nIGNvbm5lY3Rpb24pXG4gIGFkZEZlYXR1cmVzOiAoZmVhdHVyZXMpIC0+XG4gICAgaWYgZmVhdHVyZXMuY29uZmlnP1xuICAgICAgb2JqID0gZmVhdHVyZXNcbiAgICAgIGZlYXR1cmVzID0gZmVhdHVyZXMuc2Vxc1xuICAgICAgaWYgb2JqLmNvbmZpZy5jb2xvcnM/XG4gICAgICAgIGNvbG9ycyA9IG9iai5jb25maWcuY29sb3JzXG4gICAgICAgIF8uZWFjaCBmZWF0dXJlcywgKHNlcSkgLT5cbiAgICAgICAgICBfLmVhY2ggc2VxLCAodmFsKSAtPlxuICAgICAgICAgICAgaWYgY29sb3JzW3ZhbC5mZWF0dXJlXT9cbiAgICAgICAgICAgICAgdmFsLmZpbGxDb2xvciA9IGNvbG9yc1t2YWwuZmVhdHVyZV1cbiAgICBpZiBfLmlzRW1wdHkgQGZlYXR1cmVzXG4gICAgICBAZmVhdHVyZXMgPSBmZWF0dXJlc1xuICAgIGVsc2VcbiAgICAgIF8uZWFjaCBmZWF0dXJlcywgKHZhbCwga2V5KSA9PlxuICAgICAgICB1bmxlc3MgQGZlYXR1cmVzLmhhc093blByb3BlcnR5IGtleVxuICAgICAgICAgIEBmZWF0dXJlc1trZXldID0gdmFsXG4gICAgICAgIGVsc2VcbiAgICAgICAgICBAZmVhdHVyZXNba2V5XSA9IF8udW5pb24gQGZlYXR1cmVzW2tleV0sIHZhbFxuICAgICMgcmVoYXNoXG4gICAgQF9iaW5kU2Vxc1dpdGhGZWF0dXJlcygpXG5cbiAgIyBhZGRzIGZlYXR1cmVzIHRvIGEgc2VxdWVuY2VcbiAgX2JpbmRTZXFXaXRoRmVhdHVyZXM6IChzZXEpIC0+XG4gICAgIyBUT0RPOiBwcm9iYWJseSB3ZSBkb24ndCBhbHdheXMgd2FudCB0byBiaW5kIHRvIG5hbWVcbiAgICBmZWF0dXJlcyA9IEBmZWF0dXJlc1tzZXEuYXR0cmlidXRlcy5uYW1lXVxuICAgIGlmIGZlYXR1cmVzXG4gICAgICBzZXEuc2V0IFwiZmVhdHVyZXNcIiwgbmV3IEZlYXR1cmVDb2wgZmVhdHVyZXNcbiAgICAgIHNlcS5hdHRyaWJ1dGVzLmZlYXR1cmVzLmFzc2lnblJvd3MoKVxuICAgICAgc2VxLnNldCBcImhlaWdodFwiLCBzZXEuYXR0cmlidXRlcy5mZWF0dXJlcy5nZXRDdXJyZW50SGVpZ2h0KCkgKyAxXG5cbiAgIyByZWhhc2ggdGhlIHNlcXVlbmNlIGZlYXR1cmUgYmluZGluZ1xuICBfYmluZFNlcXNXaXRoRmVhdHVyZXM6ICgpIC0+XG4gICAgQGVhY2ggKHNlcSkgPT4gIEBfYmluZFNlcVdpdGhGZWF0dXJlcyhzZXEpXG5cbiAgIyByZW1vdmVzIGFsbCBmZWF0dXJlcyBmcm9tIHRoZSBjYWNoZSAobm90IGZyb20gdGhlIHNlcXMpXG4gIHJlbW92ZUFsbEZlYXR1cmVzOiAtPlxuICAgIGRlbGV0ZSBAZmVhdHVyZXNcblxuICBfYXV0b1NldFJlZlNlcTogLT5cbiAgICBpZiBAbGVuZ3RoID4gMFxuICAgICAgQGF0KDApLnNldCBcInJlZlwiLCB0cnVlXG5cbiAgIyBzZXRzIGEgc2VxdWVuY2UgKGUuZy4gQkxBU1Qgc3RhcnQgb3IgY29uc2Vuc3VzIHNlcSkgYXMgcmVmZXJlbmNlXG4gIHNldFJlZjogKHNlcSkgLT5cbiAgICBvYmogPSBAZ2V0IHNlcVxuICAgIEBlYWNoIChzKSAtPlxuICAgICAgaWYgc2VxLmNpZFxuICAgICAgICBpZiBvYmouY2lkID09IHMuY2lkXG4gICAgICAgICAgcy5zZXQgXCJyZWZcIiwgdHJ1ZVxuICAgICAgICBlbHNlXG4gICAgICAgICAgcy5zZXQgXCJyZWZcIiwgZmFsc2VcblxuICAgIEBnLmNvbmZpZy5zZXQgXCJoYXNSZWZcIiwgdHJ1ZVxuICAgIEB0cmlnZ2VyIFwiY2hhbmdlOnJlZmVyZW5jZVwiLCBzZXFcbiIsIk1vZGVsID0gcmVxdWlyZShcImJhY2tib25lLXRoaW5cIikuTW9kZWxcbkZlYXR1cmVDb2wgPSByZXF1aXJlIFwiLi9GZWF0dXJlQ29sXCJcblxubW9kdWxlLmV4cG9ydHMgPSBTZXF1ZW5jZSA9IE1vZGVsLmV4dGVuZFxuXG4gIGRlZmF1bHRzOlxuICAgIG5hbWU6IFwiXCJcbiAgICBpZDogXCJcIlxuICAgIHNlcTogXCJcIlxuICAgIGhlaWdodDogMVxuICAgIHJlZjogZmFsc2UgIyByZWZlcmVuY2U6IHRoZSBzZXF1ZW5jZSB1c2VkIGluIEJMQVNUIG9yIHRoZSBjb25zZW5zdXMgc2VxXG5cbiAgaW5pdGlhbGl6ZTogLT5cbiAgICAjIHJlc2lkdWVzIHdpdGhvdXQgY29sb3JcbiAgICBALnNldCBcImdyZXlcIiwgW11cbiAgICB1bmxlc3MgQC5nZXQoXCJmZWF0dXJlc1wiKT9cbiAgICAgIEAuc2V0IFwiZmVhdHVyZXNcIiwgbmV3IEZlYXR1cmVDb2woKVxuIiwibW9kdWxlLmV4cG9ydHMuc2VxID0gcmVxdWlyZSBcIi4vU2VxdWVuY2VcIlxubW9kdWxlLmV4cG9ydHMuc2VxY29sID0gcmVxdWlyZSBcIi4vU2VxQ29sbGVjdGlvblwiXG5tb2R1bGUuZXhwb3J0cy5mZWF0dXJlID0gcmVxdWlyZSBcIi4vRmVhdHVyZVwiXG5tb2R1bGUuZXhwb3J0cy5mZWF0dXJlY29sID0gcmVxdWlyZSBcIi4vRmVhdHVyZUNvbFwiXG4iLCIjIG1vZGVsc1xuU2VxQ29sbGVjdGlvbiA9IHJlcXVpcmUgXCIuL21vZGVsL1NlcUNvbGxlY3Rpb25cIlxuXG4jIGdsb2JhbHNcbkNvbG9yYXRvciA9IHJlcXVpcmUgXCIuL2cvY29sb3JzY2hlbWVcIlxuQ29sdW1ucyA9IHJlcXVpcmUgXCIuL2cvY29sdW1uc1wiXG5Db25maWcgPSByZXF1aXJlIFwiLi9nL2NvbmZpZ1wiXG5QYWNrYWdlID0gcmVxdWlyZSBcIi4vZy9wYWNrYWdlXCJcblNlbENvbCA9IHJlcXVpcmUgXCIuL2cvc2VsZWN0aW9uL1NlbGVjdGlvbkNvbFwiXG5Vc2VyID0gcmVxdWlyZSBcIi4vZy91c2VyXCJcblZpc2liaWxpdHkgPSByZXF1aXJlIFwiLi9nL3Zpc2liaWxpdHlcIlxuVmlzT3JkZXJpbmcgPSByZXF1aXJlIFwiLi9nL3Zpc09yZGVyaW5nXCJcblpvb21lciA9IHJlcXVpcmUgXCIuL2cvem9vbWVyXCJcblxuIyBNViBmcm9tIGJhY2tib25lXG5ib25lVmlldyA9IHJlcXVpcmUoXCJiYWNrYm9uZS1jaGlsZHNcIilcbkV2ZW50aGFuZGxlciA9IHJlcXVpcmUgXCJiaW9qcy1ldmVudHNcIlxuXG4jIE1TQSB2aWV3c1xuU3RhZ2UgPSByZXF1aXJlIFwiLi92aWV3cy9TdGFnZVwiXG5cbiMgc3RhdGlzdGljc1xuU3RhdHMgPSByZXF1aXJlIFwic3RhdC5zZXFzXCJcblxuIyB1dGlsc1xuJCA9IHJlcXVpcmUoXCJqYm9uZVwiKVxuRmlsZUhlbHBlciA9IHJlcXVpcmUgXCIuL3V0aWxzL2ZpbGVcIlxuVHJlZUhlbHBlciA9IHJlcXVpcmUgXCIuL3V0aWxzL3RyZWVcIlxuUHJveHlIZWxwZXIgPSByZXF1aXJlIFwiLi91dGlscy9wcm94eVwiXG5cbiMgb3B0cyBpcyBhIGRpY3Rpb25hcnkgY29uc2lzdGluZyBvZlxuIyBAcGFyYW0gZWwgW1N0cmluZ10gaWQgb3IgcmVmZXJlbmNlIHRvIGEgRE9NIGVsZW1lbnRcbiMgQHBhcmFtIHNlcXMgW1NlcUFycmF5XSBBcnJheSBvZiBzZXF1ZW5jZXMgZm9yIGluaXRsaXphdGlvblxuIyBAcGFyYW0gY29uZiBbRGljdF0gdXNlciBjb25maWdcbiMgQHBhcmFtIHZpcyBbRGljdF0gY29uZmlnIG9mIHZpc2libGUgdmlld3NcbiMgQHBhcmFtIHpvb21lciBbRGljdF0gZGlzcGxheSBzZXR0aW5ncyBsaWtlIGNvbHVtbldpZHRoXG5tb2R1bGUuZXhwb3J0cyA9IGJvbmVWaWV3LmV4dGVuZFxuXG4gIGluaXRpYWxpemU6IChkYXRhKSAtPlxuXG4gICAgZGF0YSA9IHt9IHVubGVzcyBkYXRhP1xuICAgICMgY2hlY2sgZm9yIGRlZmF1bHQgYXJyYXlzXG4gICAgZGF0YS5jb2xvcnNjaGVtZSA9IHt9IHVubGVzcyBkYXRhLmNvbG9yc2NoZW1lP1xuICAgIGRhdGEuY29sdW1ucyA9IHt9IHVubGVzcyBkYXRhLmNvbHVtbnM/XG4gICAgZGF0YS5jb25mID0ge30gdW5sZXNzIGRhdGEuY29uZj9cbiAgICBkYXRhLnZpcyA9IHt9IHVubGVzcyBkYXRhLnZpcz9cbiAgICBkYXRhLnZpc29yZGVyID0ge30gdW5sZXNzIGRhdGEudmlzb3JkZXIgP1xuICAgIGRhdGEuem9vbWVyID0ge30gdW5sZXNzIGRhdGEuem9vbWVyP1xuXG4gICAgIyBnIGlzIG91ciBnbG9iYWwgTWVkaWF0b3JcbiAgICBAZyA9IEV2ZW50aGFuZGxlci5taXhpbiB7fVxuXG4gICAgIyBsb2FkIHNlcXMgYW5kIGFkZCBzdWJ2aWV3c1xuICAgIEBzZXFzID0gbmV3IFNlcUNvbGxlY3Rpb24gZGF0YS5zZXFzLCBAZ1xuXG4gICAgIyBwb3B1bGF0ZSBpdCBhbmQgaW5pdCB0aGUgZ2xvYmFsIG1vZGVsc1xuICAgIEBnLmNvbmZpZyA9IG5ldyBDb25maWcgZGF0YS5jb25mXG4gICAgQGcucGFja2FnZSA9IG5ldyBQYWNrYWdlIEBnXG4gICAgQGcuc2VsY29sID0gbmV3IFNlbENvbCBbXSx7ZzpAZ31cbiAgICBAZy51c2VyID0gbmV3IFVzZXIoKVxuICAgIEBnLnZpcyA9IG5ldyBWaXNpYmlsaXR5IGRhdGEudmlzLCB7bW9kZWw6IEBzZXFzfVxuICAgIEBnLnZpc29yZGVyID0gbmV3IFZpc09yZGVyaW5nIGRhdGEudmlzb3JkZXJcbiAgICBAZy56b29tZXIgPSBuZXcgWm9vbWVyIGRhdGEuem9vbWVyLHtnOkBnLCBtb2RlbDogQHNlcXN9XG5cbiAgICAjIGRlYnVnIG1vZGVcbiAgICBpZiB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUgaXMgXCJsb2NhbGhvc3RcIlxuICAgICAgQGcuY29uZmlnLnNldCBcImRlYnVnXCIsIHRydWVcblxuICAgICMgc3RhdHNcbiAgICBwdXJlU2VxID0gQHNlcXMucGx1Y2soXCJzZXFcIilcbiAgICBAZy5zdGF0cyA9IG5ldyBTdGF0cyBAc2Vxc1xuICAgIEBnLnN0YXRzLmFscGhhYmV0U2l6ZSA9IEBnLmNvbmZpZy5nZXQgXCJhbHBoYWJldFNpemVcIlxuICAgIEBnLmNvbHVtbnMgPSBuZXcgQ29sdW1ucyBkYXRhLmNvbHVtbnMsQGcuc3RhdHMgICMgZm9yIGFjdGlvbiBvbiB0aGUgY29sdW1ucyBsaWtlIGhpZGluZ1xuXG4gICAgIyBkZXBlbmRpbmcgY29uZmlnXG4gICAgQGcuY29sb3JzY2hlbWUgPSBuZXcgQ29sb3JhdG9yIGRhdGEuY29sb3JzY2hlbWUsIHB1cmVTZXEsIEBnLnN0YXRzXG5cbiAgICAjIG1vcmUgaW5pdFxuICAgIEBnLnpvb21lci5zZXRFbCBAZWwsIEBzZXFzXG5cbiAgICBAYWRkVmlldyBcInN0YWdlXCIsbmV3IFN0YWdlIHttb2RlbDogQHNlcXMsIGc6IEBnfVxuICAgIEBlbC5zZXRBdHRyaWJ1dGUgXCJjbGFzc1wiLCBcImJpb2pzX21zYV9kaXZcIlxuXG4gICAgIyB1dGlsc1xuICAgIEB1ID0ge31cbiAgICBAdS5maWxlID0gbmV3IEZpbGVIZWxwZXIgQFxuICAgIEB1LnByb3h5ID0gbmV3IFByb3h5SGVscGVyIGc6IEBnXG4gICAgQHUudHJlZSA9IG5ldyBUcmVlSGVscGVyIEBcblxuICAgIGlmIEBnLmNvbmZpZy5nZXQoXCJldmVudEJ1c1wiKSBpcyB0cnVlXG4gICAgICBAc3RhcnRFdmVudEJ1cygpXG5cbiAgICBpZiBAZy5jb25maWcuZ2V0IFwiZHJvcEltcG9ydFwiXG4gICAgICBldmVudHMgPVxuICAgICAgICBcImRyYWdvdmVyXCI6IEBkcmFnT3ZlclxuICAgICAgICBcImRyb3BcIjogQGRyb3BGaWxlXG4gICAgICBAZGVsZWdhdGVFdmVudHMgZXZlbnRzXG5cbiAgICAkKHdpbmRvdykub24oXCJyZXNpemVcIiwgKGUpID0+XG4gICAgICBmID0gLT5cbiAgICAgICAgQGcuem9vbWVyLmF1dG9SZXNpemUoKVxuICAgICAgc2V0VGltZW91dCBmLmJpbmQoQCksIDVcbiAgICApXG5cbiAgZHJhZ092ZXI6IChlKSAtPlxuICAgICMgcHJldmVudCB0aGUgbm9ybWFsIGJyb3dzZXIgYWN0aW9uc1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIGUudGFyZ2V0LmNsYXNzTmFtZSA9ICdob3ZlcidcbiAgICBmYWxzZVxuXG4gIGRyb3BGaWxlOiAoZSkgLT5cbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBmaWxlcyA9IGUudGFyZ2V0LmZpbGVzIHx8IGUuZGF0YVRyYW5zZmVyLmZpbGVzXG4gICAgQHUuZmlsZS5pbXBvcnRGaWxlcyBmaWxlc1xuICAgIHJldHVybiBmYWxzZVxuXG4gIHN0YXJ0RXZlbnRCdXM6IC0+XG4gICAgYnVzT2JqcyA9IFtcImNvbmZpZ1wiLCBcImNvbHVtbnNcIiwgXCJjb2xvcnNjaGVtZVwiLCBcInNlbGNvbFwiICxcInZpc1wiLCBcInZpc29yZGVyXCIsIFwiem9vbWVyXCJdXG4gICAgZm9yIGtleSBpbiBidXNPYmpzXG4gICAgICBAX3Byb3h5VG9HIGtleVxuXG4gIF9wcm94eVRvRzogKGtleSkgLT5cbiAgICBAbGlzdGVuVG8gQGdba2V5XSwgXCJhbGxcIiwobmFtZSxwcmV2LG5vdyxvcHRzKSAtPlxuICAgICAgIyBzdXBwcmVzcyBkdXBsaWNhdGUgZXZlbnRzXG4gICAgICByZXR1cm4gaWYgbmFtZSBpcyBcImNoYW5nZVwiXG4gICAgICAjIGJhY2tib25lIHVzZXMgdGhlIHNlY29uZCBhcmd1bWVudCBmb3IgdGhlIG5leHQgdmFsdWUgLT4gc3dhcFxuICAgICAgaWYgb3B0cz9cbiAgICAgICAgQGcudHJpZ2dlcihrZXkgKyBcIjpcIiArIG5hbWUsbm93LHByZXYsb3B0cylcbiAgICAgIGVsc2VcbiAgICAgICAgQGcudHJpZ2dlcihrZXkgKyBcIjpcIiArIG5hbWUsbm93LHByZXYpXG5cbiAgcmVuZGVyOiAtPlxuICAgIGlmIEBzZXFzIGlzIHVuZGVmaW5lZCBvciBAc2Vxcy5sZW5ndGggaXMgMFxuICAgICAgY29uc29sZS5sb2cgXCJ3YXJuaW5nLiBlbXB0eSBzZXFzLlwiXG4gICAgQHJlbmRlclN1YnZpZXdzKClcbiAgICBAZy52aXMuc2V0IFwibG9hZGVkXCIsIHRydWVcbiAgICBAXG4iLCJtb2R1bGUuZXhwb3J0cyA9XG4gICMgbWF0aCB1dGlsaXRpZXNcbiAgY2xhc3MgQk1hdGhcbiAgICBAcmFuZG9tSW50OiAobG93ZXIsIHVwcGVyKSAtPlxuICAgICAgIyBDYWxsZWQgd2l0aCBvbmUgYXJndW1lbnRcbiAgICAgIFtsb3dlciwgdXBwZXJdID0gWzAsIGxvd2VyXSAgICAgdW5sZXNzIHVwcGVyP1xuICAgICAgIyBMb3dlciBtdXN0IGJlIGxlc3MgdGhlbiB1cHBlclxuICAgICAgW2xvd2VyLCB1cHBlcl0gPSBbdXBwZXIsIGxvd2VyXSBpZiBsb3dlciA+IHVwcGVyXG4gICAgICAjIExhc3Qgc3RhdGVtZW50IGlzIGEgcmV0dXJuIHZhbHVlXG4gICAgICBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAodXBwZXIgLSBsb3dlciArIDEpICsgbG93ZXIpXG5cbiAgICAjIEByZXR1cm4gW0ludGVnZXJdIHJhbmRvbSBpZFxuICAgIEB1bmlxdWVJZDogKGxlbmd0aCA9IDgpIC0+XG4gICAgICBpZCA9IFwiXCJcbiAgICAgIGlkICs9IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyKSB3aGlsZSBpZC5sZW5ndGggPCBsZW5ndGhcbiAgICAgIGlkLnN1YnN0ciAwLCBsZW5ndGhcblxuICAgICMgUmV0dXJucyBhIHJhbmRvbSBpbnRlZ2VyIGJldHdlZW4gbWluIChpbmNsdXNpdmUpIGFuZCBtYXggKGluY2x1c2l2ZSlcbiAgICBAZ2V0UmFuZG9tSW50OiAobWluLCBtYXgpIC0+XG4gICAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKSArIG1pblxuIiwiRmFzdGEgPSByZXF1aXJlKFwiYmlvanMtaW8tZmFzdGFcIilcbkdGRiA9IHJlcXVpcmUoXCJiaW9qcy1pby1nZmZcIilcbnhociA9IHJlcXVpcmUgXCJ4aHJcIlxuYmxvYlVSTCA9IHJlcXVpcmUgXCJibHVlaW1wX2NhbnZhc3RvYmxvYlwiXG5zYXZlQXMgPSByZXF1aXJlIFwiYnJvd3Nlci1zYXZlYXNcIlxuXyA9IHJlcXVpcmUgXCJ1bmRlcnNjb3JlXCJcblxubW9kdWxlLmV4cG9ydHMgPSBFeHBvcnRlciA9XG5cbiAgb3BlbkluSmFsdmlldzogKHVybCwgY29sb3JzY2hlbWUpIC0+XG4gICAgaWYgdXJsLmNoYXJBdCgwKSBpcyAnLidcbiAgICAgICMgcmVsYXRpdmUgdXJsc1xuICAgICAgdXJsID0gZG9jdW1lbnQuVVJMLnN1YnN0cigwLGRvY3VtZW50LlVSTC5sYXN0SW5kZXhPZignLycpKSArIFwiL1wiICsgdXJsXG5cbiAgICAjIGNoZWNrIHdoZXRoZXIgdGhpcyBpcyBhIGxvY2FsIHVybFxuICAgIGlmIHVybC5pbmRleE9mKFwiaHR0cFwiKSA8IDBcbiAgICAgICMgYXBwZW5kIGhvc3QgYW5kIGhvcGUgZm9yIHRoZSBiZXN0XG4gICAgICBob3N0ID0gXCJodHRwOi8vXCIgKyB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWVcbiAgICAgIHVybCA9IGhvc3QgKyB1cmxcblxuICAgIHVybCA9IGVuY29kZVVSSUNvbXBvbmVudCB1cmxcbiAgICBqYWx2aWV3VXJsID0gXCJodHRwOi8vd3d3LmphbHZpZXcub3JnL3NlcnZpY2VzL2xhdW5jaEFwcD9vcGVuPVwiICsgdXJsXG4gICAgamFsdmlld1VybCArPSBcIiZjb2xvdXI9XCIgKyBjb2xvcnNjaGVtZVxuICAgIHdpbmRvdy5vcGVuIGphbHZpZXdVcmwsICdfYmxhbmsnXG5cbiAgcHVibGlzaFdlYjogKHRoYXQsIGNiKSAtPlxuICAgIHRleHQgPSBGYXN0YS53cml0ZSB0aGF0LnNlcXMudG9KU09OKClcbiAgICB0ZXh0ID0gZW5jb2RlVVJJQ29tcG9uZW50IHRleHRcbiAgICB1cmwgPSB0aGF0LnUucHJveHkuY29yc1VSTCBcImh0dHA6Ly9zcHJ1bmdlLmJpb2pzLm5ldFwiXG4gICAgeGhyXG4gICAgICBtZXRob2Q6IFwiUE9TVFwiXG4gICAgICBib2R5OiBcInNwcnVuZ2U9XCIgKyB0ZXh0XG4gICAgICB1cmk6IHVybFxuICAgICAgaGVhZGVyczpcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIlxuICAgICwgKGVycixyZXAsYm9keSkgLT5cbiAgICAgIGxpbmsgPSBib2R5LnRyaW0oKVxuICAgICAgY2IobGluaylcblxuICBzaGFyZUxpbms6ICh0aGF0LCBjYikgLT5cbiAgICB1cmwgPSB0aGF0LmcuY29uZmlnLmdldCBcImltcG9ydFVSTFwiXG4gICAgbXNhVVJMID0gXCJodHRwOi8vYmlvanMtbXNhLm9yZy9hcHAvP3NlcT1cIlxuICAgIGZDQiA9IChsaW5rKSAtPlxuICAgICAgZlVSTCA9IG1zYVVSTCArIGxpbmtcbiAgICAgIGlmIGNiXG4gICAgICAgIGNiIGZVUkxcbiAgICB1bmxlc3MgdXJsXG4gICAgICBFeHBvcnRlci5wdWJsaXNoV2ViIHRoYXQsIGZDQlxuICAgIGVsc2VcbiAgICAgIGZDQiB1cmxcblxuICBzYXZlQXNGaWxlOiAodGhhdCxuYW1lKSAtPlxuICAgICMgbGltaXQgYXQgYWJvdXQgMjU2a1xuICAgIHRleHQgPSBGYXN0YS53cml0ZSB0aGF0LnNlcXMudG9KU09OKClcbiAgICBibG9iID0gbmV3IEJsb2IoW3RleHRdLCB7dHlwZSA6ICd0ZXh0L3BsYWluJ30pXG4gICAgc2F2ZUFzIGJsb2IsIG5hbWVcblxuICBzYXZlU2VsZWN0aW9uOiAodGhhdCxuYW1lKSAtPlxuICAgIHNlbGVjdGlvbiA9IHRoYXQuZy5zZWxjb2wucGx1Y2sgXCJzZXFJZFwiXG4gICAgY29uc29sZS5sb2cgc2VsZWN0aW9uXG4gICAgaWYgc2VsZWN0aW9uLmxlbmd0aCA+IDBcbiAgICAgICMgZmlsdGVyIHRob3NlIHNlcWlkc1xuICAgICAgc2VsZWN0aW9uID0gdGhhdC5zZXFzLmZpbHRlciAoZWwpIC0+XG4gICAgICAgIF8uY29udGFpbnMgc2VsZWN0aW9uLCBlbC5nZXQgXCJpZFwiXG4gICAgICBmb3IgaSBpbiBbMC4uIHNlbGVjdGlvbi5sZW5ndGggLSAxXSBieSAxXG4gICAgICAgIHNlbGVjdGlvbltpXSA9IHNlbGVjdGlvbltpXS50b0pTT04oKVxuICAgIGVsc2VcbiAgICAgIHNlbGVjdGlvbiA9IHRoYXQuc2Vxcy50b0pTT04oKVxuICAgICAgY29uc29sZS53YXJuIFwibm8gc2VsZWN0aW9uIGZvdW5kXCJcbiAgICB0ZXh0ID0gRmFzdGEud3JpdGUgc2VsZWN0aW9uXG4gICAgYmxvYiA9IG5ldyBCbG9iKFt0ZXh0XSwge3R5cGUgOiAndGV4dC9wbGFpbid9KVxuICAgIHNhdmVBcyBibG9iLCBuYW1lXG5cbiAgc2F2ZUFubm90czogKHRoYXQsbmFtZSkgLT5cbiAgICBmZWF0dXJlcyA9IHRoYXQuc2Vxcy5tYXAgKGVsKSAtPlxuICAgICAgZmVhdHVyZXMgPSBlbC5nZXQgXCJmZWF0dXJlc1wiXG4gICAgICByZXR1cm4gaWYgZmVhdHVyZXMubGVuZ3RoIGlzIDBcbiAgICAgIHNlcW5hbWUgPSBlbC5nZXQoXCJuYW1lXCIpXG4gICAgICBmZWF0dXJlcy5lYWNoIChzKSAtPlxuICAgICAgICBzLnNldCBcInNlcW5hbWVcIiwgc2VxbmFtZVxuICAgICAgcmV0dXJuIGZlYXR1cmVzLnRvSlNPTigpXG4gICAgZmVhdHVyZXMgPSBfLmZsYXR0ZW4gXy5jb21wYWN0IGZlYXR1cmVzXG4gICAgY29uc29sZS5sb2cgZmVhdHVyZXNcbiAgICB0ZXh0ID0gR0ZGLmV4cG9ydExpbmVzIGZlYXR1cmVzXG4gICAgYmxvYiA9IG5ldyBCbG9iKFt0ZXh0XSwge3R5cGUgOiAndGV4dC9wbGFpbid9KVxuICAgIHNhdmVBcyBibG9iLCBuYW1lXG5cbiAgc2F2ZUFzSW1nOiAodGhhdCxuYW1lKSAtPlxuICAgICAgIyBUT0RPOiB0aGlzIGlzIHZlcnkgdWdseVxuICAgICAgY2FudmFzID0gdGhhdC5nZXRWaWV3KCdzdGFnZScpLmdldFZpZXcoJ2JvZHknKS5nZXRWaWV3KCdzZXFibG9jaycpLmVsXG4gICAgICBpZiBjYW52YXM/XG4gICAgICAgIHVybCA9IGNhbnZhcy50b0RhdGFVUkwoJ2ltYWdlL3BuZycpXG4gICAgICAgIHNhdmVBcyBibG9iVVJMKHVybCksIG5hbWUsIFwiaW1hZ2UvcG5nXCJcbiIsIkZhc3RhUmVhZGVyID0gcmVxdWlyZShcImJpb2pzLWlvLWZhc3RhXCIpXG5DbHVzdGFsUmVhZGVyID0gcmVxdWlyZSBcImJpb2pzLWlvLWNsdXN0YWxcIlxuR2ZmUmVhZGVyID0gcmVxdWlyZSBcImJpb2pzLWlvLWdmZlwiXG5fID0gcmVxdWlyZSBcInVuZGVyc2NvcmVcIlxueGhyID0gcmVxdWlyZSBcInhoclwiXG5cbm1vZHVsZS5leHBvcnRzID0gRmlsZUhlbHBlciA9IChtc2EpIC0+XG4gIEBtc2EgPSBtc2FcbiAgQFxuXG5mdW5zID1cbiAgZ3Vlc3NGaWxlVHlwZTogKG5hbWUpIC0+XG4gICAgbmFtZSA9IG5hbWUuc3BsaXQoXCIuXCIpXG4gICAgZmlsZU5hbWUgPSBuYW1lW25hbWUubGVuZ3RoIC0xXVxuICAgIHN3aXRjaCBmaWxlTmFtZVxuICAgICAgd2hlbiBcImFsblwiLCBcImNsdXN0YWxcIiB0aGVuIHJldHVybiBDbHVzdGFsUmVhZGVyXG4gICAgICB3aGVuIFwiZmFzdGFcIiB0aGVuIHJldHVybiBGYXN0YVJlYWRlclxuICAgICAgZWxzZVxuICAgICAgICByZXR1cm4gRmFzdGFSZWFkZXJcblxuICBndWVzc0ZpbGVGcm9tVGV4dDogKHRleHQpIC0+XG4gICAgdW5sZXNzIHRleHQ/XG4gICAgICBjb25zb2xlLndhcm4gXCJpbnZhbGlkIGZpbGUgZm9ybWF0XCJcbiAgICAgIHJldHVybiBbXCJcIiwgXCJlcnJvclwiXVxuICAgIGlmIHRleHQuc3Vic3RyaW5nKDAsNykgaXMgXCJDTFVTVEFMXCJcbiAgICAgIHJlYWRlciA9IENsdXN0YWxSZWFkZXJcbiAgICAgIHR5cGUgPSBcInNlcXNcIlxuICAgIGVsc2UgaWYgdGV4dC5zdWJzdHJpbmcoMCwxKSBpcyBcIj5cIlxuICAgICAgcmVhZGVyID0gRmFzdGFSZWFkZXJcbiAgICAgIHR5cGUgPSBcInNlcXNcIlxuICAgIGVsc2UgaWYgdGV4dC5zdWJzdHJpbmcoMCwxKSBpcyBcIihcIlxuICAgICAgdHlwZSA9IFwibmV3aWNrXCJcbiAgICBlbHNlXG4gICAgICByZWFkZXIgPSBHZmZSZWFkZXJcbiAgICAgIHR5cGUgPSBcImZlYXR1cmVzXCJcbiAgICAgICNjb25zb2xlLndhcm4gXCJVbmtub3duIGZvcm1hdC4gQ29udGFjdCBncmVlbmlmeVwiXG4gICAgW3JlYWRlcix0eXBlXVxuXG4gIHBhcnNlVGV4dDogKHRleHQpIC0+XG4gICAgW3JlYWRlciwgdHlwZV0gPSBAZ3Vlc3NGaWxlRnJvbVRleHQgdGV4dFxuICAgIGlmIHR5cGUgaXMgXCJzZXFzXCJcbiAgICAgIHNlcXMgPSByZWFkZXIucGFyc2UgdGV4dFxuICAgICAgcmV0dXJuIFtzZXFzLHR5cGVdXG4gICAgZWxzZSBpZiB0eXBlIGlzIFwiZmVhdHVyZXNcIlxuICAgICAgZmVhdHVyZXMgPSByZWFkZXIucGFyc2VTZXFzIHRleHRcbiAgICAgIHJldHVybiBbZmVhdHVyZXMsdHlwZV1cbiAgICBlbHNlXG4gICAgICByZXR1cm4gW3RleHQsdHlwZV1cblxuICBpbXBvcnRGaWxlczogKGZpbGVzKSAtPlxuICAgIGZvciBpIGluIFswLi5maWxlcy5sZW5ndGggLSAxXSBieSAxXG4gICAgICBmaWxlID0gZmlsZXNbaV1cbiAgICAgIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZXZ0KSA9PlxuICAgICAgICBAaW1wb3J0RmlsZSBldnQudGFyZ2V0LnJlc3VsdFxuICAgICAgcmVhZGVyLnJlYWRBc1RleHQgZmlsZVxuXG4gIGltcG9ydEZpbGU6IChmaWxlKSAtPlxuICAgIFtvYmpzLCB0eXBlXSA9IEBwYXJzZVRleHQgZmlsZVxuICAgIGlmIHR5cGUgaXMgXCJlcnJvclwiXG4gICAgICAgIHJldHVybiBcImVycm9yXCJcbiAgICBpZiB0eXBlIGlzIFwic2Vxc1wiXG4gICAgICBAbXNhLnNlcXMucmVzZXQgb2Jqc1xuICAgICAgQG1zYS5nLmNvbmZpZy5zZXQgXCJ1cmxcIiwgXCJ1c2VyaW1wb3J0XCJcbiAgICAgIEBtc2EuZy50cmlnZ2VyIFwidXJsOnVzZXJJbXBvcnRcIlxuICAgIGVsc2UgaWYgdHlwZSBpcyBcImZlYXR1cmVzXCJcbiAgICAgIEBtc2Euc2Vxcy5hZGRGZWF0dXJlcyBvYmpzXG4gICAgZWxzZSBpZiB0eXBlIGlzIFwibmV3aWNrXCJcbiAgICAgIEBtc2EudS50cmVlLmxvYWRUcmVlID0+XG4gICAgICAgIEBtc2EudS50cmVlLnNob3dUcmVlIGZpbGVcblxuICAgIGZpbGVOYW1lID0gZmlsZS5uYW1lXG5cbiAgaW1wb3J0VVJMOiAodXJsLCBjYikgLT5cbiAgICB1cmwgPSBAbXNhLnUucHJveHkuY29yc1VSTCB1cmxcbiAgICBAbXNhLmcuY29uZmlnLnNldCBcInVybFwiLCB1cmxcbiAgICB4aHIgdXJsLCAoZXJyLHN0YXR1cyxib2R5KSA9PlxuICAgICAgdW5sZXNzIGVyclxuICAgICAgICByZXMgPSBAaW1wb3J0RmlsZSBib2R5XG4gICAgICAgIGlmIHJlcyBpcyBcImVycm9yXCJcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgQG1zYS5nLnRyaWdnZXIgXCJpbXBvcnQ6dXJsXCIsIHVybFxuICAgICAgICBpZiBjYlxuICAgICAgICAgIGNiKClcbiAgICAgIGVsc2VcbiAgICAgICAgY29uc29sZS5sb2cgZXJyXG5cbl8uZXh0ZW5kIEZpbGVIZWxwZXI6OiwgZnVuc1xuIiwibW9kdWxlLmV4cG9ydHMuYm1hdGggPSByZXF1aXJlKFwiLi9ibWF0aFwiKVxubW9kdWxlLmV4cG9ydHMucHJveHkgPSByZXF1aXJlKFwiLi9wcm94eVwiKVxubW9kdWxlLmV4cG9ydHMuc2VxZ2VuID0gcmVxdWlyZShcIi4vc2VxZ2VuXCIpXG5tb2R1bGUuZXhwb3J0cy5maWxlID0gcmVxdWlyZShcIi4vZmlsZVwiKVxubW9kdWxlLmV4cG9ydHMuZXhwb3J0ID0gcmVxdWlyZShcIi4vZXhwb3J0XCIpXG4iLCJrID0gcmVxdWlyZSBcImtvYWxhLWpzXCJcblxubW9kdWxlLmV4cG9ydHMgPSBsb2FkZXIgPVxuXG4gICMgYXN5bmNocm9ub3VzbHkgcmVxdWlyZSBhIHNjcmlwdFxuICBsb2FkU2NyaXB0OiAodXJsLCBjYikgLT5cbiAgICBzID0gay5tayBcInNjcmlwdFwiXG4gICAgcy50eXBlID0gXCJ0ZXh0L2phdmFzY3JpcHRcIlxuICAgIHMuc3JjID0gdXJsXG4gICAgcy5hc3luYyA9IHRydWVcbiAgICBzLm9ubG9hZCA9IHMub25yZWFkeXN0YXRlY2hhbmdlID0gLT5cbiAgICAgIGlmIG5vdCByIGFuZCAobm90IEByZWFkeVN0YXRlIG9yIEByZWFkeVN0YXRlIGlzIFwiY29tcGxldGVcIilcbiAgICAgICAgciA9IHRydWVcbiAgICAgICAgY2IoKVxuICAgIHQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKVswXVxuICAgIHQucGFyZW50Tm9kZS5hcHBlbmRDaGlsZCBzXG5cbiAgIyBqb2lucyBtdWx0aXBsZSBjYWxsYmFja3MgaW50byBvbmUgY2FsbGJhY2tcbiAgIyBhIGJpdCBsaWtlIFByb21pc2UuYWxsIC0gYnV0IGZvciBjYWxsYmFja3NcbiAgam9pbkNiOiAocmV0Q2IsIGZpbmFsTGVuZ3RoLCBmaW5hbFNjb3BlKSAtPlxuICAgIGZpbmFsTGVuZ3RoID0gZmluYWxMZW5ndGggfHwgMVxuICAgIGNic0ZpbmlzaGVkID0gMFxuXG4gICAgY2FsbGJhY2tXcmFwcGVyID0gKGNiLCBzY29wZSkgLT5cbiAgICAgIGlmIG5vdCBjYj9cbiAgICAgICAgIyBkaXJlY3RseSBjYWxsZWQgKHdpdGhvdXQgY2IpXG4gICAgICAgIGNvdW50ZXIoKVxuICAgICAgZWxzZVxuICAgICAgICAtPlxuICAgICAgICAgIGlmIFwiYXBwbHlcIiBpbiBjYlxuICAgICAgICAgICAgY2IuYXBwbHkgc2NvcGUsIGFyZ3VtZW50c1xuICAgICAgICAgIGNvdW50ZXIoKVxuXG4gICAgY291bnRlciA9IC0+XG4gICAgICBjYnNGaW5pc2hlZCsrXG4gICAgICBpZiBjYnNGaW5pc2hlZCBpcyBmaW5hbExlbmd0aFxuICAgICAgICByZXRDYi5jYWxsIGZpbmFsU2NvcGVcblxuICAgIHJldHVybiBjYWxsYmFja1dyYXBwZXJcbiIsIl8gPSByZXF1aXJlIFwidW5kZXJzY29yZVwiXG5cbm1vZHVsZS5leHBvcnRzID0gUHJveHlIZWxwZXIgPSAob3B0cykgLT5cbiAgQGcgPSBvcHRzLmdcbiAgQFxuXG5wcm94eUZ1biA9XG5cbiAgY29yc1VSTDogKHVybCkgLT5cbiAgICAjIGRvIG5vdCBmaWx0ZXIgb24gbG9jYWxob3N0XG4gICAgcmV0dXJuIHVybCBpZiBkb2N1bWVudC5VUkwuaW5kZXhPZignbG9jYWxob3N0JykgPj0gMCBhbmQgdXJsWzBdIGlzIFwiL1wiXG4gICAgcmV0dXJuIHVybCBpZiB1cmwuY2hhckF0KDApIGlzIFwiLlwiIG9yIHVybC5jaGFyQXQoMCkgaXMgXCIvXCJcblxuICAgICMgcmVtb3ZlIHd3dyArIGh0dHBcbiAgICB1cmwgPSB1cmwucmVwbGFjZSBcInd3d1xcLlwiLCBcIlwiXG4gICAgdXJsID0gdXJsLnJlcGxhY2UgXCJodHRwOi8vXCIsIFwiXCJcblxuICAgICMgcHJlcGVuZCBwcm94eVxuICAgIHVybCA9IEBnLmNvbmZpZy5nZXQoJ2ltcG9ydFByb3h5JykgKyB1cmxcbiAgICB1cmxcblxuXy5leHRlbmQgUHJveHlIZWxwZXI6OiwgcHJveHlGdW5cbiIsIlNlcXVlbmNlID0gcmVxdWlyZShcImJpb2pzLW1vZGVsXCIpLnNlcVxuQk1hdGggPSByZXF1aXJlIFwiLi9ibWF0aFwiXG5TdGF0ID0gcmVxdWlyZSBcInN0YXQuc2Vxc1wiXG5cbnNlcWdlbiA9IG1vZHVsZS5leHBvcnRzID1cbiAgX2dlbmVyYXRlU2VxdWVuY2U6IChsZW4pIC0+XG4gICAgdGV4dCA9IFwiXCJcbiAgICBmb3IgaSBpbiBbMC4ubGVuIC0gMV0gYnkgMVxuICAgICAgdGV4dCArPSBzZXFnZW4uZ2V0UmFuZG9tQ2hhcigpXG4gICAgcmV0dXJuIHRleHRcblxuICAjIGdlbmVyYXRlcyBhIGR1bW15IHNlcXVlbmNlc1xuICAjIEBwYXJhbSBsZW4gW2ludF0gbnVtYmVyIG9mIGdlbmVyYXRlZCBzZXF1ZW5jZXNcbiAgIyBAcGFyYW0gc2VxTGVuIFtpbnRdIGxlbmd0aCBvZiB0aGUgZ2VuZXJhdGVkIHNlcXVlbmNlc1xuICBnZXREdW1teVNlcXVlbmNlczogKGxlbiwgc2VxTGVuKSAtPlxuICAgIHNlcXMgPSBbXVxuICAgIGxlbiA9IEJNYXRoLmdldFJhbmRvbUludCAzLDUgdW5sZXNzIGxlbj9cbiAgICBzZXFMZW4gPSBCTWF0aC5nZXRSYW5kb21JbnQgNTAsMjAwIHVubGVzcyBzZXFMZW4/XG5cbiAgICBmb3IgaSBpbiBbMS4ubGVuXSBieSAxXG4gICAgICBzZXFzLnB1c2ggbmV3IFNlcXVlbmNlKHNlcWdlbi5fZ2VuZXJhdGVTZXF1ZW5jZShzZXFMZW4pLCBcInNlcVwiICsgaSxcbiAgICAgIFwiclwiICsgaSlcbiAgICByZXR1cm4gc2Vxc1xuXG4gIGdldFJhbmRvbUNoYXI6IChkaWN0KSAtPlxuICAgIHBvc3NpYmxlID0gZGljdCB8fCBcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaXCJcbiAgICBwb3NzaWJsZS5jaGFyQXQgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcG9zc2libGUubGVuZ3RoKVxuXG4gICMgZ2VuZXJhdGVzIGEgZHVtbXkgc2VxdWVuY2VzXG4gICMgQHBhcmFtIGxlbiBbaW50XSBudW1iZXIgb2YgZ2VuZXJhdGVkIHNlcXVlbmNlc1xuICAjIEBwYXJhbSBzZXFMZW4gW2ludF0gbGVuZ3RoIG9mIHRoZSBnZW5lcmF0ZWQgc2VxdWVuY2VzXG4gIGdlbkNvbnNlcnZlZFNlcXVlbmNlczogKGxlbiwgc2VxTGVuLCBkaWN0KSAtPlxuICAgIHNlcXMgPSBbXVxuICAgIGxlbiA9IEJNYXRoLmdldFJhbmRvbUludCAzLDUgdW5sZXNzIGxlbj9cbiAgICBzZXFMZW4gPSBCTWF0aC5nZXRSYW5kb21JbnQgNTAsMjAwIHVubGVzcyBzZXFMZW4/XG5cbiAgICBkaWN0ID0gZGljdCB8fCBcIkFDREVGR0hJS0xNTlBRUlNUVldZLS0tXCJcblxuICAgIGZvciBpIGluIFsxLi5sZW5dIGJ5IDFcbiAgICAgIHNlcXNbaS0xXSA9IFwiXCJcblxuICAgIHRvbGVyYW5jZSA9IDAuMlxuXG4gICAgY29uc2VydkFpbSA9IDFcbiAgICBmb3IgaSBpbiBbMC4uIHNlcUxlbiAtIDFdIGJ5IDFcbiAgICAgIGlmIGkgJSAzID09IDBcbiAgICAgICAgY29uc2VydkFpbSA9IChCTWF0aC5nZXRSYW5kb21JbnQgNTAsMTAwKSAvIDEwMFxuICAgICAgb2JzZXJ2ZWQgPSBbXVxuICAgICAgZm9yIGogaW4gWzAuLmxlbiAtIDFdIGJ5IDFcbiAgICAgICAgY291bnRlciA9IDBcbiAgICAgICAgd2hpbGUgY291bnRlciA8IDEwMFxuICAgICAgICAgIGMgPSBzZXFnZW4uZ2V0UmFuZG9tQ2hhciBkaWN0XG4gICAgICAgICAgY0NvbnNlcnYgPSBTdGF0IG9ic2VydmVkXG4gICAgICAgICAgY0NvbnNlcnYuYWRkU2VxIGNcbiAgICAgICAgICBjb3VudGVyKytcbiAgICAgICAgICBpZiBNYXRoLmFicyhjb25zZXJ2QWltIC0gY0NvbnNlcnYuc2NhbGUoY0NvbnNlcnYuY29uc2VydmF0aW9uKCkpWzBdKSA8IHRvbGVyYW5jZVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgc2Vxc1tqXSArPSBjXG4gICAgICAgIG9ic2VydmVkLnB1c2ggY1xuXG4gICAgcHNlcXMgPSBbXVxuICAgIGZvciBpIGluIFsxLi5sZW5dIGJ5IDFcbiAgICAgIHBzZXFzLnB1c2ggbmV3IFNlcXVlbmNlKHNlcXNbaS0xXSwgXCJzZXFcIiArIGksIFwiclwiICsgaSlcblxuICAgIHJldHVybiBwc2Vxc1xuIiwiIyBtaW5pIHN2ZyBoZWxwZXJcblxuc3ZnbnMgPSBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcblxuc2V0QXR0ciA9IChvYmosb3B0cykgLT5cbiAgZm9yIG5hbWUsIHZhbHVlIG9mIG9wdHNcbiAgICBvYmouc2V0QXR0cmlidXRlTlMgbnVsbCwgbmFtZSwgdmFsdWVcbiAgb2JqXG5cbkJhc2UgPSAob3B0cykgLT5cbiAgc3ZnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TIHN2Z25zLCAnc3ZnJ1xuICBzdmcuc2V0QXR0cmlidXRlIFwid2lkdGhcIiwgb3B0cy53aWR0aFxuICBzdmcuc2V0QXR0cmlidXRlIFwiaGVpZ2h0XCIsIG9wdHMuaGVpZ2h0XG4gIHN2Z1xuXG5SZWN0ID0gKG9wdHMpIC0+XG4gIHJlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMgc3ZnbnMsICdyZWN0J1xuICBzZXRBdHRyIHJlY3Qsb3B0c1xuXG5MaW5lID0gKG9wdHMpIC0+XG4gIGxpbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMgc3ZnbnMsICdsaW5lJ1xuICBzZXRBdHRyIGxpbmUsb3B0c1xuXG5Qb2x5Z29uID0gKG9wdHMpIC0+XG4gIGxpbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMgc3ZnbnMsICdwb2x5Z29uJ1xuICBzZXRBdHRyIGxpbmUsb3B0c1xuXG5tb2R1bGUuZXhwb3J0cy5yZWN0ID0gUmVjdFxubW9kdWxlLmV4cG9ydHMubGluZSA9IExpbmVcbm1vZHVsZS5leHBvcnRzLnBvbHlnb24gPSBQb2x5Z29uXG5tb2R1bGUuZXhwb3J0cy5iYXNlID0gQmFzZVxuIiwiXyA9IHJlcXVpcmUgXCJ1bmRlcnNjb3JlXCJcblxubW9kdWxlLmV4cG9ydHMgPSB0cmVlSGVscGVyID0gIChtc2EpIC0+XG4gIEBtc2EgPSBtc2FcbiAgQFxuXG50ZiA9XG5cbiAgICBsb2FkVHJlZTogKGNiKSAtPlxuICAgICAgQG1zYS5nLnBhY2thZ2UubG9hZFBhY2thZ2VzIFtcIm1zYS10bnRcIiwgXCJiaW9qcy1pby1uZXdpY2tcIl0sIGNiXG5cbiAgICBzaG93VHJlZTogKG5ld2lja1N0cikgLT5cbiAgICAgIG5ld2ljayA9IEByZXF1aXJlIFwiYmlvanMtaW8tbmV3aWNrXCJcbiAgICAgIGlmIHR5cGVvZiBuZXdpY2tTdHIgaXMgXCJzdHJpbmdcIlxuICAgICAgICBuZXdpY2tPYmogPSBuZXdpY2sucGFyc2VfbmV3aWNrIG5ld2lja1N0clxuICAgICAgZWxzZVxuICAgICAgICBuZXdpY2tPYmogPSBuZXdpY2tTdHJcblxuICAgICAgbXQgPSBAcmVxdWlyZSBcIm1zYS10bnRcIlxuXG4gICAgICBzZWwgPSBuZXcgbXQuc2VsZWN0aW9ucygpXG4gICAgICB0cmVlRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBcImRpdlwiXG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkIHRyZWVEaXZcblxuICAgICAgY29uc29sZS5sb2cgQG1zYS5zZXFzLm1vZGVsc1xuICAgICAgY29uc29sZS5sb2cgbmV3aWNrT2JqXG5cbiAgICAgIG5vZGVzID0gbXQuYXBwXG4gICAgICAgIHNlcXM6IEBtc2Euc2Vxcy5tb2RlbHNcbiAgICAgICAgdHJlZTogbmV3aWNrT2JqXG5cbiAgICAgIGNvbnNvbGUubG9nIFwibm9kZXNcIiwgbm9kZXNcblxuICAgICAgdCA9IG5ldyBtdC5hZGFwdGVycy50cmVlXG4gICAgICAgIG1vZGVsOiBub2RlcyxcbiAgICAgICAgZWw6IHRyZWVEaXYsXG4gICAgICAgIHNlbDogc2VsLFxuXG4gICAgICB0cmVlRGl2LnN0eWxlLndpZHRoID0gXCI1MDBweFwiXG5cbiAgICAjIHdvcmthcm91bmQgYWdhaW5zdCBicm93c2VyaWZ5J3Mgc3RhdGljIGFuYWx5c2lzXG4gICAgcmVxdWlyZTogKHBrZykgLT5cbiAgICAgIHJlcXVpcmUgcGtnXG5cbl8uZXh0ZW5kIHRyZWVIZWxwZXI6OiAsIHRmXG4iLCJib25lVmlldyA9IHJlcXVpcmUoXCJiYWNrYm9uZS1jaGlsZHNcIilcblNlcUJsb2NrID0gcmVxdWlyZSBcIi4vY2FudmFzL0NhbnZhc1NlcUJsb2NrXCJcbkxhYmVsQmxvY2sgPSByZXF1aXJlIFwiLi9sYWJlbHMvTGFiZWxCbG9ja1wiXG5cbm1vZHVsZS5leHBvcnRzID0gYm9uZVZpZXcuZXh0ZW5kXG5cbiAgaW5pdGlhbGl6ZTogKGRhdGEpIC0+XG4gICAgQGcgPSBkYXRhLmdcblxuICAgIGlmIHRydWVcbiAgICAgIGxhYmVsYmxvY2sgPSBuZXcgTGFiZWxCbG9jayB7bW9kZWw6IEBtb2RlbCwgZzogQGd9XG4gICAgICBsYWJlbGJsb2NrLm9yZGVyaW5nID0gLTFcbiAgICAgIEBhZGRWaWV3IFwibGFiZWxibG9ja1wiLGxhYmVsYmxvY2tcblxuICAgIGlmIEBnLnZpcy5nZXQgXCJzZXF1ZW5jZXNcIlxuICAgICAgc2VxYmxvY2sgPSBuZXcgU2VxQmxvY2sge21vZGVsOiBAbW9kZWwsIGc6IEBnfVxuICAgICAgc2VxYmxvY2sub3JkZXJpbmcgPSAwXG4gICAgICBAYWRkVmlldyBcInNlcWJsb2NrXCIsc2VxYmxvY2tcblxuICAgIEBsaXN0ZW5UbyBAZy56b29tZXIsIFwiY2hhbmdlOmFsaWdubWVudEhlaWdodFwiLCBAYWRqdXN0SGVpZ2h0XG4gICAgQGxpc3RlblRvIEBnLnpvb21lciwgXCJjaGFuZ2U6YWxpZ25tZW50V2lkdGhcIiwgQGFkanVzdFdpZHRoXG4gICAgQGxpc3RlblRvIEBnLmNvbHVtbnMsIFwiY2hhbmdlOmhpZGRlblwiLCBAYWRqdXN0SGVpZ2h0XG5cbiAgcmVuZGVyOiAtPlxuICAgIEByZW5kZXJTdWJ2aWV3cygpXG4gICAgQGVsLmNsYXNzTmFtZSA9IFwiYmlvanNfbXNhX2FsYm9keVwiXG4gICAgQGVsLnN0eWxlLndoaXRlU3BhY2UgPSBcIm5vd3JhcFwiXG4gICAgQGFkanVzdEhlaWdodCgpXG4gICAgQGFkanVzdFdpZHRoKClcbiAgICBAXG5cbiAgYWRqdXN0SGVpZ2h0OiAtPlxuICAgIGlmIEBnLnpvb21lci5nZXQoXCJhbGlnbm1lbnRIZWlnaHRcIikgaXMgXCJhdXRvXCJcbiAgICAgICMgVE9ETzogZml4IHRoZSBtYWdpYyA1XG4gICAgICBAZWwuc3R5bGUuaGVpZ2h0ID0gKEBnLnpvb21lci5nZXQoXCJyb3dIZWlnaHRcIikgKiBAbW9kZWwubGVuZ3RoKSArIDVcbiAgICBlbHNlXG4gICAgICBAZWwuc3R5bGUuaGVpZ2h0ID0gQGcuem9vbWVyLmdldCBcImFsaWdubWVudEhlaWdodFwiXG5cbiAgYWRqdXN0V2lkdGg6IC0+XG4gICAgIyBUT0RPOiAxNSBpcyB0aGUgd2lkdGggb2YgdGhlIHNjcm9sbGJhclxuICAgIEBlbC5zdHlsZS53aWR0aCA9IEBnZXRXaWR0aCgpXG5cbiAgZ2V0V2lkdGg6IC0+XG4gICAgd2lkdGggPSAwXG4gICAgd2lkdGggKz0gQGcuem9vbWVyLmdldExlZnRCbG9ja1dpZHRoKClcbiAgICBpZiBAZy52aXMuZ2V0IFwic2VxdWVuY2VzXCJcbiAgICAgIHdpZHRoICs9IEBnLnpvb21lci5nZXQgXCJhbGlnbm1lbnRXaWR0aFwiXG4gICAgd2lkdGhcbiIsInZpZXcgPSByZXF1aXJlKFwiYmFja2JvbmUtdmlld2pcIilcbm1vdXNlID0gcmVxdWlyZSBcIm1vdXNlLXBvc1wiXG5zZWxlY3Rpb24gPSByZXF1aXJlIFwiLi4vZy9zZWxlY3Rpb24vU2VsZWN0aW9uXCJcbmpib25lID0gcmVxdWlyZSBcImpib25lXCJcbl8gPSByZXF1aXJlIFwidW5kZXJzY29yZVwiXG5cbm1vZHVsZS5leHBvcnRzID0gT3ZlcnZpZXdCb3ggPSB2aWV3LmV4dGVuZFxuXG4gIGNsYXNzTmFtZTogXCJiaW9qc19tc2Ffb3ZlcnZpZXdib3hcIlxuICB0YWdOYW1lOiBcImNhbnZhc1wiXG5cbiAgaW5pdGlhbGl6ZTogKGRhdGEpIC0+XG4gICAgQGcgPSBkYXRhLmdcbiAgICBAbGlzdGVuVG8gQGcuem9vbWVyLFwiY2hhbmdlOmJveFJlY3RXaWR0aCBjaGFuZ2U6Ym94UmVjdEhlaWdodFxuICAgIGNoYW5nZTpvdmVydmlld2JveFBhZGRpbmdUb3BcIiwgQHJlbmRlclxuICAgIEBsaXN0ZW5UbyBAZy5zZWxjb2wsIFwiYWRkIHJlc2V0IGNoYW5nZVwiLCBAcmVuZGVyXG4gICAgQGxpc3RlblRvIEBnLmNvbHVtbnMsIFwiY2hhbmdlOmhpZGRlblwiLCBAcmVuZGVyXG4gICAgQGxpc3RlblRvIEBnLmNvbG9yc2NoZW1lLCBcImNoYW5nZTpzaG93TG93ZXJDYXNlXCIsIEByZW5kZXJcbiAgICBAbGlzdGVuVG8gQG1vZGVsLCBcImNoYW5nZVwiLCBfLmRlYm91bmNlIEByZW5kZXIsIDVcblxuICAgICMgY29sb3JcbiAgICBAY29sb3IgPSBAZy5jb2xvcnNjaGVtZS5nZXRTZWxlY3RlZFNjaGVtZSgpXG4gICAgQGxpc3RlblRvIEBnLmNvbG9yc2NoZW1lLCBcImNoYW5nZTpzY2hlbWVcIiwgLT5cbiAgICAgIEBjb2xvciA9IEBnLmNvbG9yc2NoZW1lLmdldFNlbGVjdGVkU2NoZW1lKClcbiAgICAgIEByZW5kZXIoKVxuICAgIEBkcmFnU3RhcnQgPSBbXVxuXG4gIGV2ZW50czpcbiAgICBjbGljazogXCJfb25jbGlja1wiXG4gICAgbW91c2Vkb3duOiBcIl9vbm1vdXNlZG93blwiXG5cbiAgcmVuZGVyOiAtPlxuICAgIEBfY3JlYXRlQ2FudmFzKClcbiAgICBAZWwudGV4dENvbnRlbnQgPSBcIm92ZXJ2aWV3XCJcbiAgICBAZWwuc3R5bGUubWFyZ2luVG9wID0gQGcuem9vbWVyLmdldCBcIm92ZXJ2aWV3Ym94UGFkZGluZ1RvcFwiXG5cbiAgICAjIGJhY2tncm91bmQgYmcgZm9yIG5vbi1kcmF3ZWQgYXJlYVxuICAgIEBjdHguZmlsbFN0eWxlID0gXCIjOTk5OTk5XCJcbiAgICBAY3R4LmZpbGxSZWN0IDAsMCxAZWwud2lkdGgsQGVsLmhlaWdodFxuXG4gICAgcmVjdFdpZHRoID0gQGcuem9vbWVyLmdldCBcImJveFJlY3RXaWR0aFwiXG4gICAgcmVjdEhlaWdodCA9IEBnLnpvb21lci5nZXQgXCJib3hSZWN0SGVpZ2h0XCJcbiAgICBoaWRkZW4gPSBAZy5jb2x1bW5zLmdldCBcImhpZGRlblwiXG4gICAgc2hvd0xvd2VyQ2FzZSA9IEBnLmNvbG9yc2NoZW1lLmdldCBcInNob3dMb3dlckNhc2VcIlxuXG4gICAgeSA9IC1yZWN0SGVpZ2h0XG4gICAgZm9yIGkgaW4gWzAuLiBAbW9kZWwubGVuZ3RoIC0gMV0gYnkgMVxuICAgICAgc2VxID0gQG1vZGVsLmF0KGkpLmdldCBcInNlcVwiXG4gICAgICB4ID0gMFxuICAgICAgeSA9IHkgKyByZWN0SGVpZ2h0XG5cblxuICAgICAgaWYgQG1vZGVsLmF0KGkpLmdldCBcImhpZGRlblwiXG4gICAgICAgICMgaGlkZGVuIHNlcVxuICAgICAgICBjb25zb2xlLmxvZyBAbW9kZWwuYXQoaSkuZ2V0IFwiaGlkZGVuXCJcbiAgICAgICAgQGN0eC5maWxsU3R5bGUgPSBcImdyZXlcIlxuICAgICAgICBAY3R4LmZpbGxSZWN0IDAseSxzZXEubGVuZ3RoICogcmVjdFdpZHRoLHJlY3RIZWlnaHRcbiAgICAgICAgY29udGludWVcblxuICAgICAgZm9yIGogaW4gWzAuLiBzZXEubGVuZ3RoIC0gMV0gYnkgMVxuICAgICAgICBjID0gc2VxW2pdXG4gICAgICAgICMgdG9kbzogb3B0aW9uYWwgdXBwZXJjYXNpbmdcbiAgICAgICAgYyA9IGMudG9VcHBlckNhc2UoKSBpZiBzaG93TG93ZXJDYXNlXG4gICAgICAgIGNvbG9yID0gQGNvbG9yLmdldENvbG9yIGMsIHtwb3M6IGp9XG5cbiAgICAgICAgaWYgaGlkZGVuLmluZGV4T2YoaikgPj0gMFxuICAgICAgICAgIGNvbG9yID0gXCJncmV5XCJcblxuICAgICAgICBpZiBjb2xvcj9cbiAgICAgICAgICBAY3R4LmZpbGxTdHlsZSA9IGNvbG9yXG4gICAgICAgICAgQGN0eC5maWxsUmVjdCB4LHkscmVjdFdpZHRoLHJlY3RIZWlnaHRcblxuICAgICAgICB4ID0geCArIHJlY3RXaWR0aFxuXG4gICAgQF9kcmF3U2VsZWN0aW9uKClcblxuICBfZHJhd1NlbGVjdGlvbjogLT5cbiAgICAjIGhpZGUgZHVyaW5nIHNlbGVjdGlvblxuICAgIHJldHVybiBpZiBAZHJhZ1N0YXJ0Lmxlbmd0aCA+IDAgYW5kIG5vdCBAcHJvbG9uZ1NlbGVjdGlvblxuXG4gICAgcmVjdFdpZHRoID0gQGcuem9vbWVyLmdldCBcImJveFJlY3RXaWR0aFwiXG4gICAgcmVjdEhlaWdodCA9IEBnLnpvb21lci5nZXQgXCJib3hSZWN0SGVpZ2h0XCJcbiAgICBtYXhIZWlnaHQgPSByZWN0SGVpZ2h0ICogQG1vZGVsLmxlbmd0aFxuICAgIEBjdHguZmlsbFN0eWxlID0gXCIjZmZmZjAwXCJcbiAgICBAY3R4Lmdsb2JhbEFscGhhID0gMC45XG4gICAgZm9yIGkgaW4gWzAuLiBAZy5zZWxjb2wubGVuZ3RoIC0gMV0gYnkgMVxuICAgICAgc2VsID0gQGcuc2VsY29sLmF0KGkpXG4gICAgICBpZiBzZWwuZ2V0KCd0eXBlJykgaXMgJ2NvbHVtbidcbiAgICAgICAgQGN0eC5maWxsUmVjdCByZWN0V2lkdGggKiBzZWwuZ2V0KCd4U3RhcnQnKSwwLHJlY3RXaWR0aCAqXG4gICAgICAgIChzZWwuZ2V0KCd4RW5kJykgLSBzZWwuZ2V0KCd4U3RhcnQnKSArIDEpLG1heEhlaWdodFxuICAgICAgZWxzZSBpZiBzZWwuZ2V0KCd0eXBlJykgaXMgJ3JvdydcbiAgICAgICAgc2VxID0gKEBtb2RlbC5maWx0ZXIgKGVsKSAtPiBlbC5nZXQoJ2lkJykgaXMgc2VsLmdldCgnc2VxSWQnKSlbMF1cbiAgICAgICAgcG9zID0gQG1vZGVsLmluZGV4T2Yoc2VxKVxuICAgICAgICBAY3R4LmZpbGxSZWN0IDAscmVjdEhlaWdodCAqIHBvcywgcmVjdFdpZHRoICogc2VxLmdldCgnc2VxJykubGVuZ3RoLCByZWN0SGVpZ2h0XG4gICAgICBlbHNlIGlmIHNlbC5nZXQoJ3R5cGUnKSBpcyAncG9zJ1xuICAgICAgICBzZXEgPSAoQG1vZGVsLmZpbHRlciAoZWwpIC0+IGVsLmdldCgnaWQnKSBpcyBzZWwuZ2V0KCdzZXFJZCcpKVswXVxuICAgICAgICBwb3MgPSBAbW9kZWwuaW5kZXhPZihzZXEpXG4gICAgICAgIEBjdHguZmlsbFJlY3QgcmVjdFdpZHRoICogc2VsLmdldCgneFN0YXJ0JykscmVjdEhlaWdodCAqIHBvcywgcmVjdFdpZHRoICogKHNlbC5nZXQoJ3hFbmQnKSAtIHNlbC5nZXQoJ3hTdGFydCcpICsgMSksIHJlY3RIZWlnaHRcblxuICAgIEBjdHguZ2xvYmFsQWxwaGEgPSAxXG5cbiAgX29uY2xpY2s6IChldnQpIC0+XG4gICAgQGcudHJpZ2dlciBcIm1ldGE6Y2xpY2tcIiwge3NlcUlkOiBAbW9kZWwuZ2V0IFwiaWRcIiwgZXZ0OmV2dH1cblxuICBfb25tb3VzZW1vdmU6IChlKSAtPlxuICAgICMgZHVwbGljYXRlIGV2ZW50c1xuICAgIHJldHVybiBpZiBAZHJhZ1N0YXJ0Lmxlbmd0aCBpcyAwXG5cbiAgICBAcmVuZGVyKClcbiAgICBAY3R4LmZpbGxTdHlsZSA9IFwiI2ZmZmYwMFwiXG4gICAgQGN0eC5nbG9iYWxBbHBoYSA9IDAuOVxuXG4gICAgcmVjdCA9IEBfY2FsY1NlbGVjdGlvbiggbW91c2UuYWJzIGUgKVxuICAgIEBjdHguZmlsbFJlY3QgcmVjdFswXVswXSxyZWN0WzFdWzBdLHJlY3RbMF1bMV0gLSByZWN0WzBdWzBdLCByZWN0WzFdWzFdIC0gcmVjdFsxXVswXVxuXG4gICAgIyBhYm9ydCBzZWxlY3Rpb24gZXZlbnRzIG9mIHRoZSBicm93c2VyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuXG4gICMgc3RhcnQgdGhlIHNlbGVjdGlvbiBtb2RlXG4gIF9vbm1vdXNlZG93bjogKGUpIC0+XG4gICAgQGRyYWdTdGFydCA9IG1vdXNlLmFicyBlXG4gICAgQGRyYWdTdGFydFJlbCA9IG1vdXNlLnJlbCBlXG5cbiAgICBpZiBlLmN0cmxLZXkgb3IgZS5tZXRhS2V5XG4gICAgICBAcHJvbG9uZ1NlbGVjdGlvbiA9IHRydWVcbiAgICBlbHNlXG4gICAgICBAcHJvbG9uZ1NlbGVjdGlvbiA9IGZhbHNlXG4gICAgIyBlbmFibGUgZ2xvYmFsIGxpc3RlbmVyc1xuICAgIGpib25lKGRvY3VtZW50LmJvZHkpLm9uICdtb3VzZW1vdmUub3Zlcm1vdmUnLCAoZSkgPT4gQF9vbm1vdXNlbW92ZShlKVxuICAgIGpib25lKGRvY3VtZW50LmJvZHkpLm9uICdtb3VzZXVwLm92ZXJ1cCcsIChlKSA9PiBAX29ubW91c2V1cChlKVxuICAgIHJldHVybiBAZHJhZ1N0YXJ0XG5cbiAgIyBjYWxjdWxhdGVzIHRoZSBjdXJyZW50IHNlbGVjdGlvblxuICBfY2FsY1NlbGVjdGlvbjogKGRyYWdNb3ZlKSAtPlxuICAgICMgcmVsYXRpdmUgdG8gZmlyc3QgY2xpY2tcbiAgICBkcmFnUmVsID0gW2RyYWdNb3ZlWzBdIC0gQGRyYWdTdGFydFswXSwgZHJhZ01vdmVbMV0gLSBAZHJhZ1N0YXJ0WzFdXVxuXG4gICAgIyByZWxhdGl2ZSB0byB0YXJnZXRcbiAgICBmb3IgaSBpbiBbMC4uMV0gYnkgMVxuICAgICAgZHJhZ1JlbFtpXSA9IEBkcmFnU3RhcnRSZWxbaV0gKyBkcmFnUmVsW2ldXG5cbiAgICAjIDA6eCwgMTogeVxuICAgIHJlY3QgPSBbW0BkcmFnU3RhcnRSZWxbMF0sIGRyYWdSZWxbMF1dLCBbQGRyYWdTdGFydFJlbFsxXSwgZHJhZ1JlbFsxXV1dXG5cbiAgICAjIHN3YXAgdGhlIGNvb3JkaW5hdGVzIGlmIG5lZWRlZFxuICAgIGZvciBpIGluIFswLi4xXSBieSAxXG4gICAgICBpZiByZWN0W2ldWzFdIDwgcmVjdFtpXVswXVxuICAgICAgICByZWN0W2ldID0gW3JlY3RbaV1bMV0sIHJlY3RbaV1bMF1dXG5cbiAgICAgICMgbG93ZXIgbGltaXRcbiAgICAgIHJlY3RbaV1bMF0gPSBNYXRoLm1heCByZWN0W2ldWzBdLCAwXG5cbiAgICByZXR1cm4gcmVjdFxuXG4gIF9lbmRTZWxlY3Rpb246IChkcmFnRW5kKSAtPlxuICAgICMgcmVtb3ZlIGxpc3RlbmVyc1xuICAgIGpib25lKGRvY3VtZW50LmJvZHkpLm9mZignLm92ZXJtb3ZlJylcbiAgICBqYm9uZShkb2N1bWVudC5ib2R5KS5vZmYoJy5vdmVydXAnKVxuXG4gICAgIyBkdXBsaWNhdGUgZXZlbnRzXG4gICAgcmV0dXJuIGlmIEBkcmFnU3RhcnQubGVuZ3RoIGlzIDBcblxuICAgIHJlY3QgPSBAX2NhbGNTZWxlY3Rpb24gZHJhZ0VuZFxuXG4gICAgIyB4XG4gICAgZm9yIGkgaW4gWzAuLjFdXG4gICAgICByZWN0WzBdW2ldID0gTWF0aC5mbG9vciggcmVjdFswXVtpXSAvIEBnLnpvb21lci5nZXQoXCJib3hSZWN0V2lkdGhcIikpXG5cbiAgICAjIHlcbiAgICBmb3IgaSBpbiBbMC4uMV1cbiAgICAgIHJlY3RbMV1baV0gPSBNYXRoLmZsb29yKCByZWN0WzFdW2ldIC8gQGcuem9vbWVyLmdldChcImJveFJlY3RIZWlnaHRcIikgKVxuXG4gICAgIyB1cHBlciBsaW1pdFxuICAgIHJlY3RbMF1bMV0gPSBNYXRoLm1pbihAbW9kZWwuZ2V0TWF4TGVuZ3RoKCkgLSAxLCByZWN0WzBdWzFdKVxuICAgIHJlY3RbMV1bMV0gPSBNYXRoLm1pbihAbW9kZWwubGVuZ3RoIC0gMSwgcmVjdFsxXVsxXSlcblxuICAgICMgc2VsZWN0XG4gICAgc2VsaXMgPSBbXVxuICAgIGZvciBqIGluIFtyZWN0WzFdWzBdLi5yZWN0WzFdWzFdXSBieSAxXG4gICAgICBhcmdzID0gc2VxSWQ6IEBtb2RlbC5hdChqKS5nZXQoJ2lkJyksIHhTdGFydDogcmVjdFswXVswXSwgeEVuZDogcmVjdFswXVsxXVxuICAgICAgc2VsaXMucHVzaCBuZXcgc2VsZWN0aW9uLnBvc3NlbCBhcmdzXG5cbiAgICAjIHJlc2V0XG4gICAgQGRyYWdTdGFydCA9IFtdXG4gICAgIyBsb29rIGZvciBjdHJsIGtleVxuICAgIGlmIEBwcm9sb25nU2VsZWN0aW9uXG4gICAgICBAZy5zZWxjb2wuYWRkIHNlbGlzXG4gICAgZWxzZVxuICAgICAgQGcuc2VsY29sLnJlc2V0IHNlbGlzXG5cbiAgICAjIHNhZmV0eSBjaGVjayArIHVwZGF0ZSBvZmZzZXRcbiAgICBAZy56b29tZXIuc2V0TGVmdE9mZnNldCByZWN0WzBdWzBdXG4gICAgQGcuem9vbWVyLnNldFRvcE9mZnNldCByZWN0WzFdWzBdXG5cbiAgIyBlbmRzIHRoZSBzZWxlY3Rpb24gbW9kZVxuICBfb25tb3VzZXVwOiAoZSkgLT5cbiAgICBAX2VuZFNlbGVjdGlvbiBtb3VzZS5hYnMgZVxuXG4gIF9vbm1vdXNlb3V0OiAoZSkgLT5cbiAgICBAX2VuZFNlbGVjdGlvbiBtb3VzZS5hYnMgZVxuXG4gIyBpbml0IHRoZSBjYW52YXNcbiAgX2NyZWF0ZUNhbnZhczogLT5cbiAgICByZWN0V2lkdGggPSBAZy56b29tZXIuZ2V0IFwiYm94UmVjdFdpZHRoXCJcbiAgICByZWN0SGVpZ2h0ID0gQGcuem9vbWVyLmdldCBcImJveFJlY3RIZWlnaHRcIlxuXG4gICAgQGVsLmhlaWdodCA9IEBtb2RlbC5sZW5ndGggKiByZWN0SGVpZ2h0XG4gICAgQGVsLndpZHRoID0gQG1vZGVsLmdldE1heExlbmd0aCgpICogcmVjdFdpZHRoXG4gICAgQGN0eCA9IEBlbC5nZXRDb250ZXh0IFwiMmRcIlxuICAgIEBlbC5zdHlsZS5vdmVyZmxvdyA9IFwic2Nyb2xsXCJcbiAgICBAZWwuc3R5bGUuY3Vyc29yID0gXCJjcm9zc2hhaXJcIlxuIiwiYm9uZVZpZXcgPSByZXF1aXJlKFwiYmFja2JvbmUtY2hpbGRzXCIpXG5fID0gcmVxdWlyZSAndW5kZXJzY29yZSdcbmsgPSByZXF1aXJlICdrb2FsYS1qcydcbmRvbSA9IHJlcXVpcmUgJ2RvbS1oZWxwZXInXG5zZWwgPSByZXF1aXJlIFwiLi4vZy9zZWxlY3Rpb24vU2VsZWN0aW9uXCJcblxuIyB0aGlzIGlzIGEgdmVyeSBzaW1wbGlzdGljIGFwcHJvYWNoIHRvIHNob3cgc2VhcmNoIHJlc3VsdFxuIyBUT0RPOiBuZWVkcyBwcm9wZXIgc3R5bGluZ1xubW9kdWxlLmV4cG9ydHMgPSBib25lVmlldy5leHRlbmRcblxuICBpbml0aWFsaXplOiAoZGF0YSkgLT5cbiAgICBAZyA9IGRhdGEuZ1xuXG4gICAgQGxpc3RlblRvIEBnLnVzZXIsIFwiY2hhbmdlOnNlYXJjaFRleHRcIiwgKG1vZGVsLCBwcm9wKSAtPlxuICAgICAgQHNlYXJjaCBwcm9wXG4gICAgICBAcmVuZGVyKClcbiAgICBAc2VsID0gW11cbiAgICBAc2VsUG9zID0gMFxuXG4gIGV2ZW50czpcbiAgICBcInNjcm9sbFwiOiBcIl9zZW5kU2Nyb2xsRXZlbnRcIlxuXG4gIHJlbmRlcjogLT5cbiAgICBAcmVuZGVyU3Vidmlld3MoKVxuXG4gICAgQGVsLmNsYXNzTmFtZSA9IFwiYmlvanNfbXNhX3NlYXJjaHJlc3VsdFwiXG4gICAgc2VhcmNoVGV4dCA9IEBnLnVzZXIuZ2V0KFwic2VhcmNoVGV4dFwiKVxuICAgIGlmIHNlYXJjaFRleHQ/IGFuZCBzZWFyY2hUZXh0Lmxlbmd0aCA+IDBcbiAgICAgIGlmIEBzZWwubGVuZ3RoIGlzIDBcbiAgICAgICAgQGVsLnRleHRDb250ZW50ID0gXCJubyBzZWxlY3Rpb24gZm91bmRcIlxuICAgICAgZWxzZVxuICAgICAgICBAcmVzdWx0Qm94ID0gay5tayBcImRpdlwiXG4gICAgICAgIEByZXN1bHRCb3guY2xhc3NOYW1lID0gXCJiaW9qc19tc2Ffc2VhcmNocmVzdWx0X292Ym94XCJcbiAgICAgICAgQHVwZGF0ZVJlc3VsdCgpXG4gICAgICAgIEBlbC5hcHBlbmRDaGlsZCBAcmVzdWx0Qm94XG4gICAgICAgIEBlbC5hcHBlbmRDaGlsZCBAYnVpbGRCdG5zKClcbiAgICBAXG5cbiAgdXBkYXRlUmVzdWx0OiAtPlxuICAgICAgdGV4dCA9IFwic2VhcmNoIHBhdHRlcm46IFwiICsgQGcudXNlci5nZXQoXCJzZWFyY2hUZXh0XCIpXG4gICAgICB0ZXh0ICs9IFwiLCBzZWxlY3Rpb246IFwiICsgKEBzZWxQb3MgKyAxKVxuICAgICAgc2VsaSA9IEBzZWxbQHNlbFBvc11cbiAgICAgIHRleHQgKz0gXCIgKFwiXG4gICAgICB0ZXh0ICs9IHNlbGkuZ2V0KFwieFN0YXJ0XCIpICsgXCIgLSBcIiArIHNlbGkuZ2V0KFwieEVuZFwiKVxuICAgICAgdGV4dCArPSBcIiwgaWQ6IFwiICsgc2VsaS5nZXQoXCJzZXFJZFwiKVxuICAgICAgdGV4dCArPSBcIilcIlxuICAgICAgQHJlc3VsdEJveC50ZXh0Q29udGVudCA9IHRleHRcblxuICBidWlsZEJ0bnM6IC0+XG4gICAgcHJldkJ0biA9IGsubWsgXCJidXR0b25cIlxuICAgIHByZXZCdG4udGV4dENvbnRlbnQgPSBcIlByZXZcIlxuICAgIHByZXZCdG4uYWRkRXZlbnRMaXN0ZW5lciBcImNsaWNrXCIsID0+XG4gICAgICBAbW92ZVNlbCAtMVxuXG4gICAgbmV4dEJ0biA9IGsubWsgXCJidXR0b25cIlxuICAgIG5leHRCdG4udGV4dENvbnRlbnQgPSBcIk5leHRcIlxuICAgIG5leHRCdG4uYWRkRXZlbnRMaXN0ZW5lciBcImNsaWNrXCIsID0+XG4gICAgICBAbW92ZVNlbCAxXG5cbiAgICBhbGxCdG4gPSBrLm1rIFwiYnV0dG9uXCJcbiAgICBhbGxCdG4udGV4dENvbnRlbnQgPSBcIkFsbFwiXG4gICAgYWxsQnRuLmFkZEV2ZW50TGlzdGVuZXIgXCJjbGlja1wiLCA9PlxuICAgICAgQGcuc2VsY29sLnJlc2V0IEBzZWxcblxuICAgIHNlYXJjaHJvdyA9IGsubWsgXCJkaXZcIlxuICAgIHNlYXJjaHJvdy5hcHBlbmRDaGlsZCBwcmV2QnRuXG4gICAgc2VhcmNocm93LmFwcGVuZENoaWxkIG5leHRCdG5cbiAgICBzZWFyY2hyb3cuYXBwZW5kQ2hpbGQgYWxsQnRuXG4gICAgc2VhcmNocm93LmNsYXNzTmFtZSA9IFwiYmlvanNfbXNhX3NlYXJjaHJlc3VsdF9yb3dcIlxuICAgIHNlYXJjaHJvd1xuXG4gIG1vdmVTZWw6IChyZWxEaXN0KSAtPlxuICAgIHNlbE5ldyA9IEBzZWxQb3MgKyByZWxEaXN0XG4gICAgaWYgc2VsTmV3IDwgMCBvciBzZWxOZXcgPj0gQHNlbC5sZW5ndGhcbiAgICAgIHJldHVybiAtMVxuICAgIGVsc2VcbiAgICAgIEBmb2N1cyBzZWxOZXdcbiAgICAgIEBzZWxQb3MgPSBzZWxOZXdcbiAgICAgIEB1cGRhdGVSZXN1bHQoKVxuXG4gIGZvY3VzOiAoc2VsUG9zKSAtPlxuICAgIHNlbGkgPSBAc2VsW3NlbFBvc11cbiAgICBsZWZ0SW5kZXggPSBzZWxpLmdldCBcInhTdGFydFwiXG4gICAgQGcuem9vbWVyLnNldExlZnRPZmZzZXQgbGVmdEluZGV4XG4gICAgQGcuc2VsY29sLnJlc2V0IFtzZWxpXVxuXG4gIHNlYXJjaDogKHNlYXJjaFRleHQpIC0+XG4gICAgIyBtYXJrcyBhbGwgaGl0c1xuICAgIHNlYXJjaCA9IG5ldyBSZWdFeHAgc2VhcmNoVGV4dCwgXCJnaVwiXG4gICAgbmV3U2VsaSA9IFtdXG4gICAgbGVmdGVzdEluZGV4ID0gb3JpZ0luZGV4ID0gMTAwMDQyXG5cbiAgICBAbW9kZWwuZWFjaCAoc2VxKSAtPlxuICAgICAgc3RyU2VxID0gc2VxLmdldChcInNlcVwiKVxuICAgICAgd2hpbGUgbWF0Y2ggPSBzZWFyY2guZXhlYyBzdHJTZXFcbiAgICAgICAgaW5kZXggPSBtYXRjaC5pbmRleFxuICAgICAgICBhcmdzID0ge3hTdGFydDogaW5kZXgsIHhFbmQ6IGluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoIC0gMSwgc2VxSWQ6XG4gICAgICAgICAgc2VxLmdldChcImlkXCIpfVxuICAgICAgICBuZXdTZWxpLnB1c2ggbmV3IHNlbC5wb3NzZWwoYXJncylcbiAgICAgICAgbGVmdGVzdEluZGV4ID0gTWF0aC5taW4gaW5kZXgsIGxlZnRlc3RJbmRleFxuXG4gICAgQGcuc2VsY29sLnJlc2V0IG5ld1NlbGlcblxuICAgICMgc2FmZXR5IGNoZWNrICsgdXBkYXRlIG9mZnNldFxuICAgIGxlZnRlc3RJbmRleCA9IDAgaWYgbGVmdGVzdEluZGV4IGlzIG9yaWdJbmRleFxuICAgIEBnLnpvb21lci5zZXRMZWZ0T2Zmc2V0IGxlZnRlc3RJbmRleFxuXG4gICAgQHNlbCA9IG5ld1NlbGlcbiIsImJvbmVWaWV3ID0gcmVxdWlyZShcImJhY2tib25lLWNoaWxkc1wiKVxuQWxpZ25tZW50Qm9keSA9IHJlcXVpcmUgXCIuL0FsaWdubWVudEJvZHlcIlxuSGVhZGVyQmxvY2sgPSByZXF1aXJlIFwiLi9oZWFkZXIvSGVhZGVyQmxvY2tcIlxuT3ZlcnZpZXdCb3ggPSByZXF1aXJlIFwiLi9PdmVydmlld0JveFwiXG5TZWFyY2ggPSByZXF1aXJlIFwiLi9TZWFyY2hcIlxuXyA9IHJlcXVpcmUgJ3VuZGVyc2NvcmUnXG5cbiMgYSBuZWF0IGNvbGxlY3Rpb24gdmlld1xubW9kdWxlLmV4cG9ydHMgPSBib25lVmlldy5leHRlbmRcblxuICBpbml0aWFsaXplOiAoZGF0YSkgLT5cbiAgICBAZyA9IGRhdGEuZ1xuXG4gICAgQGRyYXcoKVxuICAgICNAbGlzdGVuVG8gQG1vZGVsLFwicmVzZXRcIiwgLT5cbiAgICAjIHdlIG5lZWQgdG8gd2FpdCB1bnRpbCBzdGF0cyBnaXZlcyB1cyB0aGUgb2tcbiAgICBAbGlzdGVuVG8gQGcuc3RhdHMsXCJyZXNldFwiLCAtPlxuICAgICAgQHJlcmVuZGVyKClcblxuICAgICMgZGVib3VuY2UgYSBidWxrIG9wZXJhdGlvblxuICAgIEBsaXN0ZW5UbyBAbW9kZWwsXCJjaGFuZ2U6aGlkZGVuXCIsIF8uZGVib3VuY2UgQHJlcmVuZGVyLCAxMFxuXG4gICAgQGxpc3RlblRvIEBtb2RlbCxcInNvcnRcIiwgQHJlcmVuZGVyXG4gICAgQGxpc3RlblRvIEBtb2RlbCxcImFkZFwiLCAtPlxuICAgICAgY29uc29sZS5sb2cgXCJzZXEgYWRkXCJcblxuICAgIEBsaXN0ZW5UbyBAZy52aXMsXCJjaGFuZ2U6c2VxdWVuY2VzXCIsIEByZXJlbmRlclxuICAgIEBsaXN0ZW5UbyBAZy52aXMsXCJjaGFuZ2U6b3ZlcnZpZXdib3hcIiwgQHJlcmVuZGVyXG4gICAgQGxpc3RlblRvIEBnLnZpc29yZGVyLFwiY2hhbmdlXCIsIEByZXJlbmRlclxuXG4gIGRyYXc6IC0+XG4gICAgQHJlbW92ZVZpZXdzKClcblxuICAgIGlmIEBnLnZpcy5nZXQgXCJvdmVydmlld2JveFwiXG4gICAgICBvdmVydmlld2JveCA9IG5ldyBPdmVydmlld0JveCB7bW9kZWw6IEBtb2RlbCwgZzogQGd9XG4gICAgICBvdmVydmlld2JveC5vcmRlcmluZyA9IEBnLnZpc29yZGVyLmdldCAnb3ZlcnZpZXdCb3gnXG4gICAgICBAYWRkVmlldyBcIm92ZXJ2aWV3Qm94XCIsIG92ZXJ2aWV3Ym94XG5cbiAgICBpZiB0cnVlXG4gICAgICBoZWFkZXJibG9jayA9IG5ldyBIZWFkZXJCbG9jayB7bW9kZWw6IEBtb2RlbCwgZzogQGd9XG4gICAgICBoZWFkZXJibG9jay5vcmRlcmluZyA9IEBnLnZpc29yZGVyLmdldCAnaGVhZGVyQm94J1xuICAgICAgQGFkZFZpZXcgXCJoZWFkZXJCb3hcIiwgaGVhZGVyYmxvY2tcblxuICAgIGlmIHRydWVcbiAgICAgIHNlYXJjaGJsb2NrID0gbmV3IFNlYXJjaCB7bW9kZWw6IEBtb2RlbCwgZzogQGd9XG4gICAgICBzZWFyY2hibG9jay5vcmRlcmluZyA9IEBnLnZpc29yZGVyLmdldCAnc2VhcmNoQm94J1xuICAgICAgQGFkZFZpZXcgXCJzZWFyY2hib3hcIiwgc2VhcmNoYmxvY2tcblxuICAgIGJvZHkgPSBuZXcgQWxpZ25tZW50Qm9keSB7bW9kZWw6IEBtb2RlbCwgZzogQGd9XG4gICAgYm9keS5vcmRlcmluZyA9IEBnLnZpc29yZGVyLmdldCAnYWxpZ25tZW50Qm9keSdcbiAgICBAYWRkVmlldyBcImJvZHlcIixib2R5XG5cbiAgcmVuZGVyOiAtPlxuICAgIEByZW5kZXJTdWJ2aWV3cygpXG4gICAgQGVsLmNsYXNzTmFtZSA9IFwiYmlvanNfbXNhX3N0YWdlXCJcblxuICAgIEBcblxuICByZXJlbmRlcjogLT5cbiAgICBAZHJhdygpXG4gICAgQHJlbmRlcigpXG4iLCJFdmVudHMgPSByZXF1aXJlKFwiYmlvanMtZXZlbnRzXCIpXG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgQ2FudmFzQ2hhckNhY2hlXG5cbiAgY29uc3RydWN0b3I6IChAZykgLT5cbiAgICBAY2FjaGUgPSB7fVxuICAgIEBjYWNoZUhlaWdodCA9IDBcbiAgICBAY2FjaGVXaWR0aCA9IDBcblxuICAjIHJldHVybnMgYSBjYWNoZWQgY2FudmFzXG4gIGdldEZvbnRUaWxlOiAobGV0dGVyLCB3aWR0aCwgaGVpZ2h0KSAtPlxuICAgICMgdmFsaWRhdGUgY2FjaGVcbiAgICBpZiB3aWR0aCBpc250IEBjYWNoZVdpZHRoIG9yIGhlaWdodCBpc250IEBjYWNoZUhlaWdodFxuICAgICAgQGNhY2hlSGVpZ2h0ID0gaGVpZ2h0XG4gICAgICBAY2FjaGVXaWR0aCA9IHdpZHRoXG4gICAgICBAY2FjaGUgPSB7fVxuXG4gICAgaWYgQGNhY2hlW2xldHRlcl0gaXMgdW5kZWZpbmVkXG4gICAgICBAY3JlYXRlVGlsZSBsZXR0ZXIsIHdpZHRoLCBoZWlnaHRcblxuICAgIHJldHVybiBAY2FjaGVbbGV0dGVyXVxuXG4gICMgY3JlYXRlcyBhIGNhbnZhcyB3aXRoIGEgc2luZ2xlIGxldHRlclxuICAjIChmb3IgdGhlIGZhc3QgZm9udCBjYWNoZSlcbiAgY3JlYXRlVGlsZTogKGxldHRlciwgd2lkdGgsIGhlaWdodCkgLT5cblxuICAgIGNhbnZhcyA9IEBjYWNoZVtsZXR0ZXJdID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBcImNhbnZhc1wiXG4gICAgY2FudmFzLndpZHRoID0gd2lkdGhcbiAgICBjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0XG4gICAgQGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0ICcyZCdcbiAgICBAY3R4LmZvbnQgPSBAZy56b29tZXIuZ2V0KFwicmVzaWR1ZUZvbnRcIikgKyBcInB4IG1vbm9cIlxuXG4gICAgQGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJ1xuICAgIEBjdHgudGV4dEFsaWduID0gXCJjZW50ZXJcIlxuXG4gICAgQGN0eC5maWxsVGV4dCBsZXR0ZXIsd2lkdGggLyAyLGhlaWdodCAvIDIsd2lkdGhcbiIsIl8gPSByZXF1aXJlIFwidW5kZXJzY29yZVwiXG5FdmVudHMgPSByZXF1aXJlIFwiYmlvanMtZXZlbnRzXCJcblxuY2FjaGUgPVxuXG4gIHNldE1heFNjcm9sbEhlaWdodDogLT5cbiAgICBAbWF4U2Nyb2xsSGVpZ2h0ID0gQGcuem9vbWVyLmdldE1heEFsaWdubWVudEhlaWdodCgpIC0gQGcuem9vbWVyLmdldCgnYWxpZ25tZW50SGVpZ2h0JylcblxuICBzZXRNYXhTY3JvbGxXaWR0aDogLT5cbiAgICBAbWF4U2Nyb2xsV2lkdGggPSBAZy56b29tZXIuZ2V0TWF4QWxpZ25tZW50V2lkdGgoKSAtIEBnLnpvb21lci5nZXRBbGlnbm1lbnRXaWR0aCgpXG5cbm1vZHVsZS5leHBvcnRzID0gY2FjaGVDb25zdHJ1Y3RvciA9IChnLG1vZGVsKSAtPlxuICB0aGlzLmcgPSBnXG4gIHRoaXMubW9kZWwgPSBtb2RlbFxuICBAbWF4U2Nyb2xsV2lkdGggPSAwXG4gIEBtYXhTY3JvbGxIZWlnaHQgPSAwXG4gIEBzZXRNYXhTY3JvbGxIZWlnaHQoKVxuICBAc2V0TWF4U2Nyb2xsV2lkdGgoKVxuXG4gIEBsaXN0ZW5UbyBAZy56b29tZXIsIFwiY2hhbmdlOnJvd0hlaWdodFwiLCBAc2V0TWF4U2Nyb2xsSGVpZ2h0XG4gIEBsaXN0ZW5UbyBAZy56b29tZXIsIFwiY2hhbmdlOmNvbHVtbldpZHRoXCIsIEBzZXRNYXhTY3JvbGxXaWR0aFxuICBAbGlzdGVuVG8gQGcuem9vbWVyLCBcImNoYW5nZTphbGlnbm1lbnRXaWR0aFwiLCBAc2V0TWF4U2Nyb2xsV2lkdGhcbiAgQGxpc3RlblRvIEBnLnpvb21lciwgXCJjaGFuZ2U6YWxpZ25tZW50SGVpZ2h0XCIsIEBzZXRNYXhTY3JvbGxIZWlnaHRcbiAgQGxpc3RlblRvIEBtb2RlbCwgXCJhZGQgY2hhbmdlIHJlc2V0XCIsIC0+XG4gICAgQHNldE1heFNjcm9sbEhlaWdodCgpXG4gICAgQHNldE1heFNjcm9sbFdpZHRoKClcbiAgLCBAXG4gIEBcblxuXy5leHRlbmQgY2FjaGVDb25zdHJ1Y3Rvcjo6LCBjYWNoZVxuRXZlbnRzLm1peGluIGNhY2hlQ29uc3RydWN0b3I6OlxuIiwiXyA9IHJlcXVpcmUgXCJ1bmRlcnNjb3JlXCJcblxubW9kdWxlLmV4cG9ydHMgPSBTZWxlY3Rpb25DbGFzcyA9IChnLGN0eCkgLT5cbiAgQGcgPSBnXG4gIEBjdHggPSBjdHhcbiAgQFxuXG5fLmV4dGVuZChTZWxlY3Rpb25DbGFzczo6LFxuXG4gICMgVE9ETzogc2hvdWxkIEkgYmUgbW92ZWQgdG8gdGhlIHNlbGVjdGlvbiBtYW5hZ2VyP1xuICAjIHJldHVybnMgYW4gYXJyYXkgd2l0aCB0aGUgY3VycmVudGx5IHNlbGVjdGVkIHJlc2lkdWVzXG4gICMgZS5nLiBbMCwzXSA9IHBvcyAwIGFuZCAzIGFyZSBzZWxlY3RlZFxuICBfZ2V0U2VsZWN0aW9uOiAobW9kZWwpIC0+XG4gICAgbWF4TGVuID0gbW9kZWwuZ2V0KFwic2VxXCIpLmxlbmd0aFxuICAgIHNlbGVjdGlvbiA9IFtdXG4gICAgc2VscyA9IEBnLnNlbGNvbC5nZXRTZWxGb3JSb3cgbW9kZWwuZ2V0IFwiaWRcIlxuICAgIHJvd3MgPSBfLmZpbmQgc2VscywgKGVsKSAtPiBlbC5nZXQoXCJ0eXBlXCIpIGlzIFwicm93XCJcbiAgICBpZiByb3dzP1xuICAgICAgIyBmdWxsIG1hdGNoXG4gICAgICBmb3IgbiBpbiBbMC4ubWF4TGVuIC0gMV0gYnkgMVxuICAgICAgICBzZWxlY3Rpb24ucHVzaCBuXG4gICAgZWxzZSBpZiBzZWxzLmxlbmd0aCA+IDBcbiAgICAgIGZvciBzZWwgaW4gc2Vsc1xuICAgICAgICBmb3IgbiBpbiBbc2VsLmdldChcInhTdGFydFwiKS4uc2VsLmdldChcInhFbmRcIildIGJ5IDFcbiAgICAgICAgICBzZWxlY3Rpb24ucHVzaCBuXG5cbiAgICByZXR1cm4gc2VsZWN0aW9uXG5cbiAgIyBsb29wcyBvdmVyIGFsbCBzZWxlY3Rpb24gYW5kIGNhbGxzIHRoZSByZW5kZXIgbWV0aG9kXG4gIF9hcHBlbmRTZWxlY3Rpb246IChkYXRhKSAtPlxuICAgIHNlcSA9IGRhdGEubW9kZWwuZ2V0KFwic2VxXCIpXG4gICAgc2VsZWN0aW9uID0gQF9nZXRTZWxlY3Rpb24gZGF0YS5tb2RlbFxuICAgICMgZ2V0IHRoZSBzdGF0dXMgb2YgdGhlIHVwcGVyIGFuZCBsb3dlciByb3dcbiAgICBbbVByZXZTZWwsbU5leHRTZWxdID0gQF9nZXRQcmV2TmV4dFNlbGVjdGlvbiBkYXRhLm1vZGVsXG5cbiAgICBib3hXaWR0aCA9IEBnLnpvb21lci5nZXQoXCJjb2x1bW5XaWR0aFwiKVxuICAgIGJveEhlaWdodCA9IEBnLnpvb21lci5nZXQoXCJyb3dIZWlnaHRcIilcblxuICAgICMgYXZvaWQgdW5uZWNlc3NhcnkgbG9vcHNcbiAgICByZXR1cm4gaWYgc2VsZWN0aW9uLmxlbmd0aCBpcyAwXG5cbiAgICBoaWRkZW5PZmZzZXQgPSAwXG4gICAgZm9yIG4gaW4gWzAuLnNlcS5sZW5ndGggLSAxXSBieSAxXG4gICAgICBpZiBkYXRhLmhpZGRlbi5pbmRleE9mKG4pID49IDBcbiAgICAgICAgaGlkZGVuT2Zmc2V0KytcbiAgICAgIGVsc2VcbiAgICAgICAgayA9IG4gLSBoaWRkZW5PZmZzZXRcbiAgICAgICAgIyBvbmx5IGlmIGl0cyBhIG5ldyBzZWxlY3Rpb25cbiAgICAgICAgaWYgc2VsZWN0aW9uLmluZGV4T2YobikgPj0gMCBhbmQgKGsgaXMgMCBvciBzZWxlY3Rpb24uaW5kZXhPZihuIC0gMSkgPCAwIClcbiAgICAgICAgICBAX3JlbmRlclNlbGVjdGlvbiBuOm4sazprLHNlbGVjdGlvbjogc2VsZWN0aW9uLG1QcmV2U2VsOiBtUHJldlNlbCxtTmV4dFNlbDptTmV4dFNlbCwgeFplcm86IGRhdGEueFplcm8sIHlaZXJvOiBkYXRhLnlaZXJvLCBtb2RlbDogZGF0YS5tb2RlbFxuXG4gICMgZHJhd3MgYSBzaW5nbGUgdXNlciBzZWxlY3Rpb25cbiAgX3JlbmRlclNlbGVjdGlvbjogKGRhdGEpIC0+XG5cbiAgICB4WmVybyA9IGRhdGEueFplcm9cbiAgICB5WmVybyA9IGRhdGEueVplcm9cbiAgICBuID0gZGF0YS5uXG4gICAgayA9IGRhdGEua1xuICAgIHNlbGVjdGlvbiA9IGRhdGEuc2VsZWN0aW9uXG4gICAgIyBhbmQgY2hlY2tzIHRoZSBwcmV2IGFuZCBuZXh0IHJvdyBmb3Igc2VsZWN0aW9uICAtPiBubyBib3JkZXJzIGluIGEgc2VsZWN0aW9uXG4gICAgbVByZXZTZWw9IGRhdGEubVByZXZTZWxcbiAgICBtTmV4dFNlbCA9IGRhdGEubU5leHRTZWxcblxuICAgICMgZ2V0IHRoZSBsZW5ndGggb2YgdGhpcyBzZWxlY3Rpb25cbiAgICBzZWxlY3Rpb25MZW5ndGggPSAwXG4gICAgZm9yIGkgaW4gW24uLiBkYXRhLm1vZGVsLmdldChcInNlcVwiKS5sZW5ndGggLSAxXSBieSAxXG4gICAgICBpZiBzZWxlY3Rpb24uaW5kZXhPZihpKSA+PSAwXG4gICAgICAgIHNlbGVjdGlvbkxlbmd0aCsrXG4gICAgICBlbHNlXG4gICAgICAgIGJyZWFrXG5cbiAgICAjIFRPRE86IHVnbHkhXG4gICAgYm94V2lkdGggPSBAZy56b29tZXIuZ2V0KFwiY29sdW1uV2lkdGhcIilcbiAgICBib3hIZWlnaHQgPSBAZy56b29tZXIuZ2V0KFwicm93SGVpZ2h0XCIpXG4gICAgdG90YWxXaWR0aCA9IChib3hXaWR0aCAqIHNlbGVjdGlvbkxlbmd0aCkgKyAxXG5cbiAgICBoaWRkZW4gPSBAZy5jb2x1bW5zLmdldCgnaGlkZGVuJylcblxuICAgIEBjdHguYmVnaW5QYXRoKClcbiAgICBiZWZvcmVXaWR0aCA9IEBjdHgubGluZVdpZHRoXG4gICAgQGN0eC5saW5lV2lkdGggPSAzXG4gICAgYmVmb3JlU3R5bGUgPSBAY3R4LnN0cm9rZVN0eWxlXG4gICAgQGN0eC5zdHJva2VTdHlsZSA9IFwiI0ZGMDAwMFwiXG5cbiAgICB4WmVybyArPSBrICogYm94V2lkdGhcblxuICAgICMgc3BsaXQgdXAgdGhlIHNlbGVjdGlvbiBpbnRvIHNpbmdsZSBjZWxsc1xuICAgIHhQYXJ0ID0gMFxuICAgIGZvciBpIGluIFswLi4gc2VsZWN0aW9uTGVuZ3RoIC0gMV1cbiAgICAgIHhQb3MgPSBuICsgaVxuICAgICAgaWYgaGlkZGVuLmluZGV4T2YoeFBvcykgPj0gMFxuICAgICAgICBjb250aW51ZVxuICAgICAgIyB1cHBlciBsaW5lXG4gICAgICB1bmxlc3MgbVByZXZTZWw/IGFuZCBtUHJldlNlbC5pbmRleE9mKHhQb3MpID49IDBcbiAgICAgICAgQGN0eC5tb3ZlVG8geFplcm8gKyB4UGFydCwgeVplcm9cbiAgICAgICAgQGN0eC5saW5lVG8geFBhcnQgKyBib3hXaWR0aCArIHhaZXJvLCB5WmVyb1xuICAgICAgIyBsb3dlciBsaW5lXG4gICAgICB1bmxlc3MgbU5leHRTZWw/IGFuZCBtTmV4dFNlbC5pbmRleE9mKHhQb3MpID49IDBcbiAgICAgICAgQGN0eC5tb3ZlVG8geFBhcnQgKyB4WmVybywgYm94SGVpZ2h0ICsgeVplcm9cbiAgICAgICAgQGN0eC5saW5lVG8geFBhcnQgKyBib3hXaWR0aCArIHhaZXJvLCBib3hIZWlnaHQgKyB5WmVyb1xuXG4gICAgICB4UGFydCArPSBib3hXaWR0aFxuXG4gICAgIyBsZWZ0XG4gICAgQGN0eC5tb3ZlVG8geFplcm8seVplcm9cbiAgICBAY3R4LmxpbmVUbyB4WmVybywgYm94SGVpZ2h0ICsgeVplcm9cblxuICAgICMgcmlnaHRcbiAgICBAY3R4Lm1vdmVUbyB4WmVybyArIHRvdGFsV2lkdGgseVplcm9cbiAgICBAY3R4LmxpbmVUbyB4WmVybyArIHRvdGFsV2lkdGgsIGJveEhlaWdodCArIHlaZXJvXG5cbiAgICBAY3R4LnN0cm9rZSgpXG4gICAgQGN0eC5zdHJva2VTdHlsZSA9IGJlZm9yZVN0eWxlXG4gICAgQGN0eC5saW5lV2lkdGggPSBiZWZvcmVXaWR0aFxuXG4gICMgbG9va3MgYXQgdGhlIHNlbGVjdGlvbiBvZiB0aGUgcHJldiBhbmQgbmV4dCBlbFxuICAjIFRPRE86IHRoaXMgaXMgdmVyeSBuYWl2ZSwgYXMgdGhlcmUgbWlnaHQgYmUgZ2FwcyBhYm92ZSBvciBiZWxvd1xuICBfZ2V0UHJldk5leHRTZWxlY3Rpb246IChtb2RlbCkgLT5cblxuICAgIG1vZGVsUHJldiA9IG1vZGVsLmNvbGxlY3Rpb24ucHJldiBtb2RlbFxuICAgIG1vZGVsTmV4dCA9IG1vZGVsLmNvbGxlY3Rpb24ubmV4dCBtb2RlbFxuICAgIG1QcmV2U2VsID0gQF9nZXRTZWxlY3Rpb24gbW9kZWxQcmV2IGlmIG1vZGVsUHJldj9cbiAgICBtTmV4dFNlbCA9IEBfZ2V0U2VsZWN0aW9uIG1vZGVsTmV4dCBpZiBtb2RlbE5leHQ/XG4gICAgW21QcmV2U2VsLG1OZXh0U2VsXVxuKVxuIiwiYm9uZVZpZXcgPSByZXF1aXJlKFwiYmFja2JvbmUtY2hpbGRzXCIpXG5tb3VzZSA9IHJlcXVpcmUgXCJtb3VzZS1wb3NcIlxuXyA9IHJlcXVpcmUgXCJ1bmRlcnNjb3JlXCJcbmpib25lID0gcmVxdWlyZSBcImpib25lXCJcbkNoYXJDYWNoZSA9IHJlcXVpcmUgXCIuL0NhbnZhc0NoYXJDYWNoZVwiXG5TZWxlY3Rpb25DbGFzcyA9IHJlcXVpcmUgXCIuL0NhbnZhc1NlbGVjdGlvblwiXG5DYW52YXNTZXFEcmF3ZXIgPSByZXF1aXJlIFwiLi9DYW52YXNTZXFEcmF3ZXJcIlxuQ2FudmFzQ29vcmRzQ2FjaGUgPSByZXF1aXJlIFwiLi9DYW52YXNDb29yZHNDYWNoZVwiXG5cbm1vZHVsZS5leHBvcnRzID0gYm9uZVZpZXcuZXh0ZW5kXG5cbiAgdGFnTmFtZTogXCJjYW52YXNcIlxuXG4gIGluaXRpYWxpemU6IChkYXRhKSAtPlxuICAgIEBnID0gZGF0YS5nXG5cbiAgICBAbGlzdGVuVG8gQGcuem9vbWVyLCBcImNoYW5nZTpfYWxpZ25tZW50U2Nyb2xsTGVmdCBjaGFuZ2U6X2FsaWdubWVudFNjcm9sbFRvcFwiLCAobW9kZWwsdmFsdWUsIG9wdGlvbnMpIC0+XG4gICAgICBpZiAobm90IG9wdGlvbnM/Lm9yaWdpbj8pIG9yIG9wdGlvbnMub3JpZ2luIGlzbnQgXCJjYW52YXNzZXFcIlxuICAgICAgICBAcmVuZGVyKClcblxuICAgIEBsaXN0ZW5UbyBAZy5jb2x1bW5zLFwiY2hhbmdlOmhpZGRlblwiLCBAcmVuZGVyXG4gICAgQGxpc3RlblRvIEBnLnpvb21lcixcImNoYW5nZTphbGlnbm1lbnRXaWR0aCBjaGFuZ2U6YWxpZ25tZW50SGVpZ2h0XCIsIEByZW5kZXJcbiAgICBAbGlzdGVuVG8gQGcuY29sb3JzY2hlbWUsIFwiY2hhbmdlXCIsIEByZW5kZXJcbiAgICBAbGlzdGVuVG8gQGcuc2VsY29sLCBcInJlc2V0IGFkZFwiLCBAcmVuZGVyXG5cbiAgICAjIGVsIHByb3BzXG4gICAgQGVsLnN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiXG4gICAgQGVsLnN0eWxlLm92ZXJmbG93WCA9IFwiaGlkZGVuXCJcbiAgICBAZWwuc3R5bGUub3ZlcmZsb3dZID0gXCJoaWRkZW5cIlxuICAgIEBlbC5jbGFzc05hbWUgPSBcImJpb2pzX21zYV9zZXFibG9ja1wiXG5cbiAgICBAY3R4ID0gQGVsLmdldENvbnRleHQgJzJkJ1xuICAgIEBjYWNoZSA9IG5ldyBDaGFyQ2FjaGUgQGdcbiAgICBAY29vcmRzQ2FjaGUgPSBuZXcgQ2FudmFzQ29vcmRzQ2FjaGUgQGcsIEBtb2RlbFxuXG4gICAgIyBjbGVhciB0aGUgY2hhciBjYWNoZVxuICAgIEBsaXN0ZW5UbyBAZy56b29tZXIsIFwiY2hhbmdlOnJlc2lkdWVGb250XCIsIC0+XG4gICAgICBAY2FjaGUgPSBuZXcgQ2hhckNhY2hlIEBnXG4gICAgICBAcmVuZGVyKClcblxuICAgICMgaW5pdCBzZWxlY3Rpb25cbiAgICBAc2VsID0gbmV3IFNlbGVjdGlvbkNsYXNzIEBnLEBjdHhcblxuICAgIEBfc2V0Q29sb3IoKVxuXG4gICAgIyB0aHJvdHRsZSB0aGUgZXhwZW5zaXZlIGRyYXcgZnVuY3Rpb25cbiAgICBAdGhyb3R0bGVUaW1lID0gMFxuICAgIEB0aHJvdHRsZUNvdW50cyA9IDBcbiAgICBpZiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUud2Via2l0QXBwZWFyYW5jZT9cbiAgICAgICMgd2Via2l0IGJyb3dzZXIgLSBubyB0aHJvdHRsaW5nIG5lZWRlZFxuICAgICAgQHRocm90dGxlZERyYXcgPSAtPlxuICAgICAgICBzdGFydCA9ICtuZXcgRGF0ZSgpXG4gICAgICAgIEBkcmF3KClcbiAgICAgICAgQHRocm90dGxlVGltZSArPSArbmV3IERhdGUoKSAtIHN0YXJ0XG4gICAgICAgIEB0aHJvdHRsZUNvdW50cysrXG4gICAgICAgIGlmIEB0aHJvdHRsZUNvdW50cyA+IDE1XG4gICAgICAgICAgdFRpbWUgPSBNYXRoLmNlaWwoQHRocm90dGxlVGltZSAvIEB0aHJvdHRsZUNvdW50cylcbiAgICAgICAgICBjb25zb2xlLmxvZyBcImF2Z0RyYXdUaW1lL1dlYktpdFwiLCB0VGltZVxuICAgICAgICAgICMgcmVtb3ZlIHBlcmYgYW5hbHlzZXJcbiAgICAgICAgICBAdGhyb3R0bGVkRHJhdyA9IEBkcmF3XG4gICAgZWxzZVxuICAgICAgIyBzbG93IGJyb3dzZXJzIGxpa2UgR2Vja29cbiAgICAgIEB0aHJvdHRsZWREcmF3ID0gXy50aHJvdHRsZSBAdGhyb3R0bGVkRHJhdywgMzBcblxuICAgIEBtYW5hZ2VFdmVudHMoKVxuXG5cbiAgIyBtZWFzdXJlcyB0aGUgdGltZSBvZiBhIHJlZHJhdyBhbmQgdGh1cyBzZXQgdGhlIHRocm90dGxlIGxpbWl0XG4gIHRocm90dGxlZERyYXc6IC0+XG4gICAgIyArbmV3IGlzIHRoZSBmYXN0ZXN0OiBodHRwOi8vanNwZXJmLmNvbS9uZXctZGF0ZS12cy1kYXRlLW5vdy12cy1wZXJmb3JtYW5jZS1ub3cvNlxuICAgIHN0YXJ0ID0gK25ldyBEYXRlKClcbiAgICBAZHJhdygpXG4gICAgQHRocm90dGxlVGltZSArPSArbmV3IERhdGUoKSAtIHN0YXJ0XG4gICAgQHRocm90dGxlQ291bnRzKytcblxuICAgICMgcmVtb3ZlIGl0c2VsZiBhZnRlciBhbmFseXNpc1xuICAgIGlmIEB0aHJvdHRsZUNvdW50cyA+IDE1XG4gICAgICB0VGltZSA9IE1hdGguY2VpbChAdGhyb3R0bGVUaW1lIC8gQHRocm90dGxlQ291bnRzKVxuICAgICAgY29uc29sZS5sb2cgXCJhdmdEcmF3VGltZVwiLCB0VGltZVxuICAgICAgdFRpbWUgKj0gIDEuMiAjIGFkZCBzYWZldHkgdGltZVxuICAgICAgdFRpbWUgPSBNYXRoLm1heCAyMCwgdFRpbWUgIyBsaW1pdCBmb3IgdWx0cmEgZmFzdCBjb21wdXRlcnNcbiAgICAgIEB0aHJvdHRsZWREcmF3ID0gXy50aHJvdHRsZSBAZHJhdywgdFRpbWVcblxuICBtYW5hZ2VFdmVudHM6IC0+XG4gICAgZXZlbnRzID0ge31cbiAgICBldmVudHMubW91c2Vkb3duID0gXCJfb25tb3VzZWRvd25cIlxuICAgIGV2ZW50cy50b3VjaHN0YXJ0ID0gXCJfb250b3VjaHN0YXJ0XCJcblxuICAgIGlmIEBnLmNvbmZpZy5nZXQgXCJyZWdpc3Rlck1vdXNlQ2xpY2tzXCJcbiAgICAgIGV2ZW50cy5kYmxjbGljayA9IFwiX29uY2xpY2tcIlxuICAgIGlmIEBnLmNvbmZpZy5nZXQgXCJyZWdpc3Rlck1vdXNlSG92ZXJcIlxuICAgICAgZXZlbnRzLm1vdXNlaW4gPSBcIl9vbm1vdXNlaW5cIlxuICAgICAgZXZlbnRzLm1vdXNlb3V0ID0gXCJfb25tb3VzZW91dFwiXG5cbiAgICBldmVudHMubW91c2V3aGVlbCA9IFwiX29ubW91c2V3aGVlbFwiXG4gICAgZXZlbnRzLkRPTU1vdXNlU2Nyb2xsID0gXCJfb25tb3VzZXdoZWVsXCJcbiAgICBAZGVsZWdhdGVFdmVudHMgZXZlbnRzXG5cbiAgICAjIGxpc3RlbiBmb3IgY2hhbmdlc1xuICAgIEBsaXN0ZW5UbyBAZy5jb25maWcsIFwiY2hhbmdlOnJlZ2lzdGVyTW91c2VIb3ZlclwiLCBAbWFuYWdlRXZlbnRzXG4gICAgQGxpc3RlblRvIEBnLmNvbmZpZywgXCJjaGFuZ2U6cmVnaXN0ZXJNb3VzZUNsaWNrXCIsIEBtYW5hZ2VFdmVudHNcbiAgICBAZHJhZ1N0YXJ0ID0gW11cblxuICBfc2V0Q29sb3I6IC0+XG4gICAgQGNvbG9yID0gQGcuY29sb3JzY2hlbWUuZ2V0U2VsZWN0ZWRTY2hlbWUoKVxuXG4gIGRyYXc6IC0+XG4gICAgIyBmYXN0ZXN0IHdheSB0byBjbGVhciB0aGUgY2FudmFzXG4gICAgIyBodHRwOi8vanNwZXJmLmNvbS9jYW52YXMtY2xlYXItc3BlZWQvMjVcbiAgICBAZWwud2lkdGggPSBAZWwud2lkdGhcblxuICAgICMgZHJhdyBhbGwgdGhlIHN0dWZmXG4gICAgaWYgQHNlcURyYXdlcj8gIGFuZCBAbW9kZWwubGVuZ3RoID4gMFxuICAgICAgIyBjaGFyIGJhc2VkXG4gICAgICBAc2VxRHJhd2VyLmRyYXdMZXR0ZXJzKClcbiAgICAgICMgcm93IGJhc2VkXG4gICAgICBAc2VxRHJhd2VyLmRyYXdSb3dzIEBzZWwuX2FwcGVuZFNlbGVjdGlvbiwgQHNlbFxuICAgICAgQHNlcURyYXdlci5kcmF3Um93cyBAZHJhd0ZlYXR1cmVzLCBAXG5cbiAgZHJhd0ZlYXR1cmVzOiAoZGF0YSkgLT5cbiAgICByZWN0V2lkdGggPSBAZy56b29tZXIuZ2V0IFwiY29sdW1uV2lkdGhcIlxuICAgIHJlY3RIZWlnaHQgPSBAZy56b29tZXIuZ2V0IFwicm93SGVpZ2h0XCJcbiAgICBpZiBkYXRhLm1vZGVsLmF0dHJpYnV0ZXMuaGVpZ2h0ID4gMVxuICAgICAgY3R4ID0gQGN0eFxuICAgICAgZGF0YS5tb2RlbC5hdHRyaWJ1dGVzLmZlYXR1cmVzLmVhY2ggKGZlYXR1cmUpIC0+XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBmZWF0dXJlLmF0dHJpYnV0ZXMuZmlsbENvbG9yIHx8IFwicmVkXCJcbiAgICAgICAgbGVuID0gZmVhdHVyZS5hdHRyaWJ1dGVzLnhFbmQgLSBmZWF0dXJlLmF0dHJpYnV0ZXMueFN0YXJ0ICsgMVxuICAgICAgICB5ID0gKGZlYXR1cmUuYXR0cmlidXRlcy5yb3cgKyAxKSAqIHJlY3RIZWlnaHRcbiAgICAgICAgY3R4LmZpbGxSZWN0IGZlYXR1cmUuYXR0cmlidXRlcy54U3RhcnQgKiByZWN0V2lkdGggKyBkYXRhLnhaZXJvLHkgKyBkYXRhLnlaZXJvLHJlY3RXaWR0aCAqIGxlbixyZWN0SGVpZ2h0XG5cbiAgICAgICMgZHJhdyB0ZXh0XG4gICAgICBjdHguZmlsbFN0eWxlID0gXCJibGFja1wiXG4gICAgICBjdHguZm9udCA9IEBnLnpvb21lci5nZXQoXCJyZXNpZHVlRm9udFwiKSArIFwicHggbW9ub1wiXG4gICAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSdcbiAgICAgIGN0eC50ZXh0QWxpZ24gPSBcImNlbnRlclwiXG5cbiAgICAgIGRhdGEubW9kZWwuYXR0cmlidXRlcy5mZWF0dXJlcy5lYWNoIChmZWF0dXJlKSAtPlxuICAgICAgICBsZW4gPSBmZWF0dXJlLmF0dHJpYnV0ZXMueEVuZCAtIGZlYXR1cmUuYXR0cmlidXRlcy54U3RhcnQgKyAxXG4gICAgICAgIHkgPSAoZmVhdHVyZS5hdHRyaWJ1dGVzLnJvdyArIDEpICogcmVjdEhlaWdodFxuICAgICAgICBjdHguZmlsbFRleHQgZmVhdHVyZS5hdHRyaWJ1dGVzLnRleHQsIGRhdGEueFplcm8gKyBmZWF0dXJlLmF0dHJpYnV0ZXMueFN0YXJ0ICpcbiAgICAgICAgcmVjdFdpZHRoICsgKGxlbiAvIDIpICogcmVjdFdpZHRoLCBkYXRhLnlaZXJvICsgcmVjdEhlaWdodCAqIDAuNSArIHlcblxuICByZW5kZXI6IC0+XG5cbiAgICBAZWwuc2V0QXR0cmlidXRlICdoZWlnaHQnLCBAZy56b29tZXIuZ2V0KFwiYWxpZ25tZW50SGVpZ2h0XCIpICsgXCJweFwiXG4gICAgQGVsLnNldEF0dHJpYnV0ZSAnd2lkdGgnLCBAZy56b29tZXIuZ2V0QWxpZ25tZW50V2lkdGgoKSArIFwicHhcIlxuXG4gICAgQGcuem9vbWVyLl9jaGVja1Njcm9sbGluZyggQF9jaGVja1Njcm9sbGluZyhbQGcuem9vbWVyLmdldCgnX2FsaWdubWVudFNjcm9sbExlZnQnKSxcbiAgICBAZy56b29tZXIuZ2V0KCdfYWxpZ25tZW50U2Nyb2xsVG9wJyldICkse2hlYWRlcjogXCJjYW52YXNzZXFcIn0pXG5cbiAgICBAX3NldENvbG9yKClcblxuICAgIEBzZXFEcmF3ZXIgPSBuZXcgQ2FudmFzU2VxRHJhd2VyIEBnLEBjdHgsQG1vZGVsLFxuICAgICAgd2lkdGg6IEBlbC53aWR0aCxcbiAgICAgIGhlaWdodDogQGVsLmhlaWdodFxuICAgICAgY29sb3I6IEBjb2xvclxuICAgICAgY2FjaGU6IEBjYWNoZVxuXG4gICAgQHRocm90dGxlZERyYXcoKVxuICAgIEBcblxuICBfb25tb3VzZW1vdmU6IChlLCByZXZlcnNlZCkgLT5cbiAgICByZXR1cm4gaWYgQGRyYWdTdGFydC5sZW5ndGggaXMgMFxuXG4gICAgZHJhZ0VuZCA9IG1vdXNlLmFicyBlXG4gICAgIyByZWxhdGl2ZSB0byBmaXJzdCBjbGlja1xuICAgIHJlbEVuZCA9IFtkcmFnRW5kWzBdIC0gQGRyYWdTdGFydFswXSwgZHJhZ0VuZFsxXSAtIEBkcmFnU3RhcnRbMV1dXG4gICAgIyByZWxhdGl2ZSB0byBpbml0aWFsIHNjcm9sbCBzdGF0dXNcblxuICAgICMgc2NhbGUgZXZlbnRzXG4gICAgc2NhbGVGYWN0b3IgPSBAZy56b29tZXIuZ2V0IFwiY2FudmFzRXZlbnRTY2FsZVwiXG4gICAgaWYgcmV2ZXJzZWRcbiAgICAgIHNjYWxlRmFjdG9yID0gM1xuICAgIGZvciBpIGluIFswLi4xXSBieSAxXG4gICAgICByZWxFbmRbaV0gPSByZWxFbmRbaV0gKiBzY2FsZUZhY3RvclxuXG4gICAgIyBjYWxjdWxhdGUgbmV3IHNjcm9sbGluZyB2YWxzXG4gICAgcmVsRGlzdCA9IFtAZHJhZ1N0YXJ0U2Nyb2xsWzBdIC0gcmVsRW5kWzBdLCBAZHJhZ1N0YXJ0U2Nyb2xsWzFdIC0gcmVsRW5kWzFdXVxuXG4gICAgIyByb3VuZCB2YWx1ZXNcbiAgICBmb3IgaSBpbiBbMC4uMV0gYnkgMVxuICAgICAgcmVsRGlzdFtpXSA9IE1hdGgucm91bmQgcmVsRGlzdFtpXVxuXG4gICAgIyB1cGRhdGUgc2Nyb2xsYmFyXG4gICAgc2Nyb2xsQ29ycmVjdGVkID0gQF9jaGVja1Njcm9sbGluZyggcmVsRGlzdClcbiAgICBAZy56b29tZXIuX2NoZWNrU2Nyb2xsaW5nIHNjcm9sbENvcnJlY3RlZCwge29yaWdpbjogXCJjYW52YXNzZXFcIn1cblxuICAgICMgcmVzZXQgc3RhcnQgaWYgdXNlIHNjcm9sbHMgb3V0IG9mIGJvdW5kc1xuICAgIGZvciBpIGluIFswLi4xXSBieSAxXG4gICAgICBpZiBzY3JvbGxDb3JyZWN0ZWRbaV0gaXNudCByZWxEaXN0W2ldXG4gICAgICAgIGlmIHNjcm9sbENvcnJlY3RlZFtpXSBpcyAwXG4gICAgICAgICAgIyByZXNldCBvZiBsZWZ0LCB0b3BcbiAgICAgICAgICBAZHJhZ1N0YXJ0W2ldID0gZHJhZ0VuZFtpXVxuICAgICAgICAgIEBkcmFnU3RhcnRTY3JvbGxbaV0gPSAwXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAjIHJlY2FsaWJyYXRlIG9uIHJpZ2h0LCBib3R0b21cbiAgICAgICAgICBAZHJhZ1N0YXJ0W2ldID0gZHJhZ0VuZFtpXSAtIHNjcm9sbENvcnJlY3RlZFtpXVxuXG4gICAgQHRocm90dGxlZERyYXcoKVxuXG4gICAgIyBhYm9ydCBzZWxlY3Rpb24gZXZlbnRzIG9mIHRoZSBicm93c2VyIChtb3VzZSBvbmx5KVxuICAgIGlmIGUucHJldmVudERlZmF1bHQ/XG4gICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcblxuICAjIGNvbnZlcnRzIHRvdWNoZXMgaW50byBvbGQgbW91c2UgZXZlbnRcbiAgX29udG91Y2htb3ZlOiAoZSkgLT5cbiAgICBAX29ubW91c2Vtb3ZlIGUuY2hhbmdlZFRvdWNoZXNbMF0sIHRydWVcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpXG5cbiAgIyBzdGFydCB0aGUgZHJhZ2dpbmcgbW9kZVxuICBfb25tb3VzZWRvd246IChlKSAtPlxuICAgIEBkcmFnU3RhcnQgPSBtb3VzZS5hYnMgZVxuICAgIEBkcmFnU3RhcnRTY3JvbGwgPSBbQGcuem9vbWVyLmdldCgnX2FsaWdubWVudFNjcm9sbExlZnQnKSwgQGcuem9vbWVyLmdldCgnX2FsaWdubWVudFNjcm9sbFRvcCcpXVxuICAgIGpib25lKGRvY3VtZW50LmJvZHkpLm9uICdtb3VzZW1vdmUub3Zlcm1vdmUnLCAoZSkgPT4gQF9vbm1vdXNlbW92ZShlKVxuICAgIGpib25lKGRvY3VtZW50LmJvZHkpLm9uICdtb3VzZXVwLm92ZXJ1cCcsID0+IEBfY2xlYW51cCgpXG4gICAgI2pib25lKGRvY3VtZW50LmJvZHkpLm9uICdtb3VzZW91dC5vdmVyb3V0JywgKGUpID0+IEBfb25tb3VzZXdpbm91dChlKVxuICAgIGUucHJldmVudERlZmF1bHQoKVxuXG4gICMgc3RhcnRzIHRoZSB0b3VjaCBtb2RlXG4gIF9vbnRvdWNoc3RhcnQ6IChlKSAtPlxuICAgIEBkcmFnU3RhcnQgPSBtb3VzZS5hYnMgZS5jaGFuZ2VkVG91Y2hlc1swXVxuICAgIEBkcmFnU3RhcnRTY3JvbGwgPSBbQGcuem9vbWVyLmdldCgnX2FsaWdubWVudFNjcm9sbExlZnQnKSwgQGcuem9vbWVyLmdldCgnX2FsaWdubWVudFNjcm9sbFRvcCcpXVxuICAgIGpib25lKGRvY3VtZW50LmJvZHkpLm9uICd0b3VjaG1vdmUub3ZlcnRtb3ZlJywgKGUpID0+IEBfb250b3VjaG1vdmUoZSlcbiAgICBqYm9uZShkb2N1bWVudC5ib2R5KS5vbiAndG91Y2hlbmQub3ZlcnRlbmQgdG91Y2hsZWF2ZS5vdmVydGxlYXZlXG4gICAgdG91Y2hjYW5jZWwub3ZlcnRjYW5lbCcsIChlKSA9PiBAX3RvdWNoQ2xlYW51cChlKVxuXG4gICMgY2hlY2tzIHdoZXRoZXIgbW91c2UgbW92ZWQgb3V0IG9mIHRoZSB3aW5kb3dcbiAgIyAtPiB0ZXJtaW5hdGUgZHJhZ2dpbmdcbiAgX29ubW91c2V3aW5vdXQ6IChlKSAtPlxuICAgIGlmIGUudG9FbGVtZW50IGlzIGRvY3VtZW50LmJvZHkucGFyZW50Tm9kZVxuICAgICAgQF9jbGVhbnVwKClcblxuICAjIHRlcm1pbmF0ZXMgZHJhZ2dpbmdcbiAgX2NsZWFudXA6IC0+XG4gICAgQGRyYWdTdGFydCA9IFtdXG4gICAgIyByZW1vdmUgYWxsIGxpc3RlbmVyc1xuICAgIGpib25lKGRvY3VtZW50LmJvZHkpLm9mZignLm92ZXJtb3ZlJylcbiAgICBqYm9uZShkb2N1bWVudC5ib2R5KS5vZmYoJy5vdmVydXAnKVxuICAgIGpib25lKGRvY3VtZW50LmJvZHkpLm9mZignLm92ZXJvdXQnKVxuXG4gICMgdGVybWluYXRlcyB0b3VjaGluZ1xuICBfdG91Y2hDbGVhbnVwOiAoZSkgLT5cbiAgICBpZiBlLmNoYW5nZWRUb3VjaGVzLmxlbmd0aCA+IDBcbiAgICAgICMgbWF5YmUgd2UgY2FuIHNlbmQgYSBmaW5hbCBldmVudFxuICAgICAgQF9vbm1vdXNlbW92ZSBlLmNoYW5nZWRUb3VjaGVzWzBdLCB0cnVlXG5cbiAgICBAZHJhZ1N0YXJ0ID0gW11cbiAgICAjIHJlbW92ZSBhbGwgbGlzdGVuZXJzXG4gICAgamJvbmUoZG9jdW1lbnQuYm9keSkub2ZmKCcub3ZlcnRtb3ZlJylcbiAgICBqYm9uZShkb2N1bWVudC5ib2R5KS5vZmYoJy5vdmVydGVuZCcpXG4gICAgamJvbmUoZG9jdW1lbnQuYm9keSkub2ZmKCcub3ZlcnRsZWF2ZScpXG4gICAgamJvbmUoZG9jdW1lbnQuYm9keSkub2ZmKCcub3ZlcnRjYW5jZWwnKVxuXG4gICMgbWlnaHQgYmUgaW5jb21wYXRpYmxlIHdpdGggc29tZSBicm93c2Vyc1xuICBfb25tb3VzZXdoZWVsOiAoZSkgLT5cbiAgICBkZWx0YSA9IG1vdXNlLndoZWVsRGVsdGEgZVxuICAgIEBnLnpvb21lci5zZXQgJ19hbGlnbm1lbnRTY3JvbGxMZWZ0JywgQGcuem9vbWVyLmdldCgnX2FsaWdubWVudFNjcm9sbExlZnQnKSArIGRlbHRhWzBdXG4gICAgQGcuem9vbWVyLnNldCAnX2FsaWdubWVudFNjcm9sbFRvcCcsIEBnLnpvb21lci5nZXQoJ19hbGlnbm1lbnRTY3JvbGxUb3AnKSArIGRlbHRhWzFdXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgX29uY2xpY2s6IChlKSAtPlxuICAgIHJlcyA9IEBfZ2V0Q2xpY2tQb3MoZSlcbiAgICBpZiByZXM/XG4gICAgICBpZiByZXMuZmVhdHVyZT9cbiAgICAgICAgQGcudHJpZ2dlciBcImZlYXR1cmU6Y2xpY2tcIiwgcmVzXG4gICAgICBlbHNlXG4gICAgICAgIEBnLnRyaWdnZXIgXCJyZXNpZHVlOmNsaWNrXCIsIHJlc1xuICAgIEB0aHJvdHRsZWREcmF3KClcblxuICBfb25tb3VzZWluOiAoZSkgLT5cbiAgICByZXMgPSBAX2dldENsaWNrUG9zKGUpXG4gICAgaWYgcmVzP1xuICAgICAgaWYgcmVzLmZlYXR1cmU/XG4gICAgICAgIEBnLnRyaWdnZXIgXCJmZWF0dXJlOm1vdXNlaW5cIiwgcmVzXG4gICAgICBlbHNlXG4gICAgICAgIEBnLnRyaWdnZXIgXCJyZXNpZHVlOm1vdXNlaW5cIiwgcmVzXG4gICAgQHRocm90dGxlZERyYXcoKVxuXG4gIF9vbm1vdXNlb3V0OiAoZSkgLT5cbiAgICByZXMgPSBAX2dldENsaWNrUG9zKGUpXG4gICAgaWYgcmVzP1xuICAgICAgaWYgcmVzLmZlYXR1cmU/XG4gICAgICAgIEBnLnRyaWdnZXIgXCJmZWF0dXJlOm1vdXNlb3V0XCIsIHJlc1xuICAgICAgZWxzZVxuICAgICAgICBAZy50cmlnZ2VyIFwicmVzaWR1ZTptb3VzZW91dFwiLCByZXNcblxuICAgIEB0aHJvdHRsZWREcmF3KClcblxuICBfZ2V0Q2xpY2tQb3M6IChlKSAtPlxuICAgIGNvb3JkcyA9IG1vdXNlLnJlbCBlXG5cbiAgICBjb29yZHNbMF0gKz0gQGcuem9vbWVyLmdldChcIl9hbGlnbm1lbnRTY3JvbGxMZWZ0XCIpXG4gICAgeCA9IE1hdGguZmxvb3IoY29vcmRzWzBdIC8gQGcuem9vbWVyLmdldChcImNvbHVtbldpZHRoXCIpIClcbiAgICBbeSxyb3dOdW1iZXJdID0gQHNlcURyYXdlci5fZ2V0U2VxRm9yWUNsaWNrKGNvb3Jkc1sxXSlcblxuICAgICMgYWRkIGhpZGRlbiBjb2x1bW5zXG4gICAgeCArPSBAZy5jb2x1bW5zLmNhbGNIaWRkZW5Db2x1bW5zIHhcbiAgICAjIGFkZCBoaWRkZW4gc2Vxc1xuICAgIHkgKz0gQG1vZGVsLmNhbGNIaWRkZW5TZXFzIHlcblxuICAgIHggPSBNYXRoLm1heCAwLHhcbiAgICB5ID0gTWF0aC5tYXggMCx5XG5cbiAgICBzZXFJZCA9IEBtb2RlbC5hdCh5KS5nZXQgXCJpZFwiXG5cbiAgICBpZiByb3dOdW1iZXIgPiAwXG4gICAgICAjIGNsaWNrIG9uIGEgZmVhdHVyZVxuICAgICAgZmVhdHVyZXMgPSBAbW9kZWwuYXQoeSkuZ2V0KFwiZmVhdHVyZXNcIikuZ2V0RmVhdHVyZU9uUm93KHJvd051bWJlciAtIDEsIHgpXG4gICAgICB1bmxlc3MgZmVhdHVyZXMubGVuZ3RoIGlzIDBcbiAgICAgICAgZmVhdHVyZSA9IGZlYXR1cmVzWzBdXG4gICAgICAgIGNvbnNvbGUubG9nIGZlYXR1cmVzWzBdLmF0dHJpYnV0ZXNcbiAgICAgICAgcmV0dXJuIHtzZXFJZDpzZXFJZCwgZmVhdHVyZTogZmVhdHVyZSwgcm93UG9zOiB4LCBldnQ6ZX1cbiAgICBlbHNlXG4gICAgICAjIGNsaWNrIG9uIGEgc2VxXG4gICAgICByZXR1cm4ge3NlcUlkOnNlcUlkLCByb3dQb3M6IHgsIGV2dDplfVxuXG4gICMgY2hlY2tzIHdoZXRoZXIgdGhlIHNjcm9sbGluZyBjb29yZGluYXRlcyBhcmUgdmFsaWRcbiAgIyBAcmV0dXJuczogW3hTY3JvbGwseVNjcm9sbF0gdmFsaWQgY29vcmRpbmF0ZXNcbiAgX2NoZWNrU2Nyb2xsaW5nOiAoc2Nyb2xsT2JqKSAtPlxuXG4gICAgIyAwOiBtYXhMZWZ0LCAxOiBtYXhUb3BcbiAgICBtYXggPSBbQGNvb3Jkc0NhY2hlLm1heFNjcm9sbFdpZHRoLCBAY29vcmRzQ2FjaGUubWF4U2Nyb2xsSGVpZ2h0XVxuXG4gICAgZm9yIGkgaW4gWzAuLjFdIGJ5IDFcbiAgICAgIGlmIHNjcm9sbE9ialtpXSA+IG1heFtpXVxuICAgICAgICBzY3JvbGxPYmpbaV0gPSBtYXhbaV1cblxuICAgICAgaWYgc2Nyb2xsT2JqW2ldIDwgMFxuICAgICAgICBzY3JvbGxPYmpbaV0gPSAwXG5cbiAgICByZXR1cm4gc2Nyb2xsT2JqXG4iLCJfID0gcmVxdWlyZSBcInVuZGVyc2NvcmVcIlxuXG5kcmF3ZXIgPVxuXG4gIGRyYXdMZXR0ZXJzOiAtPlxuXG4gICAgcmVjdEhlaWdodCA9IEByZWN0SGVpZ2h0XG5cbiAgICAjIHJlY3RzXG4gICAgQGN0eC5nbG9iYWxBbHBoYSA9IEBnLmNvbG9yc2NoZW1lLmdldCBcIm9wYWNpdHlcIlxuICAgIEBkcmF3U2VxcyAoZGF0YSkgLT4gQGRyYXdTZXEoZGF0YSwgQF9kcmF3UmVjdClcbiAgICBAY3R4Lmdsb2JhbEFscGhhID0gMVxuXG4gICAgIyBsZXR0ZXJzXG4gICAgQGRyYXdTZXFzIChkYXRhKSAtPiBAZHJhd1NlcShkYXRhLCBAX2RyYXdMZXR0ZXIpXG5cbiAgZHJhd1NlcXM6IChjYWxsYmFjaywgdGFyZ2V0KSAtPlxuICAgIGhpZGRlbiA9IEBnLmNvbHVtbnMuZ2V0IFwiaGlkZGVuXCJcblxuICAgIHRhcmdldCA9IHRhcmdldCB8fCBAXG5cbiAgICBbc3RhcnQsIHldID0gQGdldFN0YXJ0U2VxKClcblxuICAgIGZvciBpIGluIFtzdGFydC4uIEBtb2RlbC5sZW5ndGggLSAxXSBieSAxXG4gICAgICBzZXEgPSBAbW9kZWwuYXQoaSlcbiAgICAgIGNvbnRpbnVlIGlmIHNlcS5nZXQoJ2hpZGRlbicpXG4gICAgICBjYWxsYmFjay5jYWxsIHRhcmdldCwge21vZGVsOiBzZXEsIHlQb3M6IHksIHk6IGksIGhpZGRlbjogaGlkZGVufVxuXG4gICAgICBzZXFIZWlnaHQgPSAoc2VxLmF0dHJpYnV0ZXMuaGVpZ2h0IHx8IDEpICogQHJlY3RIZWlnaHRcbiAgICAgIHkgPSB5ICsgc2VxSGVpZ2h0XG5cbiAgICAgICMgb3V0IG9mIHZpZXdwb3J0IC0gc3RvcFxuICAgICAgaWYgeSA+IEBoZWlnaHRcbiAgICAgICAgYnJlYWtcblxuICAjIGNhbGxzIHRoZSBjYWxsYmFjayBmb3IgZXZlcnkgZHJhd2FibGUgcm93XG4gIGRyYXdSb3dzOiAoY2FsbGJhY2ssIHRhcmdldCkgLT5cbiAgICBAZHJhd1NlcXMgKGRhdGEpIC0+IEBkcmF3Um93KGRhdGEsIGNhbGxiYWNrLCB0YXJnZXQpXG5cbiAgIyBkcmF3cyBhIHNpbmdsZSByb3dcbiAgZHJhd1JvdzogKGRhdGEsIGNhbGxiYWNrLCB0YXJnZXQpIC0+XG4gICAgcmVjdFdpZHRoID0gQGcuem9vbWVyLmdldCBcImNvbHVtbldpZHRoXCJcbiAgICBzdGFydCA9IE1hdGgubWF4IDAsIE1hdGguYWJzKE1hdGguY2VpbCggLSBAZy56b29tZXIuZ2V0KCdfYWxpZ25tZW50U2Nyb2xsTGVmdCcpIC8gcmVjdFdpZHRoKSlcbiAgICB4ID0gLSBNYXRoLmFicyggLSBAZy56b29tZXIuZ2V0KCdfYWxpZ25tZW50U2Nyb2xsTGVmdCcpICUgcmVjdFdpZHRoKVxuXG4gICAgeFplcm8gPSB4IC0gc3RhcnQgKiByZWN0V2lkdGhcbiAgICB5WmVybyA9IGRhdGEueVBvc1xuICAgIGNhbGxiYWNrLmNhbGwgdGFyZ2V0LCBtb2RlbDogZGF0YS5tb2RlbCwgeFplcm86IHhaZXJvLCB5WmVybzogeVplcm8sIGhpZGRlbjogZGF0YS5oaWRkZW5cblxuICAjIHJldHVybnMgZmlyc3Qgc2VxdWVuY2UgaW4gdGhlIHZpZXdwb3J0XG4gICMgeSBpcyB0aGUgcG9zaXRpb24gdG8gc3RhcnQgZHJhd2luZ1xuICBnZXRTdGFydFNlcTogLT5cbiAgICBzdGFydCA9IChNYXRoLm1heCAwLCBNYXRoLmZsb29yKCBAZy56b29tZXIuZ2V0KCdfYWxpZ25tZW50U2Nyb2xsVG9wJykgLyBAcmVjdEhlaWdodCkpICsgMVxuICAgIGNvdW50ZXIgPSAwXG4gICAgaSA9IDBcbiAgICB3aGlsZSBjb3VudGVyIDwgc3RhcnQgYW5kIGkgPCBAbW9kZWwubGVuZ3RoXG4gICAgICBjb3VudGVyICs9IEBtb2RlbC5hdChpKS5hdHRyaWJ1dGVzLmhlaWdodCB8fCAxXG4gICAgICBpKytcbiAgICB5ID0gTWF0aC5tYXgoMCwgQGcuem9vbWVyLmdldCgnX2FsaWdubWVudFNjcm9sbFRvcCcpIC0gY291bnRlciAqIEByZWN0SGVpZ2h0ICsgKEBtb2RlbC5hdChpIC0gMSlcbiAgICAuYXR0cmlidXRlcy5oZWlnaHQgIHx8IDEgKSAqIEByZWN0SGVpZ2h0KVxuICAgIFtpIC0gMSwgLXldXG5cbiAgIyByZXR1cm5zIFt0aGUgY2xpY2tlZCBzZXEgZm9yIGEgdmlld3BvcnQsIHJvdyBudW1iZXJdXG4gIF9nZXRTZXFGb3JZQ2xpY2s6IChjbGljaykgLT5cbiAgICBbc3RhcnQsIHlEaWZmXSA9IEBnZXRTdGFydFNlcSgpXG4gICAgeVJlbCA9IHlEaWZmICUgQHJlY3RIZWlnaHRcbiAgICBjbGlja2VkUm93cyA9IChNYXRoLm1heCAwLCBNYXRoLmZsb29yKCAoY2xpY2sgLSB5UmVsICkgLyBAcmVjdEhlaWdodCkpICsgMVxuICAgIGNvdW50ZXIgPSAwXG4gICAgaSA9IHN0YXJ0XG4gICAgd2hpbGUgY291bnRlciA8IGNsaWNrZWRSb3dzIGFuZCBpIDwgQG1vZGVsLmxlbmd0aFxuICAgICAgY291bnRlciArPSBAbW9kZWwuYXQoaSkuYXR0cmlidXRlcy5oZWlnaHQgfHwgMVxuICAgICAgaSsrXG4gICAgcm93TnVtYmVyID0gTWF0aC5tYXgoMCwgTWF0aC5mbG9vcihjbGljayAvIEByZWN0SGVpZ2h0KSAtIGNvdW50ZXIgKyAoQG1vZGVsLmF0KGkgLSAxKS5nZXQoXCJoZWlnaHRcIikgfHwgMSkpXG4gICAgcmV0dXJuIFtpIC0gMSwgcm93TnVtYmVyXVxuXG4gICMgVE9ETzogdmVyeSBleHBlbnNpdmUgbWV0aG9kXG4gIGRyYXdTZXE6IChkYXRhLCBjYWxsYmFjaykgLT5cbiAgICBzZXEgPSBkYXRhLm1vZGVsLmdldCBcInNlcVwiXG4gICAgeSA9IGRhdGEueVBvc1xuICAgIHJlY3RXaWR0aCA9IEByZWN0V2lkdGhcbiAgICByZWN0SGVpZ2h0ID0gQHJlY3RIZWlnaHRcblxuICAgICMgc2tpcCB1bm5lZWRlZCBibG9ja3MgYXQgdGhlIGJlZ2lubmluZ1xuICAgIHN0YXJ0ID0gTWF0aC5tYXggMCwgTWF0aC5hYnMoTWF0aC5jZWlsKCAtIEBnLnpvb21lci5nZXQoJ19hbGlnbm1lbnRTY3JvbGxMZWZ0JykgLyByZWN0V2lkdGgpKVxuICAgIHggPSAtIE1hdGguYWJzKCAtIEBnLnpvb21lci5nZXQoJ19hbGlnbm1lbnRTY3JvbGxMZWZ0JykgJSByZWN0V2lkdGgpXG5cbiAgICByZXMgPSB7cmVjdFdpZHRoOiByZWN0V2lkdGgsIHJlY3RIZWlnaHQ6IHJlY3RIZWlnaHQsIHlQb3M6IHksIHk6IGRhdGEueX1cbiAgICBlbFdpZHRoID0gQHdpZHRoXG5cbiAgICBmb3IgaiBpbiBbc3RhcnQuLiBzZXEubGVuZ3RoIC0gMV0gYnkgMVxuICAgICAgYyA9IHNlcVtqXVxuICAgICAgYyA9IGMudG9VcHBlckNhc2UoKVxuXG4gICAgICAjIGNhbGwgdGhlIGN1c3RvbSBmdW5jdGlvblxuICAgICAgcmVzLnggPSBqXG4gICAgICByZXMuYyA9IGNcbiAgICAgIHJlcy54UG9zID0geFxuXG4gICAgICAjIGxvY2FsIGNhbGwgaXMgZmFzdGVyIHRoYW4gYXBwbHlcbiAgICAgICMgaHR0cDovL2pzcGVyZi5jb20vZnVuY3Rpb24tY2FsbHMtZGlyZWN0LXZzLWFwcGx5LXZzLWNhbGwtdnMtYmluZC82XG4gICAgICBpZiBkYXRhLmhpZGRlbi5pbmRleE9mKGopIDwgMFxuICAgICAgICBjYWxsYmFjayBALHJlc1xuICAgICAgZWxzZVxuICAgICAgICBjb250aW51ZVxuXG4gICAgICAjIG1vdmUgdG8gdGhlIHJpZ2h0XG4gICAgICB4ID0geCArIHJlY3RXaWR0aFxuXG4gICAgICAjIG91dCBvZiB2aWV3cG9ydCAtIHN0b3BcbiAgICAgIGlmIHggPiBlbFdpZHRoXG4gICAgICAgIGJyZWFrXG5cbiAgX2RyYXdSZWN0OiAodGhhdCwgZGF0YSkgLT5cbiAgICBjb2xvciA9IHRoYXQuY29sb3IuZ2V0Q29sb3IgZGF0YS5jLFxuICAgICAgcG9zOmRhdGEueFxuICAgICAgeTogZGF0YS55XG4gICAgaWYgY29sb3I/XG4gICAgICB0aGF0LmN0eC5maWxsU3R5bGUgPSBjb2xvclxuICAgICAgdGhhdC5jdHguZmlsbFJlY3QgZGF0YS54UG9zLGRhdGEueVBvcyxkYXRhLnJlY3RXaWR0aCxkYXRhLnJlY3RIZWlnaHRcblxuICAjIFJFQUxMWSBleHBlbnNpdmUgY2FsbCBvbiBGRlxuICAjIFBlcmZvcm1hbmNlOlxuICAjIGNocm9tZTogMjAwMG1zIGRyYXdMZXR0ZXIgLSAxMDAwbXMgZHJhd1JlY3RcbiAgIyBGRjogMTcwMG1zIGRyYXdMZXR0ZXIgLSAzMDBtcyBkcmF3UmVjdFxuICBfZHJhd0xldHRlcjogKHRoYXQsZGF0YSkgLT5cbiAgICB0aGF0LmN0eC5kcmF3SW1hZ2UgdGhhdC5jYWNoZS5nZXRGb250VGlsZShkYXRhLmMsIGRhdGEucmVjdFdpZHRoLFxuICAgICAgZGF0YS5yZWN0SGVpZ2h0KSwgZGF0YS54UG9zLCBkYXRhLnlQb3MsZGF0YS5yZWN0V2lkdGgsZGF0YS5yZWN0SGVpZ2h0XG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb25zdHJ1YyA9IChnLGN0eCxtb2RlbCxvcHRzKSAtPlxuICB0aGlzLmcgPSBnXG4gIHRoaXMuY3R4ID0gY3R4XG4gIHRoaXMubW9kZWwgPSBtb2RlbFxuICB0aGlzLndpZHRoID0gb3B0cy53aWR0aFxuICB0aGlzLmhlaWdodCA9IG9wdHMuaGVpZ2h0XG4gIHRoaXMuY29sb3IgPSBvcHRzLmNvbG9yXG4gIHRoaXMuY2FjaGUgPSBvcHRzLmNhY2hlXG4gIHRoaXMucmVjdEhlaWdodCA9IEBnLnpvb21lci5nZXQgXCJyb3dIZWlnaHRcIlxuICB0aGlzLnJlY3RXaWR0aCA9IEBnLnpvb21lci5nZXQgXCJjb2x1bW5XaWR0aFwiXG4gIEBcblxuXy5leHRlbmQgY29uc3RydWM6OiwgZHJhd2VyXG4iLCJ2aWV3ID0gcmVxdWlyZShcImJhY2tib25lLXZpZXdqXCIpXG5kb20gPSByZXF1aXJlKFwiZG9tLWhlbHBlclwiKVxuc3ZnID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzL3N2Z1wiKVxuXG5Db25zZXJ2YXRpb25WaWV3ID0gdmlldy5leHRlbmRcblxuICBjbGFzc05hbWU6IFwiYmlvanNfbXNhX2NvbnNlcnZcIlxuXG4gIGluaXRpYWxpemU6IChkYXRhKSAtPlxuICAgIEBnID0gZGF0YS5nXG4gICAgQGxpc3RlblRvIEBnLnpvb21lcixcImNoYW5nZTpzdGVwU2l6ZSBjaGFuZ2U6bGFiZWxXaWR0aCBjaGFuZ2U6Y29sdW1uV2lkdGhcIiwgQHJlbmRlclxuICAgIEBsaXN0ZW5UbyBAZy52aXMsXCJjaGFuZ2U6bGFiZWxzIGNoYW5nZTptZXRhY2VsbFwiLCBAcmVuZGVyXG4gICAgQGxpc3RlblRvIEBnLmNvbHVtbnMsIFwiY2hhbmdlOnNjYWxpbmdcIiwgQHJlbmRlclxuICAgICMgd2UgbmVlZCB0byB3YWl0IHVudGlsIHN0YXRzIGdpdmVzIHVzIHRoZSBva1xuICAgICNAbGlzdGVuVG8gQG1vZGVsLCBcInJlc2V0XCIsQHJlbmRlclxuICAgIEBsaXN0ZW5UbyBAZy5zdGF0cyxcInJlc2V0XCIsIEByZW5kZXJcbiAgICBAbWFuYWdlRXZlbnRzKClcblxuICByZW5kZXI6IC0+XG4gICAgY29uc2VydiA9IEBnLnN0YXRzLnNjYWxlKEBnLnN0YXRzLmNvbnNlcnZhdGlvbigpKVxuXG4gICAgZG9tLnJlbW92ZUFsbENoaWxkcyBAZWxcblxuICAgIG5NYXggPSBAbW9kZWwuZ2V0TWF4TGVuZ3RoKClcbiAgICBjZWxsV2lkdGggPSBAZy56b29tZXIuZ2V0IFwiY29sdW1uV2lkdGhcIlxuICAgIG1heEhlaWdodCA9IDIwXG4gICAgd2lkdGggPSBjZWxsV2lkdGggKiAobk1heCAtIEBnLmNvbHVtbnMuZ2V0KCdoaWRkZW4nKS5sZW5ndGgpXG5cbiAgICBzID0gc3ZnLmJhc2UgaGVpZ2h0OiBtYXhIZWlnaHQsIHdpZHRoOiB3aWR0aFxuICAgIHMuc3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCJcbiAgICBzLnN0eWxlLmN1cnNvciA9IFwicG9pbnRlclwiXG5cbiAgICBzdGVwU2l6ZSA9IEBnLnpvb21lci5nZXQgXCJzdGVwU2l6ZVwiXG4gICAgaGlkZGVuID0gQGcuY29sdW1ucy5nZXQgXCJoaWRkZW5cIlxuICAgIHggPSAwXG4gICAgbiA9IDBcbiAgICB3aGlsZSBuIDwgbk1heFxuICAgICAgaWYgaGlkZGVuLmluZGV4T2YobikgPj0gMFxuICAgICAgICBuICs9IHN0ZXBTaXplXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB3aWR0aCA9IGNlbGxXaWR0aCAqIHN0ZXBTaXplXG4gICAgICBhdmdIZWlnaHQgPSAwXG4gICAgICBmb3IgaSBpbiBbMCAuLiBzdGVwU2l6ZSAtIDFdXG4gICAgICAgIGF2Z0hlaWdodCArPSBjb25zZXJ2W25dXG4gICAgICBoZWlnaHQgPSBtYXhIZWlnaHQgKiAgKGF2Z0hlaWdodCAvIHN0ZXBTaXplKVxuXG4gICAgICByZWN0ID0gIHN2Zy5yZWN0IHg6eCx5OiBtYXhIZWlnaHQgLSBoZWlnaHQsd2lkdGg6d2lkdGggLSBjZWxsV2lkdGggLyA0LGhlaWdodDpoZWlnaHQsc3R5bGU6XG4gICAgICAgIFwic3Ryb2tlOnJlZDtzdHJva2Utd2lkdGg6MTtcIlxuICAgICAgcmVjdC5yb3dQb3MgPSBuXG4gICAgICBzLmFwcGVuZENoaWxkIHJlY3RcbiAgICAgIHggKz0gd2lkdGhcbiAgICAgIG4gKz0gc3RlcFNpemVcblxuICAgIEBlbC5hcHBlbmRDaGlsZCBzXG4gICAgQFxuXG4gICNUT0RPOiBtYWtlIG1vcmUgZ2VuZXJhbCB3aXRoIEhlYWRlclZpZXdcbiAgX29uY2xpY2s6IChldnQpIC0+XG4gICAgcm93UG9zID0gZXZ0LnRhcmdldC5yb3dQb3NcbiAgICBzdGVwU2l6ZSA9IEBnLnpvb21lci5nZXQoXCJzdGVwU2l6ZVwiKVxuICAgICMgc2ltdWxhdGUgaGlkZGVuIGNvbHVtbnNcbiAgICBmb3IgaSBpbiBbMC4uc3RlcFNpemUgLSAxXSBieSAxXG4gICAgICBAZy50cmlnZ2VyIFwiYmFyOmNsaWNrXCIsIHtyb3dQb3M6IHJvd1BvcyArIGksIGV2dDpldnR9XG5cbiAgbWFuYWdlRXZlbnRzOiAtPlxuICAgIGV2ZW50cyA9IHt9XG4gICAgaWYgQGcuY29uZmlnLmdldCBcInJlZ2lzdGVyTW91c2VDbGlja3NcIlxuICAgICAgZXZlbnRzLmNsaWNrID0gXCJfb25jbGlja1wiXG4gICAgaWYgQGcuY29uZmlnLmdldCBcInJlZ2lzdGVyTW91c2VIb3ZlclwiXG4gICAgICBldmVudHMubW91c2VpbiA9IFwiX29ubW91c2VpblwiXG4gICAgICBldmVudHMubW91c2VvdXQgPSBcIl9vbm1vdXNlb3V0XCJcbiAgICBAZGVsZWdhdGVFdmVudHMgZXZlbnRzXG4gICAgQGxpc3RlblRvIEBnLmNvbmZpZywgXCJjaGFuZ2U6cmVnaXN0ZXJNb3VzZUhvdmVyXCIsIEBtYW5hZ2VFdmVudHNcbiAgICBAbGlzdGVuVG8gQGcuY29uZmlnLCBcImNoYW5nZTpyZWdpc3Rlck1vdXNlQ2xpY2tcIiwgQG1hbmFnZUV2ZW50c1xuXG4gIF9vbm1vdXNlaW46IChldnQpIC0+XG4gICAgcm93UG9zID0gQGcuem9vbWVyLmdldCBcInN0ZXBTaXplXCIgKiBldnQucm93UG9zXG4gICAgQGcudHJpZ2dlciBcImJhcjptb3VzZWluXCIsIHtyb3dQb3M6IHJvd1BvcywgZXZ0OmV2dH1cblxuICBfb25tb3VzZW91dDogKGV2dCkgLT5cbiAgICByb3dQb3MgPSBAZy56b29tZXIuZ2V0IFwic3RlcFNpemVcIiAqIGV2dC5yb3dQb3NcbiAgICBAZy50cmlnZ2VyIFwiYmFyOm1vdXNlb3V0XCIsIHtyb3dQb3M6IHJvd1BvcywgZXZ0OmV2dH1cblxubW9kdWxlLmV4cG9ydHMgPSBDb25zZXJ2YXRpb25WaWV3XG4iLCJ2aWV3ID0gcmVxdWlyZShcImJhY2tib25lLXZpZXdqXCIpXG5kb20gPSByZXF1aXJlKFwiZG9tLWhlbHBlclwiKVxuc3ZnID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzL3N2Z1wiKVxuXG4jIFRPRE86IG1lcmdlIHRoaXMgd2l0aCB0aGUgY29uc2VydmF0aW9uIHZpZXdcbkNvbnNlcnZhdGlvblZpZXcgPSB2aWV3LmV4dGVuZFxuXG4gIGNsYXNzTmFtZTogXCJiaW9qc19tc2FfZ2Fwdmlld1wiXG5cbiAgaW5pdGlhbGl6ZTogKGRhdGEpIC0+XG4gICAgQGcgPSBkYXRhLmdcbiAgICBAbGlzdGVuVG8gQGcuem9vbWVyLFwiY2hhbmdlOnN0ZXBTaXplIGNoYW5nZTpsYWJlbFdpZHRoIGNoYW5nZTpjb2x1bW5XaWR0aFwiLCBAcmVuZGVyXG4gICAgQGxpc3RlblRvIEBnLnZpcyxcImNoYW5nZTpsYWJlbHMgY2hhbmdlOm1ldGFjZWxsXCIsIEByZW5kZXJcbiAgICBAbGlzdGVuVG8gQGcuY29sdW1ucywgXCJjaGFuZ2U6c2NhbGluZ1wiLCBAcmVuZGVyXG4gICAgIyB3ZSBuZWVkIHRvIHdhaXQgdW50aWwgc3RhdHMgZ2l2ZXMgdXMgdGhlIG9rXG4gICAgQGxpc3RlblRvIEBtb2RlbCwgXCJyZXNldFwiLEByZW5kZXJcbiAgICBAbWFuYWdlRXZlbnRzKClcblxuICByZW5kZXI6IC0+XG4gICAgZ2FwcyA9IEBnLnN0YXRzLmdhcHMoKVxuXG4gICAgZG9tLnJlbW92ZUFsbENoaWxkcyBAZWxcblxuICAgIG5NYXggPSBAbW9kZWwuZ2V0TWF4TGVuZ3RoKClcbiAgICBjZWxsV2lkdGggPSBAZy56b29tZXIuZ2V0IFwiY29sdW1uV2lkdGhcIlxuICAgIG1heEhlaWdodCA9IDIwXG4gICAgd2lkdGggPSBjZWxsV2lkdGggKiAobk1heCAtIEBnLmNvbHVtbnMuZ2V0KCdoaWRkZW4nKS5sZW5ndGgpXG5cbiAgICBzID0gc3ZnLmJhc2UgaGVpZ2h0OiBtYXhIZWlnaHQsIHdpZHRoOiB3aWR0aFxuICAgIHMuc3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCJcbiAgICBzLnN0eWxlLmN1cnNvciA9IFwicG9pbnRlclwiXG5cbiAgICBzdGVwU2l6ZSA9IEBnLnpvb21lci5nZXQgXCJzdGVwU2l6ZVwiXG4gICAgaGlkZGVuID0gQGcuY29sdW1ucy5nZXQgXCJoaWRkZW5cIlxuICAgIHggPSAwXG4gICAgbiA9IDBcbiAgICB3aGlsZSBuIDwgbk1heFxuICAgICAgaWYgaGlkZGVuLmluZGV4T2YobikgPj0gMFxuICAgICAgICBuICs9IHN0ZXBTaXplXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB3aWR0aCA9IGNlbGxXaWR0aCAqIHN0ZXBTaXplXG4gICAgICBhdmdIZWlnaHQgPSAwXG4gICAgICBmb3IgaSBpbiBbMCAuLiBzdGVwU2l6ZSAtIDFdXG4gICAgICAgIGF2Z0hlaWdodCArPSBnYXBzW25dXG4gICAgICBoZWlnaHQgPSBtYXhIZWlnaHQgKiAgKGF2Z0hlaWdodCAvIHN0ZXBTaXplKVxuXG4gICAgICByZWN0ID0gIHN2Zy5yZWN0IHg6eCx5OiBtYXhIZWlnaHQgLSBoZWlnaHQsd2lkdGg6d2lkdGggLSBjZWxsV2lkdGggLyA0LGhlaWdodDpoZWlnaHQsc3R5bGU6XG4gICAgICAgIFwic3Ryb2tlOnJlZDtzdHJva2Utd2lkdGg6MTtcIlxuICAgICAgcmVjdC5yb3dQb3MgPSBuXG4gICAgICBzLmFwcGVuZENoaWxkIHJlY3RcbiAgICAgIHggKz0gd2lkdGhcbiAgICAgIG4gKz0gc3RlcFNpemVcblxuICAgIEBlbC5hcHBlbmRDaGlsZCBzXG4gICAgQFxuXG4gICNUT0RPOiBtYWtlIG1vcmUgZ2VuZXJhbCB3aXRoIEhlYWRlclZpZXdcbiAgX29uY2xpY2s6IChldnQpIC0+XG4gICAgcm93UG9zID0gZXZ0LnRhcmdldC5yb3dQb3NcbiAgICBzdGVwU2l6ZSA9IEBnLnpvb21lci5nZXQoXCJzdGVwU2l6ZVwiKVxuICAgICMgc2ltdWxhdGUgaGlkZGVuIGNvbHVtbnNcbiAgICBmb3IgaSBpbiBbMC4uc3RlcFNpemUgLSAxXSBieSAxXG4gICAgICBAZy50cmlnZ2VyIFwiZ2FwOmNsaWNrXCIsIHtyb3dQb3M6IHJvd1BvcyArIGksIGV2dDpldnR9XG5cbiAgbWFuYWdlRXZlbnRzOiAtPlxuICAgIGV2ZW50cyA9IHt9XG4gICAgaWYgQGcuY29uZmlnLmdldCBcInJlZ2lzdGVyTW91c2VDbGlja3NcIlxuICAgICAgZXZlbnRzLmNsaWNrID0gXCJfb25jbGlja1wiXG4gICAgaWYgQGcuY29uZmlnLmdldCBcInJlZ2lzdGVyTW91c2VIb3ZlclwiXG4gICAgICBldmVudHMubW91c2VpbiA9IFwiX29ubW91c2VpblwiXG4gICAgICBldmVudHMubW91c2VvdXQgPSBcIl9vbm1vdXNlb3V0XCJcbiAgICBAZGVsZWdhdGVFdmVudHMgZXZlbnRzXG4gICAgQGxpc3RlblRvIEBnLmNvbmZpZywgXCJjaGFuZ2U6cmVnaXN0ZXJNb3VzZUhvdmVyXCIsIEBtYW5hZ2VFdmVudHNcbiAgICBAbGlzdGVuVG8gQGcuY29uZmlnLCBcImNoYW5nZTpyZWdpc3Rlck1vdXNlQ2xpY2tcIiwgQG1hbmFnZUV2ZW50c1xuXG4gIF9vbm1vdXNlaW46IChldnQpIC0+XG4gICAgcm93UG9zID0gQGcuem9vbWVyLmdldCBcInN0ZXBTaXplXCIgKiBldnQucm93UG9zXG4gICAgQGcudHJpZ2dlciBcImdhcDptb3VzZWluXCIsIHtyb3dQb3M6IHJvd1BvcywgZXZ0OmV2dH1cblxuICBfb25tb3VzZW91dDogKGV2dCkgLT5cbiAgICByb3dQb3MgPSBAZy56b29tZXIuZ2V0IFwic3RlcFNpemVcIiAqIGV2dC5yb3dQb3NcbiAgICBAZy50cmlnZ2VyIFwiZ2FwOm1vdXNlb3V0XCIsIHtyb3dQb3M6IHJvd1BvcywgZXZ0OmV2dH1cblxubW9kdWxlLmV4cG9ydHMgPSBDb25zZXJ2YXRpb25WaWV3XG4iLCJib25lVmlldyA9IHJlcXVpcmUoXCJiYWNrYm9uZS1jaGlsZHNcIilcbkxhYmVsSGVhZGVyID0gcmVxdWlyZSBcIi4vTGFiZWxIZWFkZXJcIlxuUmlnaHRMYWJlbEhlYWRlciA9IHJlcXVpcmUgXCIuL1JpZ2h0SGVhZGVyQmxvY2tcIlxuXG5tb2R1bGUuZXhwb3J0cyA9IGJvbmVWaWV3LmV4dGVuZFxuXG4gIGluaXRpYWxpemU6IChkYXRhKSAtPlxuICAgIEBnID0gZGF0YS5nXG4gICAgQGRyYXcoKVxuICAgIEBsaXN0ZW5UbyBAZy52aXMsXCJjaGFuZ2U6bGFiZWxzIGNoYW5nZTptZXRhY2VsbCBjaGFuZ2U6bGVmdEhlYWRlclwiLCA9PlxuICAgICAgQGRyYXcoKVxuICAgICAgQHJlbmRlcigpXG5cbiAgZHJhdzogLT5cbiAgICBAcmVtb3ZlVmlld3MoKVxuXG4gICAgaWYgQGcudmlzLmdldChcImxlZnRIZWFkZXJcIikgYW5kIChAZy52aXMuZ2V0KFwibGFiZWxzXCIpIG9yIEBnLnZpcy5nZXQoXCJtZXRhY2VsbFwiKSlcbiAgICAgIGxIZWFkZXIgPSBuZXcgTGFiZWxIZWFkZXIge21vZGVsOiBAbW9kZWwsIGc6IEBnfVxuICAgICAgbEhlYWRlci5vcmRlcmluZyA9IC01MFxuICAgICAgQGFkZFZpZXcgXCJsSGVhZGVyXCIsIGxIZWFkZXJcblxuICAgIHJIZWFkZXIgPSBuZXcgUmlnaHRMYWJlbEhlYWRlciB7bW9kZWw6IEBtb2RlbCwgZzogQGd9XG4gICAgckhlYWRlci5vcmRlcmluZyA9IDBcbiAgICBAYWRkVmlldyBcInJIZWFkZXJcIiwgckhlYWRlclxuXG4gIHJlbmRlcjogLT5cbiAgICBAcmVuZGVyU3Vidmlld3MoKVxuXG4gICAgQGVsLmNsYXNzTmFtZSA9IFwiYmlvanNfbXNhX2hlYWRlclwiXG4iLCJrID0gcmVxdWlyZSBcImtvYWxhLWpzXCJcbnZpZXcgPSByZXF1aXJlKFwiYmFja2JvbmUtdmlld2pcIilcbmRvbSA9IHJlcXVpcmUoXCJkb20taGVscGVyXCIpXG5cbm1vZHVsZS5leHBvcnRzID0gTGFiZWxIZWFkZXIgPSB2aWV3LmV4dGVuZFxuXG4gIGNsYXNzTmFtZTogXCJiaW9qc19tc2FfaGVhZGVyc1wiXG5cbiAgaW5pdGlhbGl6ZTogKGRhdGEpIC0+XG4gICAgQGcgPSBkYXRhLmdcblxuICAgIEBsaXN0ZW5UbyBAZy52aXMsIFwiY2hhbmdlOm1ldGFjZWxsIGNoYW5nZTpsYWJlbHNcIiwgQHJlbmRlclxuICAgIEBsaXN0ZW5UbyBAZy56b29tZXIsIFwiY2hhbmdlOmxhYmVsV2lkdGggY2hhbmdlOm1ldGFXaWR0aFwiLCBAcmVuZGVyXG5cbiAgcmVuZGVyOiAtPlxuXG4gICAgZG9tLnJlbW92ZUFsbENoaWxkcyBAZWxcblxuICAgIHdpZHRoID0gMFxuICAgIHdpZHRoICs9IEBnLnpvb21lci5nZXRMZWZ0QmxvY2tXaWR0aCgpXG4gICAgQGVsLnN0eWxlLndpZHRoID0gd2lkdGggKyBcInB4XCJcblxuICAgIGlmIEBnLnZpcy5nZXQgXCJsYWJlbHNcIlxuICAgICAgQGVsLmFwcGVuZENoaWxkIEBsYWJlbERPTSgpXG5cbiAgICBpZiBAZy52aXMuZ2V0IFwibWV0YWNlbGxcIlxuICAgICAgQGVsLmFwcGVuZENoaWxkIEBtZXRhRE9NKClcblxuICAgIEBlbC5zdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIlxuICAgIEBlbC5zdHlsZS5mb250U2l6ZSA9IEBnLnpvb21lci5nZXQgXCJtYXJrZXJGb250c2l6ZVwiXG4gICAgQFxuXG4gIGxhYmVsRE9NOiAtPlxuICAgIGxhYmVsSGVhZGVyID0gay5tayBcImRpdlwiXG4gICAgbGFiZWxIZWFkZXIuc3R5bGUud2lkdGggPSBAZy56b29tZXIuZ2V0TGFiZWxXaWR0aCgpXG4gICAgbGFiZWxIZWFkZXIuc3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCJcblxuICAgIGlmIEAuZy52aXMuZ2V0IFwibGFiZWxDaGVja2JveFwiXG4gICAgICBsYWJlbEhlYWRlci5hcHBlbmRDaGlsZCBAYWRkRWwoXCIuXCIsIDEwKVxuXG4gICAgaWYgQC5nLnZpcy5nZXQgXCJsYWJlbElkXCJcbiAgICAgIGxhYmVsSGVhZGVyLmFwcGVuZENoaWxkIEBhZGRFbChcImlkXCIsIEBnLnpvb21lci5nZXQgXCJsYWJlbElkTGVuZ3RoXCIpXG5cbiAgICBpZiBALmcudmlzLmdldCBcImxhYmVsUGFydGl0aW9uXCJcbiAgICAgIGxhYmVsSGVhZGVyLmFwcGVuZENoaWxkIEBhZGRFbChcInBhcnRcIiwgMTUpXG5cbiAgICBpZiBALmcudmlzLmdldCBcImxhYmVsTmFtZVwiXG4gICAgICBuYW1lID0gQGFkZEVsKFwibmFtZVwiKVxuICAgICAgI25hbWUuc3R5bGUubWFyZ2luTGVmdCA9IFwiNTBweFwiXG4gICAgICBsYWJlbEhlYWRlci5hcHBlbmRDaGlsZCBuYW1lXG5cbiAgICBsYWJlbEhlYWRlclxuXG4gIGFkZEVsOiAoY29udGVudCwgd2lkdGgpIC0+XG4gICAgaWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50IFwic3BhblwiXG4gICAgaWQudGV4dENvbnRlbnQgPSBjb250ZW50XG4gICAgaWYgd2lkdGg/XG4gICAgICBpZC5zdHlsZS53aWR0aCA9IHdpZHRoICsgXCJweFwiXG4gICAgaWQuc3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCJcbiAgICBpZFxuXG4gIG1ldGFET006IC0+XG4gICAgbWV0YUhlYWRlciA9IGsubWsgXCJkaXZcIlxuICAgIG1ldGFIZWFkZXIuc3R5bGUud2lkdGggPSBAZy56b29tZXIuZ2V0TWV0YVdpZHRoKClcbiAgICBtZXRhSGVhZGVyLnN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiXG5cbiAgICBpZiBALmcudmlzLmdldCBcIm1ldGFHYXBzXCJcbiAgICAgIG1ldGFIZWFkZXIuYXBwZW5kQ2hpbGQgQGFkZEVsKFwiZ2Fwc1wiLCBAZy56b29tZXIuZ2V0KCdtZXRhR2FwV2lkdGgnKSlcbiAgICBpZiBALmcudmlzLmdldCBcIm1ldGFJZGVudGl0eVwiXG4gICAgICBtZXRhSGVhZGVyLmFwcGVuZENoaWxkIEBhZGRFbChcImlkZW50XCIsIEBnLnpvb21lci5nZXQoJ21ldGFJZGVudFdpZHRoJykpXG4gICAgaWYgQC5nLnZpcy5nZXQgXCJtZXRhTGlua3NcIlxuICAgICAgbWV0YUhlYWRlci5hcHBlbmRDaGlsZCBAYWRkRWwoXCJsaW5rc1wiKVxuXG4gICAgbWV0YUhlYWRlclxuIiwidmlldyA9IHJlcXVpcmUoXCJiYWNrYm9uZS12aWV3alwiKVxuZG9tID0gcmVxdWlyZShcImRvbS1oZWxwZXJcIilcbnN2ZyA9IHJlcXVpcmUoXCIuLi8uLi91dGlscy9zdmdcIilcbmpib25lID0gcmVxdWlyZSBcImpib25lXCJcblxuSGVhZGVyVmlldyA9IHZpZXcuZXh0ZW5kXG5cbiAgY2xhc3NOYW1lOiBcImJpb2pzX21zYV9tYXJrZXJcIlxuXG4gIGluaXRpYWxpemU6IChkYXRhKSAtPlxuICAgIEBnID0gZGF0YS5nXG4gICAgQGxpc3RlblRvIEBnLnpvb21lcixcImNoYW5nZTpzdGVwU2l6ZSBjaGFuZ2U6bGFiZWxXaWR0aCBjaGFuZ2U6Y29sdW1uV2lkdGggY2hhbmdlOm1hcmtlclN0ZXBTaXplIGNoYW5nZTptYXJrZXJGb250c2l6ZVwiLCBAcmVuZGVyXG4gICAgQGxpc3RlblRvIEBnLnZpcyxcImNoYW5nZTpsYWJlbHMgY2hhbmdlOm1ldGFjZWxsXCIsIEByZW5kZXJcbiAgICBAbWFuYWdlRXZlbnRzKClcblxuICByZW5kZXI6IC0+XG4gICAgZG9tLnJlbW92ZUFsbENoaWxkcyBAZWxcblxuICAgIEBlbC5zdHlsZS5mb250U2l6ZSA9IEBnLnpvb21lci5nZXQgXCJtYXJrZXJGb250c2l6ZVwiXG5cbiAgICBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50IFwic3BhblwiXG4gICAgbiA9IDBcbiAgICBjZWxsV2lkdGggPSBAZy56b29tZXIuZ2V0IFwiY29sdW1uV2lkdGhcIlxuXG4gICAgbk1heCA9IEBtb2RlbC5nZXRNYXhMZW5ndGgoKVxuICAgIHN0ZXBTaXplID0gQGcuem9vbWVyLmdldChcInN0ZXBTaXplXCIpXG4gICAgaGlkZGVuID0gQGcuY29sdW1ucy5nZXQgXCJoaWRkZW5cIlxuXG4gICAgd2hpbGUgbiA8IG5NYXhcbiAgICAgIGlmIGhpZGRlbi5pbmRleE9mKG4pID49IDBcbiAgICAgICAgQG1hcmtlckhpZGRlbihzcGFuLG4sIHN0ZXBTaXplKVxuICAgICAgICBuICs9IHN0ZXBTaXplXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICBzcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBcInNwYW5cIlxuICAgICAgc3Bhbi5zdHlsZS53aWR0aCA9IChjZWxsV2lkdGggKiBzdGVwU2l6ZSkgKyBcInB4XCJcbiAgICAgIHNwYW4uc3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCJcbiAgICAgICMgVE9ETzogdGhpcyBkb2Vzbid0IHdvcmsgZm9yIGEgbGFyZ2VyIHN0ZXBTaXplXG4gICAgICBpZiAobiArIDEpICUgQGcuem9vbWVyLmdldCgnbWFya2VyU3RlcFNpemUnKSBpcyAwXG4gICAgICAgIHNwYW4udGV4dENvbnRlbnQgPSAobiArIDEpXG4gICAgICBlbHNlXG4gICAgICAgIHNwYW4udGV4dENvbnRlbnQgPSBcIi5cIlxuICAgICAgc3Bhbi5yb3dQb3MgPSBuXG5cbiAgICAgIG4gKz0gc3RlcFNpemVcbiAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZCBzcGFuXG5cbiAgICBAZWwuYXBwZW5kQ2hpbGQgY29udGFpbmVyXG4gICAgQFxuXG4gIG1hcmtlckhpZGRlbjogKHNwYW4sbixzdGVwU2l6ZSkgLT5cbiAgICBoaWRkZW4gPSBAZy5jb2x1bW5zLmdldChcImhpZGRlblwiKS5zbGljZSAwXG5cbiAgICBtaW4gPSBNYXRoLm1heCAwLCBuIC0gc3RlcFNpemVcbiAgICBwcmV2SGlkZGVuID0gdHJ1ZVxuICAgIGZvciBqIGluICBbbWluIC4uIG5dIGJ5IDFcbiAgICAgIHByZXZIaWRkZW4gJj0gaGlkZGVuLmluZGV4T2YoaikgPj0gMFxuXG4gICAgIyBmaWx0ZXIgZHVwbGljYXRlc1xuICAgIHJldHVybiBpZiBwcmV2SGlkZGVuXG5cbiAgICBuTWF4ID0gQG1vZGVsLmdldE1heExlbmd0aCgpXG5cbiAgICBsZW5ndGggPSAwXG4gICAgaW5kZXggPSAtMVxuICAgICMgYWNjdW1sYXRlIG11bHRpcGxlIHJvd3NcbiAgICBmb3IgbiBpbiBbbi4ubk1heF0gYnkgMVxuICAgICAgaW5kZXggPSBoaWRkZW4uaW5kZXhPZihuKSB1bmxlc3MgaW5kZXggPj0gMCMgc2V0cyB0aGUgZmlyc3QgaW5kZXhcbiAgICAgIGlmIGhpZGRlbi5pbmRleE9mKG4pID49IDBcbiAgICAgICAgbGVuZ3RoKytcbiAgICAgIGVsc2VcbiAgICAgICAgYnJlYWtcblxuICAgIHMgPSBzdmcuYmFzZSBoZWlnaHQ6IDEwLCB3aWR0aDogMTBcbiAgICBzLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiXG4gICAgdHJpYW5nbGUgPSBzdmcucG9seWdvbiBwb2ludHM6IFwiMCwwIDUsNSAxMCwwXCIsIHN0eWxlOlxuICAgICAgXCJmaWxsOmxpbWU7c3Ryb2tlOnB1cnBsZTtzdHJva2Utd2lkdGg6MVwiXG4gICAgamJvbmUodHJpYW5nbGUpLm9uIFwiY2xpY2tcIiwgKGV2dCkgPT5cbiAgICAgIGhpZGRlbi5zcGxpY2UgaW5kZXgsIGxlbmd0aFxuICAgICAgQGcuY29sdW1ucy5zZXQgXCJoaWRkZW5cIiwgaGlkZGVuXG5cbiAgICBzLmFwcGVuZENoaWxkIHRyaWFuZ2xlXG4gICAgc3Bhbi5hcHBlbmRDaGlsZCBzXG4gICAgcmV0dXJuIHNcblxuICBtYW5hZ2VFdmVudHM6IC0+XG4gICAgZXZlbnRzID0ge31cbiAgICBpZiBAZy5jb25maWcuZ2V0IFwicmVnaXN0ZXJNb3VzZUNsaWNrc1wiXG4gICAgICBldmVudHMuY2xpY2sgPSBcIl9vbmNsaWNrXCJcbiAgICBpZiBAZy5jb25maWcuZ2V0IFwicmVnaXN0ZXJNb3VzZUhvdmVyXCJcbiAgICAgIGV2ZW50cy5tb3VzZWluID0gXCJfb25tb3VzZWluXCJcbiAgICAgIGV2ZW50cy5tb3VzZW91dCA9IFwiX29ubW91c2VvdXRcIlxuICAgIEBkZWxlZ2F0ZUV2ZW50cyBldmVudHNcbiAgICBAbGlzdGVuVG8gQGcuY29uZmlnLCBcImNoYW5nZTpyZWdpc3Rlck1vdXNlSG92ZXJcIiwgQG1hbmFnZUV2ZW50c1xuICAgIEBsaXN0ZW5UbyBAZy5jb25maWcsIFwiY2hhbmdlOnJlZ2lzdGVyTW91c2VDbGlja1wiLCBAbWFuYWdlRXZlbnRzXG5cbiAgX29uY2xpY2s6IChldnQpIC0+XG4gICAgcm93UG9zID0gZXZ0LnRhcmdldC5yb3dQb3NcbiAgICBzdGVwU2l6ZSA9IEBnLnpvb21lci5nZXQoXCJzdGVwU2l6ZVwiKVxuICAgIEBnLnRyaWdnZXIgXCJjb2x1bW46Y2xpY2tcIiwge3Jvd1Bvczogcm93UG9zLHN0ZXBTaXplOiBzdGVwU2l6ZSwgZXZ0OmV2dH1cblxuICBfb25tb3VzZWluOiAoZXZ0KSAtPlxuICAgIHJvd1BvcyA9IEBnLnpvb21lci5nZXQgXCJzdGVwU2l6ZVwiICogZXZ0LnJvd1Bvc1xuICAgIHN0ZXBTaXplID0gQGcuem9vbWVyLmdldChcInN0ZXBTaXplXCIpXG4gICAgQGcudHJpZ2dlciBcImNvbHVtbjptb3VzZWluXCIsIHtyb3dQb3M6IHJvd1BvcyxzdGVwU2l6ZTogc3RlcFNpemUsIGV2dDpldnR9XG5cbiAgX29ubW91c2VvdXQ6IChldnQpIC0+XG4gICAgcm93UG9zID0gQGcuem9vbWVyLmdldCBcInN0ZXBTaXplXCIgKiBldnQucm93UG9zXG4gICAgc3RlcFNpemUgPSBAZy56b29tZXIuZ2V0KFwic3RlcFNpemVcIilcbiAgICBAZy50cmlnZ2VyIFwiY29sdW1uOm1vdXNlb3V0XCIsIHtyb3dQb3M6IHJvd1BvcyxzdGVwU2l6ZTogc3RlcFNpemUsIGV2dDpldnR9XG5cbm1vZHVsZS5leHBvcnRzID0gSGVhZGVyVmlld1xuIiwiTWFya2VyVmlldyA9IHJlcXVpcmUgXCIuL01hcmtlclZpZXdcIlxuQ29uc2VydmF0aW9uVmlldyA9IHJlcXVpcmUgXCIuL0NvbnNlcnZhdGlvblZpZXdcIlxuYm9uZVZpZXcgPSByZXF1aXJlKFwiYmFja2JvbmUtY2hpbGRzXCIpXG5fID0gcmVxdWlyZSAndW5kZXJzY29yZSdcblNlcUxvZ29XcmFwcGVyID0gcmVxdWlyZSBcIi4vU2VxTG9nb1dyYXBwZXJcIlxuR2FwVmlldyA9IHJlcXVpcmUgXCIuL0dhcFZpZXdcIlxuXG5tb2R1bGUuZXhwb3J0cyA9IGJvbmVWaWV3LmV4dGVuZFxuXG4gIGluaXRpYWxpemU6IChkYXRhKSAtPlxuICAgIEBnID0gZGF0YS5nXG4gICAgQGJsb2NrRXZlbnRzID0gZmFsc2VcblxuICAgIEBsaXN0ZW5UbyBAZy52aXMsXCJjaGFuZ2U6aGVhZGVyXCIsIC0+XG4gICAgICBAZHJhdygpXG4gICAgICBAcmVuZGVyKClcbiAgICBAbGlzdGVuVG8gQGcudmlzLFwiY2hhbmdlXCIsIEBfc2V0U3BhY2VyXG4gICAgQGxpc3RlblRvIEBnLnpvb21lcixcImNoYW5nZTphbGlnbm1lbnRXaWR0aFwiLCBAX3NldFdpZHRoXG4gICAgQGxpc3RlblRvIEBnLnpvb21lciwgXCJjaGFuZ2U6X2FsaWdubWVudFNjcm9sbExlZnRcIiwgQF9hZGp1c3RTY3JvbGxpbmdMZWZ0XG5cbiAgICAjIFRPRE86IGR1cGxpY2F0ZSByZW5kZXJpbmdcbiAgICBAbGlzdGVuVG8gQGcuY29sdW1ucywgXCJjaGFuZ2U6aGlkZGVuXCIsIC0+XG4gICAgICBAZHJhdygpXG4gICAgICBAcmVuZGVyKClcblxuICAgIEBkcmF3KClcblxuICAgIEBnLnZpcy5vbmNlICdjaGFuZ2U6bG9hZGVkJywgQF9hZGp1c3RTY3JvbGxpbmdMZWZ0LCBAXG5cbiAgZXZlbnRzOlxuICAgIFwic2Nyb2xsXCI6IFwiX3NlbmRTY3JvbGxFdmVudFwiXG5cbiAgZHJhdzogLT5cbiAgICBAcmVtb3ZlVmlld3MoKVxuXG4gICAgaWYgQGcudmlzLmdldCBcImNvbnNlcnZcIlxuICAgICAgY29uc2VydiA9IG5ldyBDb25zZXJ2YXRpb25WaWV3IHttb2RlbDogQG1vZGVsLCBnOiBAZ31cbiAgICAgIGNvbnNlcnYub3JkZXJpbmcgPSAtMjBcbiAgICAgIEBhZGRWaWV3IFwiY29uc2VydlwiLGNvbnNlcnZcblxuICAgIGlmIEBnLnZpcy5nZXQgXCJtYXJrZXJzXCJcbiAgICAgIG1hcmtlciA9IG5ldyBNYXJrZXJWaWV3IHttb2RlbDogQG1vZGVsLCBnOiBAZ31cbiAgICAgIG1hcmtlci5vcmRlcmluZyA9IC0xMFxuICAgICAgQGFkZFZpZXcgXCJtYXJrZXJcIixtYXJrZXJcblxuICAgIGlmIEBnLnZpcy5nZXQgXCJzZXFsb2dvXCJcbiAgICAgIHNlcWxvZ28gPSBuZXcgU2VxTG9nb1dyYXBwZXIge21vZGVsOiBAbW9kZWwsIGc6IEBnfVxuICAgICAgc2VxbG9nby5vcmRlcmluZyA9IC0zMFxuICAgICAgQGFkZFZpZXcgXCJzZXFsb2dvXCIsc2VxbG9nb1xuXG4gICAgaWYgQGcudmlzLmdldCBcImdhcEhlYWRlclwiXG4gICAgICBnYXB2aWV3ID0gbmV3IEdhcFZpZXcge21vZGVsOiBAbW9kZWwsIGc6IEBnfVxuICAgICAgZ2Fwdmlldy5vcmRlcmluZyA9IC0yNVxuICAgICAgQGFkZFZpZXcgXCJnYXB2aWV3XCIsZ2Fwdmlld1xuXG4gIHJlbmRlcjogLT5cbiAgICBAcmVuZGVyU3Vidmlld3MoKVxuXG4gICAgQF9zZXRTcGFjZXIoKVxuXG4gICAgQGVsLmNsYXNzTmFtZSA9IFwiYmlvanNfbXNhX3JoZWFkZXJcIlxuICAgIEBlbC5zdHlsZS5vdmVyZmxvd1ggPSBcImF1dG9cIlxuICAgIEBlbC5zdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIlxuICAgICNAZWwuc3R5bGUuaGVpZ2h0ID0gQGcuem9vbWVyLmdldChcIm1hcmtlckhlaWdodFwiKSArIFwicHhcIlxuICAgIEBfc2V0V2lkdGgoKVxuICAgIEBfYWRqdXN0U2Nyb2xsaW5nTGVmdCgpXG4gICAgQFxuXG4gICMgc2Nyb2xsTGVmdCB0cmlnZ2VycyBhIHJlZmxvdyBvZiB0aGUgd2hvbGUgYXJlYSAoZXZlbiBvbmx5IGdldClcbiAgX3NlbmRTY3JvbGxFdmVudDogLT5cbiAgICB1bmxlc3MgQGJsb2NrRXZlbnRzXG4gICAgICBAZy56b29tZXIuc2V0IFwiX2FsaWdubWVudFNjcm9sbExlZnRcIiwgQGVsLnNjcm9sbExlZnQsIHtvcmlnaW46IFwiaGVhZGVyXCJ9XG4gICAgQGJsb2NrRXZlbnRzID0gZmFsc2VcblxuICBfYWRqdXN0U2Nyb2xsaW5nTGVmdDogKG1vZGVsLHZhbHVlLG9wdGlvbnMpIC0+XG4gICAgaWYgKG5vdCBvcHRpb25zPy5vcmlnaW4/KSBvciBvcHRpb25zLm9yaWdpbiBpc250IFwiaGVhZGVyXCJcbiAgICAgIHNjcm9sbExlZnQgPSBAZy56b29tZXIuZ2V0IFwiX2FsaWdubWVudFNjcm9sbExlZnRcIlxuICAgICAgQGJsb2NrRXZlbnRzID0gdHJ1ZVxuICAgICAgQGVsLnNjcm9sbExlZnQgPSBzY3JvbGxMZWZ0XG5cbiAgX3NldFNwYWNlcjogLT5cbiAgICAjIHNwYWNlciAvIHBhZGRpbmcgZWxlbWVudFxuICAgIEBlbC5zdHlsZS5tYXJnaW5MZWZ0ID0gQF9nZXRMYWJlbFdpZHRoKCkgKyBcInB4XCJcblxuICBfZ2V0TGFiZWxXaWR0aDogLT5cbiAgICBwYWRkaW5nTGVmdCA9IDBcbiAgICB1bmxlc3MgQGcudmlzLmdldCBcImxlZnRIZWFkZXJcIlxuICAgICAgcGFkZGluZ0xlZnQgKz0gQGcuem9vbWVyLmdldExlZnRCbG9ja1dpZHRoKClcbiAgICByZXR1cm4gcGFkZGluZ0xlZnRcblxuICBfc2V0V2lkdGg6IC0+XG4gICAgQGVsLnN0eWxlLndpZHRoID0gQGcuem9vbWVyLmdldEFsaWdubWVudFdpZHRoKCkgKyBcInB4XCJcbiIsIlNlcUxvZ29WaWV3ID0gcmVxdWlyZSBcImJpb2pzLXZpcy1zZXFsb2dvL2xpZ2h0XCJcbnZpZXcgPSByZXF1aXJlKFwiYmFja2JvbmUtdmlld2pcIilcblxuIyB0aGlzIGlzIGEgYnJpZGdlIGJldHdlZW4gdGhlIE1TQSBhbmQgdGhlIHNlcWxvZ28gdmlld2VyXG5tb2R1bGUuZXhwb3J0cyA9IHZpZXcuZXh0ZW5kXG5cbiAgaW5pdGlhbGl6ZTogKGRhdGEpIC0+XG4gICAgQGcgPSBkYXRhLmdcbiAgICBAbGlzdGVuVG8gQGcuem9vbWVyLFwiY2hhbmdlOmFsaWdubWVudFdpZHRoXCIsIEByZW5kZXJcbiAgICBAbGlzdGVuVG8gQGcuY29sb3JzY2hlbWUsIFwiY2hhbmdlXCIsIC0+XG4gICAgICBjb2xvcnMgPSBAZy5jb2xvcnNjaGVtZS5nZXRTZWxlY3RlZFNjaGVtZSgpXG4gICAgICBAc2VxbG9nby5jaGFuZ2VDb2xvcnMgY29sb3JzXG4gICAgICBAcmVuZGVyKClcblxuICAgIEBsaXN0ZW5UbyBAZy56b29tZXIsXCJjaGFuZ2U6Y29sdW1uV2lkdGhcIiwgLT5cbiAgICAgICAgQHNlcWxvZ28uY29sdW1uX3dpZHRoID0gQGcuem9vbWVyLmdldCgnY29sdW1uV2lkdGgnKVxuICAgICAgQHJlbmRlclxuXG4gICAgI0BsaXN0ZW5UbyBAZy56b29tZXIsXCJjaGFuZ2U6Y29sdW1uV2lkdGggY2hhbmdlOnJvd0hlaWdodFwiLCAtPlxuXG4gICAgQGRyYXcoKVxuXG5cbiAgZHJhdzogLT5cbiAgICBjb25zb2xlLmxvZyBcInJlZHJhd1wiXG4gICAgYXJyID0gQGcuc3RhdHMuY29uc2VydlJlc2lkdWUge3NjYWxlZDogdHJ1ZX1cbiAgICBhcnIgPSBfLm1hcCBhcnIsIChlbCkgLT5cbiAgICAgIF8ucGljayBlbCwgKGUsaykgLT5cbiAgICAgICAgayBpc250IFwiLVwiXG4gICAgZGF0YSA9XG4gICAgICBhbHBoYWJldDogXCJhYVwiXG4gICAgICBoZWlnaHRBcnI6IGFyclxuXG4gICAgY29sb3JzID0gQGcuY29sb3JzY2hlbWUuZ2V0U2VsZWN0ZWRTY2hlbWUoKVxuICAgICMgVE9ETzogc2VxbG9nbyBtaWdodCBoYXZlIHByb2JsZW1zIHdpdGggdHJ1ZSBkeW5hbWljIHNjaGVtZXNcbiAgICBAc2VxbG9nbyA9IG5ldyBTZXFMb2dvVmlldyB7bW9kZWw6IEBtb2RlbCwgZzogQGcsIGRhdGE6IGRhdGEsIHlheGlzOmZhbHNlXG4gICAgICAgICxzY3JvbGxlcjogZmFsc2UseGF4aXM6IGZhbHNlLCBoZWlnaHQ6IDEwMCwgY29sdW1uX3dpZHRoOiBAZy56b29tZXIuZ2V0KCdjb2x1bW5XaWR0aCcpXG4gICAgICAgICxwb3NpdGlvbk1hcmtlcjogZmFsc2UsIHpvb206IDEsIGVsOiBAZWwsY29sb3JzOiBjb2xvcnN9XG5cbiAgcmVuZGVyOiAtPlxuICAgIEBzZXFsb2dvLnJlbmRlcigpXG4iLCJMYWJlbFJvd1ZpZXcgPSByZXF1aXJlIFwiLi9MYWJlbFJvd1ZpZXdcIlxuYm9uZVZpZXcgPSByZXF1aXJlKFwiYmFja2JvbmUtY2hpbGRzXCIpXG5cbm1vZHVsZS5leHBvcnRzID0gYm9uZVZpZXcuZXh0ZW5kXG5cbiAgaW5pdGlhbGl6ZTogKGRhdGEpIC0+XG4gICAgQGcgPSBkYXRhLmdcbiAgICBAZHJhdygpXG4gICAgQGxpc3RlblRvIEBnLnpvb21lciwgXCJjaGFuZ2U6X2FsaWdubWVudFNjcm9sbFRvcFwiLCBAX2FkanVzdFNjcm9sbGluZ1RvcFxuICAgIEBnLnZpcy5vbmNlICdjaGFuZ2U6bG9hZGVkJywgQF9hZGp1c3RTY3JvbGxpbmdUb3AgLCBAXG5cbiAgICBAbGlzdGVuVG8gQGcuem9vbWVyLFwiY2hhbmdlOmFsaWdubWVudEhlaWdodFwiLCBAX3NldEhlaWdodFxuICAgIEBsaXN0ZW5UbyBAbW9kZWwsXCJjaGFuZ2U6cmVmZXJlbmNlXCIsIEBkcmF3XG5cbiAgZHJhdzogLT5cbiAgICBAcmVtb3ZlVmlld3MoKVxuICAgIGZvciBpIGluIFswLi4gQG1vZGVsLmxlbmd0aCAtIDFdIGJ5IDFcbiAgICAgIGNvbnRpbnVlIGlmIEBtb2RlbC5hdChpKS5nZXQoJ2hpZGRlbicpXG4gICAgICB2aWV3ID0gbmV3IExhYmVsUm93VmlldyB7bW9kZWw6IEBtb2RlbC5hdChpKSwgZzogQGd9XG4gICAgICB2aWV3Lm9yZGVyaW5nID0gaVxuICAgICAgQGFkZFZpZXcgXCJyb3dfI3tpfVwiLCB2aWV3XG5cbiAgZXZlbnRzOlxuICAgIFwic2Nyb2xsXCI6IFwiX3NlbmRTY3JvbGxFdmVudFwiXG5cbiAgIyBicm9hZGNhc3QgdGhlIHNjcm9sbGluZyBldmVudCAoYnkgdGhlIHNjcm9sbGJhcilcbiAgX3NlbmRTY3JvbGxFdmVudDogLT5cbiAgICBAZy56b29tZXIuc2V0IFwiX2FsaWdubWVudFNjcm9sbFRvcFwiLCBAZWwuc2Nyb2xsVG9wLCB7b3JpZ2luOiBcImxhYmVsXCJ9XG5cbiAgIyBzZXRzIHRoZSBzY3JvbGxpbmcgcHJvcGVydHkgKGZyb20gYW5vdGhlciBldmVudCBlLmcuIGRyYWdnaW5nKVxuICBfYWRqdXN0U2Nyb2xsaW5nVG9wOiAtPlxuICAgIEBlbC5zY3JvbGxUb3AgPSAgQGcuem9vbWVyLmdldCBcIl9hbGlnbm1lbnRTY3JvbGxUb3BcIlxuXG4gIHJlbmRlcjogLT5cbiAgICBAcmVuZGVyU3Vidmlld3MoKVxuICAgIEBlbC5jbGFzc05hbWUgPSBcImJpb2pzX21zYV9sYWJlbGJsb2NrXCJcbiAgICBAZWwuc3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCJcbiAgICBAZWwuc3R5bGUudmVydGljYWxBbGlnbiA9IFwidG9wXCJcbiAgICBAZWwuc3R5bGUub3ZlcmZsb3dZID0gXCJhdXRvXCJcbiAgICBAZWwuc3R5bGUub3ZlcmZsb3dYID0gXCJoaWRkZW5cIlxuICAgIEBlbC5zdHlsZS5mb250U2l6ZSA9IFwiI3tAZy56b29tZXIuZ2V0KCdsYWJlbEZvbnRzaXplJyl9cHhcIlxuICAgIEBlbC5zdHlsZS5saW5lSGVpZ2h0ID0gXCIje0BnLnpvb21lci5nZXQgXCJsYWJlbExpbmVIZWlnaHRcIn1cIlxuICAgIEBfc2V0SGVpZ2h0KClcbiAgICBAXG5cblxuICBfc2V0SGVpZ2h0OiAtPlxuICAgIEBlbC5zdHlsZS5oZWlnaHQgPSBAZy56b29tZXIuZ2V0KFwiYWxpZ25tZW50SGVpZ2h0XCIpICsgXCJweFwiXG4iLCJib25lVmlldyA9IHJlcXVpcmUoXCJiYWNrYm9uZS1jaGlsZHNcIilcbkxhYmVsVmlldyA9IHJlcXVpcmUoXCIuL0xhYmVsVmlld1wiKVxuTWV0YVZpZXcgPSByZXF1aXJlKFwiLi9NZXRhVmlld1wiKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJvbmVWaWV3LmV4dGVuZFxuXG4gIGluaXRpYWxpemU6IChkYXRhKSAtPlxuICAgIEBnID0gZGF0YS5nXG4gICAgQGRyYXcoKVxuXG4gICAgQGxpc3RlblRvIEBnLnZpcyxcImNoYW5nZTpsYWJlbHNcIiwgQGRyYXdSXG4gICAgQGxpc3RlblRvIEBnLnZpcyxcImNoYW5nZTptZXRhY2VsbFwiLCBAZHJhd1JcbiAgICBAbGlzdGVuVG8gQGcuem9vbWVyLCBcImNoYW5nZTpyb3dIZWlnaHRcIiwgLT5cbiAgICAgIEBlbC5zdHlsZS5oZWlnaHQgPSBAZy56b29tZXIuZ2V0KFwicm93SGVpZ2h0XCIpICsgXCJweFwiXG5cbiAgICBAbGlzdGVuVG8gQGcuc2VsY29sLFwiY2hhbmdlIHJlc2V0IGFkZFwiLCBAc2V0U2VsZWN0aW9uXG5cbiAgZHJhdzogLT5cbiAgICBAcmVtb3ZlVmlld3MoKVxuICAgIGlmIEBnLnZpcy5nZXQgXCJsYWJlbHNcIlxuICAgICAgQGFkZFZpZXcgXCJsYWJlbHNcIiwgbmV3IExhYmVsVmlldyB7bW9kZWw6IEBtb2RlbCwgZzpAZ31cbiAgICBpZiBAZy52aXMuZ2V0IFwibWV0YWNlbGxcIlxuICAgICAgbWV0YSA9IG5ldyBNZXRhVmlldyB7bW9kZWw6IEBtb2RlbCwgZzpAZ31cbiAgICAgIEBhZGRWaWV3IFwibWV0YWNlbGxcIiwgbWV0YVxuXG4gIGRyYXdSOiAtPlxuICAgIEBkcmF3KClcbiAgICBAcmVuZGVyKClcblxuICByZW5kZXI6IC0+XG4gICAgQHJlbmRlclN1YnZpZXdzKClcblxuICAgIEBlbC5zZXRBdHRyaWJ1dGUgXCJjbGFzc1wiLCBcImJpb2pzX21zYV9sYWJlbHJvd1wiXG4gICAgQGVsLnN0eWxlLmhlaWdodCA9IEBnLnpvb21lci5nZXQoXCJyb3dIZWlnaHRcIikgKiAoQG1vZGVsLmF0dHJpYnV0ZXMuaGVpZ2h0IHx8IDEpICsgXCJweFwiXG5cbiAgICBAc2V0U2VsZWN0aW9uKClcbiAgICBAXG5cbiAgc2V0U2VsZWN0aW9uOiAtPlxuICAgIHNlbCA9IEBnLnNlbGNvbC5nZXRTZWxGb3JSb3cgQG1vZGVsLmlkXG4gICAgaWYgc2VsLmxlbmd0aCA+IDBcbiAgICAgIEBlbC5zdHlsZS5mb250V2VpZ2h0ID0gXCJib2xkXCJcbiAgICBlbHNlXG4gICAgICBAZWwuc3R5bGUuZm9udFdlaWdodCA9IFwibm9ybWFsXCJcbiIsInZpZXcgPSByZXF1aXJlKFwiYmFja2JvbmUtdmlld2pcIilcbmRvbSA9IHJlcXVpcmUgXCJkb20taGVscGVyXCJcblxuTGFiZWxWaWV3ID0gdmlldy5leHRlbmRcblxuICBpbml0aWFsaXplOiAoZGF0YSkgLT5cbiAgICBAc2VxID0gZGF0YS5zZXFcbiAgICBAZyA9IGRhdGEuZ1xuXG4gICAgQG1hbmFnZUV2ZW50cygpXG5cbiAgbWFuYWdlRXZlbnRzOiAtPlxuICAgIGV2ZW50cyA9IHt9XG4gICAgaWYgQGcuY29uZmlnLmdldCBcInJlZ2lzdGVyTW91c2VDbGlja3NcIlxuICAgICAgZXZlbnRzLmNsaWNrID0gXCJfb25jbGlja1wiXG4gICAgaWYgQGcuY29uZmlnLmdldCBcInJlZ2lzdGVyTW91c2VIb3ZlclwiXG4gICAgICBldmVudHMubW91c2VpbiA9IFwiX29ubW91c2VpblwiXG4gICAgICBldmVudHMubW91c2VvdXQgPSBcIl9vbm1vdXNlb3V0XCJcbiAgICBAZGVsZWdhdGVFdmVudHMgZXZlbnRzXG4gICAgQGxpc3RlblRvIEBnLmNvbmZpZywgXCJjaGFuZ2U6cmVnaXN0ZXJNb3VzZUhvdmVyXCIsIEBtYW5hZ2VFdmVudHNcbiAgICBAbGlzdGVuVG8gQGcuY29uZmlnLCBcImNoYW5nZTpyZWdpc3Rlck1vdXNlQ2xpY2tcIiwgQG1hbmFnZUV2ZW50c1xuICAgIEBsaXN0ZW5UbyBAZy52aXMsIFwiY2hhbmdlOmxhYmVsTmFtZSBjaGFuZ2U6bGFiZWxJZCBjaGFuZ2U6bGFiZWxQYXJ0aXRpb24gY2hhbmdlOmxhYmVsQ2hlY2tib3hcIiwgQHJlbmRlclxuICAgIEBsaXN0ZW5UbyBAZy56b29tZXIsIFwiY2hhbmdlOmxhYmVsSWRMZW5ndGggY2hhbmdlOmxhYmVsTmFtZUxlbmd0aFxuICAgIGNoYW5nZTpsYWJlbFBhcnRMZW5ndGggY2hhbmdlOmxhYmVsQ2hlY2tMZW5ndGhcIiwgQHJlbmRlclxuICAgIEBsaXN0ZW5UbyBAZy56b29tZXIsIFwiY2hhbmdlOmxhYmVsRm9udFNpemUgY2hhbmdlOmxhYmVsTGluZUhlaWdodFxuICAgIGNoYW5nZTpsYWJlbFdpZHRoIGNoYW5nZTpyb3dIZWlnaHRcIiwgQHJlbmRlclxuXG4gIHJlbmRlcjogLT5cbiAgICBkb20ucmVtb3ZlQWxsQ2hpbGRzIEBlbFxuXG4gICAgQGVsLnN0eWxlLndpZHRoID0gXCIje0BnLnpvb21lci5nZXRMYWJlbFdpZHRoKCl9cHhcIlxuICAgICNAZWwuc3R5bGUuaGVpZ2h0ID0gXCIje0BnLnpvb21lci5nZXQgXCJyb3dIZWlnaHRcIn1weFwiXG4gICAgQGVsLnNldEF0dHJpYnV0ZSBcImNsYXNzXCIsIFwiYmlvanNfbXNhX2xhYmVsc1wiXG5cbiAgICBpZiBALmcudmlzLmdldCBcImxhYmVsQ2hlY2tib3hcIlxuICAgICAgY2hlY2tCb3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50IFwiaW5wdXRcIlxuICAgICAgY2hlY2tCb3guc2V0QXR0cmlidXRlIFwidHlwZVwiLCBcImNoZWNrYm94XCJcbiAgICAgIGNoZWNrQm94LnZhbHVlID0gQG1vZGVsLmdldCgnaWQnKVxuICAgICAgY2hlY2tCb3gubmFtZSA9IFwic2VxXCJcbiAgICAgIGNoZWNrQm94LnN0eWxlLndpZHRoPSBAZy56b29tZXIuZ2V0KFwibGFiZWxDaGVja0xlbmd0aFwiKSArIFwicHhcIlxuICAgICAgQGVsLmFwcGVuZENoaWxkIGNoZWNrQm94XG5cbiAgICBpZiBALmcudmlzLmdldCBcImxhYmVsSWRcIlxuICAgICAgaWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50IFwic3BhblwiXG4gICAgICB2YWwgID0gQG1vZGVsLmdldCBcImlkXCJcbiAgICAgIHVubGVzcyBpc05hTiB2YWxcbiAgICAgICAgdmFsKytcbiAgICAgIGlkLnRleHRDb250ZW50ID0gdmFsXG4gICAgICBpZC5zdHlsZS53aWR0aCA9IEBnLnpvb21lci5nZXQoXCJsYWJlbElkTGVuZ3RoXCIpICsgXCJweFwiXG4gICAgICBpZC5zdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIlxuICAgICAgQGVsLmFwcGVuZENoaWxkIGlkXG5cbiAgICBpZiBALmcudmlzLmdldCBcImxhYmVsUGFydGl0aW9uXCJcbiAgICAgIHBhcnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50IFwic3BhblwiXG4gICAgICBwYXJ0LnN0eWxlLndpZHRoPSBAZy56b29tZXIuZ2V0KFwibGFiZWxQYXJ0TGVuZ3RoXCIpICsgXCJweFwiXG4gICAgICBwYXJ0LnRleHRDb250ZW50ID0gQG1vZGVsLmdldChcInBhcnRpdGlvblwiKVxuICAgICAgcGFydC5zdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIlxuICAgICAgQGVsLmFwcGVuZENoaWxkIGlkXG4gICAgICBAZWwuYXBwZW5kQ2hpbGQgcGFydFxuXG4gICAgaWYgQC5nLnZpcy5nZXQgXCJsYWJlbE5hbWVcIlxuICAgICAgbmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgXCJzcGFuXCJcbiAgICAgIG5hbWUudGV4dENvbnRlbnQgPSBAbW9kZWwuZ2V0KFwibmFtZVwiKVxuICAgICAgaWYgQG1vZGVsLmdldChcInJlZlwiKSBhbmQgQGcuY29uZmlnLmdldCBcImhhc1JlZlwiXG4gICAgICAgIG5hbWUuc3R5bGUuZm9udFdlaWdodCA9IFwiYm9sZFwiXG4gICAgICBuYW1lLnN0eWxlLndpZHRoPSBAZy56b29tZXIuZ2V0KFwibGFiZWxOYW1lTGVuZ3RoXCIpICsgXCJweFwiXG4gICAgICBAZWwuYXBwZW5kQ2hpbGQgbmFtZVxuXG4gICAgQGVsLnN0eWxlLm92ZXJmbG93ID0gc2Nyb2xsXG4gICAgQGVsLnN0eWxlLmZvbnRTaXplID0gXCIje0BnLnpvb21lci5nZXQoJ2xhYmVsRm9udHNpemUnKX1weFwiXG4gICAgQFxuXG4gIF9vbmNsaWNrOiAoZXZ0KSAtPlxuICAgIHNlcUlkID0gQG1vZGVsLmdldCBcImlkXCJcbiAgICBAZy50cmlnZ2VyIFwicm93OmNsaWNrXCIsIHtzZXFJZDpzZXFJZCwgZXZ0OmV2dH1cblxuICBfb25tb3VzZWluOiAoZXZ0KSAtPlxuICAgIHNlcUlkID0gQG1vZGVsLmdldCBcImlkXCJcbiAgICBAZy50cmlnZ2VyIFwicm93Om1vdXNlb3V0XCIsIHtzZXFJZDpzZXFJZCwgZXZ0OmV2dH1cblxuICBfb25tb3VzZW91dDogKGV2dCkgLT5cbiAgICBzZXFJZCA9IEBtb2RlbC5nZXQgXCJpZFwiXG4gICAgQGcudHJpZ2dlciBcInJvdzptb3VzZW91dFwiLCB7c2VxSWQ6c2VxSWQsIGV2dDpldnR9XG5cbm1vZHVsZS5leHBvcnRzID0gTGFiZWxWaWV3XG4iLCJ2aWV3ID0gcmVxdWlyZShcImJhY2tib25lLXZpZXdqXCIpXG5NZW51QnVpbGRlciA9IHJlcXVpcmUgXCIuLi8uLi9tZW51L21lbnVidWlsZGVyXCJcbl8gPSByZXF1aXJlICd1bmRlcnNjb3JlJ1xuZG9tID0gcmVxdWlyZSBcImRvbS1oZWxwZXJcIlxuc3QgPSByZXF1aXJlIFwibXNhLXNlcXRvb2xzXCJcblxubW9kdWxlLmV4cG9ydHMgPSBNZXRhVmlldyA9IHZpZXcuZXh0ZW5kXG5cbiAgY2xhc3NOYW1lOiBcImJpb2pzX21zYV9tZXRhdmlld1wiXG5cbiAgaW5pdGlhbGl6ZTogKGRhdGEpIC0+XG4gICAgQGcgPSBkYXRhLmdcbiAgICBAbGlzdGVuVG8gQGcudmlzLCBcImNoYW5nZTptZXRhY2VsbFwiLCBAcmVuZGVyXG4gICAgQGxpc3RlblRvIEBnLnpvb21lciwgXCJjaGFuZ2U6bWV0YVdpZHRoXCIsIEByZW5kZXJcblxuICBldmVudHM6XG4gICAgY2xpY2s6IFwiX29uY2xpY2tcIlxuICAgIG1vdXNlaW46IFwiX29ubW91c2VpblwiXG4gICAgbW91c2VvdXQ6IFwiX29ubW91c2VvdXRcIlxuXG4gIHJlbmRlcjogLT5cbiAgICBkb20ucmVtb3ZlQWxsQ2hpbGRzIEBlbFxuXG4gICAgQGVsLnN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiXG5cbiAgICB3aWR0aCA9IEBnLnpvb21lci5nZXRNZXRhV2lkdGgoKVxuICAgIEBlbC5zdHlsZS53aWR0aCA9IHdpZHRoIC0gMTBcbiAgICBAZWwuc3R5bGUucGFkZGluZ1JpZ2h0ID0gNVxuICAgIEBlbC5zdHlsZS5wYWRkaW5nTGVmdCA9IDVcbiAgICAjIFRPRE86IHdoeSBkbyB3ZSBuZWVkIHRvIGRlY3JlYXNlIHRoZSBmb250IHNpemU/XG4gICAgIyBvdGhlcndpc2Ugd2Ugc2VlIGEgc2Nyb2xsYmFyXG4gICAgQGVsLnN0eWxlLmZvbnRTaXplID0gXCIje0BnLnpvb21lci5nZXQoJ2xhYmVsRm9udHNpemUnKSAtIDJ9cHhcIlxuXG4gICAgaWYgQC5nLnZpcy5nZXQgXCJtZXRhR2Fwc1wiXG4gICAgICAjIGFkZHMgZ2Fwc1xuICAgICAgc2VxID0gQG1vZGVsLmdldCgnc2VxJylcbiAgICAgIGdhcHMgPSBfLnJlZHVjZSBzZXEsICgobWVtbywgYykgLT4gbWVtbysrIGlmIGMgaXMgJy0nO21lbW8pLDBcbiAgICAgIGdhcHMgPSAoZ2FwcyAvIHNlcS5sZW5ndGgpLnRvRml4ZWQoMSlcblxuICAgICAgIyBhcHBlbmQgZ2FwIGNvdW50XG4gICAgICBnYXBTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAnc3BhbidcbiAgICAgIGdhcFNwYW4udGV4dENvbnRlbnQgPSBnYXBzXG4gICAgICBnYXBTcGFuLnN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiXG4gICAgICBnYXBTcGFuLnN0eWxlLndpZHRoID0gMzVcbiAgICAgIEBlbC5hcHBlbmRDaGlsZCBnYXBTcGFuXG5cblxuICAgIGlmIEAuZy52aXMuZ2V0IFwibWV0YUlkZW50aXR5XCJcbiAgICAgICMgaWRlbnRpdHlcbiAgICAgICMgVE9ETzogdGhlcmUgbXVzdCBiZSBhIGJldHRlciB3YXkgdG8gcGFzcyB0aGUgaWRcbiAgICAgIGlkZW50ID0gQGcuc3RhdHMuaWRlbnRpdHkoKVtAbW9kZWwuaWRdXG4gICAgICBpZGVudFNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50ICdzcGFuJ1xuXG4gICAgICBpZiBAbW9kZWwuZ2V0KFwicmVmXCIpIGFuZCBAZy5jb25maWcuZ2V0IFwiaGFzUmVmXCJcbiAgICAgICAgaWRlbnRTcGFuLnRleHRDb250ZW50ID0gXCJyZWYuXCJcbiAgICAgIGVsc2UgaWYgaWRlbnQ/XG4gICAgICAgIGlkZW50U3Bhbi50ZXh0Q29udGVudCA9IGlkZW50LnRvRml4ZWQoMilcblxuICAgICAgaWRlbnRTcGFuLnN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiXG4gICAgICBpZGVudFNwYW4uc3R5bGUud2lkdGggPSA0MFxuICAgICAgQGVsLmFwcGVuZENoaWxkIGlkZW50U3BhblxuXG4gICAgaWYgQC5nLnZpcy5nZXQgXCJtZXRhTGlua3NcIlxuICAgICAgIyBUT0RPOiB0aGlzIG1lbnUgYnVpbGRlciBpcyBqdXN0IGFuIGV4YW1wbGUgaG93IG9uZSBjb3VsZCBjdXN0b21pemUgdGhpc1xuICAgICAgIyB2aWV3XG4gICAgICBpZiBAbW9kZWwuYXR0cmlidXRlcy5pZHNcbiAgICAgICAgbGlua3MgPSBzdC5idWlsZExpbmtzIEBtb2RlbC5hdHRyaWJ1dGVzLmlkc1xuICAgICAgICBpZiBfLmtleXMobGlua3MpLmxlbmd0aCA+IDBcbiAgICAgICAgICBtZW51ID0gbmV3IE1lbnVCdWlsZGVyKHtuYW1lOiBcIuKGl1wifSlcbiAgICAgICAgICBjb25zb2xlLmxvZyBfLmtleXMobGlua3MpXG4gICAgICAgICAgXy5lYWNoIGxpbmtzLCAodmFsLCBrZXkpIC0+XG4gICAgICAgICAgICBtZW51LmFkZE5vZGUga2V5LChlKSAtPlxuICAgICAgICAgICAgICB3aW5kb3cub3BlbiB2YWxcblxuICAgICAgICAgIGxpbmtFbCA9IG1lbnUuYnVpbGRET00oKVxuICAgICAgICAgIGxpbmtFbC5zdHlsZS5jdXJzb3IgPSBcInBvaW50ZXJcIlxuICAgICAgICAgIEBlbC5hcHBlbmRDaGlsZCBsaW5rRWxcblxuXG4gICAgI0BlbC5zdHlsZS5oZWlnaHQgPSBcIiN7QGcuem9vbWVyLmdldCBcInJvd0hlaWdodFwifXB4XCJcblxuICBfb25jbGljazogKGV2dCkgLT5cbiAgICBAZy50cmlnZ2VyIFwibWV0YTpjbGlja1wiLCB7c2VxSWQ6IEBtb2RlbC5nZXQgXCJpZFwiLCBldnQ6ZXZ0fVxuXG4gIF9vbm1vdXNlaW46IChldnQpIC0+XG4gICAgQGcudHJpZ2dlciBcIm1ldGE6bW91c2VpblwiLCB7c2VxSWQ6IEBtb2RlbC5nZXQgXCJpZFwiLCBldnQ6ZXZ0fVxuXG4gIF9vbm1vdXNlb3V0OiAoZXZ0KSAtPlxuICAgIEBnLnRyaWdnZXIgXCJtZXRhOm1vdXNlb3V0XCIsIHtzZXFJZDogQG1vZGVsLmdldCBcImlkXCIsIGV2dDpldnR9XG4iLCIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuOC4wXG52YXIgQ2x1c3RhbCwgR2VuZXJpY1JlYWRlciwgc3QsXG4gIF9faGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5LFxuICBfX2V4dGVuZHMgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKF9faGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfTtcblxuR2VuZXJpY1JlYWRlciA9IHJlcXVpcmUoXCIuL2dlbmVyaWNfcmVhZGVyXCIpO1xuXG5zdCA9IHJlcXVpcmUoXCJtc2Etc2VxdG9vbHNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2x1c3RhbCA9IChmdW5jdGlvbihfc3VwZXIpIHtcbiAgX19leHRlbmRzKENsdXN0YWwsIF9zdXBlcik7XG5cbiAgZnVuY3Rpb24gQ2x1c3RhbCgpIHtcbiAgICByZXR1cm4gQ2x1c3RhbC5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIENsdXN0YWwucGFyc2UgPSBmdW5jdGlvbih0ZXh0KSB7XG4gICAgdmFyIGJsb2Nrc3RhdGUsIGNTZXEsIGssIGtleXMsIGxhYmVsLCBsaW5lLCBsaW5lcywgbWF0Y2gsIG9iaiwgcmVnZXgsIHNlcUNvdW50ZXIsIHNlcXMsIHNlcXVlbmNlO1xuICAgIHNlcXMgPSBbXTtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHRleHQpID09PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICBsaW5lcyA9IHRleHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpbmVzID0gdGV4dC5zcGxpdChcIlxcblwiKTtcbiAgICB9XG4gICAgaWYgKGxpbmVzWzBdLnNsaWNlKDAsIDYpID09PSAhXCJDTFVTVEFMXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgQ0xVU1RBTCBIZWFkZXJcIik7XG4gICAgfVxuICAgIGsgPSAwO1xuICAgIGJsb2Nrc3RhdGUgPSAxO1xuICAgIHNlcUNvdW50ZXIgPSAwO1xuICAgIHdoaWxlIChrIDwgbGluZXMubGVuZ3RoKSB7XG4gICAgICBrKys7XG4gICAgICBsaW5lID0gbGluZXNba107XG4gICAgICBpZiAoKGxpbmUgPT0gbnVsbCkgfHwgbGluZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgYmxvY2tzdGF0ZSA9IDE7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKGxpbmUudHJpbSgpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBibG9ja3N0YXRlID0gMTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc3QuY29udGFpbnMobGluZSwgXCIqXCIpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJsb2Nrc3RhdGUgPT09IDEpIHtcbiAgICAgICAgICBzZXFDb3VudGVyID0gMDtcbiAgICAgICAgICBibG9ja3N0YXRlID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZWdleCA9IC9eKD86XFxzKikoXFxTKykoPzpcXHMrKShcXFMrKSg/OlxccyopKFxcZCopKD86XFxzKnwkKS9nO1xuICAgICAgICBtYXRjaCA9IHJlZ2V4LmV4ZWMobGluZSk7XG4gICAgICAgIGlmIChtYXRjaCAhPSBudWxsKSB7XG4gICAgICAgICAgbGFiZWwgPSBtYXRjaFsxXTtcbiAgICAgICAgICBzZXF1ZW5jZSA9IG1hdGNoWzJdO1xuICAgICAgICAgIGlmIChzZXFDb3VudGVyID49IHNlcXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBvYmogPSBzdC5nZXRNZXRhKGxhYmVsKTtcbiAgICAgICAgICAgIGxhYmVsID0gb2JqLm5hbWU7XG4gICAgICAgICAgICBjU2VxID0gbmV3IHN0Lm1vZGVsKHNlcXVlbmNlLCBsYWJlbCwgc2VxQ291bnRlcik7XG4gICAgICAgICAgICBjU2VxLmlkcyA9IG9iai5pZHMgfHwge307XG4gICAgICAgICAgICBjU2VxLmRldGFpbHMgPSBvYmouZGV0YWlscyB8fCB7fTtcbiAgICAgICAgICAgIGtleXMgPSBPYmplY3Qua2V5cyhjU2VxLmlkcyk7XG4gICAgICAgICAgICBpZiAoa2V5cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIGNTZXEuaWQgPSBjU2VxLmlkc1trZXlzWzBdXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlcXMucHVzaChjU2VxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2Vxc1tzZXFDb3VudGVyXS5zZXEgKz0gc2VxdWVuY2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNlcUNvdW50ZXIrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcInBhcnNlIGVycm9yXCIsIGxpbmUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzZXFzO1xuICB9O1xuXG4gIHJldHVybiBDbHVzdGFsO1xuXG59KShHZW5lcmljUmVhZGVyKTtcbiIsIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS45LjBcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vcGFyc2VyXCIpO1xuIiwiLypcbiAqIGJpb2pzLWlvLWdmZlxuICogaHR0cHM6Ly9naXRodWIuY29tL2dyZWVuaWZ5L2Jpb2pzLWlvLWdmZlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNCBncmVlbmlmeVxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSAyIGxpY2Vuc2UuXG4gKi9cblxudmFyIGdmZiA9IGZ1bmN0aW9uKCkge307XG5cbm1vZHVsZS5leHBvcnRzID0gZ2ZmO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbnZhciBqYWx2aWV3ID0gcmVxdWlyZShcIi4vamFsdmlld1wiKTtcblxuLyoqXG4gKiBNZXRob2QgcmVzcG9uc2libGUgdG8gcGFyc2UgR0ZGXG4gKiBAc2VlIGh0dHBzOi8vd3d3LnNhbmdlci5hYy51ay9yZXNvdXJjZXMvc29mdHdhcmUvZ2ZmL3NwZWMuaHRtbCN0XzJcbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICBiaW9qc2lvZ2ZmLnBhcnNlKCdTRVExICBFTUJMICBhdGcgIDEwMyAgMTA1ICAuICArICAwJyk7XG4gKlxuICogQG1ldGhvZCBwYXJzZVxuICogQHBhcmFtIHtTdHJpbmd9IGZpbGUgR0ZGIGZpbGVcbiAqIEByZXR1cm4ge1N0cmluZ30gUmV0dXJucyBKU09OIHJlcHJlc2VudGF0aW9uXG4gKi9cblxuZ2ZmLnBhcnNlID0gZnVuY3Rpb24oZmlsZSkge1xuICB2YXIgbGluZXMgPSBmaWxlLnNwbGl0KFwiXFxuXCIpO1xuICB2YXIgY29uZmlnID0ge307XG4gIHZhciBhcnIgPSBbXTtcbiAgY29uZmlnLnR5cGUgPSBnZmYuX2d1ZXNzVHlwZShsaW5lcyk7XG4gIHZhciBvZmZzZXQgPSAwO1xuICBpZiAoY29uZmlnLnR5cGUgPT09IFwiamFsdmlld1wiKSB7XG4gICAgdmFyIHJldCA9IGphbHZpZXcucmVhZEhlYWRlcihsaW5lcyk7XG4gICAgLy9jb25zb2xlLmxvZyhyZXQpO1xuICAgIG9mZnNldCA9IHJldC5vZmZzZXQ7XG4gICAgY29uZmlnLmNvbG9ycyA9IHJldC5jb2xvcnM7XG4gICAgYXJyID0gcmV0LmZlYXR1cmVzO1xuICB9XG4gIGZvciAodmFyIGkgPSBvZmZzZXQ7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgIC8vIGlnbm9yZSBjb21tZW50cyBmb3Igbm93XG4gICAgdmFyIGxpbmUgPSBsaW5lc1tpXTtcbiAgICBpZiAobGluZS5sZW5ndGggPT09IDAgfHwgbGluZVswXSA9PT0gXCIjXCIpXG4gICAgICBjb250aW51ZTtcblxuICAgIGxpbmUgPSBnZmYucGFyc2VMaW5lKGxpbmUpO1xuICAgIGlmIChsaW5lICE9PSB1bmRlZmluZWQpXG4gICAgICBhcnIucHVzaChsaW5lKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGZlYXR1cmVzOiBhcnIsXG4gICAgY29uZmlnOiBjb25maWdcbiAgfTtcbn07XG5cbmdmZi5fZ3Vlc3NUeXBlID0gZnVuY3Rpb24obGluZSkge1xuICBpZiAobGluZVswXS5zdWJzdHJpbmcoMCwgMTUpID09PSBcIiMjZ2ZmLXZlcnNpb24gM1wiKSB7XG4gICAgcmV0dXJuIFwiZ2ZmM1wiO1xuICB9IGVsc2UgaWYgKGxpbmVbMF0uaW5kZXhPZihcIiNcIikgPCAwICYmIGxpbmVbMF0uc3BsaXQoXCJcXHRcIikubGVuZ3RoID09PSAyKSB7XG4gICAgLy8gbm8gY29tbWVudHMgYW5kIHR3byBjb2x1bW5zLiBsZXQncyBob3BlIHRoaXMgaXMgZnJvbSBqYWx2aWV3XG4gICAgcmV0dXJuIFwiamFsdmlld1wiO1xuICB9XG4gIC8vIHVuYWJsZSB0byByZWFkIGZpbGUgaGVhZGVyLiBsZXRzIGhvcGUgdGhpcyBpcyBnZmYzXG4gIHJldHVybiBcImdmZjNcIjtcbn07XG5cbi8qKlxuICogcGFyc2VzIEdGRiBhbmQgcmV0dXJucyBhIGRpY3Rpb25hcnkgb2YgYWxsIHNlcXMgd2l0aCB0aGVpciBmZWF0dXJlc1xuICogQG1ldGhvZCBwYXJzZVNlcXNcbiAqIEBwYXJhbSB7U3RyaW5nfSBmaWxlIEdGRiBmaWxlXG4gKiBAcmV0dXJuIHtTdHJpbmd9IFJldHVybnMgZGljdGlvbmFyeSBvZiBzZXF1ZW5jZXMgd2l0aCBhbiBhcnJheSBvZiB0aGVpciBmZWF0dXJlc1xuICovXG5nZmYucGFyc2VTZXFzID0gZnVuY3Rpb24oZmlsZSkge1xuICB2YXIgb2JqID0gZ2ZmLnBhcnNlKGZpbGUpO1xuICB2YXIgc2VxcyA9IHt9O1xuICBvYmouZmVhdHVyZXMuZm9yRWFjaChmdW5jdGlvbihlbnRyeSkge1xuICAgIHZhciBrZXkgPSBlbnRyeS5zZXFuYW1lO1xuICAgIGlmIChzZXFzW2tleV0gPT09IHVuZGVmaW5lZCkgc2Vxc1trZXldID0gW107XG4gICAgZGVsZXRlIGVudHJ5LnNlcW5hbWU7XG4gICAgc2Vxc1trZXldLnB1c2goZW50cnkpO1xuICB9KTtcbiAgZGVsZXRlIG9iai5mZWF0dXJlcztcbiAgb2JqLnNlcXMgPSBzZXFzO1xuICByZXR1cm4gb2JqO1xufTtcblxuLypcbiAqIHBhcnNlcyBvbmUgR0ZGIGxpbmUgYW5kIHJldHVybnMgaXRcbiAqL1xuZ2ZmLnBhcnNlTGluZSA9IGZ1bmN0aW9uKGxpbmUpIHtcbiAgdmFyIHRMaW5lID0ge307XG5cbiAgdmFyIGNvbHVtbnMgPSBsaW5lLnNwbGl0KC9cXHMrLyk7XG4gIC8vIGlnbm9yZSBlbXB0eSBsaW5lc1xuICBpZiAoY29sdW1ucy5sZW5ndGggPT09IDEpXG4gICAgcmV0dXJuO1xuXG4gIHRMaW5lLnNlcW5hbWUgPSBjb2x1bW5zWzBdO1xuICB0TGluZS5zb3VyY2UgPSBjb2x1bW5zWzFdO1xuICB0TGluZS5mZWF0dXJlID0gY29sdW1uc1syXTtcbiAgdExpbmUuc3RhcnQgPSBwYXJzZUludChjb2x1bW5zWzNdKTtcbiAgdExpbmUuZW5kID0gcGFyc2VJbnQoY29sdW1uc1s0XSk7XG4gIHRMaW5lLnNjb3JlID0gY29sdW1uc1s1XTsgLy8gb25seSBETkEsUk5BXG4gIHRMaW5lLnN0cmFuZCA9IGNvbHVtbnNbNl07IC8vIG9ubHkgRE5BLFJOQVxuICB0TGluZS5mcmFtZSA9IGNvbHVtbnNbN107IC8vIG9ubHkgRE5BLFJOQVxuICB2YXIgYXR0ciA9IGNvbHVtbnMuc2xpY2UoOCkuam9pbihcIiBcIik7IC8vIHBsYWluIHRleHQgY29tbWVudHNcblxuICAvLyByZW1vdmUgdW5kZWZpbmVkIChkb3QpXG4gIE9iamVjdC5rZXlzKHRMaW5lKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgIGlmICh0TGluZVtrZXldID09PSBcIi5cIikge1xuICAgICAgdExpbmVba2V5XSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIHBhcnNlIG9wdGlvbmFsIHBhcmFtZXRlcnNcbiAgaWYgKHRMaW5lLnNjb3JlKSB7XG4gICAgdExpbmUuc2NvcmUgPSBwYXJzZUZsb2F0KHRMaW5lLnNjb3JlKTtcbiAgfVxuICBpZiAodExpbmUuZnJhbWUpIHtcbiAgICB0TGluZS5mcmFtZSA9IHBhcnNlSW50KHRMaW5lLmZyYW1lKTtcbiAgfVxuXG4gIHRMaW5lLmF0dHJpYnV0ZXMgPSB1dGlscy5leHRyYWN0S2V5cyhhdHRyKTtcbiAgcmV0dXJuIHRMaW5lO1xufTtcblxuZ2ZmLmV4cG9ydExpbmUgPSBmdW5jdGlvbihsaW5lKSB7XG4gIHZhciBhdHRycyA9IE9iamVjdC5rZXlzKGxpbmUuYXR0cmlidXRlcykubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiBrZXkgKyBcIj1cIiArIGxpbmUuYXR0cmlidXRlc1trZXldO1xuICB9KS5qb2luKFwiO1wiKTtcbiAgdmFyIGNlbGxzID0gW2xpbmUuc2VxbmFtZSwgbGluZS5zb3VyY2UsIGxpbmUuZmVhdHVyZSwgbGluZS5zdGFydCwgbGluZS5lbmQsIGxpbmUuc2NvcmUsXG4gICAgbGluZS5zdHJhbmQsIGxpbmUuZnJhbWUsIGF0dHJzXG4gIF07XG4gIGNlbGxzID0gY2VsbHMubWFwKGZ1bmN0aW9uKGUpIHtcbiAgICBpZiAoZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gXCIuXCI7XG4gICAgfVxuICAgIHJldHVybiBlO1xuICB9KTtcbiAgcmV0dXJuIGNlbGxzLmpvaW4oXCJcXHRcIik7XG59O1xuXG5nZmYuZXhwb3J0TGluZXMgPSBmdW5jdGlvbihsaW5lcykge1xuICByZXR1cm4gXCIjI2dmZi12ZXJzaW9uIDNcXG5cIiArIGxpbmVzLm1hcChnZmYuZXhwb3J0TGluZSkuam9pbihcIlxcblwiKTtcbn07XG5cbmdmZi5leHBvcnRTZXFzID0gZnVuY3Rpb24oc2Vxcykge1xuICB2YXIgbGluZXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIHNlcXMpIHtcbiAgICBzZXFzW2tleV0uZm9yRWFjaChmdW5jdGlvbihlKSB7XG4gICAgICBlLnNlcW5hbWUgPSBrZXk7XG4gICAgICBsaW5lcy5wdXNoKGUpO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBnZmYuZXhwb3J0TGluZXMobGluZXMpO1xufTtcbiIsIi8vIGJyb3dzZXIgZ2xvYmFsc1xuaWYgKHR5cGVvZiBiaW9qcyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgYmlvanMgPSB7fTtcbn1cbmlmICh0eXBlb2YgYmlvanMudmlzID09PSAndW5kZWZpbmVkJykge1xuICBiaW9qcy52aXMgPSB7fTtcbn1cbi8vIHVzZSB0d28gbmFtZXNwYWNlc1xud2luZG93Lm1zYSA9IGJpb2pzLnZpcy5tc2EgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vc3JjL2luZGV4Jyk7XG5cbi8vIFRPRE86IGhvdyBzaG91bGQgdGhpcyBiZSBidW5kbGVkXG5cbmlmICh0eXBlb2YgYmlvanMuaW8gPT09ICd1bmRlZmluZWQnKSB7XG4gIGJpb2pzLmlvID0ge307XG59XG5cbi8vIGp1c3QgYnVuZGxlIHRoZSB0d28gcGFyc2Vyc1xud2luZG93LmJpb2pzLmlvLmZhc3RhID0gcmVxdWlyZShcImJpb2pzLWlvLWZhc3RhXCIpO1xud2luZG93LmJpb2pzLmlvLmNsdXN0YWwgPSByZXF1aXJlKFwiYmlvanMtaW8tY2x1c3RhbFwiKTtcbndpbmRvdy5iaW9qcy54aHIgPSByZXF1aXJlKFwieGhyXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL3NyYy9pbmRleFwiKTtcblxucmVxdWlyZSgnLi9jc3MvbXNhLmNzcycpO1xuIiwidmFyIHdpbmRvdyA9IHJlcXVpcmUoXCJnbG9iYWwvd2luZG93XCIpXG52YXIgb25jZSA9IHJlcXVpcmUoXCJvbmNlXCIpXG52YXIgcGFyc2VIZWFkZXJzID0gcmVxdWlyZSgncGFyc2UtaGVhZGVycycpXG5cbnZhciBtZXNzYWdlcyA9IHtcbiAgICBcIjBcIjogXCJJbnRlcm5hbCBYTUxIdHRwUmVxdWVzdCBFcnJvclwiLFxuICAgIFwiNFwiOiBcIjR4eCBDbGllbnQgRXJyb3JcIixcbiAgICBcIjVcIjogXCI1eHggU2VydmVyIEVycm9yXCJcbn1cblxudmFyIFhIUiA9IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCB8fCBub29wXG52YXIgWERSID0gXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiAobmV3IFhIUigpKSA/IFhIUiA6IHdpbmRvdy5YRG9tYWluUmVxdWVzdFxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZVhIUlxuXG5mdW5jdGlvbiBjcmVhdGVYSFIob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgb3B0aW9ucyA9IHsgdXJpOiBvcHRpb25zIH1cbiAgICB9XG5cbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuICAgIGNhbGxiYWNrID0gb25jZShjYWxsYmFjaylcblxuICAgIHZhciB4aHIgPSBvcHRpb25zLnhociB8fCBudWxsXG5cbiAgICBpZiAoIXhocikge1xuICAgICAgICBpZiAob3B0aW9ucy5jb3JzIHx8IG9wdGlvbnMudXNlWERSKSB7XG4gICAgICAgICAgICB4aHIgPSBuZXcgWERSKClcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICB4aHIgPSBuZXcgWEhSKClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciB1cmkgPSB4aHIudXJsID0gb3B0aW9ucy51cmkgfHwgb3B0aW9ucy51cmxcbiAgICB2YXIgbWV0aG9kID0geGhyLm1ldGhvZCA9IG9wdGlvbnMubWV0aG9kIHx8IFwiR0VUXCJcbiAgICB2YXIgYm9keSA9IG9wdGlvbnMuYm9keSB8fCBvcHRpb25zLmRhdGFcbiAgICB2YXIgaGVhZGVycyA9IHhoci5oZWFkZXJzID0gb3B0aW9ucy5oZWFkZXJzIHx8IHt9XG4gICAgdmFyIHN5bmMgPSAhIW9wdGlvbnMuc3luY1xuICAgIHZhciBpc0pzb24gPSBmYWxzZVxuICAgIHZhciBrZXlcbiAgICB2YXIgbG9hZCA9IG9wdGlvbnMucmVzcG9uc2UgPyBsb2FkUmVzcG9uc2UgOiBsb2FkWGhyXG5cbiAgICBpZiAoXCJqc29uXCIgaW4gb3B0aW9ucykge1xuICAgICAgICBpc0pzb24gPSB0cnVlXG4gICAgICAgIGhlYWRlcnNbXCJBY2NlcHRcIl0gPSBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgICAgICBpZiAobWV0aG9kICE9PSBcIkdFVFwiICYmIG1ldGhvZCAhPT0gXCJIRUFEXCIpIHtcbiAgICAgICAgICAgIGhlYWRlcnNbXCJDb250ZW50LVR5cGVcIl0gPSBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgICAgICAgICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KG9wdGlvbnMuanNvbilcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSByZWFkeXN0YXRlY2hhbmdlXG4gICAgeGhyLm9ubG9hZCA9IGxvYWRcbiAgICB4aHIub25lcnJvciA9IGVycm9yXG4gICAgLy8gSUU5IG11c3QgaGF2ZSBvbnByb2dyZXNzIGJlIHNldCB0byBhIHVuaXF1ZSBmdW5jdGlvbi5cbiAgICB4aHIub25wcm9ncmVzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gSUUgbXVzdCBkaWVcbiAgICB9XG4gICAgLy8gaGF0ZSBJRVxuICAgIHhoci5vbnRpbWVvdXQgPSBub29wXG4gICAgeGhyLm9wZW4obWV0aG9kLCB1cmksICFzeW5jKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9iYWNrd2FyZCBjb21wYXRpYmlsaXR5XG4gICAgaWYgKG9wdGlvbnMud2l0aENyZWRlbnRpYWxzIHx8IChvcHRpb25zLmNvcnMgJiYgb3B0aW9ucy53aXRoQ3JlZGVudGlhbHMgIT09IGZhbHNlKSkge1xuICAgICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZVxuICAgIH1cblxuICAgIC8vIENhbm5vdCBzZXQgdGltZW91dCB3aXRoIHN5bmMgcmVxdWVzdFxuICAgIGlmICghc3luYykge1xuICAgICAgICB4aHIudGltZW91dCA9IFwidGltZW91dFwiIGluIG9wdGlvbnMgPyBvcHRpb25zLnRpbWVvdXQgOiA1MDAwXG4gICAgfVxuXG4gICAgaWYgKHhoci5zZXRSZXF1ZXN0SGVhZGVyKSB7XG4gICAgICAgIGZvcihrZXkgaW4gaGVhZGVycyl7XG4gICAgICAgICAgICBpZihoZWFkZXJzLmhhc093blByb3BlcnR5KGtleSkpe1xuICAgICAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgaGVhZGVyc1trZXldKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLmhlYWRlcnMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSGVhZGVycyBjYW5ub3QgYmUgc2V0IG9uIGFuIFhEb21haW5SZXF1ZXN0IG9iamVjdFwiKVxuICAgIH1cblxuICAgIGlmIChcInJlc3BvbnNlVHlwZVwiIGluIG9wdGlvbnMpIHtcbiAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9IG9wdGlvbnMucmVzcG9uc2VUeXBlXG4gICAgfVxuICAgIFxuICAgIGlmIChcImJlZm9yZVNlbmRcIiBpbiBvcHRpb25zICYmIFxuICAgICAgICB0eXBlb2Ygb3B0aW9ucy5iZWZvcmVTZW5kID09PSBcImZ1bmN0aW9uXCJcbiAgICApIHtcbiAgICAgICAgb3B0aW9ucy5iZWZvcmVTZW5kKHhocilcbiAgICB9XG5cbiAgICB4aHIuc2VuZChib2R5KVxuXG4gICAgcmV0dXJuIHhoclxuXG4gICAgZnVuY3Rpb24gcmVhZHlzdGF0ZWNoYW5nZSgpIHtcbiAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgICBsb2FkKClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEJvZHkoKSB7XG4gICAgICAgIC8vIENocm9tZSB3aXRoIHJlcXVlc3RUeXBlPWJsb2IgdGhyb3dzIGVycm9ycyBhcnJvdW5kIHdoZW4gZXZlbiB0ZXN0aW5nIGFjY2VzcyB0byByZXNwb25zZVRleHRcbiAgICAgICAgdmFyIGJvZHkgPSBudWxsXG5cbiAgICAgICAgaWYgKHhoci5yZXNwb25zZSkge1xuICAgICAgICAgICAgYm9keSA9IHhoci5yZXNwb25zZVxuICAgICAgICB9IGVsc2UgaWYgKHhoci5yZXNwb25zZVR5cGUgPT09ICd0ZXh0JyB8fCAheGhyLnJlc3BvbnNlVHlwZSkge1xuICAgICAgICAgICAgYm9keSA9IHhoci5yZXNwb25zZVRleHQgfHwgeGhyLnJlc3BvbnNlWE1MXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNKc29uKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGJvZHkgPSBKU09OLnBhcnNlKGJvZHkpXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGJvZHlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTdGF0dXNDb2RlKCkge1xuICAgICAgICByZXR1cm4geGhyLnN0YXR1cyA9PT0gMTIyMyA/IDIwNCA6IHhoci5zdGF0dXNcbiAgICB9XG5cbiAgICAvLyBpZiB3ZSdyZSBnZXR0aW5nIGEgbm9uZS1vayBzdGF0dXNDb2RlLCBidWlsZCAmIHJldHVybiBhbiBlcnJvclxuICAgIGZ1bmN0aW9uIGVycm9yRnJvbVN0YXR1c0NvZGUoc3RhdHVzLCBib2R5KSB7XG4gICAgICAgIHZhciBlcnJvciA9IG51bGxcbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gMCB8fCAoc3RhdHVzID49IDQwMCAmJiBzdGF0dXMgPCA2MDApKSB7XG4gICAgICAgICAgICB2YXIgbWVzc2FnZSA9ICh0eXBlb2YgYm9keSA9PT0gXCJzdHJpbmdcIiA/IGJvZHkgOiBmYWxzZSkgfHxcbiAgICAgICAgICAgICAgICBtZXNzYWdlc1tTdHJpbmcoc3RhdHVzKS5jaGFyQXQoMCldXG4gICAgICAgICAgICBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKVxuICAgICAgICAgICAgZXJyb3Iuc3RhdHVzQ29kZSA9IHN0YXR1c1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVycm9yXG4gICAgfVxuXG4gICAgLy8gd2lsbCBsb2FkIHRoZSBkYXRhICYgcHJvY2VzcyB0aGUgcmVzcG9uc2UgaW4gYSBzcGVjaWFsIHJlc3BvbnNlIG9iamVjdFxuICAgIGZ1bmN0aW9uIGxvYWRSZXNwb25zZSgpIHtcbiAgICAgICAgdmFyIHN0YXR1cyA9IGdldFN0YXR1c0NvZGUoKVxuICAgICAgICB2YXIgYm9keSA9IGdldEJvZHkoKVxuICAgICAgICB2YXIgZXJyb3IgPSBlcnJvckZyb21TdGF0dXNDb2RlKHN0YXR1cywgYm9keSlcbiAgICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICAgICAgYm9keTogYm9keSxcbiAgICAgICAgICAgIHN0YXR1c0NvZGU6IHN0YXR1cyxcbiAgICAgICAgICAgIHN0YXR1c1RleHQ6IHhoci5zdGF0dXNUZXh0LFxuICAgICAgICAgICAgcmF3OiB4aHJcbiAgICAgICAgfVxuICAgICAgICBpZih4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKXsgLy9yZW1lbWJlciB4aHIgY2FuIGluIGZhY3QgYmUgWERSIGZvciBDT1JTIGluIElFXG4gICAgICAgICAgICByZXNwb25zZS5oZWFkZXJzID0gcGFyc2VIZWFkZXJzKHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3BvbnNlLmhlYWRlcnMgPSB7fVxuICAgICAgICB9XG5cbiAgICAgICAgY2FsbGJhY2soZXJyb3IsIHJlc3BvbnNlLCByZXNwb25zZS5ib2R5KVxuICAgIH1cblxuICAgIC8vIHdpbGwgbG9hZCB0aGUgZGF0YSBhbmQgYWRkIHNvbWUgcmVzcG9uc2UgcHJvcGVydGllcyB0byB0aGUgc291cmNlIHhoclxuICAgIC8vIGFuZCB0aGVuIHJlc3BvbmQgd2l0aCB0aGF0XG4gICAgZnVuY3Rpb24gbG9hZFhocigpIHtcbiAgICAgICAgdmFyIHN0YXR1cyA9IGdldFN0YXR1c0NvZGUoKVxuICAgICAgICB2YXIgZXJyb3IgPSBlcnJvckZyb21TdGF0dXNDb2RlKHN0YXR1cylcblxuICAgICAgICB4aHIuc3RhdHVzID0geGhyLnN0YXR1c0NvZGUgPSBzdGF0dXNcbiAgICAgICAgeGhyLmJvZHkgPSBnZXRCb2R5KClcbiAgICAgICAgeGhyLmhlYWRlcnMgPSBwYXJzZUhlYWRlcnMoeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKVxuXG4gICAgICAgIGNhbGxiYWNrKGVycm9yLCB4aHIsIHhoci5ib2R5KVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVycm9yKGV2dCkge1xuICAgICAgICBjYWxsYmFjayhldnQsIHhocilcbiAgICB9XG59XG5cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG4iXX0=
